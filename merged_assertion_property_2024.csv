file_name,line_number,assertion_code,line_count
I3C_TOP_TB.sv,625,"assert property(EXIT_and_stop_pattern) $display(""%t EXIT_and_stop_pattern SUCCEEDED "",$time); else $display(""%t EXIT_and_stop_pattern FAILED "",$time);",3
axi_lite_to_reg.sv,44,assert(BUFFER_DEPTH > 0);,1
axi_lite_to_reg.sv,45,assert(ADDR_WIDTH > 0);,1
axi_lite_to_reg.sv,46,assert(DATA_WIDTH > 0);,1
easyprops.sv,172,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
easyprops.sv,183,assert(S_AXI_RDATA == 0);,1
easyprops.sv,323,assert property (IDATA_HELD_WHEN_NOT_READY);,1
easyprops.sv,327,assert property (IDATA_HELD_WHEN_NOT_READY);,1
easyprops.sv,332,assert property (IDATA_HELD_WHEN_NOT_READY);,1
easyaxil_tb.sv,229,assert(S_AXI_AWREADY == uut_AWREADY);,1
easyaxil_tb.sv,232,assert(S_AXI_WREADY == uut_WREADY);,1
easyaxil_tb.sv,235,assert(S_AXI_ARREADY == uut_ARREADY);,1
easyaxil_tb.sv,237,assert(S_AXI_BVALID == uut_BVALID);,1
easyaxil_tb.sv,238,assert(S_AXI_RVALID == uut_RVALID);,1
easyaxil_tb.sv,241,assert( S_AXI_BRESP == uut_BRESP );,1
axi_id_remap.sv,566,assert (InpIdWidth > 0);,1
axi_id_remap.sv,567,assert (MaxUniqInpIds > 0);,1
axi_id_remap.sv,569,assert (MaxTxnsPerId > 0);,1
axi_id_remap.sv,570,assert (IdxWidth >= 1);,1
axi_id_remap.sv,650,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_remap.sv,651,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,652,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,653,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_remap.sv,654,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_remap.sv,655,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,656,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,657,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,339,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_iw_converter.sv,340,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,341,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,342,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,343,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_iw_converter.sv,344,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,345,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,346,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,31,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,32,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_test.sv,2023,assert (b_beat.b_id == id);,1
axi_test.sv,2096,assert (r_beat.r_id == id);,1
axi_test.sv,2097,assert (r_beat.r_last);,1
axi_id_serialize.sv,443,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_serialize.sv,444,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,445,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,446,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_serialize.sv,447,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_serialize.sv,448,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,449,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,450,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_modify_address.sv,157,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,159,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,160,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,86,assert(NoCuts >= 0);,1
axi_fifo.sv,157,assert (Depth >= 0);,1
axi_lite_to_axi.sv,109,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,110,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,111,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
tb_axi_cdc.sv,212,assert (mst_b == exp_b);,1
tb_axi_cdc.sv,220,assert (mst_r == exp_r);,1
tb_axi_cdc.sv,241,assert (slv_aw == exp_aw);,1
tb_axi_cdc.sv,245,assert (slv_w == exp_w);,1
tb_axi_cdc.sv,252,assert (slv_ar == exp_ar);,1
tb_axi_lite_regs.sv,204,assert (master.r_resp == axi_pkg::RESP_OKAY);,1
tb_axi_lite_regs.sv,259,assert (master.w_strb[i] == wr_active[aw_idx+i]);,1
tb_axi_to_axi_lite.sv,169,assert (aw_cnt == w_cnt && w_cnt == b_cnt);,1
tb_axi_to_axi_lite.sv,170,assert (ar_cnt == r_cnt);,1
tb_axi_modify_address.sv,177,assert(rand_success);,1
tb_axi_modify_address.sv,181,assert(rand_success);,1
tb_axi_atop_filter.sv,212,assert (downstream.aw_atop == '0);,1
tb_axi_atop_filter.sv,304,assert (downstream.ar_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,305,assert (downstream.ar_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,306,assert (downstream.ar_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,307,assert (downstream.ar_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,308,assert (downstream.ar_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,309,assert (downstream.ar_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,310,assert (downstream.ar_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,311,assert (downstream.ar_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,312,assert (downstream.ar_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,313,assert (downstream.ar_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,320,assert (downstream.aw_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,321,assert (downstream.aw_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,322,assert (downstream.aw_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,323,assert (downstream.aw_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,324,assert (downstream.aw_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,325,assert (downstream.aw_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,326,assert (downstream.aw_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,327,assert (downstream.aw_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,328,assert (downstream.aw_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,329,assert (downstream.aw_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,335,assert (act_beat.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,336,assert (act_beat.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,337,assert (act_beat.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,338,assert (act_beat.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,343,assert (downstream.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,344,assert (downstream.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,345,assert (downstream.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,346,assert (downstream.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,366,assert (upstream.r_id == exp_beat.r_id);,1
tb_axi_atop_filter.sv,367,assert (upstream.r_data == exp_beat.r_data);,1
tb_axi_atop_filter.sv,368,assert (upstream.r_resp == exp_beat.r_resp);,1
tb_axi_atop_filter.sv,369,assert (upstream.r_last == exp_beat.r_last);,1
tb_axi_atop_filter.sv,370,assert (upstream.r_user == exp_beat.r_user);,1
tb_axi_atop_filter.sv,382,assert (upstream.b_id == exp_beat.b_id);,1
tb_axi_atop_filter.sv,383,assert (upstream.b_resp == exp_beat.b_resp);,1
tb_axi_atop_filter.sv,384,assert (upstream.b_user == exp_beat.b_user);,1
tb_axi_bus_compare.sv,291,assert(b_beat.b_resp == axi_pkg::RESP_OKAY);,1
tb_axi_slave_compare.sv,222,assert(b_beat.b_resp == axi_pkg::RESP_OKAY);,1
tb_axi_lite_dw_converter.sv,332,assert (master_req == slave_req);,1
tb_axi_lite_dw_converter.sv,333,assert (master_res == slave_res);,1
tb_axi_sim_mem.sv,119,assert(b_beat.b_resp == axi_pkg::RESP_OKAY);,1
tb_axi_addr_test.sv,240,"assume (mode inside {axi_pkg::BURST_FIXED, axi_pkg::BURST_INCR, axi_pkg::BURST_WRAP});",1
cdc_fifo_2phase.sv,67,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,77,assert(tck_src > 0);,1
cdc_2phase_tb.sv,103,assert(tck_dst > 0);,1
cdc_fifo_clearable_tb.sv,88,assert(tck_src > 0);,1
cdc_fifo_clearable_tb.sv,114,assert(tck_dst > 0);,1
rr_arb_tree_tb.sv,239,assert(exp_data === data_oup);,1
cdc_2phase_clearable_tb.sv,87,assert(tck_src > 0);,1
cdc_2phase_clearable_tb.sv,113,assert(tck_dst > 0);,1
cdc_fifo_tb.sv,81,assert(tck_src > 0);,1
cdc_fifo_tb.sv,107,assert(tck_dst > 0);,1
graycode_tb.sv,24,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
rvfi_csrc_inc_check.sv,74,assume(csr_read_shadowed);,1
rvfi_csrc_inc_check.sv,82,assume(csr_insn_wdata[`RISCV_FORMAL_XLEN-1] == 0);,1
rvfi_bus_dmem_io_write_check.sv,100,cover (1);,1
rvfi_bus_dmem_io_write_check.sv,101,assert (bus_write_seen);,1
rvfi_csrc_upcnt_check.sv,72,assume(csr_read_shadowed);,1
rvfi_csrc_upcnt_check.sv,74,assert(csr_insn_rdata > rdata_shadow);,1
rvfi_csrc_upcnt_check.sv,78,assume(csr_insn_rdata[31:0] < 'h F000_0000); // no overflow rdata_shadow = csr_insn_rdata;,2
rvfi_bus_dmem_check.sv,65,assume (bus_rdata[i*8 +: 8] == bus_shadow[j*8 +: 8]);,1
rvfi_bus_dmem_check.sv,74,assume (!rvfi_bus_fault[channel_idx]);,1
rvfi_bus_dmem_check.sv,87,cover (1);,1
rvfi_bus_dmem_check.sv,88,assert (dmem_shadow[i*8 +: 8] == rvfi_mem_rdata[i*8 +: 8]);,1
rvfi_causal_mem_check.sv,67,assume (rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_causal_mem_check.sv,68,assume (writes_check_addr);,1
rvfi_causal_mem_check.sv,69,assume (insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_causal_mem_check.sv,70,cover (1);,1
rvfi_causal_mem_check.sv,71,assert (!found_non_causal);,1
rvfi_dmem_check.sv,37,assert(dmem_shadow[i*8 +: 8] == rvfi_mem_rdata[i*8 +: 8]);,1
rvfi_liveness_check.sv,33,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_liveness_check.sv,34,assume(!rvfi_halt[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_liveness_check.sv,35,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_liveness_check.sv,38,assert(found_next_insn);,1
rvfi_fault_check.sv,66,assume(valid);,1
rvfi_fault_check.sv,69,assert (trap);,1
rvfi_fault_check.sv,70,assert (rd_addr == 0);,1
rvfi_fault_check.sv,71,assert (rd_wdata == 0);,1
rvfi_fault_check.sv,72,assert (mem_wmask == 0);,1
rvfi_fault_check.sv,74,cover (rfault);,1
rvfi_fault_check.sv,75,cover (wfault);,1
rvfi_fault_check.sv,76,cover (ifault);,1
rvfi_fault_check.sv,79,assert (insn == 0);,1
rvfi_fault_check.sv,81,assert (insn != 0);,1
rvfi_fault_check.sv,86,assert (&csr_mcause_wmask);,1
rvfi_fault_check.sv,87,assert (csr_mcause_wdata == 7);,1
rvfi_fault_check.sv,89,assert (&csr_mcause_wmask);,1
rvfi_fault_check.sv,90,assert (csr_mcause_wdata == 5);,1
rvfi_fault_check.sv,92,assert (&csr_mcause_wmask);,1
rvfi_fault_check.sv,93,assert (csr_mcause_wdata == 1);,1
rvfi_fault_check.sv,98,assert (mem_fault_rmask == 0);,1
rvfi_fault_check.sv,99,assert (mem_fault_wmask == 0);,1
rvfi_bus_dmem_io_write_fault_check.sv,96,cover (1);,1
rvfi_bus_dmem_io_write_fault_check.sv,97,assert (bus_write_seen);,1
rvfi_imem_check.sv,41,assert(insn[15:0] == imem_data);,1
rvfi_imem_check.sv,44,assert(insn[31:16] == imem_data);,1
rvfi_reg_check.sv,38,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_reg_check.sv,39,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_reg_check.sv,42,assert(register_shadow == rvfi_rs1_rdata[`RISCV_FORMAL_CHANNEL_IDX*`RISCV_FORMAL_XLEN +: `RISCV_FORMAL_XLEN]);,1
rvfi_reg_check.sv,44,assert(register_shadow == rvfi_rs2_rdata[`RISCV_FORMAL_CHANNEL_IDX*`RISCV_FORMAL_XLEN +: `RISCV_FORMAL_XLEN]);,1
rvfi_bus_imem_fault_check.sv,44,assume (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_imem_fault_check.sv,47,cover (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_imem_fault_check.sv,57,cover (1);,1
rvfi_bus_imem_fault_check.sv,58,assert (rvfi_trap[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_bus_imem_fault_check.sv,59,assert (insn == 0);,1
rvfi_bus_imem_fault_check.sv,61,assert (rvfi_mem_fault[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_bus_imem_fault_check.sv,66,cover (1);,1
rvfi_bus_imem_fault_check.sv,67,assert (rvfi_trap[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_bus_imem_fault_check.sv,68,assert (insn == 0);,1
rvfi_bus_imem_fault_check.sv,70,assert (rvfi_mem_fault[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_causal_io_check.sv,66,assume (rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_causal_io_check.sv,67,assume (performs_io);,1
rvfi_causal_io_check.sv,68,assume (insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_causal_io_check.sv,69,cover (1);,1
rvfi_causal_io_check.sv,70,assert (!found_non_causal);,1
rvfi_causal_check.sv,36,assume(register_index != 0);,1
rvfi_causal_check.sv,37,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_causal_check.sv,39,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_causal_check.sv,40,assert(!found_non_causal);,1
rvfi_unique_check.sv,34,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_unique_check.sv,35,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_unique_check.sv,38,assert(!found_other_insn);,1
rvfi_pc_fwd_check.sv,38,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_pc_fwd_check.sv,39,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_csrc_hpm_check.sv,67,assume (csr_insn_rdata == `RISCV_FORMAL_CSRC_HPMEVENT);,1
rvfi_csrc_hpm_check.sv,69,cover (hpmcounter_rdata > csr_hpmcounter_shadow);,1
rvfi_csrw_check.sv,133,assume (csr_insn_valid);,1
rvfi_csrw_check.sv,134,assume (csr_insn_addr != csr_none);,1
rvfi_csrw_check.sv,148,assert (rvfi.trap);,1
rvfi_csrw_check.sv,149,assert (rvfi.rd_addr == 0);,1
rvfi_csrw_check.sv,150,assert (rvfi.rd_wdata == 0);,1
rvfi_csrw_check.sv,152,assert (!rvfi.trap);,1
rvfi_csrw_check.sv,153,assert (rvfi.rd_addr == rvfi.insn[11:7]);,1
rvfi_csrw_check.sv,157,assert (rvfi.rd_wdata == 0);,1
rvfi_csrw_check.sv,159,assert (csr_insn_rmask == {`RISCV_FORMAL_XLEN{1'b1}});,1
rvfi_csrw_check.sv,160,assert (csr_insn_rdata == rvfi.rd_wdata);,1
rvfi_csrw_check.sv,169,assert (csr_insn_changed_full[31:0] == 0);,1
rvfi_csrw_check.sv,171,assert (csr_insn_changed_full[63:32] == 0);,1
rvfi_csrw_check.sv,176,assert (rvfi.mem_wmask == 0);,1
rvfi_bus_dmem_io_read_check.sv,98,cover (1);,1
rvfi_bus_dmem_io_read_check.sv,99,assert (bus_read_seen);,1
rvfi_insn_check.sv,135,cover(spec_valid);,1
rvfi_insn_check.sv,136,cover(spec_valid && !trap);,1
rvfi_insn_check.sv,137,cover(check && spec_valid);,1
rvfi_insn_check.sv,138,cover(check && spec_valid && !trap);,1
rvfi_insn_check.sv,141,assume(spec_valid);,1
rvfi_insn_check.sv,144,assert(trap);,1
rvfi_insn_check.sv,145,assert(rd_addr == 0);,1
rvfi_insn_check.sv,146,assert(rd_wdata == 0);,1
rvfi_insn_check.sv,147,assert(mem_wmask == 0);,1
rvfi_insn_check.sv,150,assert(mem_rmask == 0);,1
rvfi_insn_check.sv,151,assert(spec_mem_wmask || spec_mem_rmask);,1
rvfi_insn_check.sv,154,assert(mem_fault_wmask == spec_mem_wmask);,1
rvfi_insn_check.sv,164,assert(rs1_rdata == 0);,1
rvfi_insn_check.sv,167,assert(rs2_rdata == 0);,1
rvfi_insn_check.sv,171,assert(spec_rs1_addr == rs1_addr);,1
rvfi_insn_check.sv,174,assert(spec_rs2_addr == rs2_addr);,1
rvfi_insn_check.sv,176,assert(spec_rd_addr == rd_addr);,1
rvfi_insn_check.sv,177,assert(spec_rd_wdata == rd_wdata);,1
rvfi_insn_check.sv,186,assert(mem_wmask[i]);,1
rvfi_insn_check.sv,187,assert(spec_mem_wdata[i*8 +: 8] == mem_wdata[i*8 +: 8]);,1
rvfi_insn_check.sv,189,assert(mem_rmask[i]);,1
rvfi_insn_check.sv,190,assert(mem_rdata[i*8 +: 8] == mem_wdata[i*8 +: 8]);,1
rvfi_insn_check.sv,193,assert(mem_rmask[i]);,1
rvfi_insn_check.sv,198,assert(spec_trap == trap);,1
rvfi_bus_dmem_fault_check.sv,63,assume (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_dmem_fault_check.sv,66,assume (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_dmem_fault_check.sv,72,cover (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_dmem_fault_check.sv,91,cover (1);,1
rvfi_bus_dmem_fault_check.sv,94,assert (!mem_rmask[i]);,1
rvfi_bus_dmem_fault_check.sv,95,assert (!mem_wmask[i]);,1
rvfi_bus_dmem_fault_check.sv,98,cover (mem_fault_rmask[i]);,1
rvfi_bus_dmem_fault_check.sv,99,cover (mem_fault_wmask[i]);,1
rvfi_bus_dmem_fault_check.sv,101,assert (rvfi_mem_fault[channel_idx]);,1
rvfi_bus_dmem_io_order_check.sv,105,cover (1);,1
rvfi_bus_dmem_io_order_check.sv,145,cover (1);,1
rvfi_bus_dmem_io_order_check.sv,146,assert (bus_seq_seen);,1
rvfi_bus_imem_check.sv,51,assume (imem_data[j*8 +: 8] == bus_rdata[i*8 +: 8]);,1
rvfi_bus_imem_check.sv,55,assume (!rvfi_bus_fault[channel_idx]);,1
rvfi_bus_imem_check.sv,67,cover (1);,1
rvfi_bus_imem_check.sv,68,assert (insn[15:0] == imem_data);,1
rvfi_bus_imem_check.sv,72,cover (1);,1
rvfi_bus_imem_check.sv,73,assert (insn[31:16] == imem_data);,1
rvfi_csr_ill_check.sv,29,assume (csr_insn_valid);,1
rvfi_csr_ill_check.sv,30,assume (csr_insn_addr == `RISCV_FORMAL_ILL_CSR_ADDR);,1
rvfi_csr_ill_check.sv,54,assert (rvfi.trap);,1
rvfi_csrc_zero_check.sv,73,assert(csr_insn_rdata == 0);,1
rvfi_csrc_zero_check.sv,74,assume(wdata_shadow != 0);,1
rvfi_csrc_zero_check.sv,79,assume(csr_mode == 0 || csr_mode == 1);,1
rvfi_csrc_const_check.sv,72,assert(csr_insn_rdata == `RISCV_FORMAL_CSRC_CONSTVAL);,1
rvfi_csrc_any_check.sv,84,assert(rsval_shadow == csr_insn_rdata || csr_insn_rdata == wdata_shadow);,1
rvfi_csrc_any_check.sv,85,assert(rsval_shadow == wdata_shadow);,1
rvfi_pc_bwd_check.sv,38,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_pc_bwd_check.sv,39,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_bus_dmem_io_read_fault_check.sv,88,cover (1);,1
rvfi_bus_dmem_io_read_fault_check.sv,89,assert (bus_read_seen);,1
rvfi_hang_check.sv,31,assert(okay);,1
rvfi_hang_check.sv,36,assume(!rvfi_halt[channel_idx]);,1
rvfi_ill_check.sv,46,cover(!reset && check && valid && insn == 0);,1
rvfi_ill_check.sv,48,assume(valid);,1
rvfi_ill_check.sv,49,assume(insn == 0);,1
rvfi_ill_check.sv,50,assert(trap);,1
rvfi_ill_check.sv,51,assert(rd_addr == 0);,1
rvfi_ill_check.sv,52,assert(rd_wdata == 0);,1
rvfi_ill_check.sv,53,assert(mem_wmask == 0);,1
tb.sv,270,assert (a_count <= max_transfers);,1
tb.sv,283,assert (b_count <= max_transfers);,1
tb.sv,272,assert (a_count <= max_transfers);,1
tb.sv,285,assert (b_count <= max_transfers);,1
cv32e40p_aligner.sv,243,assert property (p_hwlp_update_pc);,1
cv32e40p_aligner.sv,248,assert property (p_hwlp_update_pc);,1
cv32e40p_if_stage.sv,293,assert property (p_pc_mux_0);,1
cv32e40p_if_stage.sv,298,assert property (p_pc_mux_0);,1
cv32e40p_if_stage.sv,307,assert property (p_pc_mux_1);,1
cv32e40p_if_stage.sv,312,assert property (p_pc_mux_1);,1
cv32e40p_load_store_unit.sv,501,assert property (p_no_error);,1
cv32e40p_load_store_unit.sv,506,assert property (p_no_error);,1
cv32e40p_load_store_unit.sv,509,assert property (p_no_transaction_count_overflow_0);,1
cv32e40p_load_store_unit.sv,514,assert property (p_no_transaction_count_overflow_0);,1
cv32e40p_load_store_unit.sv,516,assert property (p_no_transaction_count_overflow_1);,1
cv32e40p_load_store_unit.sv,521,assert property (p_no_transaction_count_overflow_1);,1
cv32e40p_load_store_unit.sv,524,assert property (p_no_spurious_rvalid);,1
cv32e40p_load_store_unit.sv,529,assert property (p_no_spurious_rvalid);,1
cv32e40p_load_store_unit.sv,532,assert property (p_address_phase_signals_defined);,1
cv32e40p_load_store_unit.sv,545,assert property (p_address_phase_signals_defined);,1
cv32e40p_sleep_unit.sv,168,assert property (p_clock_en_0);,1
cv32e40p_sleep_unit.sv,173,assert property (p_clock_en_0);,1
cv32e40p_sleep_unit.sv,176,assert property (p_clock_en_1);,1
cv32e40p_sleep_unit.sv,181,assert property (p_clock_en_1);,1
cv32e40p_sleep_unit.sv,184,assert property (p_clock_en_2);,1
cv32e40p_sleep_unit.sv,189,assert property (p_clock_en_2);,1
cv32e40p_sleep_unit.sv,195,assert property (p_clock_en_3);,1
cv32e40p_sleep_unit.sv,200,assert property (p_clock_en_3);,1
cv32e40p_sleep_unit.sv,203,assert property (p_only_sleep_during_p_elw);,1
cv32e40p_sleep_unit.sv,208,assert property (p_only_sleep_during_p_elw);,1
cv32e40p_sleep_unit.sv,212,assert property (p_full_clock_en_control);,1
cv32e40p_sleep_unit.sv,217,assert property (p_full_clock_en_control);,1
cv32e40p_sleep_unit.sv,222,assert property (p_clock_en_4);,1
cv32e40p_sleep_unit.sv,227,assert property (p_clock_en_4);,1
cv32e40p_sleep_unit.sv,230,assert property (p_clock_en_5);,1
cv32e40p_sleep_unit.sv,235,assert property (p_clock_en_5);,1
cv32e40p_sleep_unit.sv,238,assert property (p_core_sleep);,1
cv32e40p_sleep_unit.sv,243,assert property (p_core_sleep);,1
cv32e40p_sleep_unit.sv,246,assert property (p_non_busy);,1
cv32e40p_sleep_unit.sv,251,assert property (p_non_busy);,1
cv32e40p_sleep_unit.sv,254,assert property (p_gate_clk_i);,1
cv32e40p_sleep_unit.sv,259,assert property (p_gate_clk_i);,1
cv32e40p_sleep_unit.sv,262,assert property (p_gate_clock_during_sleep);,1
cv32e40p_sleep_unit.sv,267,assert property (p_gate_clock_during_sleep);,1
cv32e40p_sleep_unit.sv,270,assert property (p_only_sleep_for_wfi);,1
cv32e40p_sleep_unit.sv,277,assert property (p_only_sleep_for_wfi);,1
cv32e40p_sleep_unit.sv,280,assert property (p_not_busy_during_sleep);,1
cv32e40p_sleep_unit.sv,285,assert property (p_not_busy_during_sleep);,1
cv32e40p_core.sv,1130,assume property (p_env_req_0);,1
cv32e40p_core.sv,1137,assume property (p_env_req_0);,1
cv32e40p_core.sv,1140,assume property (p_env_req_1);,1
cv32e40p_core.sv,1145,assume property (p_env_req_1);,1
cv32e40p_core.sv,1157,assert property (p_irq_enabled_0);,1
cv32e40p_core.sv,1163,assert property (p_irq_enabled_0);,1
cv32e40p_core.sv,1166,assert property (p_irq_enabled_1);,1
cv32e40p_core.sv,1172,assert property (p_irq_enabled_1);,1
cv32e40p_core.sv,1252,assert property (p_illegal_mepc);,1
cv32e40p_core.sv,1257,assert property (p_illegal_mepc);,1
cv32e40p_core.sv,1260,assert property (p_ecall_mepc);,1
cv32e40p_core.sv,1265,assert property (p_ecall_mepc);,1
cv32e40p_core.sv,1268,assert property (p_ebrk_mepc);,1
cv32e40p_core.sv,1273,assert property (p_ebrk_mepc);,1
cv32e40p_prefetch_buffer.sv,194,assert property (p_fifo_depth_gt_1);,1
cv32e40p_prefetch_buffer.sv,199,assert property (p_fifo_depth_gt_1);,1
cv32e40p_prefetch_buffer.sv,202,assert property (p_branch_halfword_aligned);,1
cv32e40p_prefetch_buffer.sv,207,assert property (p_branch_halfword_aligned);,1
cv32e40p_prefetch_buffer.sv,210,assert property (p_instr_addr_word_aligned);,1
cv32e40p_prefetch_buffer.sv,215,assert property (p_instr_addr_word_aligned);,1
cv32e40p_prefetch_buffer.sv,218,assert property (p_branch_implies_req);,1
cv32e40p_prefetch_buffer.sv,223,assert property (p_branch_implies_req);,1
cv32e40p_prefetch_buffer.sv,226,assert property (p_branch_invalidates_fifo);,1
cv32e40p_prefetch_buffer.sv,231,assert property (p_branch_invalidates_fifo);,1
cv32e40p_prefetch_buffer.sv,242,assert property (p_no_error);,1
cv32e40p_prefetch_buffer.sv,247,assert property (p_no_error);,1
cv32e40p_id_stage.sv,1709,assert property (p_branch_taken_ex);,1
cv32e40p_id_stage.sv,1718,assert property (p_branch_taken_ex);,1
cv32e40p_id_stage.sv,1722,assert property (p_irq_csr);,1
cv32e40p_id_stage.sv,1732,assert property (p_irq_csr);,1
cv32e40p_id_stage.sv,1737,assert property (p_xret_csr);,1
cv32e40p_id_stage.sv,1743,assert property (p_xret_csr);,1
cv32e40p_id_stage.sv,1749,assert property (p_illegal_0);,1
cv32e40p_id_stage.sv,1754,assert property (p_illegal_0);,1
cv32e40p_id_stage.sv,1763,assert property (p_illegal_1);,1
cv32e40p_id_stage.sv,1770,assert property (p_illegal_1);,1
cv32e40p_id_stage.sv,1796,assert property (p_alu_op);,1
cv32e40p_id_stage.sv,1799,assert property (p_vector_mode);,1
cv32e40p_id_stage.sv,1804,assert property (p_vector_mode);,1
cv32e40p_id_stage.sv,1807,assert property (p_mul_op);,1
cv32e40p_id_stage.sv,1814,assert property (p_mul_op);,1
cv32e40p_id_stage.sv,1820,assert property (p_illegal_2);,1
cv32e40p_id_stage.sv,1829,assert property (p_illegal_2);,1
cv32e40p_prefetch_controller_sva.sv,80,"assert property(p_no_transaction_count_overflow_0) else `uvm_error(""Prefetch Controller SVA"", $sformatf(""Outstanding transaction count (%0d) greater than DEPTH (%0d)"", cnt_q, DEPTH)) property p_no_transaction_count_overflow_1;",7
cv32e40p_prefetch_controller_sva.sv,91,"assert property(p_no_transaction_count_overflow_1) else `uvm_error(""Prefetch Controller SVA"", $sformatf(""Overflow condition detected: cnt_q==%0d, DEPTH==%0d, count_up==%0d, count_down==%0d"", cnt_q, DEPTH, count_up, count_down)) generate if (COREV_PULP) begin : gen_pulp_xpulp_assertions // When HWLP_END-4 is in ID and we are hwlp branching, // HWLP_END should at least have already been granted // by the OBI interface property p_hwlp_end_already_gnt_when_hwlp_branch;",12
cv32e40p_prefetch_controller_sva.sv,107,"assert property(p_hwlp_end_already_gnt_when_hwlp_branch) else `uvm_error(""Prefetch Controller SVA"", $sformatf(""Hardware Loop End should already be granted"")) end else begin : gen_no_pulp_xpulp_assertions property p_hwlp_not_used;",8
cv32e40p_prefetch_controller_sva.sv,119,"assert property(p_hwlp_not_used) else `uvm_error(""Prefetch Controller SVA"", $sformatf(""Hardware Loop signals active while COREV_PULP = 0"")) end endgenerate // Check that a taken branch can only occur if fetching is requested property p_branch_implies_req;",11
cv32e40p_prefetch_controller_sva.sv,136,"assert property(p_branch_implies_req) else `uvm_error(""Prefetch Controller SVA"", $sformatf(""Taken branch occurs while fetching is not requested"")) // Check that after a taken branch the initial FIFO output is not accepted property p_branch_invalidates_fifo;",7
cv32e40p_prefetch_controller_sva.sv,147,"assert property(p_branch_invalidates_fifo) else `uvm_error(""Prefetch Controller SVA"", $sformatf(""After taken branch the initial FIFO output is accepted"")) // Check that hwlp_branch and branch_i cannot happen at the same moment property p_jump_hwlp_branch_not_together;",7
cv32e40p_prefetch_controller_sva.sv,158,"assert property(p_jump_hwlp_branch_not_together) else `uvm_error(""Prefetch Controller SVA"", $sformatf(""hwlp_branch and branch_i happen at the same moment"")) endmodule: cv32e40p_prefetch_controller_sva",6
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
xge_mac_assertiona.sv,14,assert property (valid_sof) else $error("Invalid start of frame detected");,1
xge_mac_assertiona.sv,21,assert property (valid_eof) else $error("Invalid end of frame detected");,1
xge_mac_assertiona.sv,28,assert property (valid_ifg) else $error("Minimum IFG violation detected");,1
xge_mac_assertiona.sv,31,assert property (valid_ifg) else $error("Minimum IFG violation detected");,1
properties.sv,176,"assume property(asserted_for_only_1_cycle(req, M1));",1
properties.sv,179,"assume property(asserted_for_only_1_cycle(req, M1));",1
example.sv,10,assert property(a+b == result);,1
example1.sv,14,assert property (a+b==result);,1
example3.sv,15,assert property (enable && state[0] |-> ##1 !state[0]);,1
example3.sv,16,assert property (state!=3);,1
example2.sv,15,assert property (enable && state[0] |-> ##1 !state[0]);,1
example2.sv,16,assert property (state!=3);,1
matmul_checker.sv,23,assert property(reset_active) else $error("Reset error");,2
matmul_checker.sv,30,cover property(reset_active);,1
matmul_checker.sv,35,assert property(read_operation_correctness) else $error("read error");,2
matmul_checker.sv,42,cover property(read_operation_correctness);,1
matmul_checker.sv,47,assert property(write_operation_correctness) else $error("write error");,2
matmul_checker.sv,54,cover property(write_operation_correctness);,1
matmul_checker.sv,59,assert property (pready_transition) else $error("pready_transition error");,2
matmul_checker.sv,66,cover property(pready_transition);,1
matmul_checker.sv,71,assert property (busy_bit) else $error("busy error");,2
matmul_checker.sv,78,cover property(busy_bit);,1
matmul_checker.sv,83,assert property(valid_output) else $error("output not valid");,2
matmul_checker.sv,90,cover property(valid_output);,1
matmul_checker.sv,94,assert property(valid_error) else $error("still trying to write/read when error");,2
matmul_checker.sv,101,cover property(valid_error);,1
tapeins_sp24_tapein2_Interconnect_noparam.sv,6690,assert (input_sel == 0 && output_sel == 0);,1
model_100gbe.sv,89,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,772,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,807,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1396,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1414,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1429,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1438,assert (resp==OKAY);,1
properties.sv,176,"assume property(asserted_for_only_1_cycle(req, M1));",1
matmul_checker.sv,21,cover property(valid_R_W);,1
matmul_checker.sv,26,cover property(valid_R_W);,1
matmul_checker.sv,28,cover property(valid_busy);,1
matmul_checker.sv,33,cover property(valid_busy);,1
matmul_checker.sv,35,cover property(in_operation_approach);,1
matmul_checker.sv,40,cover property(in_operation_approach);,1
matmul_checker.sv,42,cover property(valid_address);,1
matmul_checker.sv,47,cover property(valid_address);,1
ariane_pkg.sv,86,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,89,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,90,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,91,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
ariane_pkg.sv,92,assert(Cfg.NrPMPEntries <= 16);,1
ariane_pkg.sv,86,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,89,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,90,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,91,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
ariane_pkg.sv,92,assert(Cfg.NrPMPEntries <= 16);,1
soft_constraint.sv,9,assert(h.randomize);,1
inside_constraint.sv,9,assert(h.randomize);,1
CHECKER.sv,173,assert property(SPEC_2_Make_drink) else begin $display("=============================================================");,2
CHECKER.sv,187,assert property(SPEC_2_Supply) else begin $display("=============================================================");,2
CHECKER.sv,202,assert property(SPEC_2_Check_Valid_Date) else begin $display("=============================================================");,2
CHECKER.sv,219,assert property(SPEC_3) else begin $display("=============================================================");,2
CHECKER.sv,241,assert property(SPEC_4_Make_drink) else begin $display("=============================================================");,2
CHECKER.sv,250,assert property(SPEC_4_Make_drink) else begin $display("=============================================================");,2
CHECKER.sv,294,assert property(SPEC_5_sel_action_valid) else begin $display("=============================================================");,2
CHECKER.sv,298,assert property(SPEC_5_sel_action_valid) else begin $display("=============================================================");,2
CHECKER.sv,302,assert property(SPEC_5_sel_action_valid) else begin $display("=============================================================");,2
CHECKER.sv,306,assert property(SPEC_5_sel_action_valid) else begin $display("=============================================================");,2
CHECKER.sv,351,assert property(SPEC_6) else begin $display("=============================================================");,2
CHECKER.sv,365,assert property(SPEC_7) else begin $display("=============================================================");,2
CHECKER.sv,415,assert property(SPEC_8_MONTH) else begin $display("=============================================================");,2
CHECKER.sv,419,assert property(SPEC_8_MONTH) else begin $display("=============================================================");,2
CHECKER.sv,423,assert property(SPEC_8_MONTH) else begin $display("=============================================================");,2
CHECKER.sv,427,assert property(SPEC_8_MONTH) else begin $display("=============================================================");,2
CHECKER.sv,519,assert property(SPEC_9_one_cycle) else begin $display("=============================================================");,2
CHECKER.sv,531,assert property(SPEC_9_wait_C_out_valid) else begin $display("=============================================================");,2
vortex_afu.sv,795,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
test_ir_transmitter.sv,140,assert(ir_led_pulse_count == expected_ir_led_pulse_count);,1
DatapathPipelined.sv,254,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathPipelined.sv,255,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathAxilMemory.sv,126,assert (!insn.ARVALID || insn.ARADDR[1:0] == 2'b00);,1
DatapathAxilMemory.sv,127,assert (!data.ARVALID || data.ARADDR[1:0] == 2'b00);,1
DatapathAxilMemory.sv,128,assert (!data.AWVALID || data.AWADDR[1:0] == 2'b00);,1
DatapathAxilMemory.sv,130,assert (insn.ARPROT == 3'd0);,1
DatapathAxilMemory.sv,131,assert (data.ARPROT == 3'd0);,1
DatapathAxilMemory.sv,132,assert (data.AWPROT == 3'd0);,1
DatapathAxilMemory.sv,352,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathAxilMemory.sv,353,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,89,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,90,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,247,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,248,assert (addr_to_dmem[1:0] == 2'b00);,1
warp_formal.sv,10,assume (!i_rst_n);,1
warp_formal.sv,11,assume (!i_clk);,1
warp_formal.sv,12,assume (!i_mem_valid);,1
warp_formal.sv,13,assume (!i_branch_valid);,1
warp_formal.sv,15,assert (!o_output_valid);,1
warp_formal.sv,16,assert (!o_mem_ren);,1
huffman_decoder_tb.sv,70,assert(valid == 1'h0);,1
verificationFSM_tb.sv,86,assert (dut_pinout == 2b'11);,1
axi_id_remap.sv,562,assert (InpIdWidth > 0);,1
axi_id_remap.sv,563,assert (MaxUniqInpIds > 0);,1
axi_id_remap.sv,565,assert (MaxTxnsPerId > 0);,1
axi_id_remap.sv,566,assert (IdxWidth >= 1);,1
axi_id_remap.sv,646,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_remap.sv,647,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,648,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,649,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_remap.sv,650,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_remap.sv,651,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,652,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,653,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,339,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_iw_converter.sv,340,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,341,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,342,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,343,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_iw_converter.sv,344,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,345,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,346,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,31,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,32,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_test.sv,1779,assert (b_beat.b_id == id);,1
axi_test.sv,1837,assert (r_beat.r_id == id);,1
axi_test.sv,1838,assert (r_beat.r_resp == axi_pkg::RESP_OKAY);,1
axi_test.sv,1839,assert (r_beat.r_last);,1
axi_id_serialize.sv,413,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_serialize.sv,414,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,415,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,416,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_serialize.sv,417,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_serialize.sv,418,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,419,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,420,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_modify_address.sv,157,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,159,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,160,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,86,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,109,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,110,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,111,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
find_first_one.sv,33,assert(WIDTH >= 0);,1
config_pkg.sv,129,assert (Cfg.RASDepth > 0);,1
config_pkg.sv,132,assert (Cfg.NrNonIdempotentRules <= NrMaxRules);,1
config_pkg.sv,133,assert (Cfg.NrExecuteRegionRules <= NrMaxRules);,1
config_pkg.sv,134,assert (Cfg.NrCachedRegionRules <= NrMaxRules);,1
config_pkg.sv,135,assert (Cfg.NrPMPEntries <= 16);,1
pmp_entry.sv,81,assert (size >= 2);,1
pmp_entry.sv,83,assert (size > 2);,1
pmp_entry.sv,87,assert (conf_addr_i[i] == 1); // check that all the rest are ones end end end if (size < PLEN - 1) begin if (base + 2 ** size > base) begin // check for overflow if (match_o == 0) begin assert (addr_i >= base + 2 ** size || addr_i < base);,9
pmp_entry.sv,97,assert (addr_i < base + 2 ** size && addr_i >= base);,1
pmp_entry.sv,101,assert (addr_i - 2 ** size >= base || addr_i < base);,1
pmp_entry.sv,103,assert (addr_i - 2 ** size < base && addr_i >= base);,1
pmp_tb.sv,75,assert (allow == 1);,1
pmp_tb.sv,92,assert (allow == 0);,1
pmp_tb.sv,109,assert (allow == 1);,1
axi_lite_to_reg.sv,44,assert(BUFFER_DEPTH > 0);,1
axi_lite_to_reg.sv,45,assert(ADDR_WIDTH > 0);,1
axi_lite_to_reg.sv,46,assert(DATA_WIDTH > 0);,1
miter.sv,105,assume (out_ready); //too slow with backpressure // if (in_valid) begin // module depends on inputs not changing even if in_valid is false: // have to comment this out or it fails equivalence with itself assume (ref_OpA_DI == uut_OpA_DI);,5
miter.sv,110,assume (ref_OpB_DI == uut_OpB_DI);,1
miter.sv,111,assume (ref_OpBShift_DI == uut_OpBShift_DI);,1
miter.sv,112,assume (ref_OpBIsZero_SI == uut_OpBIsZero_SI);,1
miter.sv,113,assume (ref_OpBSign_SI == uut_OpBSign_SI);,1
miter.sv,114,assume (ref_OpBSign_SI == uut_OpBSign_SI);,1
miter.sv,115,assume (ref_OpCode_SI == uut_OpCode_SI);,1
miter.sv,117,assert (ref_valid_out == uut_valid_out);,1
miter.sv,119,assert (ref_result_div == uut_result_div);,1
miter.sv,105,assume (out_ready); //too slow with backpressure // if (in_valid) begin // module depends on inputs not changing even if in_valid is false: // have to comment this out or it fails equivalence with itself assume (ref_OpA_DI == uut_OpA_DI);,5
miter.sv,110,assume (ref_OpB_DI == uut_OpB_DI);,1
miter.sv,111,assume (ref_OpBShift_DI == uut_OpBShift_DI);,1
miter.sv,112,assume (ref_OpBIsZero_SI == uut_OpBIsZero_SI);,1
miter.sv,113,assume (ref_OpBSign_SI == uut_OpBSign_SI);,1
miter.sv,114,assume (ref_OpBSign_SI == uut_OpBSign_SI);,1
miter.sv,115,assume (ref_OpCode_SI == uut_OpCode_SI);,1
miter.sv,117,assert (ref_valid_out == uut_valid_out);,1
miter.sv,119,assert (ref_result_div == uut_result_div);,1
miter.sv,105,assume (out_ready); //too slow with backpressure // if (in_valid) begin // module depends on inputs not changing even if in_valid is false: // have to comment this out or it fails equivalence with itself assume (ref_OpA_DI == uut_OpA_DI);,5
miter.sv,110,assume (ref_OpB_DI == uut_OpB_DI);,1
miter.sv,111,assume (ref_OpBShift_DI == uut_OpBShift_DI);,1
miter.sv,112,assume (ref_OpBIsZero_SI == uut_OpBIsZero_SI);,1
miter.sv,113,assume (ref_OpBSign_SI == uut_OpBSign_SI);,1
miter.sv,114,assume (ref_OpBSign_SI == uut_OpBSign_SI);,1
miter.sv,115,assume (ref_OpCode_SI == uut_OpCode_SI);,1
miter.sv,117,assert (ref_valid_out == uut_valid_out);,1
miter.sv,119,assert (ref_result_div == uut_result_div);,1
CHECKER_iclab120.sv,240,assert property(SPEC_1_rst) else print_Assertion_violate_msg("1");,1
CHECKER_iclab120.sv,251,assert property(SPEC_1_rst) else print_Assertion_violate_msg("1");,1
CHECKER_iclab120.sv,255,assert property(SPEC_1_rst) else print_Assertion_violate_msg("1");,1
DatapathPipelined.sv,254,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathPipelined.sv,255,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,89,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,90,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,685,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,686,assert (addr_to_dmem[1:0] == 2'b00);,1
ks.sv,43,assert(1'b0 && "Kogge-Stone adder with LEN < 4 makes no sense");,1
struct_dynamic_range.sv,50,assert(data_shift_mask1 === 8'h7e);,1
struct_dynamic_range.sv,51,assert(data_shift_mask2 === 8'hff);,1
struct_dynamic_range.sv,52,assert(data_shift_mask3 === 8'hxx);,1
struct_dynamic_range.sv,63,assert(data_case1 === 8'h7e);,1
struct_dynamic_range.sv,64,assert(data_case2 === 8'hff);,1
struct_dynamic_range.sv,65,assert(data_case3 === 8'hxx);,1
static_cast_simple.sv,36,assert(c == 8'b0000_0000);,1
static_cast_simple.sv,37,assert(d == 8'b0000_0001);,1
static_cast_simple.sv,42,assert(s0 == 8'b1111_1111);,1
static_cast_simple.sv,43,assert(s1 == 8'b1111_1111);,1
static_cast_simple.sv,44,assert(s2 == 8'b0000_1111);,1
static_cast_simple.sv,45,assert(u0 == 8'b1111_1111);,1
static_cast_simple.sv,46,assert(u1 == 8'b0000_1111);,1
static_cast_simple.sv,47,assert(u2 == 8'b1111_1111);,1
static_cast_simple.sv,48,assert(u3 == 8'b1111_1111);,1
static_cast_simple.sv,49,assert(u4 == 8'b0000_1111);,1
static_cast_simple.sv,50,assert(u5 == 8'b1111_1111);,1
static_cast_simple.sv,51,assert(u6 == 8'b0000_1111);,1
static_cast_simple.sv,53,assert(n0 == 9'b1_1111_1111);,1
static_cast_simple.sv,54,assert(n1 == 9'b0_0000_1111);,1
static_cast_simple.sv,55,assert(n2 == 9'b1_1111_1111);,1
static_cast_simple.sv,56,assert(n3 == 9'b0_0000_1111);,1
static_cast_simple.sv,57,assert(n4 == 9'b0_1111_1111);,1
static_cast_simple.sv,58,assert(n5 == 9'b0_0000_1111);,1
static_cast_simple.sv,59,assert(n6 == 9'b0_1111_1111);,1
static_cast_simple.sv,60,assert(n7 == 9'b0_0000_1111);,1
static_cast_simple.sv,61,assert(n8 == 9'b1_1111_1111);,1
static_cast_simple.sv,62,assert(n9 == 9'b0_0000_1111);,1
typedef_initial_and_assign.sv,11,assert property (var_1 == 0);,1
typedef_initial_and_assign.sv,15,assert property (var_2 == 0);,1
typedef_initial_and_assign.sv,19,assert property (var_3 == 0);,1
typedef_initial_and_assign.sv,23,assert property (var_4 == 0);,1
typedef_initial_and_assign.sv,27,assert property (var_5 == 0);,1
typedef_initial_and_assign.sv,30,assert property (var_6 == 0);,1
typedef_initial_and_assign.sv,34,assert property (var_7 == 0);,1
typedef_initial_and_assign.sv,37,assert property (var_8 == 0);,1
typedef_initial_and_assign.sv,41,assert property (var_9 == 0);,1
typedef_initial_and_assign.sv,44,assert property (var_10 == 0);,1
typedef_initial_and_assign.sv,48,assert property (var_11 == 0);,1
typedef_initial_and_assign.sv,52,assert property (wire_3 == 0);,1
typedef_initial_and_assign.sv,56,assert property (wire_2 == 0);,1
typedef_initial_and_assign.sv,59,assert property (wire_3 == 0);,1
typedef_initial_and_assign.sv,63,assert property (wire_4 == 0);,1
enum_simple.sv,27,assert(1'b0); //should be unreachable //state if (state == ts0) state <= ts1;,5
enum_simple.sv,37,assert(1'b0); //should be unreachable end end always @(*) begin assert(state != 2'h3);,6
enum_simple.sv,43,assert(s0 == '0);,1
enum_simple.sv,44,assert(ts0 == '0);,1
enum_simple.sv,45,assert(enum_const == ts1);,1
union_simple.sv,16,assert(w.y.d == 8'h42);,1
union_simple.sv,64,assert(ir1.u.opcode == 'h37);,1
union_simple.sv,65,assert(ir1.r.opcode == 'h37);,1
union_simple.sv,66,assert(ir1.u.rd == 'd29);,1
union_simple.sv,67,assert(ir1.r.rd == 'd29);,1
union_simple.sv,68,assert(ir1.u.imm == 'hAA01);,1
union_simple.sv,69,assert(s1.ir.u.opcode == 'h37);,1
union_simple.sv,70,assert(s1.ir.r.opcode == 'h37);,1
union_simple.sv,71,assert(s1.ir.u.rd == 'd29);,1
union_simple.sv,72,assert(s1.ir.r.rd == 'd29);,1
union_simple.sv,73,assert(s1.ir.u.imm == 'hAA01);,1
union_simple.sv,74,assert(s1.state == 4'b1111);,1
union_simple.sv,85,assert(u.byte4.d == 'h42);,1
typedef_struct.sv,38,assert(s.a == 1'b1);,1
typedef_struct.sv,39,assert(s.b == 8'hFF);,1
typedef_struct.sv,40,assert(s.t == 8'h55);,1
typedef_struct.sv,41,assert(s1.t == 8'h55);,1
typedef_struct.sv,42,assert(ps.a == 8'hAA);,1
typedef_struct.sv,43,assert(ps.b == 8'h55);,1
typedef_struct.sv,44,assert(s.ps.a == 8'hAA);,1
typedef_struct.sv,45,assert(s.ps.b == 8'h55);,1
typedef_struct_port.sv,102,assert(8'hAA == ps.a);,1
typedef_struct_port.sv,103,assert(8'h55 == ps.b);,1
typedef_struct_port.sv,104,assert(8'hBB == body.a);,1
typedef_struct_port.sv,105,assert(8'h66 == body.b);,1
typedef_struct_port.sv,106,assert(32'hAAAAAAAA == l_s);,1
typedef_struct_port.sv,107,assert(16'hBBBB == sl_s);,1
typedef_struct_port.sv,108,assert(16'hCCCC == lsl_s);,1
typedef_struct_port.sv,109,assert(1'b1 == j);,1
struct_access.sv,30,assert(P == 4'b1100);,1
struct_access.sv,31,assert(f == 2'b11);,1
struct_access.sv,32,assert(g == 2'b00);,1
struct_access.sv,33,assert(h == 2'b11);,1
struct_access.sv,34,assert(i == 1'b1);,1
struct_access.sv,35,assert(j == 1'b1);,1
struct_access.sv,36,assert(x == 2'b00);,1
struct_access.sv,37,assert(y == 2'b00);,1
struct_access.sv,38,assert(x.c == 2'b00);,1
struct_access.sv,39,assert(y.b == 1'b0);,1
struct_access.sv,40,assert(n == 1'b1);,1
struct_access.sv,41,assert(z == 1'b0);,1
const_arg_loop.sv,83,assert(a == 2);,1
const_arg_loop.sv,84,assert(A == 3);,1
const_arg_loop.sv,85,assert(x1 == 16);,1
const_arg_loop.sv,86,assert(x1b == 16);,1
const_arg_loop.sv,87,assert(x2 == 4);,1
const_arg_loop.sv,88,assert(x3 == 16);,1
const_arg_loop.sv,89,assert(x4 == a << 1);,1
const_arg_loop.sv,90,assert(x5 == 64);,1
const_func.sv,66,assert(a1 == 0);,1
const_func.sv,67,assert(a2 == 0);,1
const_func.sv,68,assert(a3 == "BAR");,1
const_func.sv,69,assert(a4 == 0);,1
const_func.sv,70,assert(b1 == "FOO");,1
const_func.sv,71,assert(b2 == "FOO");,1
const_func.sv,72,assert(b3 == 0);,1
const_func.sv,73,assert(b4 == "HI");,1
const_func.sv,74,assert(c1 == 1);,1
const_func.sv,75,assert(c2 == 1);,1
const_func.sv,76,assert(c3 == 0);,1
const_func.sv,77,assert(c4 == 0);,1
const_func.sv,78,assert(d1 == 0);,1
const_func.sv,79,assert(d2 == 0);,1
const_func.sv,80,assert(d3 == 1);,1
const_func.sv,81,assert(d4 == 1);,1
const_func.sv,83,assert(Y == 3);,1
const_func.sv,84,assert(Z == ~3);,1
countbits.sv,33,assert (one == 1);,1
countbits.sv,34,assert (two == 3);,1
countbits.sv,35,assert (four == 3);,1
inst_list.sv,21,assert(w0 == u0 ^ v0);,1
inst_list.sv,22,assert(w1 == u1 ^ v1);,1
basic.sv,18,assert(w == u ^ v);,1
hier.sv,16,assert(w == u ^ v);,1
param.sv,23,assert (w0 == '0);,1
param.sv,24,assert (w1 == u1 ^ v1);,1
toplevel.sv,16,assert(w == u ^ v);,1
cell_list.sv,23,assert(w0 == u0 ^ v0);,1
cell_list.sv,24,assert(w1 == u1 ^ v1);,1
asgn_expr.sv,5,assert (x == a);,1
asgn_expr.sv,6,assert (y == b);,1
asgn_expr.sv,7,assert (z == c);,1
asgn_expr.sv,67,assert (w == 1);,1
asgn_expr.sv,70,assert (w == 2);,1
int_types.sv,17,"assert (x == y); \ assert (a == b); \ assert (a == c); \ assert ((a == -1) == is_signed); \ end \ end `define TEST_INTEGER_ATOM(typ, width) \ `TEST(typ, width, 1) \ `TEST(typ signed, width, 1) \ `TEST(typ unsigned, width, 0) `define TEST_INTEGER_VECTOR(typ) \ `TEST(typ, 1, 0) \ `TEST(typ signed, 1, 1) \ `TEST(typ unsigned, 1, 0) \ `TEST(typ [1:0], 2, 0) \ `TEST(typ signed [1:0], 2, 1) \ `TEST(typ unsigned [1:0], 2, 0) module top;",21
func_upto.sv,24,assert (C_CONST == C_WIRE);,1
func_upto.sv,25,assert (C_CONST == C_FUNC);,1
struct_access.sv,83,assert (fail === 0);,1
net_types.sv,19,assert (wire_logic_0 == 0);,1
net_types.sv,20,assert (wire_logic_1 == 1);,1
net_types.sv,21,assert (wand_logic_0 == 0);,1
net_types.sv,22,assert (wand_logic_1 == 1);,1
net_types.sv,23,assert (wor_logic_0 == 0);,1
net_types.sv,24,assert (wor_logic_1 == 1);,1
net_types.sv,26,assert (wire_integer == 4'b1001);,1
net_types.sv,27,assert (wand_integer == 4'b1000);,1
net_types.sv,28,assert (wor_integer == 4'b1011);,1
net_types.sv,30,assert (wire_typename == 4'b1001);,1
net_types.sv,31,assert (wand_typename == 4'b1000);,1
net_types.sv,32,assert (wor_typename == 4'b1011);,1
unbased_unsized.sv,27,assert (o01 === {64 {1'b0}});,1
unbased_unsized.sv,28,assert (o02 === {64 {1'b1}});,1
unbased_unsized.sv,29,assert (o03 === {64 {1'bx}});,1
unbased_unsized.sv,30,assert (o04 === {64 {1'bz}});,1
unbased_unsized.sv,31,"assert (o05 === {61'b0, 3'b000});",1
unbased_unsized.sv,32,"assert (o06 === {61'b0, 3'b111});",1
unbased_unsized.sv,33,"assert (o07 === {61'b0, 3'bxxx});",1
unbased_unsized.sv,34,"assert (o08 === {61'b0, 3'bzzz});",1
unbased_unsized.sv,35,assert (o09 === {64 {1'b0}});,1
unbased_unsized.sv,36,assert (o10 === {64 {1'b1}});,1
unbased_unsized.sv,37,assert (o11 === {64 {1'bx}});,1
unbased_unsized.sv,38,assert (o12 === {64 {1'bz}});,1
prefix.sv,12,assert (1 == a);,1
prefix.sv,13,assert (1 == blk1.a);,1
prefix.sv,14,assert (1 == top.blk1.a);,1
prefix.sv,15,assert (i == b);,1
prefix.sv,16,assert (i == blk2[i].b);,1
prefix.sv,17,assert (i == blk1.blk2[i].b);,1
prefix.sv,18,assert (i == top.blk1.blk2[i].b);,1
prefix.sv,19,assert (i == blk2[x].b);,1
prefix.sv,20,assert (i == blk1.blk2[x].b);,1
prefix.sv,21,assert (i == top.blk1.blk2[x].b);,1
prefix.sv,22,assert (j == c);,1
prefix.sv,23,assert (j == blk3[j].c);,1
prefix.sv,24,assert (j == blk2[x].blk3[j].c);,1
prefix.sv,25,assert (j == blk1.blk2[x].blk3[j].c);,1
prefix.sv,26,assert (j == top.blk1.blk2[x].blk3[j].c);,1
prefix.sv,27,assert (j == c);,1
prefix.sv,28,assert (j == blk3[y].c);,1
prefix.sv,29,assert (j == blk2[x].blk3[y].c);,1
prefix.sv,30,assert (j == blk1.blk2[x].blk3[y].c);,1
prefix.sv,31,assert (j == top.blk1.blk2[x].blk3[y].c);,1
prefix.sv,32,assert (j == top.blk1.blk2[x].blk3[y].c[0]);,1
prefix.sv,33,assert (0 == top.blk1.blk2[x].blk3[y].c[1]);,1
prefix.sv,34,assert (0 == top.blk1.blk2[x].blk3[y].c[j]);,1
prefix.sv,38,assert (1 == a);,1
prefix.sv,39,assert (1 == blk1.a);,1
prefix.sv,40,assert (1 == top.blk1.a);,1
prefix.sv,41,assert (i == b);,1
prefix.sv,42,assert (i == blk2[i].b);,1
prefix.sv,43,assert (i == blk1.blk2[i].b);,1
prefix.sv,44,assert (i == top.blk1.blk2[i].b);,1
prefix.sv,45,assert (0 == blk3[0].c);,1
prefix.sv,46,assert (0 == blk2[i].blk3[0].c);,1
prefix.sv,47,assert (0 == blk1.blk2[i].blk3[0].c);,1
prefix.sv,48,assert (0 == top.blk1.blk2[i].blk3[0].c);,1
prefix.sv,49,assert (1 == blk3[1].c);,1
prefix.sv,50,assert (1 == blk2[i].blk3[1].c);,1
prefix.sv,51,assert (1 == blk1.blk2[i].blk3[1].c);,1
prefix.sv,52,assert (1 == top.blk1.blk2[i].blk3[1].c);,1
prefix.sv,56,assert (1 == a);,1
prefix.sv,57,assert (1 == blk1.a);,1
prefix.sv,58,assert (1 == top.blk1.a);,1
prefix.sv,59,assert (0 == blk2[0].b);,1
prefix.sv,60,assert (0 == blk1.blk2[0].b);,1
prefix.sv,61,assert (0 == top.blk1.blk2[0].b);,1
prefix.sv,62,assert (1 == blk2[1].b);,1
prefix.sv,63,assert (1 == blk1.blk2[1].b);,1
prefix.sv,64,assert (1 == top.blk1.blk2[1].b);,1
prefix.sv,65,assert (0 == blk2[0].blk3[0].c);,1
prefix.sv,66,assert (0 == blk1.blk2[0].blk3[0].c);,1
prefix.sv,67,assert (0 == top.blk1.blk2[0].blk3[0].c);,1
prefix.sv,68,assert (1 == blk2[0].blk3[1].c);,1
prefix.sv,69,assert (1 == blk1.blk2[0].blk3[1].c);,1
prefix.sv,70,assert (1 == top.blk1.blk2[0].blk3[1].c);,1
prefix.sv,71,assert (0 == blk2[1].blk3[0].c);,1
prefix.sv,72,assert (0 == blk1.blk2[1].blk3[0].c);,1
prefix.sv,73,assert (0 == top.blk1.blk2[1].blk3[0].c);,1
prefix.sv,74,assert (1 == blk2[1].blk3[1].c);,1
prefix.sv,75,assert (1 == blk1.blk2[1].blk3[1].c);,1
prefix.sv,76,assert (1 == top.blk1.blk2[1].blk3[1].c);,1
prefix.sv,80,assert (1 == blk1.a);,1
prefix.sv,81,assert (1 == top.blk1.a);,1
prefix.sv,82,assert (0 == blk1.blk2[0].b);,1
prefix.sv,83,assert (0 == top.blk1.blk2[0].b);,1
prefix.sv,84,assert (1 == blk1.blk2[1].b);,1
prefix.sv,85,assert (1 == top.blk1.blk2[1].b);,1
prefix.sv,86,assert (0 == blk1.blk2[0].blk3[0].c);,1
prefix.sv,87,assert (0 == top.blk1.blk2[0].blk3[0].c);,1
prefix.sv,88,assert (1 == blk1.blk2[0].blk3[1].c);,1
prefix.sv,89,assert (1 == top.blk1.blk2[0].blk3[1].c);,1
prefix.sv,90,assert (0 == blk1.blk2[1].blk3[0].c);,1
prefix.sv,91,assert (0 == top.blk1.blk2[1].blk3[0].c);,1
prefix.sv,92,assert (1 == blk1.blk2[1].blk3[1].c);,1
prefix.sv,93,assert (1 == top.blk1.blk2[1].blk3[1].c);,1
func_tern_hint.sv,27,assert(A == 31'h3F_FFFFFF);,1
func_tern_hint.sv,28,assert(B == 31'h0F_FFFFFF);,1
func_tern_hint.sv,29,assert(C == 31'h03_FFFFFF);,1
func_tern_hint.sv,30,assert(D == 31'h00_FFFFFF);,1
func_tern_hint.sv,31,assert(X == 0);,1
func_tern_hint.sv,32,assert(Y == 0);,1
func_tern_hint.sv,40,assert(x);,1
package_task_func.sv,26,assert property (a == 2);,1
package_task_func.sv,27,assert property (b == 9);,1
package_task_func.sv,28,assert property (c == 8);,1
package_task_func.sv,29,assert property (d == 16);,1
param_no_default.sv,32,assert (a1 == 0);,1
param_no_default.sv,33,assert (b1 == 1);,1
param_no_default.sv,34,assert (c1 == 2);,1
param_no_default.sv,35,assert (d1 == 3);,1
param_no_default.sv,37,assert (a2 == 1);,1
param_no_default.sv,38,assert (b2 == 1);,1
param_no_default.sv,39,assert (c2 == 4);,1
param_no_default.sv,40,assert (d3 == 3);,1
param_no_default.sv,42,assert (a3 == 1);,1
param_no_default.sv,43,assert (b3 == 0);,1
param_no_default.sv,44,assert (c3 == 5);,1
param_no_default.sv,45,assert (d3 == 3);,1
param_no_default.sv,47,assert (a4 == 1);,1
param_no_default.sv,48,assert (b4 == 0);,1
param_no_default.sv,49,assert (c4 == 9);,1
param_no_default.sv,50,assert (d4 == 10);,1
unbased_unsized_shift.sv,21,assert (s0c === 64'h0000_0000_0000_0000);,1
unbased_unsized_shift.sv,22,assert (s1c === 64'hFFFF_FFFF_FFFF_FF00);,1
unbased_unsized_shift.sv,23,assert (sxc === 64'hxxxx_xxxx_xxxx_xx00);,1
unbased_unsized_shift.sv,24,assert (s0d === 64'h0000_0000_0000_0000);,1
unbased_unsized_shift.sv,25,assert (s1d === 64'hFFFF_FFFF_FFFF_FF00);,1
unbased_unsized_shift.sv,26,assert (sxd === 64'hxxxx_xxxx_xxxx_xx00);,1
counter.sv,19,assume property (down |-> !up);,1
example.sv,15,assume (cnt != 10);,1
example.sv,16,assert (cnt != 15);,1
ibex_icache_core_if.sv,136,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,162,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,167,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,188,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,363,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,479,assert (addr_lo < address);,1
formal_tb.sv,67,assume (multdiv_ready_id_i);,1
formal_tb.sv,73,assert (checked);,1
tb_jtag_dmi.sv,208,assert(idcode == i_jtag_sime2.IDCODEval_sig);,1
tb_jtag_dmi.sv,210,assert(idcode == IDCode);,1
tb_jtag_dmi.sv,216,assert(dtmcs.version == 1);,1
tb_jtag_dmi.sv,217,assert(dtmcs.abits == 7);,1
tb_jtag_dmi.sv,223,assert(dtmcs.version == 1);,1
tb_jtag_dmi.sv,224,assert(dtmcs.abits == 7);,1
tb_jtag_dmi.sv,264,assert(req.addr == req_mon.addr);,1
tb_jtag_dmi.sv,265,assert(req.op == req_mon.op);,1
tb_jtag_dmi.sv,267,assert(rsp_mon.data == rsp);,1
tb_jtag_dmi.sv,269,assert(req.data == req_mon.data);,1
ibex_icache_core_if.sv,136,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,162,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,167,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,188,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,363,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,479,assert (addr_lo < address);,1
ift_sram_mem.sv,39,assert(NumTaints == 1);,1
ift_sram_mem.sv,100,assert(num_words*WidthBytes >= PreloadBufferSize);,1
ift_sram_mem.sv,134,assert(num_words*WidthBytes >= PreloadBufferSize);,1
our_sram_mem.sv,56,assert(num_words*WidthBytes <= PreloadBufferSize);,1
plusarg_file_mem.sv,43,assert(ADDR_BITS <= 64);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,148,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,161,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,166,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,187,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,361,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,477,assert (addr_lo < address);,1
formal_tb.sv,67,assume (multdiv_ready_id_i);,1
formal_tb.sv,73,assert (checked);,1
two_copy_top_ct.sv,56,assume property (alu_op_match_1 -> ~alu_deviation_1);,1
two_copy_top_ct.sv,57,assume property (alu_op_match_2 -> ~alu_deviation_2);,1
two_copy_top_ct.sv,58,assume property (alu_op_match_3 -> ~alu_deviation_3);,1
two_copy_top_ct.sv,59,assume property (alu_op_match_4 -> ~alu_deviation_4);,1
two_copy_top_ct.sv,65,assume property (mul_op_match -> ~mul_deviation);,1
two_copy_top_ct.sv,71,assume property (branch_op_match -> ~branch_deviation);,1
matmul_checker.sv,33,assert property (p_start_of_transaction) else $error("APB Protocol Violation: Transaction must start with psel high and penable low");,2
matmul_checker.sv,41,assert property (p_transaction_complete) else $error("APB Protocol Violation: Transaction didn't complete properly");,2
matmul_checker.sv,49,assert property (p_read_transaction) else $error("APB Protocol Violation: Read data is undefined during a read transaction");,2
matmul_checker.sv,57,assert property (p_read_transaction) else $error("APB Protocol Violation: Read data is undefined during a read transaction");,2
matmul_checker.sv,65,assert property (p_slave_error) else $error("APB Protocol Violation: Slave error not handled properly");,2
matmul_checker.sv,73,assert property (p_sel_only_when_idle) else $error("APB Protocol Violation: psel asserted when bus is not idle");,2
matmul_checker.sv,81,assert property (p_stable_signals_on_enable) else $error("APB Protocol Violation: Control signals must remain stable when penable is high");,2
matmul_checker.sv,89,assert property (p_pready_eventually_asserted) else $error("APB Protocol Violation: pready was not asserted eventually after penable was asserted");,2
matmul_checker.sv,97,assert property (p_pslverr_assertion_condition) else $error("APB Protocol Violation: pslverr asserted under invalid conditions");,2
matmul_checker.sv,105,assert property (p_bus_idle_after_transaction) else $error("APB Protocol Violation: Bus not idle after transaction completion");,2
matmul_checker.sv,113,assert property (p_penable_asserted_after_psel) else $error("APB Protocol Violation: penable must be asserted for at least one clock cycle after psel");,2
rvfi_csrc_inc_check.sv,74,assume(csr_read_shadowed);,1
rvfi_csrc_inc_check.sv,82,assume(csr_insn_wdata[`RISCV_FORMAL_XLEN-1] == 0);,1
rvfi_bus_dmem_io_write_check.sv,100,cover (1);,1
rvfi_bus_dmem_io_write_check.sv,101,assert (bus_write_seen);,1
rvfi_csrc_upcnt_check.sv,72,assume(csr_read_shadowed);,1
rvfi_csrc_upcnt_check.sv,74,assert(csr_insn_rdata > rdata_shadow);,1
rvfi_csrc_upcnt_check.sv,78,assume(csr_insn_rdata[31:0] < 'h F000_0000); // no overflow rdata_shadow = csr_insn_rdata;,2
rvfi_bus_dmem_check.sv,65,assume (bus_rdata[i*8 +: 8] == bus_shadow[j*8 +: 8]);,1
rvfi_bus_dmem_check.sv,74,assume (!rvfi_bus_fault[channel_idx]);,1
rvfi_bus_dmem_check.sv,87,cover (1);,1
rvfi_bus_dmem_check.sv,88,assert (dmem_shadow[i*8 +: 8] == rvfi_mem_rdata[i*8 +: 8]);,1
rvfi_causal_mem_check.sv,67,assume (rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_causal_mem_check.sv,68,assume (writes_check_addr);,1
rvfi_causal_mem_check.sv,69,assume (insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_causal_mem_check.sv,70,cover (1);,1
rvfi_causal_mem_check.sv,71,assert (!found_non_causal);,1
rvfi_dmem_check.sv,37,assert(dmem_shadow[i*8 +: 8] == rvfi_mem_rdata[i*8 +: 8]);,1
rvfi_liveness_check.sv,33,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_liveness_check.sv,34,assume(!rvfi_halt[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_liveness_check.sv,35,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_liveness_check.sv,38,assert(found_next_insn);,1
rvfi_fault_check.sv,66,assume(valid);,1
rvfi_fault_check.sv,69,assert (trap);,1
rvfi_fault_check.sv,70,assert (rd_addr == 0);,1
rvfi_fault_check.sv,71,assert (rd_wdata == 0);,1
rvfi_fault_check.sv,72,assert (mem_wmask == 0);,1
rvfi_fault_check.sv,74,cover (rfault);,1
rvfi_fault_check.sv,75,cover (wfault);,1
rvfi_fault_check.sv,76,cover (ifault);,1
rvfi_fault_check.sv,79,assert (insn == 0);,1
rvfi_fault_check.sv,81,assert (insn != 0);,1
rvfi_fault_check.sv,86,assert (&csr_mcause_wmask);,1
rvfi_fault_check.sv,87,assert (csr_mcause_wdata == 7);,1
rvfi_fault_check.sv,89,assert (&csr_mcause_wmask);,1
rvfi_fault_check.sv,90,assert (csr_mcause_wdata == 5);,1
rvfi_fault_check.sv,92,assert (&csr_mcause_wmask);,1
rvfi_fault_check.sv,93,assert (csr_mcause_wdata == 1);,1
rvfi_fault_check.sv,98,assert (mem_fault_rmask == 0);,1
rvfi_fault_check.sv,99,assert (mem_fault_wmask == 0);,1
rvfi_bus_dmem_io_write_fault_check.sv,96,cover (1);,1
rvfi_bus_dmem_io_write_fault_check.sv,97,assert (bus_write_seen);,1
rvfi_imem_check.sv,41,assert(insn[15:0] == imem_data);,1
rvfi_imem_check.sv,44,assert(insn[31:16] == imem_data);,1
rvfi_reg_check.sv,38,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_reg_check.sv,39,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_reg_check.sv,42,assert(register_shadow == rvfi_rs1_rdata[`RISCV_FORMAL_CHANNEL_IDX*`RISCV_FORMAL_XLEN +: `RISCV_FORMAL_XLEN]);,1
rvfi_reg_check.sv,44,assert(register_shadow == rvfi_rs2_rdata[`RISCV_FORMAL_CHANNEL_IDX*`RISCV_FORMAL_XLEN +: `RISCV_FORMAL_XLEN]);,1
rvfi_bus_imem_fault_check.sv,44,assume (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_imem_fault_check.sv,47,cover (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_imem_fault_check.sv,57,cover (1);,1
rvfi_bus_imem_fault_check.sv,58,assert (rvfi_trap[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_bus_imem_fault_check.sv,59,assert (insn == 0);,1
rvfi_bus_imem_fault_check.sv,61,assert (rvfi_mem_fault[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_bus_imem_fault_check.sv,66,cover (1);,1
rvfi_bus_imem_fault_check.sv,67,assert (rvfi_trap[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_bus_imem_fault_check.sv,68,assert (insn == 0);,1
rvfi_bus_imem_fault_check.sv,70,assert (rvfi_mem_fault[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_causal_io_check.sv,66,assume (rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_causal_io_check.sv,67,assume (performs_io);,1
rvfi_causal_io_check.sv,68,assume (insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_causal_io_check.sv,69,cover (1);,1
rvfi_causal_io_check.sv,70,assert (!found_non_causal);,1
rvfi_causal_check.sv,36,assume(register_index != 0);,1
rvfi_causal_check.sv,37,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_causal_check.sv,39,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_causal_check.sv,40,assert(!found_non_causal);,1
rvfi_unique_check.sv,34,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_unique_check.sv,35,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_unique_check.sv,38,assert(!found_other_insn);,1
rvfi_pc_fwd_check.sv,38,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_pc_fwd_check.sv,39,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_csrc_hpm_check.sv,67,assume (csr_insn_rdata == `RISCV_FORMAL_CSRC_HPMEVENT);,1
rvfi_csrc_hpm_check.sv,69,cover (hpmcounter_rdata > csr_hpmcounter_shadow);,1
rvfi_csrw_check.sv,133,assume (csr_insn_valid);,1
rvfi_csrw_check.sv,134,assume (csr_insn_addr != csr_none);,1
rvfi_csrw_check.sv,148,assert (rvfi.trap);,1
rvfi_csrw_check.sv,149,assert (rvfi.rd_addr == 0);,1
rvfi_csrw_check.sv,150,assert (rvfi.rd_wdata == 0);,1
rvfi_csrw_check.sv,152,assert (!rvfi.trap);,1
rvfi_csrw_check.sv,153,assert (rvfi.rd_addr == rvfi.insn[11:7]);,1
rvfi_csrw_check.sv,157,assert (rvfi.rd_wdata == 0);,1
rvfi_csrw_check.sv,159,assert (csr_insn_rmask == {`RISCV_FORMAL_XLEN{1'b1}});,1
rvfi_csrw_check.sv,160,assert (csr_insn_rdata == rvfi.rd_wdata);,1
rvfi_csrw_check.sv,169,assert (csr_insn_changed_full[31:0] == 0);,1
rvfi_csrw_check.sv,171,assert (csr_insn_changed_full[63:32] == 0);,1
rvfi_csrw_check.sv,176,assert (rvfi.mem_wmask == 0);,1
rvfi_bus_dmem_io_read_check.sv,98,cover (1);,1
rvfi_bus_dmem_io_read_check.sv,99,assert (bus_read_seen);,1
rvfi_insn_check.sv,135,cover(spec_valid);,1
rvfi_insn_check.sv,136,cover(spec_valid && !trap);,1
rvfi_insn_check.sv,137,cover(check && spec_valid);,1
rvfi_insn_check.sv,138,cover(check && spec_valid && !trap);,1
rvfi_insn_check.sv,141,assume(spec_valid);,1
rvfi_insn_check.sv,144,assert(trap);,1
rvfi_insn_check.sv,145,assert(rd_addr == 0);,1
rvfi_insn_check.sv,146,assert(rd_wdata == 0);,1
rvfi_insn_check.sv,147,assert(mem_wmask == 0);,1
rvfi_insn_check.sv,150,assert(mem_rmask == 0);,1
rvfi_insn_check.sv,151,assert(spec_mem_wmask || spec_mem_rmask);,1
rvfi_insn_check.sv,154,assert(mem_fault_wmask == spec_mem_wmask);,1
rvfi_insn_check.sv,164,assert(rs1_rdata == 0);,1
rvfi_insn_check.sv,167,assert(rs2_rdata == 0);,1
rvfi_insn_check.sv,171,assert(spec_rs1_addr == rs1_addr);,1
rvfi_insn_check.sv,174,assert(spec_rs2_addr == rs2_addr);,1
rvfi_insn_check.sv,176,assert(spec_rd_addr == rd_addr);,1
rvfi_insn_check.sv,177,assert(spec_rd_wdata == rd_wdata);,1
rvfi_insn_check.sv,186,assert(mem_wmask[i]);,1
rvfi_insn_check.sv,187,assert(spec_mem_wdata[i*8 +: 8] == mem_wdata[i*8 +: 8]);,1
rvfi_insn_check.sv,189,assert(mem_rmask[i]);,1
rvfi_insn_check.sv,190,assert(mem_rdata[i*8 +: 8] == mem_wdata[i*8 +: 8]);,1
rvfi_insn_check.sv,193,assert(mem_rmask[i]);,1
rvfi_insn_check.sv,198,assert(spec_trap == trap);,1
rvfi_bus_dmem_fault_check.sv,63,assume (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_dmem_fault_check.sv,66,assume (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_dmem_fault_check.sv,72,cover (rvfi_bus_fault[channel_idx]);,1
rvfi_bus_dmem_fault_check.sv,91,cover (1);,1
rvfi_bus_dmem_fault_check.sv,94,assert (!mem_rmask[i]);,1
rvfi_bus_dmem_fault_check.sv,95,assert (!mem_wmask[i]);,1
rvfi_bus_dmem_fault_check.sv,98,cover (mem_fault_rmask[i]);,1
rvfi_bus_dmem_fault_check.sv,99,cover (mem_fault_wmask[i]);,1
rvfi_bus_dmem_fault_check.sv,101,assert (rvfi_mem_fault[channel_idx]);,1
rvfi_bus_dmem_io_order_check.sv,105,cover (1);,1
rvfi_bus_dmem_io_order_check.sv,145,cover (1);,1
rvfi_bus_dmem_io_order_check.sv,146,assert (bus_seq_seen);,1
rvfi_bus_imem_check.sv,51,assume (imem_data[j*8 +: 8] == bus_rdata[i*8 +: 8]);,1
rvfi_bus_imem_check.sv,55,assume (!rvfi_bus_fault[channel_idx]);,1
rvfi_bus_imem_check.sv,67,cover (1);,1
rvfi_bus_imem_check.sv,68,assert (insn[15:0] == imem_data);,1
rvfi_bus_imem_check.sv,72,cover (1);,1
rvfi_bus_imem_check.sv,73,assert (insn[31:16] == imem_data);,1
rvfi_csr_ill_check.sv,29,assume (csr_insn_valid);,1
rvfi_csr_ill_check.sv,30,assume (csr_insn_addr == `RISCV_FORMAL_ILL_CSR_ADDR);,1
rvfi_csr_ill_check.sv,54,assert (rvfi.trap);,1
rvfi_csrc_zero_check.sv,73,assert(csr_insn_rdata == 0);,1
rvfi_csrc_zero_check.sv,74,assume(wdata_shadow != 0);,1
rvfi_csrc_zero_check.sv,79,assume(csr_mode == 0 || csr_mode == 1);,1
rvfi_csrc_const_check.sv,72,assert(csr_insn_rdata == `RISCV_FORMAL_CSRC_CONSTVAL);,1
rvfi_csrc_any_check.sv,84,assert(rsval_shadow == csr_insn_rdata || csr_insn_rdata == wdata_shadow);,1
rvfi_csrc_any_check.sv,85,assert(rsval_shadow == wdata_shadow);,1
rvfi_pc_bwd_check.sv,38,assume(rvfi_valid[`RISCV_FORMAL_CHANNEL_IDX]);,1
rvfi_pc_bwd_check.sv,39,assume(insn_order == rvfi_order[64*`RISCV_FORMAL_CHANNEL_IDX +: 64]);,1
rvfi_bus_dmem_io_read_fault_check.sv,88,cover (1);,1
rvfi_bus_dmem_io_read_fault_check.sv,89,assert (bus_read_seen);,1
rvfi_hang_check.sv,31,assert(okay);,1
rvfi_hang_check.sv,36,assume(!rvfi_halt[channel_idx]);,1
rvfi_ill_check.sv,46,cover(!reset && check && valid && insn == 0);,1
rvfi_ill_check.sv,48,assume(valid);,1
rvfi_ill_check.sv,49,assume(insn == 0);,1
rvfi_ill_check.sv,50,assert(trap);,1
rvfi_ill_check.sv,51,assert(rd_addr == 0);,1
rvfi_ill_check.sv,52,assert(rd_wdata == 0);,1
rvfi_ill_check.sv,53,assert(mem_wmask == 0);,1
model_100gbe.sv,89,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,772,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,807,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1396,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1414,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1429,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1438,assert (resp==OKAY);,1
delta_yuv_decoder.sv,115,assert (verify_rgb == rgb_out);,1
uc_68hc05.sv,444,assert (addr[15:13] == 0);,1
audiofifo.sv,33,assert (out.write); // strobe without a write? read_index_d = read_index_q + 1;,2
cdic.sv,314,assert (read_cdda);,1
cdic.sv,668,assert (sector_word_index == kWordsPerSector);,1
cdic.sv,791,assert (0);,1
audiodecoder.sv,190,assert (out.write);,1
audiodecoder.sv,256,assert (mem_data_byte != 0); // plausible? if (mem_data_byte == 8'hff) begin // special coding to stop the decoder? decoder_state <= IDLE;,5
audiodecoder.sv,270,assert (mem_data_byte != 0); // plausible? end end end WAIT_AUDIO_TICKS: begin if (tick_wait_cnt == 0) decoder_state <= EVALHEADER;,7
ica_dca_ctrl.sv,121,assert (ica_pointer[1:0] == 0);,1
ica_dca_ctrl.sv,130,assert (dca_pointer[1:0] == 0);,1
ica_dca_ctrl.sv,206,assert (dca_misaligned); // check for the simulation end if (bus_ack) begin if (dca_burst_cnt == 0 || !dca_active) begin state <= IDLE;,6
mcd212.sv,544,assert (cpu_lds && cpu_uds);,1
mcd212.sv,549,assert (cpu_lds && cpu_uds);,1
mcd212.sv,554,assert (cpu_lds && cpu_uds);,1
mcd212.sv,1008,assert (transparency_control_register.ta[2:0] != 3'b010); // Transparency Bit? assert (transparency_control_register.ta[2:0] != 3'b111); // N.U. case (transparency_control_register.ta[2:0]) // Always (Plane Disabled) 3'b000: plane_a_transparent = 1;,5
mcd212.sv,1059,assert (transparency_control_register.tb[2:0] != 3'b010); // Transparency Bit? assert (transparency_control_register.tb[2:0] != 3'b111); // N.U. case (transparency_control_register.tb[2:0]) // Always (Plane Disabled) 3'b000: plane_b_transparent = 1;,5
mcd212.sv,1205,assert (ch0_register_data[3:0] != 4'b0010);,1
mcd212.sv,1206,assert (ch0_register_data[11:8] != 4'b0010);,1
altera_tse_reset_sequencer.sv,334,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,220,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,226,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
mvm_uart_system_tb.sv,49,assert (W_BUS_KX % BITS_PER_WORD == 0);,1
mvm_uart_system_tb.sv,50,assert (W_BUS_Y % BITS_PER_WORD == 0);,1
main.sv,83,assert property ( prop );,1
main.sv,62,assert property ( prop );,1
main.sv,45,assert property ( prop );,1
main.sv,146,assert property ( prop );,1
main.sv,78,assert property ( prop );,1
main.sv,94,assert property ( prop );,1
main.sv,61,assert property ( prop );,1
main.sv,58,assert property ( prop );,1
main.sv,79,assert property ( prop );,1
main.sv,199,assert property (PC[0]==0 && NPC[0]==0);,1
main.sv,202,assert property (Registers[0]==0);,1
main.sv,205,assert property (State[2]==0 || State[1:0]==0);,1
main.sv,212,assert property ( prop );,1
main.sv,135,assert property ( prop );,1
main.sv,127,assert property ( prop );,1
main.sv,117,assert property ( prop );,1
main.sv,139,assert property ( prop );,1
main.sv,118,assert property ( prop );,1
main.sv,319,assert property ( prop );,1
main.sv,75,assert property ( prop );,1
main.sv,64,assert property ( prop );,1
main.sv,173,assert property ( prop );,1
main.sv,119,assert property ( prop );,1
main.sv,116,assert property ( prop );,1
CHECKER_iclab065.sv,173,assert property(SPEC_1_rst) else print_Assertion_violate_msg("1");,1
CHECKER_iclab065.sv,183,assert property(SPEC_1_rst) else print_Assertion_violate_msg("1");,1
CHECKER_iclab065.sv,187,assert property(SPEC_1_rst) else print_Assertion_violate_msg("1");,1
PLIC_test.sv,57,assert(uut.interruptSource1Priority == 32'h00);,1
PLIC_test.sv,58,assert(uut.interruptSource2Priority == 32'h00);,1
PLIC_test.sv,59,assert(uut.interruptEnableContext0 == 32'h00);,1
PLIC_test.sv,60,assert(uut.interruptPriorityThresholdContext0 == 32'h00);,1
PLIC_test.sv,61,assert(uut.interruptClaimCompleteContext0 == 32'h00);,1
PLIC_test.sv,68,assert(uut.interruptSource1Priority == 32'hA5A5A5A5);,1
PLIC_test.sv,74,assert(uut.interruptSource2Priority == 32'h5A5A5A5A);,1
PLIC_test.sv,79,assert(memReadData == 32'hA5A5A5A5);,1
PLIC_test.sv,83,assert(memReadData == 32'h5A5A5A5A);,1
PLIC_test.sv,92,assert(uut.EIP == 1);,1
PLIC_test.sv,93,assert(uut.interruptPending[1] == 1);,1
PLIC_test.sv,101,assert(uut.EIP == 1);,1
PLIC_test.sv,102,assert(uut.interruptPending[2] == 1);,1
PLIC_test.sv,107,assert(memReadData == 32'h2);,1
PLIC_test.sv,111,assert(interruptComplete2 == 1);,1
ibex_icache_core_if.sv,136,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,162,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,167,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,188,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,363,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,479,assert (addr_lo < address);,1
tb_jtag_dmi.sv,208,assert(idcode == i_jtag_sime2.IDCODEval_sig);,1
tb_jtag_dmi.sv,210,assert(idcode == IDCode);,1
tb_jtag_dmi.sv,216,assert(dtmcs.version == 1);,1
tb_jtag_dmi.sv,217,assert(dtmcs.abits == 7);,1
tb_jtag_dmi.sv,223,assert(dtmcs.version == 1);,1
tb_jtag_dmi.sv,224,assert(dtmcs.abits == 7);,1
tb_jtag_dmi.sv,293,assert(rsp_mon.data == rsp);,1
tb_jtag_dmi.sv,295,assert(req.data == req_mon.data);,1
ibex_icache_core_if.sv,136,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,162,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,167,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,188,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,363,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,479,assert (addr_lo < address);,1
spid_status_tb.sv,123,assert(data[1] == 1'b 1);,1
spid_status_tb.sv,134,assert(data[1] == 1'b 0);,1
spid_status_tb.sv,149,assert(data[1] == 1'b 0);,1
spid_status_tb.sv,155,assert(data[1] == 1'b 1);,1
spid_common.sv,607,assert(mode == IoSingle);,1
spid_common.sv,751,"assert(opcode inside {8'h 05, 8'h 35, 8'h 15});",1
spid_common.sv,813,assert(opcode == 8'h 9F);,1
spid_common.sv,1049,assert(m2l.rerror == '0);,1
spid_upload_tb.sv,369,assert(payload_start_idx == '0);,1
otbn_core_model.sv,68,assert(model_handle != null);,1
ibex_icache_core_if.sv,136,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,162,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,167,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,188,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,363,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,479,assert (addr_lo < address);,1
struct_dynamic_range.sv,50,assert(data_shift_mask1 === 8'h7e);,1
struct_dynamic_range.sv,51,assert(data_shift_mask2 === 8'hff);,1
struct_dynamic_range.sv,52,assert(data_shift_mask3 === 8'hxx);,1
struct_dynamic_range.sv,63,assert(data_case1 === 8'h7e);,1
struct_dynamic_range.sv,64,assert(data_case2 === 8'hff);,1
struct_dynamic_range.sv,65,assert(data_case3 === 8'hxx);,1
static_cast_simple.sv,36,assert(c == 8'b0000_0000);,1
static_cast_simple.sv,37,assert(d == 8'b0000_0001);,1
static_cast_simple.sv,42,assert(s0 == 8'b1111_1111);,1
static_cast_simple.sv,43,assert(s1 == 8'b1111_1111);,1
static_cast_simple.sv,44,assert(s2 == 8'b0000_1111);,1
static_cast_simple.sv,45,assert(u0 == 8'b1111_1111);,1
static_cast_simple.sv,46,assert(u1 == 8'b0000_1111);,1
static_cast_simple.sv,47,assert(u2 == 8'b1111_1111);,1
static_cast_simple.sv,48,assert(u3 == 8'b1111_1111);,1
static_cast_simple.sv,49,assert(u4 == 8'b0000_1111);,1
static_cast_simple.sv,50,assert(u5 == 8'b1111_1111);,1
static_cast_simple.sv,51,assert(u6 == 8'b0000_1111);,1
static_cast_simple.sv,53,assert(n0 == 9'b1_1111_1111);,1
static_cast_simple.sv,54,assert(n1 == 9'b0_0000_1111);,1
static_cast_simple.sv,55,assert(n2 == 9'b1_1111_1111);,1
static_cast_simple.sv,56,assert(n3 == 9'b0_0000_1111);,1
static_cast_simple.sv,57,assert(n4 == 9'b0_1111_1111);,1
static_cast_simple.sv,58,assert(n5 == 9'b0_0000_1111);,1
static_cast_simple.sv,59,assert(n6 == 9'b0_1111_1111);,1
static_cast_simple.sv,60,assert(n7 == 9'b0_0000_1111);,1
static_cast_simple.sv,61,assert(n8 == 9'b1_1111_1111);,1
static_cast_simple.sv,62,assert(n9 == 9'b0_0000_1111);,1
typedef_initial_and_assign.sv,11,assert property (var_1 == 0);,1
typedef_initial_and_assign.sv,15,assert property (var_2 == 0);,1
typedef_initial_and_assign.sv,19,assert property (var_3 == 0);,1
typedef_initial_and_assign.sv,23,assert property (var_4 == 0);,1
typedef_initial_and_assign.sv,27,assert property (var_5 == 0);,1
typedef_initial_and_assign.sv,30,assert property (var_6 == 0);,1
typedef_initial_and_assign.sv,34,assert property (var_7 == 0);,1
typedef_initial_and_assign.sv,37,assert property (var_8 == 0);,1
typedef_initial_and_assign.sv,41,assert property (var_9 == 0);,1
typedef_initial_and_assign.sv,44,assert property (var_10 == 0);,1
typedef_initial_and_assign.sv,48,assert property (var_11 == 0);,1
typedef_initial_and_assign.sv,52,assert property (wire_3 == 0);,1
typedef_initial_and_assign.sv,56,assert property (wire_2 == 0);,1
typedef_initial_and_assign.sv,59,assert property (wire_3 == 0);,1
typedef_initial_and_assign.sv,63,assert property (wire_4 == 0);,1
enum_simple.sv,27,assert(1'b0); //should be unreachable //state if (state == ts0) state <= ts1;,5
enum_simple.sv,37,assert(1'b0); //should be unreachable end end always @(*) begin assert(state != 2'h3);,6
enum_simple.sv,43,assert(s0 == '0);,1
enum_simple.sv,44,assert(ts0 == '0);,1
enum_simple.sv,45,assert(enum_const == ts1);,1
union_simple.sv,16,assert(w.y.d == 8'h42);,1
union_simple.sv,64,assert(ir1.u.opcode == 'h37);,1
union_simple.sv,65,assert(ir1.r.opcode == 'h37);,1
union_simple.sv,66,assert(ir1.u.rd == 'd29);,1
union_simple.sv,67,assert(ir1.r.rd == 'd29);,1
union_simple.sv,68,assert(ir1.u.imm == 'hAA01);,1
union_simple.sv,69,assert(s1.ir.u.opcode == 'h37);,1
union_simple.sv,70,assert(s1.ir.r.opcode == 'h37);,1
union_simple.sv,71,assert(s1.ir.u.rd == 'd29);,1
union_simple.sv,72,assert(s1.ir.r.rd == 'd29);,1
union_simple.sv,73,assert(s1.ir.u.imm == 'hAA01);,1
union_simple.sv,74,assert(s1.state == 4'b1111);,1
union_simple.sv,85,assert(u.byte4.d == 'h42);,1
typedef_struct.sv,36,assert(s.a == 1'b1);,1
typedef_struct.sv,37,assert(s.b == 8'hFF);,1
typedef_struct.sv,38,assert(s.t == 8'h55);,1
typedef_struct.sv,39,assert(s1.t == 8'h55);,1
typedef_struct.sv,40,assert(ps.a == 8'hAA);,1
typedef_struct.sv,41,assert(ps.b == 8'h55);,1
typedef_struct.sv,42,assert(s.ps.a == 8'hAA);,1
typedef_struct.sv,43,assert(s.ps.b == 8'h55);,1
typedef_struct_port.sv,102,assert(8'hAA == ps.a);,1
typedef_struct_port.sv,103,assert(8'h55 == ps.b);,1
typedef_struct_port.sv,104,assert(8'hBB == body.a);,1
typedef_struct_port.sv,105,assert(8'h66 == body.b);,1
typedef_struct_port.sv,106,assert(32'hAAAAAAAA == l_s);,1
typedef_struct_port.sv,107,assert(16'hBBBB == sl_s);,1
typedef_struct_port.sv,108,assert(16'hCCCC == lsl_s);,1
typedef_struct_port.sv,109,assert(1'b1 == j);,1
struct_access.sv,30,assert(P == 4'b1100);,1
struct_access.sv,31,assert(f == 2'b11);,1
struct_access.sv,32,assert(g == 2'b00);,1
struct_access.sv,33,assert(h == 2'b11);,1
struct_access.sv,34,assert(i == 1'b1);,1
struct_access.sv,35,assert(j == 1'b1);,1
struct_access.sv,36,assert(x == 2'b00);,1
struct_access.sv,37,assert(y == 2'b00);,1
struct_access.sv,38,assert(x.c == 2'b00);,1
struct_access.sv,39,assert(y.b == 1'b0);,1
struct_access.sv,40,assert(n == 1'b1);,1
struct_access.sv,41,assert(z == 1'b0);,1
const_arg_loop.sv,83,assert(a == 2);,1
const_arg_loop.sv,84,assert(A == 3);,1
const_arg_loop.sv,85,assert(x1 == 16);,1
const_arg_loop.sv,86,assert(x1b == 16);,1
const_arg_loop.sv,87,assert(x2 == 4);,1
const_arg_loop.sv,88,assert(x3 == 16);,1
const_arg_loop.sv,89,assert(x4 == a << 1);,1
const_arg_loop.sv,90,assert(x5 == 64);,1
const_func.sv,66,assert(a1 == 0);,1
const_func.sv,67,assert(a2 == 0);,1
const_func.sv,68,assert(a3 == "BAR");,1
const_func.sv,69,assert(a4 == 0);,1
const_func.sv,70,assert(b1 == "FOO");,1
const_func.sv,71,assert(b2 == "FOO");,1
const_func.sv,72,assert(b3 == 0);,1
const_func.sv,73,assert(b4 == "HI");,1
const_func.sv,74,assert(c1 == 1);,1
const_func.sv,75,assert(c2 == 1);,1
const_func.sv,76,assert(c3 == 0);,1
const_func.sv,77,assert(c4 == 0);,1
const_func.sv,78,assert(d1 == 0);,1
const_func.sv,79,assert(d2 == 0);,1
const_func.sv,80,assert(d3 == 1);,1
const_func.sv,81,assert(d4 == 1);,1
const_func.sv,83,assert(Y == 3);,1
const_func.sv,84,assert(Z == ~3);,1
countbits.sv,33,assert (one == 1);,1
countbits.sv,34,assert (two == 3);,1
countbits.sv,35,assert (four == 3);,1
inst_list.sv,21,assert(w0 == u0 ^ v0);,1
inst_list.sv,22,assert(w1 == u1 ^ v1);,1
basic.sv,18,assert(w == u ^ v);,1
hier.sv,16,assert(w == u ^ v);,1
param.sv,23,assert (w0 == '0);,1
param.sv,24,assert (w1 == u1 ^ v1);,1
toplevel.sv,16,assert(w == u ^ v);,1
cell_list.sv,23,assert(w0 == u0 ^ v0);,1
cell_list.sv,24,assert(w1 == u1 ^ v1);,1
int_types.sv,17,"assert (x == y); \ assert (a == b); \ assert (a == c); \ assert ((a == -1) == is_signed); \ end \ end `define TEST_INTEGER_ATOM(typ, width) \ `TEST(typ, width, 1) \ `TEST(typ signed, width, 1) \ `TEST(typ unsigned, width, 0) `define TEST_INTEGER_VECTOR(typ) \ `TEST(typ, 1, 0) \ `TEST(typ signed, 1, 1) \ `TEST(typ unsigned, 1, 0) \ `TEST(typ [1:0], 2, 0) \ `TEST(typ signed [1:0], 2, 1) \ `TEST(typ unsigned [1:0], 2, 0) module top;",21
func_upto.sv,24,assert (C_CONST == C_WIRE);,1
func_upto.sv,25,assert (C_CONST == C_FUNC);,1
struct_access.sv,83,assert (fail === 0);,1
net_types.sv,19,assert (wire_logic_0 == 0);,1
net_types.sv,20,assert (wire_logic_1 == 1);,1
net_types.sv,21,assert (wand_logic_0 == 0);,1
net_types.sv,22,assert (wand_logic_1 == 1);,1
net_types.sv,23,assert (wor_logic_0 == 0);,1
net_types.sv,24,assert (wor_logic_1 == 1);,1
net_types.sv,26,assert (wire_integer == 4'b1001);,1
net_types.sv,27,assert (wand_integer == 4'b1000);,1
net_types.sv,28,assert (wor_integer == 4'b1011);,1
net_types.sv,30,assert (wire_typename == 4'b1001);,1
net_types.sv,31,assert (wand_typename == 4'b1000);,1
net_types.sv,32,assert (wor_typename == 4'b1011);,1
unbased_unsized.sv,27,assert (o01 === {64 {1'b0}});,1
unbased_unsized.sv,28,assert (o02 === {64 {1'b1}});,1
unbased_unsized.sv,29,assert (o03 === {64 {1'bx}});,1
unbased_unsized.sv,30,assert (o04 === {64 {1'bz}});,1
unbased_unsized.sv,31,"assert (o05 === {61'b0, 3'b000});",1
unbased_unsized.sv,32,"assert (o06 === {61'b0, 3'b111});",1
unbased_unsized.sv,33,"assert (o07 === {61'b0, 3'bxxx});",1
unbased_unsized.sv,34,"assert (o08 === {61'b0, 3'bzzz});",1
unbased_unsized.sv,35,assert (o09 === {64 {1'b0}});,1
unbased_unsized.sv,36,assert (o10 === {64 {1'b1}});,1
unbased_unsized.sv,37,assert (o11 === {64 {1'bx}});,1
unbased_unsized.sv,38,assert (o12 === {64 {1'bz}});,1
prefix.sv,12,assert (1 == a);,1
prefix.sv,13,assert (1 == blk1.a);,1
prefix.sv,14,assert (1 == top.blk1.a);,1
prefix.sv,15,assert (i == b);,1
prefix.sv,16,assert (i == blk2[i].b);,1
prefix.sv,17,assert (i == blk1.blk2[i].b);,1
prefix.sv,18,assert (i == top.blk1.blk2[i].b);,1
prefix.sv,19,assert (i == blk2[x].b);,1
prefix.sv,20,assert (i == blk1.blk2[x].b);,1
prefix.sv,21,assert (i == top.blk1.blk2[x].b);,1
prefix.sv,22,assert (j == c);,1
prefix.sv,23,assert (j == blk3[j].c);,1
prefix.sv,24,assert (j == blk2[x].blk3[j].c);,1
prefix.sv,25,assert (j == blk1.blk2[x].blk3[j].c);,1
prefix.sv,26,assert (j == top.blk1.blk2[x].blk3[j].c);,1
prefix.sv,27,assert (j == c);,1
prefix.sv,28,assert (j == blk3[y].c);,1
prefix.sv,29,assert (j == blk2[x].blk3[y].c);,1
prefix.sv,30,assert (j == blk1.blk2[x].blk3[y].c);,1
prefix.sv,31,assert (j == top.blk1.blk2[x].blk3[y].c);,1
prefix.sv,32,assert (j == top.blk1.blk2[x].blk3[y].c[0]);,1
prefix.sv,33,assert (0 == top.blk1.blk2[x].blk3[y].c[1]);,1
prefix.sv,34,assert (0 == top.blk1.blk2[x].blk3[y].c[j]);,1
prefix.sv,38,assert (1 == a);,1
prefix.sv,39,assert (1 == blk1.a);,1
prefix.sv,40,assert (1 == top.blk1.a);,1
prefix.sv,41,assert (i == b);,1
prefix.sv,42,assert (i == blk2[i].b);,1
prefix.sv,43,assert (i == blk1.blk2[i].b);,1
prefix.sv,44,assert (i == top.blk1.blk2[i].b);,1
prefix.sv,45,assert (0 == blk3[0].c);,1
prefix.sv,46,assert (0 == blk2[i].blk3[0].c);,1
prefix.sv,47,assert (0 == blk1.blk2[i].blk3[0].c);,1
prefix.sv,48,assert (0 == top.blk1.blk2[i].blk3[0].c);,1
prefix.sv,49,assert (1 == blk3[1].c);,1
prefix.sv,50,assert (1 == blk2[i].blk3[1].c);,1
prefix.sv,51,assert (1 == blk1.blk2[i].blk3[1].c);,1
prefix.sv,52,assert (1 == top.blk1.blk2[i].blk3[1].c);,1
prefix.sv,56,assert (1 == a);,1
prefix.sv,57,assert (1 == blk1.a);,1
prefix.sv,58,assert (1 == top.blk1.a);,1
prefix.sv,59,assert (0 == blk2[0].b);,1
prefix.sv,60,assert (0 == blk1.blk2[0].b);,1
prefix.sv,61,assert (0 == top.blk1.blk2[0].b);,1
prefix.sv,62,assert (1 == blk2[1].b);,1
prefix.sv,63,assert (1 == blk1.blk2[1].b);,1
prefix.sv,64,assert (1 == top.blk1.blk2[1].b);,1
prefix.sv,65,assert (0 == blk2[0].blk3[0].c);,1
prefix.sv,66,assert (0 == blk1.blk2[0].blk3[0].c);,1
prefix.sv,67,assert (0 == top.blk1.blk2[0].blk3[0].c);,1
prefix.sv,68,assert (1 == blk2[0].blk3[1].c);,1
prefix.sv,69,assert (1 == blk1.blk2[0].blk3[1].c);,1
prefix.sv,70,assert (1 == top.blk1.blk2[0].blk3[1].c);,1
prefix.sv,71,assert (0 == blk2[1].blk3[0].c);,1
prefix.sv,72,assert (0 == blk1.blk2[1].blk3[0].c);,1
prefix.sv,73,assert (0 == top.blk1.blk2[1].blk3[0].c);,1
prefix.sv,74,assert (1 == blk2[1].blk3[1].c);,1
prefix.sv,75,assert (1 == blk1.blk2[1].blk3[1].c);,1
prefix.sv,76,assert (1 == top.blk1.blk2[1].blk3[1].c);,1
prefix.sv,80,assert (1 == blk1.a);,1
prefix.sv,81,assert (1 == top.blk1.a);,1
prefix.sv,82,assert (0 == blk1.blk2[0].b);,1
prefix.sv,83,assert (0 == top.blk1.blk2[0].b);,1
prefix.sv,84,assert (1 == blk1.blk2[1].b);,1
prefix.sv,85,assert (1 == top.blk1.blk2[1].b);,1
prefix.sv,86,assert (0 == blk1.blk2[0].blk3[0].c);,1
prefix.sv,87,assert (0 == top.blk1.blk2[0].blk3[0].c);,1
prefix.sv,88,assert (1 == blk1.blk2[0].blk3[1].c);,1
prefix.sv,89,assert (1 == top.blk1.blk2[0].blk3[1].c);,1
prefix.sv,90,assert (0 == blk1.blk2[1].blk3[0].c);,1
prefix.sv,91,assert (0 == top.blk1.blk2[1].blk3[0].c);,1
prefix.sv,92,assert (1 == blk1.blk2[1].blk3[1].c);,1
prefix.sv,93,assert (1 == top.blk1.blk2[1].blk3[1].c);,1
func_tern_hint.sv,27,assert(A == 31'h3F_FFFFFF);,1
func_tern_hint.sv,28,assert(B == 31'h0F_FFFFFF);,1
func_tern_hint.sv,29,assert(C == 31'h03_FFFFFF);,1
func_tern_hint.sv,30,assert(D == 31'h00_FFFFFF);,1
func_tern_hint.sv,31,assert(X == 0);,1
func_tern_hint.sv,32,assert(Y == 0);,1
func_tern_hint.sv,40,assert(x);,1
package_task_func.sv,26,assert property (a == 2);,1
package_task_func.sv,27,assert property (b == 9);,1
package_task_func.sv,28,assert property (c == 8);,1
package_task_func.sv,29,assert property (d == 16);,1
param_no_default.sv,32,assert (a1 == 0);,1
param_no_default.sv,33,assert (b1 == 1);,1
param_no_default.sv,34,assert (c1 == 2);,1
param_no_default.sv,35,assert (d1 == 3);,1
param_no_default.sv,37,assert (a2 == 1);,1
param_no_default.sv,38,assert (b2 == 1);,1
param_no_default.sv,39,assert (c2 == 4);,1
param_no_default.sv,40,assert (d3 == 3);,1
param_no_default.sv,42,assert (a3 == 1);,1
param_no_default.sv,43,assert (b3 == 0);,1
param_no_default.sv,44,assert (c3 == 5);,1
param_no_default.sv,45,assert (d3 == 3);,1
param_no_default.sv,47,assert (a4 == 1);,1
param_no_default.sv,48,assert (b4 == 0);,1
param_no_default.sv,49,assert (c4 == 9);,1
param_no_default.sv,50,assert (d4 == 10);,1
unbased_unsized_shift.sv,21,assert (s0c === 64'h0000_0000_0000_0000);,1
unbased_unsized_shift.sv,22,assert (s1c === 64'hFFFF_FFFF_FFFF_FF00);,1
unbased_unsized_shift.sv,23,assert (sxc === 64'hxxxx_xxxx_xxxx_xx00);,1
unbased_unsized_shift.sv,24,assert (s0d === 64'h0000_0000_0000_0000);,1
unbased_unsized_shift.sv,25,assert (s1d === 64'hFFFF_FFFF_FFFF_FF00);,1
unbased_unsized_shift.sv,26,assert (sxd === 64'hxxxx_xxxx_xxxx_xx00);,1
counter.sv,19,assume property (down |-> !up);,1
example.sv,15,assume (cnt != 10);,1
example.sv,16,assert (cnt != 15);,1
top.sv,34,assert property(stable);,1
top.sv,38,assert property(stable);,1
top.sv,40,assert property(addr);,1
top.sv,44,assert property(addr);,1
matmul_checker.sv,8,cover property(valid_address);,1
matmul_checker.sv,14,cover property(valid_address);,1
assertions.sv,38,"assert property(START_ENTHDR_sec) $display(""%t START_ENTHDR_sec PASSED "",$time); else $display(""%t START_ENTHDR_sec FAILED "",$time);",3
assertions.sv,42,"assert property(START_ENTHDR_sec) $display(""%t START_ENTHDR_sec PASSED "",$time); else $display(""%t START_ENTHDR_sec FAILED "",$time);",3
assertions.sv,49,"assert property(START_ENTHDR_sec) $display(""%t START_ENTHDR_sec PASSED "",$time); else $display(""%t START_ENTHDR_sec FAILED "",$time);",3
assertions.sv,625,"assert property(Broadcast_ENEC_DISEC_TOC_0) $display(""%t Broadcast_ENEC_DISEC_TOC_0 PASSED "",$time); else $display(""%t Broadcast_ENEC_DISEC_TOC_0 FAILED "",$time);",3
I3C_TOP_TB.sv,607,"assert property(EXIT_and_stop_pattern) $display(""%t EXIT_and_stop_pattern SUCCEEDED "",$time); else $display(""%t EXIT_and_stop_pattern FAILED "",$time);",3
I3C_TOP_TB.sv,1304,"assert property(START_ENTHDR_sec) $display(""%t START_ENTHDR_sec PASSED "",$time); else $display(""%t START_ENTHDR_sec FAILED "",$time);",3
I3C_TOP_TB.sv,1308,"assert property(START_ENTHDR_sec) $display(""%t START_ENTHDR_sec PASSED "",$time); else $display(""%t START_ENTHDR_sec FAILED "",$time);",3
I3C_TOP_TB.sv,1315,"assert property(START_ENTHDR_sec) $display(""%t START_ENTHDR_sec PASSED "",$time); else $display(""%t START_ENTHDR_sec FAILED "",$time);",3
I3C_TOP_TB.sv,625,"assert property(EXIT_and_stop_pattern) $display(""%t EXIT_and_stop_pattern SUCCEEDED "",$time); else $display(""%t EXIT_and_stop_pattern FAILED "",$time);",3
I3C_TOP_TB.sv,704,"assert property(ENTHDR_sec) $display(""%t ENTHDR_sec PASSED "",$time); else $display(""%t ENTHDR_sec FAILED "",$time);",3
I3C_TOP_TB.sv,708,"assert property(ENTHDR_sec) $display(""%t ENTHDR_sec PASSED "",$time); else $display(""%t ENTHDR_sec FAILED "",$time);",3
I3C_TOP_TB.sv,715,"assert property(ENTHDR_sec) $display(""%t ENTHDR_sec PASSED "",$time); else $display(""%t ENTHDR_sec FAILED "",$time);",3
I3C_TOP_TB.sv,539,"assert property(EXIT_and_stop_pattern) $display(""%t EXIT_and_stop_pattern SUCCEEDED "",$time); else $display(""%t EXIT_and_stop_pattern FAILED "",$time);",3
I3C_TOP_TB.sv,1236,"assert property(START_ENTHDR_sec) $display(""%t START_ENTHDR_sec PASSED "",$time); else $display(""%t START_ENTHDR_sec FAILED "",$time);",3
I3C_TOP_TB.sv,1240,"assert property(START_ENTHDR_sec) $display(""%t START_ENTHDR_sec PASSED "",$time); else $display(""%t START_ENTHDR_sec FAILED "",$time);",3
I3C_TOP_TB.sv,1247,"assert property(START_ENTHDR_sec) $display(""%t START_ENTHDR_sec PASSED "",$time); else $display(""%t START_ENTHDR_sec FAILED "",$time);",3
CCC_Handler_tb_final.sv,3842,cover property(Broadcast_ENEC_DISEC_TOC_0);,1
CCC_Handler_tb_final.sv,3846,cover property(Broadcast_ENEC_DISEC_TOC_1);,1
CCC_Handler_tb_final.sv,3850,cover property(Broadcast_SETMWL_SETMRL_TOC_0);,1
CCC_Handler_tb_final.sv,3854,cover property(Broadcast_SETMWL_SETMRL_TOC_1);,1
CCC_Handler_tb_final.sv,3858,cover property(Broadcast_Dummy_TOC_0);,1
CCC_Handler_tb_final.sv,3862,cover property(Broadcast_Dummy_TOC_1);,1
CCC_Handler_tb_final.sv,3866,cover property(Broadcast_ENEC_DISEC_SETMWL_SETMRL_TOC_0_track);,1
CCC_Handler_tb_final.sv,3870,cover property(Broadcast_ENEC_DISEC_SETMWL_SETMRL_TOC_1_track);,1
CCC_Handler_tb_final.sv,3874,cover property(Broadcast_Dummy_TOC_0_track);,1
CCC_Handler_tb_final.sv,3878,cover property(Broadcast_Dummy_TOC_1_track);,1
CCC_Handler_tb_final.sv,4169,cover property(Direct_ENEC_DISEC_TOC_0);,1
CCC_Handler_tb_final.sv,4174,cover property(Direct_ENEC_DISEC_TOC_1);,1
CCC_Handler_tb_final.sv,4179,cover property(Direct_SETMWL_SETMRL_TOC_0);,1
CCC_Handler_tb_final.sv,4184,cover property(Direct_SETMWL_SETMRL_TOC_1);,1
CCC_Handler_tb_final.sv,4188,cover property(Direct_ENEC_DISEC_SETMWL_SETMRL_TOC_0_track);,1
CCC_Handler_tb_final.sv,4192,cover property(Direct_ENEC_DISEC_SETMWL_SETMRL_TOC_1_track);,1
CCC_Handler_tb_final.sv,4324,cover property(Direct_GETMWL_GETMRL_GETSTATUS_TOC_0);,1
CCC_Handler_tb_final.sv,4332,cover property(Direct_GETMWL_GETMRL_GETSTATUS_TOC_0);,1
CCC_Handler_tb_final.sv,4342,cover property(Direct_GETMWL_GETMRL_GETSTATUS_TOC_0);,1
CCC_Handler_tb_final.sv,4347,cover property(Direct_GETMWL_GETMRL_GETSTATUS_TOC_1);,1
CCC_Handler_tb_final.sv,4356,cover property(Direct_GETBCR_GETDCR_TOC_0);,1
CCC_Handler_tb_final.sv,4364,cover property(Direct_GETBCR_GETDCR_TOC_0);,1
CCC_Handler_tb_final.sv,4375,cover property(Direct_GETBCR_GETDCR_TOC_0);,1
CCC_Handler_tb_final.sv,4380,cover property(Direct_GETBCR_GETDCR_TOC_1);,1
CCC_Handler_tb_final.sv,4432,cover property(Direct_GETDCR_GETBCR_GETSTATUS_GETMWL_GETMRL_TOC_0_track);,1
CCC_Handler_tb_final.sv,4483,cover property(Direct_GETDCR_GETBCR_GETSTATUS_GETMWL_GETMRL_TOC_1_track);,1
CCC_Handler_tb_final.sv,4536,cover property(Direct_GETDCR_GETBCR_GETSTATUS_GETMWL_GETMRL_TOC_0_rx_track);,1
CCC_Handler_tb_final.sv,4587,cover property(Direct_GETDCR_GETBCR_GETSTATUS_GETMWL_GETMRL_TOC_1_rx_track) ;,1
SDR_HDR_TB_FINAL.sv,520,"assert property(p1) $display(""ENTHDR DONE FLAG IS HIGH %t"",$time); else $error (""error in enthdr flag to engine"");",1
SDR_HDR_TB_FINAL.sv,525,cover property(p1);,1
SDR_HDR_TB_FINAL.sv,532,"assert property(p2);/* $display(""HDR ENGINE IS ENABLED %t"",$time); else $error (""HDR ENGINE IS NOT ENABLED %t"",$time);*/ cover property(p2);",2
SDR_HDR_TB_FINAL.sv,536,"assert property(p2);/* $display(""HDR ENGINE IS ENABLED %t"",$time); else $error (""HDR ENGINE IS NOT ENABLED %t"",$time);*/ cover property(p2);",2
SDR_HDR_TB_FINAL.sv,544,"assert property(p3); /* $display(""Flags1 are correct %t"",$time); else $error(""Error in flags1 %t"",$time); */ cover property(p3);",2
SDR_HDR_TB_FINAL.sv,549,"assert property(p3); /* $display(""Flags1 are correct %t"",$time); else $error(""Error in flags1 %t"",$time); */ cover property(p3);",2
SDR_HDR_TB_FINAL.sv,557,"assert property(p4); /*$display(""Flags1 are correct %t"",$time); else $error(""Error in flags1 %t"",$time);*/ cover property(p4);",2
SDR_HDR_TB_FINAL.sv,562,"assert property(p4); /*$display(""Flags1 are correct %t"",$time); else $error(""Error in flags1 %t"",$time);*/ cover property(p4);",2
SDR_HDR_TB_FINAL.sv,569,assert property(p5) $display("Engine done is enabled"); else $error("Error in engine done flag");,1
SDR_HDR_TB_FINAL.sv,575,cover property(p5);,1
SDR_HDR_TB_FINAL.sv,578,assert property(p6); //$display("CCC Block is enabled"); else $error("Error in CCC flag");,1
SDR_HDR_TB_FINAL.sv,583,assert property(p6); //$display("CCC Block is enabled"); else $error("Error in CCC flag");,1
SDR_HDR_TB_FINAL.sv,584,cover property(p6);,1
SDR_HDR_TB_FINAL.sv,588,assert property(p7); //$display("CCC Block is enabled"); else $error("Error in CCC flag");,1
SDR_HDR_TB_FINAL.sv,593,assert property(p7); //$display("CCC Block is enabled"); else $error("Error in CCC flag");,1
SDR_HDR_TB_FINAL.sv,594,cover property(p7);,1
CCC_Handler_tb_final.sv,3789,cover property(Broadcast_ENEC_DISEC_TOC_0);,1
CCC_Handler_tb_final.sv,3793,cover property(Broadcast_ENEC_DISEC_TOC_1);,1
CCC_Handler_tb_final.sv,3797,cover property(Broadcast_SETMWL_SETMRL_TOC_0);,1
CCC_Handler_tb_final.sv,3801,cover property(Broadcast_SETMWL_SETMRL_TOC_1);,1
CCC_Handler_tb_final.sv,3805,cover property(Broadcast_Dummy_TOC_0);,1
CCC_Handler_tb_final.sv,3809,cover property(Broadcast_Dummy_TOC_1);,1
CCC_Handler_tb_final.sv,3813,cover property(Broadcast_ENEC_DISEC_SETMWL_SETMRL_TOC_0_track);,1
CCC_Handler_tb_final.sv,3817,cover property(Broadcast_ENEC_DISEC_SETMWL_SETMRL_TOC_1_track);,1
CCC_Handler_tb_final.sv,3821,cover property(Broadcast_Dummy_TOC_0_track);,1
CCC_Handler_tb_final.sv,3825,cover property(Broadcast_Dummy_TOC_1_track);,1
CCC_Handler_tb_final.sv,4116,cover property(Direct_ENEC_DISEC_TOC_0);,1
CCC_Handler_tb_final.sv,4121,cover property(Direct_ENEC_DISEC_TOC_1);,1
CCC_Handler_tb_final.sv,4126,cover property(Direct_SETMWL_SETMRL_TOC_0);,1
CCC_Handler_tb_final.sv,4131,cover property(Direct_SETMWL_SETMRL_TOC_1);,1
CCC_Handler_tb_final.sv,4135,cover property(Direct_ENEC_DISEC_SETMWL_SETMRL_TOC_0_track);,1
CCC_Handler_tb_final.sv,4139,cover property(Direct_ENEC_DISEC_SETMWL_SETMRL_TOC_1_track);,1
CCC_Handler_tb_final.sv,4271,cover property(Direct_GETMWL_GETMRL_GETSTATUS_TOC_0);,1
CCC_Handler_tb_final.sv,4279,cover property(Direct_GETMWL_GETMRL_GETSTATUS_TOC_0);,1
CCC_Handler_tb_final.sv,4289,cover property(Direct_GETMWL_GETMRL_GETSTATUS_TOC_0);,1
CCC_Handler_tb_final.sv,4294,cover property(Direct_GETMWL_GETMRL_GETSTATUS_TOC_1);,1
CCC_Handler_tb_final.sv,4303,cover property(Direct_GETBCR_GETDCR_TOC_0);,1
CCC_Handler_tb_final.sv,4311,cover property(Direct_GETBCR_GETDCR_TOC_0);,1
CCC_Handler_tb_final.sv,4322,cover property(Direct_GETBCR_GETDCR_TOC_0);,1
CCC_Handler_tb_final.sv,4327,cover property(Direct_GETBCR_GETDCR_TOC_1);,1
CCC_Handler_tb_final.sv,4379,cover property(Direct_GETDCR_GETBCR_GETSTATUS_GETMWL_GETMRL_TOC_0_track);,1
CCC_Handler_tb_final.sv,4430,cover property(Direct_GETDCR_GETBCR_GETSTATUS_GETMWL_GETMRL_TOC_1_track);,1
CCC_Handler_tb_final.sv,4481,cover property(Direct_GETDCR_GETBCR_GETSTATUS_GETMWL_GETMRL_TOC_0_rx_track);,1
CCC_Handler_tb_final.sv,4531,cover property(Direct_GETDCR_GETBCR_GETSTATUS_GETMWL_GETMRL_TOC_1_rx_track) ;,1
screen.sv,132,"assert property(hdisp) else $error(""HDISP mismatch /= %0d\n"",X);",1
screen.sv,139,"assert property(hdisp) else $error(""HDISP mismatch /= %0d\n"",X);",1
screen.sv,193,"assert property(vdisp) else begin in_vdisp=0; $error(""VDISP mismatch /= %0d\n"",Y); end assert property(vfp) else begin $fatal(1,""VFP mismatch /= %0d\n"",vga_modes[mode][7]); end assert property(vp) else begin $fatal(1,""VP mismatch /= %0d\n"",vga_modes[mode][8]); end",3
screen.sv,200,"assert property(vdisp) else begin in_vdisp=0; $error(""VDISP mismatch /= %0d\n"",Y); end assert property(vfp) else begin $fatal(1,""VFP mismatch /= %0d\n"",vga_modes[mode][7]); end assert property(vp) else begin $fatal(1,""VP mismatch /= %0d\n"",vga_modes[mode][8]); end assert property(vbp) else begin $fatal(1,""VBP mismatch /= %0d\n"",vga_modes[mode][9]); end assert property(vbp_1) else begin $fatal(1,""DISPLAY within VBP /= %0d\n"",vga_modes[mode][9]); end //assert property(not hbp) $error(""HBP not right\n"");",6
TB1.sv,88,assert(tr.randomize);,1
TB1.sv,114,assert(tr.randomize);,1
TB1.sv,144,assert(tr.randomize);,1
TB1.sv,173,assert(tr.randomize);,1
TB1.sv,202,assert(tr.randomize);,1
prefetch_dut_tb.sv,44,assert(cache_read == 1'b1);,1
prefetch_dut_tb.sv,45,assert(mem_address_out == addr);,1
prefetch_dut_tb.sv,50,assert(cpu_resp == 1'b1);,1
prefetch_dut_tb.sv,51,assert(cache_read == 1'b1);,1
prefetch_dut_tb.sv,59,assert(cpu_resp == 1'b0);,1
prefetch_dut_tb.sv,68,assert(cache_read == 1'b1);,1
prefetch_dut_tb.sv,69,assert(mem_address_out == addr);,1
prefetch_dut_tb.sv,74,assert(cpu_resp == 1'b1);,1
prefetch_dut_tb.sv,75,assert(mem_address_out == expect_addr);,1
prefetch_dut_tb.sv,76,assert(cache_read == 1'b1);,1
prefetch_dut_tb.sv,84,assert(cpu_resp == 1'b1);,1
prefetch_dut_tb.sv,85,assert(mem_address_out == second_expect_addr);,1
prefetch_dut_tb.sv,86,assert(cache_read == 1'b1);,1
prefetch_dut_tb.sv,97,assert(cache_read == 1);,1
prefetch_dut_tb.sv,98,assert(mem_address_out == addr);,1
prefetch_dut_tb.sv,103,assert(cache_read == 1);,1
prefetch_dut_tb.sv,104,assert(cpu_resp == 1);,1
cache_dut_tb.sv,45,assert(dut.datapath.hit == 1'b0);,1
cache_dut_tb.sv,54,assert(dut.datapath.hit == 0);,1
cache_dut_tb.sv,63,assert(dut.datapath.hit == 1'b0);,1
cache_dut_tb.sv,72,assert(dut.datapath.hit == 0);,1
cache_dut_tb.sv,81,assert(dut.datapath.hit == 1);,1
cache_dut_tb.sv,90,assert(dut.datapath.hit == 1);,1
cache_dut_tb.sv,99,assert(dut.datapath.hit == 1);,1
cache_dut_tb.sv,108,assert(dut.datapath.hit == 1);,1
cache_dut_tb.sv,117,assert(dut.datapath.hit == 0);,1
cache_dut_tb.sv,126,assert(dut.datapath.hit == 1);,1
CHECKER.sv,334,assert property (out_valid_high) else begin $display("----------------------------------------");,2
CHECKER.sv,349,assert property (next_op) else begin $display("7777777777777777777777777777777777777777");,2
CHECKER.sv,423,assert property (C_one_cycle ) else begin $display("9999999999999999999999999999999999999999");,2
CHECKER.sv,426,assert property (C_one_cycle ) else begin $display("9999999999999999999999999999999999999999");,2
CHECKER_chang.sv,222,"assert property (p_reset) else $fatal(0, ""Assertion 1 is violated""); // fail statement must be written afterwards /* 2. Latency should be less than 1000 cycles for each operation. */ always @(*) begin assert (wait_cnt < 1000) else $fatal(0, ""Assertion 2 is violated"");",7
CHECKER_chang.sv,242,"assert property (p_errmsg) else $fatal(0, ""Assertion 3 is violated"");",1
CHECKER_chang.sv,281,"assert property (p_outvalid) else $fatal(0, ""Assertion 6 is violated"");",1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,77,assert(tck_src > 0);,1
cdc_2phase_tb.sv,103,assert(tck_dst > 0);,1
rr_arb_tree_tb.sv,239,assert(exp_data === data_oup);,1
cdc_fifo_tb.sv,81,assert(tck_src > 0);,1
cdc_fifo_tb.sv,107,assert(tck_dst > 0);,1
graycode_tb.sv,24,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
find_first_one.sv,33,assert(WIDTH >= 0);,1
ariane_pkg.sv,86,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,89,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,90,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,91,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
ariane_pkg.sv,92,assert(Cfg.NrPMPEntries <= 16);,1
cdc_fifo_gray.sv,48,assert(LOG_DEPTH > 0);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,79,assert(tck_src > 0);,1
cdc_2phase_tb.sv,105,assert(tck_dst > 0);,1
cdc_fifo_tb.sv,83,assert(tck_src > 0);,1
cdc_fifo_tb.sv,109,assert(tck_dst > 0);,1
graycode_tb.sv,26,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
pmp_entry.sv,73,assert(size >= 2);,1
pmp_entry.sv,75,assert(size > 2);,1
pmp_entry.sv,79,assert(conf_addr_i[i] == 1); // check that all the rest are ones end end end if (size < PLEN-1) begin if (base + 2**size > base) begin // check for overflow if (match_o == 0) begin assert(addr_i >= base + 2**size || addr_i < base);,9
pmp_entry.sv,89,assert(addr_i < base + 2**size && addr_i >= base);,1
pmp_entry.sv,93,assert(addr_i - 2**size >= base || addr_i < base);,1
pmp_entry.sv,95,assert(addr_i - 2**size < base && addr_i >= base);,1
pmp_tb.sv,71,assert(allow == 1);,1
pmp_tb.sv,83,assert(allow == 0);,1
pmp_tb.sv,95,assert(allow == 1);,1
axi_id_remap.sv,562,assert (InpIdWidth > 0);,1
axi_id_remap.sv,563,assert (MaxUniqInpIds > 0);,1
axi_id_remap.sv,565,assert (MaxTxnsPerId > 0);,1
axi_id_remap.sv,566,assert (IdxWidth >= 1);,1
axi_id_remap.sv,646,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_remap.sv,647,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,648,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,649,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_remap.sv,650,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_remap.sv,651,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,652,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,653,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,339,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_iw_converter.sv,340,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,341,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,342,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,343,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_iw_converter.sv,344,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,345,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,346,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_to_axi_lite_mod.sv,36,assert(NUM_PENDING_RD > 0);,1
axi_to_axi_lite_mod.sv,37,assert(NUM_PENDING_WR > 0);,1
axi_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,31,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,32,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_test.sv,1779,assert (b_beat.b_id == id);,1
axi_test.sv,1837,assert (r_beat.r_id == id);,1
axi_test.sv,1838,assert (r_beat.r_resp == axi_pkg::RESP_OKAY);,1
axi_test.sv,1839,assert (r_beat.r_last);,1
axi_id_serialize.sv,413,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_serialize.sv,414,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,415,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,416,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_serialize.sv,417,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_serialize.sv,418,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,419,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,420,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_modify_address.sv,157,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,159,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,160,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,86,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,109,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,110,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,111,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
tb_axi_cdc.sv,212,assert (mst_b == exp_b);,1
tb_axi_cdc.sv,220,assert (mst_r == exp_r);,1
tb_axi_cdc.sv,241,assert (slv_aw == exp_aw);,1
tb_axi_cdc.sv,245,assert (slv_w == exp_w);,1
tb_axi_cdc.sv,252,assert (slv_ar == exp_ar);,1
tb_axi_lite_regs.sv,203,assert (master.r_resp == axi_pkg::RESP_OKAY);,1
tb_axi_lite_regs.sv,258,assert (master.w_strb[i] == wr_active[aw_idx+i]);,1
tb_axi_to_axi_lite.sv,169,assert (aw_cnt == w_cnt && w_cnt == b_cnt);,1
tb_axi_to_axi_lite.sv,170,assert (ar_cnt == r_cnt);,1
tb_axi_modify_address.sv,177,assert(rand_success);,1
tb_axi_modify_address.sv,181,assert(rand_success);,1
tb_axi_atop_filter.sv,212,assert (downstream.aw_atop == '0);,1
tb_axi_atop_filter.sv,304,assert (downstream.ar_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,305,assert (downstream.ar_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,306,assert (downstream.ar_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,307,assert (downstream.ar_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,308,assert (downstream.ar_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,309,assert (downstream.ar_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,310,assert (downstream.ar_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,311,assert (downstream.ar_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,312,assert (downstream.ar_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,313,assert (downstream.ar_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,320,assert (downstream.aw_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,321,assert (downstream.aw_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,322,assert (downstream.aw_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,323,assert (downstream.aw_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,324,assert (downstream.aw_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,325,assert (downstream.aw_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,326,assert (downstream.aw_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,327,assert (downstream.aw_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,328,assert (downstream.aw_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,329,assert (downstream.aw_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,335,assert (act_beat.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,336,assert (act_beat.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,337,assert (act_beat.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,338,assert (act_beat.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,343,assert (downstream.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,344,assert (downstream.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,345,assert (downstream.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,346,assert (downstream.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,366,assert (upstream.r_id == exp_beat.r_id);,1
tb_axi_atop_filter.sv,367,assert (upstream.r_data == exp_beat.r_data);,1
tb_axi_atop_filter.sv,368,assert (upstream.r_resp == exp_beat.r_resp);,1
tb_axi_atop_filter.sv,369,assert (upstream.r_last == exp_beat.r_last);,1
tb_axi_atop_filter.sv,370,assert (upstream.r_user == exp_beat.r_user);,1
tb_axi_atop_filter.sv,382,assert (upstream.b_id == exp_beat.b_id);,1
tb_axi_atop_filter.sv,383,assert (upstream.b_resp == exp_beat.b_resp);,1
tb_axi_atop_filter.sv,384,assert (upstream.b_user == exp_beat.b_user);,1
tb_axi_sim_mem.sv,111,assert(b_beat.b_resp == axi_pkg::RESP_OKAY);,1
tb_axi_addr_test.sv,240,"assume (mode inside {axi_pkg::BURST_FIXED, axi_pkg::BURST_INCR, axi_pkg::BURST_WRAP});",1
axi_lite_to_reg.sv,44,assert(BUFFER_DEPTH > 0);,1
axi_lite_to_reg.sv,45,assert(ADDR_WIDTH > 0);,1
axi_lite_to_reg.sv,46,assert(DATA_WIDTH > 0);,1
manta.sv,327,cover(data_o == 16'h1234 && addr_o == 16'h5678 && rw_o == 1 && valid_o == 1);,1
manta.sv,328,cover(data_o == 16'h1234 && addr_o == 16'h5678 && rw_o == 1 && valid_o == 1);,1
manta.sv,331,cover(data_o == 16'h1234 && addr_o == 16'h5678 && rw_o == 1 && valid_o == 1);,1
manta.sv,334,cover(addr_o == 16'h1234 && rw_o == 0 && valid_o == 1);,1
manta.sv,344,assert(state == IDLE || state == READ || state == WRITE);,1
tb_watch_top.sv,25,"assert(i_freq <= 1000*1000*1000); // under 1GHz $display(""initialize value [%d]"", $time);",2
tb.sv,273,assert (a_count <= max_transfers);,1
tb.sv,286,assert (b_count <= max_transfers);,1
top.sv,77,assert property (pkt_valid_busy) $display("Assertion A1 success");,1
top.sv,83,assert property (pkt_valid_busy) $display("Assertion A1 success");,1
top.sv,89,assert property (pkt_valid_busy) $display("Assertion A1 success");,1
vortex_afu.sv,806,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
non_cons_operator.sv,10,assert property (p1) else $error("The sequence (a && b) did not occur consecutively between 2 to 4 times");,2
non_cons_operator.sv,15,assert property (p1) else $error("The sequence (a && b) did not occur consecutively between 2 to 4 times");,2
throughtout_within_SVA.sv,9,assert property(assert_throughout_example) else $fatal("Assertion failed: signal_a must be high throughout seq_b or signal_b must be high throughout seq_a.");,3
throughtout_within_SVA.sv,14,assert property(assert_throughout_example) else $fatal("Assertion failed: signal_a must be high throughout seq_b or signal_b must be high throughout seq_a.");,3
throughtout_within_SVA.sv,19,assert property(assert_throughout_example) else $fatal("Assertion failed: signal_a must be high throughout seq_b or signal_b must be high throughout seq_a.");,3
throughtout_within_SVA.sv,29,assert property(assert_within_example) else $fatal("Assertion failed: signal_a must be high within seq_b or signal_b must be high within seq_a.");,3
go_to_operator.sv,9,assert property (p1) else $error("The sequence (a && b) did not occur exactly 3 times");,2
go_to_operator.sv,13,assert property (p1) else $error("The sequence (a && b) did not occur exactly 3 times");,2
seq_imp_assertions.sv,15,assert property (handshake);,1
seq_imp_assertions.sv,19,assert property (handshake);,1
and operator in SVA.sv,9,assert property(assert_and_example) else $fatal("Assertion failed: Both signal_a and signal_b must be high.");,2
and operator in SVA.sv,14,assert property(assert_and_example) else $fatal("Assertion failed: Both signal_a and signal_b must be high.");,2
and operator in SVA.sv,19,assert property(assert_and_example) else $fatal("Assertion failed: Both signal_a and signal_b must be high.");,2
cons_repetition operator.sv,9,assert property (p1) else $error("The sequence (a && b) did not occur exactly 3 times");,2
cons_repetition operator.sv,13,assert property (p1) else $error("The sequence (a && b) did not occur exactly 3 times");,2
system_function_assertion.sv,8,assert property(s_a);,1
system_function_assertion.sv,12,assert property(s_a);,1
system_function_assertion.sv,16,assert property(s_a);,1
system_function_assertion.sv,20,assert property(s_a);,1
system_function_assertion.sv,21,assert property(s_b);,1
system_function_assertion.sv,22,assert property(s_c);,1
property_assertions.sv,8,assert property (p_expr);,1
property_assertions.sv,12,assert property (p_expr);,1
property_assertions.sv,16,assert property (p_expr);,1
property_assertions.sv,20,assert property (p_expr);,1
or operator in SVA.sv,9,assert property(assert_or_example) else $fatal("Assertion failed: Either signal_a or signal_b must be high.");,2
or operator in SVA.sv,14,assert property(assert_or_example) else $fatal("Assertion failed: Either signal_a or signal_b must be high.");,2
or operator in SVA.sv,19,assert property(assert_or_example) else $fatal("Assertion failed: Either signal_a or signal_b must be high.");,2
ariane_pkg.sv,86,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,89,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,90,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,91,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
find_first_one.sv,33,assert(WIDTH >= 0);,1
pmp_entry.sv,73,assert(size >= 2);,1
pmp_entry.sv,75,assert(size > 2);,1
pmp_entry.sv,79,assert(conf_addr_i[i] == 1); // check that all the rest are ones end end end if (size < XLEN-1) begin if (base + 2**size > base) begin // check for overflow if (match_o == 0) begin assert(addr_i >= base + 2**size || addr_i < base);,9
pmp_entry.sv,89,assert(addr_i < base + 2**size && addr_i >= base);,1
pmp_entry.sv,93,assert(addr_i - 2**size >= base || addr_i < base);,1
pmp_entry.sv,95,assert(addr_i - 2**size < base && addr_i >= base);,1
cdc_fifo_gray.sv,48,assert(LOG_DEPTH > 0);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,79,assert(tck_src > 0);,1
cdc_2phase_tb.sv,105,assert(tck_dst > 0);,1
cdc_fifo_tb.sv,83,assert(tck_src > 0);,1
cdc_fifo_tb.sv,109,assert(tck_dst > 0);,1
graycode_tb.sv,26,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_id_remap.sv,79,assert(ADDR_WIDTH >= 0);,1
axi_id_remap.sv,80,assert(DATA_WIDTH >= 0);,1
axi_id_remap.sv,81,assert(ID_WIDTH_IN >= 0);,1
axi_id_remap.sv,82,assert(ID_WIDTH_OUT >= 0);,1
axi_id_remap.sv,83,assert(USER_WIDTH >= 0);,1
axi_id_remap.sv,84,assert(in.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_id_remap.sv,85,assert(in.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_id_remap.sv,86,assert(in.AXI_ID_WIDTH == ID_WIDTH_IN);,1
axi_id_remap.sv,87,assert(in.AXI_USER_WIDTH == USER_WIDTH);,1
axi_id_remap.sv,88,assert(out.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_id_remap.sv,89,assert(out.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_id_remap.sv,90,assert(out.AXI_ID_WIDTH == ID_WIDTH_OUT);,1
axi_id_remap.sv,91,assert(out.AXI_USER_WIDTH == USER_WIDTH);,1
axi_lite_xbar.sv,103,assert(NUM_MASTER > 0);,1
axi_lite_xbar.sv,104,assert(NUM_SLAVE > 0);,1
axi_lite_xbar.sv,105,assert(NUM_RULES > 0);,1
axi_lite_xbar.sv,106,assert(rules.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_xbar.sv,107,assert(rules.NUM_SLAVE == NUM_SLAVE);,1
axi_lite_xbar.sv,113,assert(master[i].AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_xbar.sv,114,assert(master[i].AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_lite_xbar.sv,121,assert(slave[i].AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_xbar.sv,122,assert(slave[i].AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_join.sv,23,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,24,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,25,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,26,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_cut.sv,35,assert(ADDR_WIDTH >= 0);,1
axi_lite_cut.sv,36,assert(DATA_WIDTH >= 0);,1
axi_lite_cut.sv,37,assert(in.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_cut.sv,38,assert(in.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_lite_cut.sv,39,assert(out.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_cut.sv,40,assert(out.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_lite_join.sv,23,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,24,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_to_axi_lite.sv,36,assert(NUM_PENDING_RD > 0);,1
axi_to_axi_lite.sv,37,assert(NUM_PENDING_WR > 0);,1
axi_to_axi_lite.sv,38,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_to_axi_lite.sv,39,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_multicut.sv,37,assert(NUM_CUTS >= 0);,1
axi_cut.sv,48,assert(ADDR_WIDTH >= 0);,1
axi_cut.sv,49,assert(DATA_WIDTH >= 0);,1
axi_cut.sv,50,assert(ID_WIDTH >= 0);,1
axi_cut.sv,51,assert(USER_WIDTH >= 0);,1
axi_cut.sv,52,assert(in.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_cut.sv,53,assert(in.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_cut.sv,54,assert(in.AXI_ID_WIDTH == ID_WIDTH);,1
axi_cut.sv,55,assert(in.AXI_USER_WIDTH == USER_WIDTH);,1
axi_cut.sv,56,assert(out.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_cut.sv,57,assert(out.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_cut.sv,58,assert(out.AXI_ID_WIDTH == ID_WIDTH);,1
axi_cut.sv,59,assert(out.AXI_USER_WIDTH == USER_WIDTH);,1
axi_modify_address.sv,30,assert(ADDR_WIDTH_IN > 0);,1
axi_modify_address.sv,31,assert(ADDR_WIDTH_OUT > 0);,1
axi_multicut.sv,41,assert(NUM_CUTS >= 0);,1
axi_arbiter.sv,27,assert(NUM_REQ >= 0);,1
axi_arbiter.sv,28,assert(arb.NUM_REQ == NUM_REQ);,1
axi_arbiter.sv,78,assert(NUM_REQ >= 0);,1
axi_arbiter.sv,79,assert(ID_WIDTH >= 0);,1
axi_lite_to_axi.sv,22,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,23,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
tb_axi_lite_xbar.sv,137,assert(rand_success);,1
tb_axi_lite_xbar.sv,160,assert(rand_success);,1
tb_axi_atop_filter.sv,471,assert (downstream.aw_atop == '0);,1
tb_axi_atop_filter.sv,569,assert (downstream.ar_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,570,assert (downstream.ar_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,571,assert (downstream.ar_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,572,assert (downstream.ar_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,573,assert (downstream.ar_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,574,assert (downstream.ar_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,575,assert (downstream.ar_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,576,assert (downstream.ar_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,577,assert (downstream.ar_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,578,assert (downstream.ar_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,585,assert (downstream.aw_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,586,assert (downstream.aw_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,587,assert (downstream.aw_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,588,assert (downstream.aw_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,589,assert (downstream.aw_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,590,assert (downstream.aw_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,591,assert (downstream.aw_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,592,assert (downstream.aw_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,593,assert (downstream.aw_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,594,assert (downstream.aw_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,601,assert (downstream.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,602,assert (downstream.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,603,assert (downstream.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,604,assert (downstream.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,616,assert (upstream.r_id == exp_beat.r_id);,1
tb_axi_atop_filter.sv,617,assert (upstream.r_data == exp_beat.r_data);,1
tb_axi_atop_filter.sv,618,assert (upstream.r_resp == exp_beat.r_resp);,1
tb_axi_atop_filter.sv,619,assert (upstream.r_last == exp_beat.r_last);,1
tb_axi_atop_filter.sv,620,assert (upstream.r_user == exp_beat.r_user);,1
tb_axi_atop_filter.sv,632,assert (upstream.b_id == exp_beat.b_id);,1
tb_axi_atop_filter.sv,633,assert (upstream.b_resp == exp_beat.b_resp);,1
tb_axi_atop_filter.sv,634,assert (upstream.b_user == exp_beat.b_user);,1
axi_lite_to_reg.sv,32,assert(ADDR_WIDTH > 0);,1
axi_lite_to_reg.sv,33,assert(DATA_WIDTH > 0);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,79,assert(tck_src > 0);,1
cdc_2phase_tb.sv,105,assert(tck_dst > 0);,1
cdc_fifo_tb.sv,83,assert(tck_src > 0);,1
cdc_fifo_tb.sv,109,assert(tck_dst > 0);,1
graycode_tb.sv,26,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
matmul_checker.sv,19,"assert property(penable_active) else $error(""error with penable %d %d"",check_bus.penable_i , check_bus.prdata_o);",2
matmul_checker.sv,24,cover property(penable_active);,1
matmul_checker.sv,27,assert property(reset_err) else $error("error with error at reset");,2
matmul_checker.sv,32,cover property(reset_err);,1
matmul_checker.sv,34,assert property(reset_ready) else $error("error with ready at reset");,2
matmul_checker.sv,39,cover property(reset_ready);,1
matmul_checker.sv,41,assert property(reset_data_out) else $error("data no zero at reset");,2
matmul_checker.sv,46,cover property(reset_data_out);,1
matmul_checker.sv,48,assert property(reset_active) else $error("error with reset");,2
matmul_checker.sv,53,cover property(reset_active);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
assert_checker.sv,41,"assert property (check_condition) else level_handler(security_level, message);",2
vortex_afu.sv,795,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
top.sv,23,assert property (one_hot) $display("Assertion one hot success");,1
top.sv,31,assert property (reset_p) $display("Assertion reset_p success");,1
mem.sv,120,assert(proc2mem_addr[0] == 0);,1
mem.sv,124,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,138,assert(proc2mem_addr[0] == 0);,1
mem.sv,143,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,148,assert(proc2mem_addr[1:0] == 0);,1
uvmc_common.sv,367,assert(port_name != "");,1
uvmc_commands.sv,294,assert(info != null);,1
uvmc_commands.sv,443,assert(info != null);,1
DatapathPipelined.sv,254,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathPipelined.sv,255,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,89,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,90,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,247,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,248,assert (addr_to_dmem[1:0] == 2'b00);,1
mem.sv,120,assert(proc2mem_addr[0] == 0);,1
mem.sv,124,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,138,assert(proc2mem_addr[0] == 0);,1
mem.sv,143,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,148,assert(proc2mem_addr[1:0] == 0);,1
formal_tb.sv,67,assume (multdiv_ready_id_i);,1
formal_tb.sv,73,assert (checked);,1
mem_model.sv,38,assert(addr[1:0] == 2'b0);,1
mem_model.sv,49,assert(addr[2:0] == 3'b0);,1
otbn_core_model.sv,90,assert(model_handle != chandle_null);,1
cdb_test.sv,38,assert(cdb_packet == 0);,1
cdb_test.sv,47,assert(cdb_packet.rob_tag == 4);,1
cdb_test.sv,48,assert(cdb_packet.v == 40);,1
cdb_test.sv,49,assert(cdb_fu_packet.ack == 5'b01000);,1
mem.sv,120,assert(proc2mem_addr[0] == 0);,1
mem.sv,124,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,138,assert(proc2mem_addr[0] == 0);,1
mem.sv,143,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,148,assert(proc2mem_addr[1:0] == 0);,1
LineBuffer_TB.sv,43,assert (!w_rd_valid);,1
LineBuffer_TB.sv,52,assert (!w_rd_valid);,1
LineBuffer_TB.sv,63,assert (w_rd_valid);,1
LineBuffer_TB.sv,75,assert (w_rd_valid);,1
LineBuffer_TB.sv,79,assert (!w_rd_valid);,1
plusarg_file_mem.sv,43,assert(ADDR_BITS <= 64);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,148,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,161,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,166,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,187,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,361,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,477,assert (addr_lo < address);,1
formal_tb.sv,67,assume (multdiv_ready_id_i);,1
formal_tb.sv,73,assert (checked);,1
plusarg_file_mem.sv,43,assert(ADDR_BITS <= 64);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,148,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,161,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,166,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,187,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,361,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,477,assert (addr_lo < address);,1
formal_tb.sv,67,assume (multdiv_ready_id_i);,1
formal_tb.sv,73,assert (checked);,1
ariane_pkg.sv,88,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,91,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,92,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,93,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
ariane_pkg.sv,94,assert(Cfg.NrPMPEntries <= 16);,1
PATTERN.sv,106,assert property ( wait_for_Index_Check and wait_for_Update and wait_for_Check_Valid_Date ) else begin,4
PATTERN.sv,113,"assert property ( wait_for_Index_Check and wait_for_Update and wait_for_Check_Valid_Date ) else begin _logger.error($sformatf(""The execution latency at %-12d ps is over %5d cycles "", $time*1000, DELAY), 0);",5
verification_env.sv,88,assert(tr.randomize);,1
verification_env.sv,118,assert(tr.randomize);,1
verification_env.sv,146,assert(tr.randomize);,1
verification_env.sv,175,assert(tr.randomize);,1
verification_env.sv,204,assert(tr.randomize);,1
CHECKER_iclab108.sv,148,assert property (reset_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,172,assert property (latency_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,183,assert property (output_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,194,assert property (Index_check_input_valid_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,201,assert property (Index_check_input_valid_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,207,assert property (Index_check_input_valid_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,245,assert property (sel_action_valid_overlap_assert) else begin,1
CHECKER_iclab108.sv,250,assert property (sel_action_valid_overlap_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,255,assert property (sel_action_valid_overlap_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,260,assert property (sel_action_valid_overlap_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,307,assert property (out_valid_one_cycle_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,319,assert property (next_invalid_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,343,assert property (Month_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,348,assert property (Month_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,352,assert property (Month_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,356,assert property (Month_assert) else begin $display("========================================================");,2
CHECKER_iclab108.sv,390,assert property (AR_AW_overlap_assert) else begin $display("========================================================");,2
huffman_decoder_tb.sv,70,assert(valid == 1'h0);,1
immediate_assertions.sv,23,assert(a & b);,1
noc_tb.sv,102,"assert property(w_device_onehot_ready) else `uvm_error(""ASSERT"", ""Ready signals of devices are not onehot when device writing!"") property r_device_onehot_valid;",3
noc_tb.sv,108,"assert property(r_device_onehot_valid) else `uvm_error(""ASSERT"", ""Valid signals of devices are not onehot when host writing!"") endmodule",4
soc_it_handler.sv,115,assert(slave_address_valid);,1
matmul_checker.sv,11,cover property(active_reset);,1
matmul_checker.sv,17,cover property(active_reset);,1
matmul_checker.sv,20,cover property(valid_write_and_read_addresses); // cover property checks if a specified sequence of events occurred during the simulation property invalid_write_and_read_addresses;,4
matmul_checker.sv,28,cover property(valid_write_and_read_addresses); // cover property checks if a specified sequence of events occurred during the simulation property invalid_write_and_read_addresses;,4
matmul_checker.sv,39,cover property(invalid_write_and_read_addresses); // cover property checks if a specified sequence of events occurred during the simulation property valid_start_bit_busy;,3
matmul_checker.sv,47,cover property(valid_start_bit_busy);,1
matmul_checker.sv,49,cover property(valid_transfer); // cover property checks if a specified sequence of events occurred during the simulation property valid_read_and_write_targets;,3
matmul_checker.sv,55,cover property(valid_transfer); // cover property checks if a specified sequence of events occurred during the simulation property valid_read_and_write_targets;,3
matmul_checker.sv,63,cover property(valid_read_and_write_targets);,1
l2_mem.sv,182,assert (AXI_AW > 0);,1
l2_mem.sv,184,assert (AXI_DW > 0);,1
l2_mem.sv,186,assert (N_BYTES > 0);,1
l2_mem.sv,189,assert (CUT_DW >= 8);,1
l2_mem.sv,190,assert (AXI_DW >= CUT_DW);,1
l2_mem.sv,192,assert (N_BYTES % PAR_CUTS_N_BYTES == 0);,1
l2_mem.sv,193,assert (N_PAR_CUTS >= AXI_DW/CUT_DW);,1
axi_id_remap.sv,545,assert (InpIdWidth > 0);,1
axi_id_remap.sv,546,assert (MaxUniqInpIds > 0);,1
axi_id_remap.sv,548,assert (MaxTxnsPerId > 0);,1
axi_id_remap.sv,549,assert (IdxWidth >= 1);,1
axi_id_remap.sv,629,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_remap.sv,630,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,631,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,632,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_remap.sv,633,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_remap.sv,634,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,635,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,636,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_multicut.sv,86,assert(NoCuts >= 0);,1
axi_riscv_lrsc.sv,947,assert (b_status_oup_valid);,1
axi_riscv_lrsc.sv,949,assert (b_status_oup_cmd != B_INJECT);,1
axi_riscv_lrsc_tb.sv,383,assert (!downstream.ar_lock);,1
axi_riscv_lrsc_tb.sv,386,assert (!downstream.aw_lock);,1
axi_riscv_lrsc_tb.sv,415,assert (downstream.ar_id == ar_beat.ax_id);,1
axi_riscv_lrsc_tb.sv,416,assert (downstream.ar_addr == ar_beat.ax_addr);,1
axi_riscv_lrsc_tb.sv,417,assert (downstream.ar_len == ar_beat.ax_len);,1
axi_riscv_lrsc_tb.sv,418,assert (downstream.ar_size == ar_beat.ax_size);,1
axi_riscv_lrsc_tb.sv,419,assert (downstream.ar_burst == ar_beat.ax_burst);,1
axi_riscv_lrsc_tb.sv,420,assert (downstream.ar_cache == ar_beat.ax_cache);,1
axi_riscv_lrsc_tb.sv,421,assert (downstream.ar_prot == ar_beat.ax_prot);,1
axi_riscv_lrsc_tb.sv,422,assert (downstream.ar_qos == ar_beat.ax_qos);,1
axi_riscv_lrsc_tb.sv,423,assert (downstream.ar_region == ar_beat.ax_region);,1
axi_riscv_lrsc_tb.sv,424,assert (downstream.ar_user == ar_beat.ax_user);,1
axi_riscv_lrsc_tb.sv,498,assert (downstream.aw_addr == exp_beat.ax_addr);,1
axi_riscv_lrsc_tb.sv,499,assert (downstream.aw_len == exp_beat.ax_len);,1
axi_riscv_lrsc_tb.sv,500,assert (downstream.aw_size == exp_beat.ax_size);,1
axi_riscv_lrsc_tb.sv,501,assert (downstream.aw_burst == exp_beat.ax_burst);,1
axi_riscv_lrsc_tb.sv,502,assert (downstream.aw_cache == exp_beat.ax_cache);,1
axi_riscv_lrsc_tb.sv,503,assert (downstream.aw_prot == exp_beat.ax_prot);,1
axi_riscv_lrsc_tb.sv,504,assert (downstream.aw_qos == exp_beat.ax_qos);,1
axi_riscv_lrsc_tb.sv,505,assert (downstream.aw_region == exp_beat.ax_region);,1
axi_riscv_lrsc_tb.sv,506,assert (downstream.aw_user == exp_beat.ax_user);,1
axi_riscv_lrsc_tb.sv,545,assert (upstream.r_id == r_beat.r_id);,1
axi_riscv_lrsc_tb.sv,546,assert (upstream.r_data === r_beat.r_data);,1
axi_riscv_lrsc_tb.sv,548,assert (upstream.r_resp == r_beat.r_resp);,1
axi_riscv_lrsc_tb.sv,551,"assert (upstream.r_resp == {1'b0, r_cmd.excl});",1
axi_riscv_lrsc_tb.sv,553,assert (upstream.r_last == r_beat.r_last);,1
axi_riscv_lrsc_tb.sv,554,assert (upstream.r_user == r_beat.r_user);,1
axi_riscv_lrsc_tb.sv,606,assert (downstream.w_data == w_beat.w_data);,1
axi_riscv_lrsc_tb.sv,607,assert (downstream.w_strb == w_beat.w_strb);,1
axi_riscv_lrsc_tb.sv,608,assert (downstream.w_last == w_beat.w_last);,1
axi_riscv_lrsc_tb.sv,609,assert (downstream.w_user == w_beat.w_user);,1
axi_riscv_lrsc_tb.sv,655,assert (act_beat.b_id == exp_beat.b_id);,1
axi_riscv_lrsc_tb.sv,656,assert (act_beat.b_user == exp_beat.b_user);,1
axi_riscv_lrsc_tb.sv,657,assert (act_beat.b_resp[1] == exp_beat.b_resp[1]);,1
axi_riscv_lrsc_tb.sv,664,assert (act_beat.b_resp[0] == exp_beat.b_resp[0]);,1
DatapathPipelined.sv,254,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathPipelined.sv,255,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathAxilMemory.sv,126,assert (!insn.ARVALID || insn.ARADDR[1:0] == 2'b00);,1
DatapathAxilMemory.sv,127,assert (!data.ARVALID || data.ARADDR[1:0] == 2'b00);,1
DatapathAxilMemory.sv,128,assert (!data.AWVALID || data.AWADDR[1:0] == 2'b00);,1
DatapathAxilMemory.sv,130,assert (insn.ARPROT == 3'd0);,1
DatapathAxilMemory.sv,131,assert (data.ARPROT == 3'd0);,1
DatapathAxilMemory.sv,132,assert (data.AWPROT == 3'd0);,1
DatapathAxilMemory.sv,352,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathAxilMemory.sv,353,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,89,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,90,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,247,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,248,assert (addr_to_dmem[1:0] == 2'b00);,1
formal.sv,5,cover (finished == 1);,1
picorv32.ORIG.sv,2053,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.ORIG.sv,2056,restrict property (resetn != $initstate);,1
picorv32.ORIG.sv,2066,assert (mem_wstrb == 0);,1
picorv32.ORIG.sv,2078,assert (ok);,1
picorv32.ORIG.sv,2096,assert(mem_valid);,1
picorv32.ORIG.sv,2097,assert(mem_addr == last_mem_la_addr);,1
picorv32.ORIG.sv,2098,assert(mem_wstrb == 0);,1
picorv32.ORIG.sv,2101,assert(mem_valid);,1
picorv32.ORIG.sv,2102,assert(mem_addr == last_mem_la_addr);,1
picorv32.ORIG.sv,2103,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.ORIG.sv,2104,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.ORIG.sv,2107,assert(!mem_valid || mem_ready);,1
picorv32.CHILI.sv,2566,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.CHILI.sv,2569,restrict property (resetn != $initstate);,1
picorv32.CHILI.sv,2591,assert (ok);,1
picorv32.CHILI.sv,2609,assert(mem_valid);,1
picorv32.CHILI.sv,2610,assert(mem_addr == last_mem_la_addr);,1
picorv32.CHILI.sv,2611,assert(mem_wstrb == 0);,1
picorv32.CHILI.sv,2614,assert(mem_valid);,1
picorv32.CHILI.sv,2615,assert(mem_addr == last_mem_la_addr);,1
picorv32.CHILI.sv,2616,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.CHILI.sv,2617,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.CHILI.sv,2620,assert(!mem_valid || mem_ready);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,77,assert(tck_src > 0);,1
cdc_2phase_tb.sv,103,assert(tck_dst > 0);,1
rr_arb_tree_tb.sv,239,assert(exp_data === data_oup);,1
cdc_fifo_tb.sv,81,assert(tck_src > 0);,1
cdc_fifo_tb.sv,107,assert(tck_dst > 0);,1
graycode_tb.sv,24,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
vortex_afu.sv,795,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
uvmc_common.sv,364,assert(port_name != "");,1
uvmc_commands.sv,291,assert(info != null);,1
uvmc_commands.sv,440,assert(info != null);,1
iter_mult_tests.sv,37,assume(clk == 0);,1
iter_mult_tests.sv,38,assume(reset == 1);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,30,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,31,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_modify_address.sv,155,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,156,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,157,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,83,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,107,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,108,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,109,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,30,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,31,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_modify_address.sv,155,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,156,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,157,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,83,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,107,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,108,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,109,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,30,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,31,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_modify_address.sv,155,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,156,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,157,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,83,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,107,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,108,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,109,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,30,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,31,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_modify_address.sv,155,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,156,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,157,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,83,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,107,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,108,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,109,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,30,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,31,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_modify_address.sv,155,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,156,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,157,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,83,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,107,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,108,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,109,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,30,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,31,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_modify_address.sv,155,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,156,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,157,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,83,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,107,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,108,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,109,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,30,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,31,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_modify_address.sv,155,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,156,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,157,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,83,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,107,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,108,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,109,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,30,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,31,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_modify_address.sv,155,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,156,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,157,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,83,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,107,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,108,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,109,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,30,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,31,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,28,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_modify_address.sv,155,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,156,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,157,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,83,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,107,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,108,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,109,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
mvm_uart_system_tb.sv,49,assert (W_BUS_KX % BITS_PER_WORD == 0);,1
mvm_uart_system_tb.sv,50,assert (W_BUS_Y % BITS_PER_WORD == 0);,1
uart_tx.sv,137,assert property(byte_complete);,1
uart_tx.sv,142,assert property(byte_complete);,1
uart_tx.sv,145,assert property(stop_bit_high);,1
uart_tx.sv,149,assert property(stop_bit_high);,1
CHECKER.sv,113,assert property(SPEC_1) else begin $display(" Assertion 1 is violated ");,2
CHECKER.sv,130,assert property(SPEC_2) else begin $display(" Assertion 2 is violated ");,2
CHECKER.sv,144,assert property(SPEC_3) else begin $display(" Assertion 3 is violated ");,2
CHECKER.sv,170,assert property(SPEC_4_IndexCheck) else begin // $display(" SPEC_4_IndexCheck ");,2
CHECKER.sv,180,assert property(SPEC_4_IndexCheck) else begin // $display(" SPEC_4_IndexCheck ");,2
CHECKER.sv,218,assert property(SPEC_5_sel_action_valid) else begin,1
CHECKER.sv,223,assert property(SPEC_5_sel_action_valid) else begin $display(" Assertion 5 is violated ");,2
CHECKER.sv,228,assert property(SPEC_5_sel_action_valid) else begin $display(" Assertion 5 is violated ");,2
CHECKER.sv,233,assert property(SPEC_5_sel_action_valid) else begin $display(" Assertion 5 is violated ");,2
CHECKER.sv,266,assert property(SPEC_6) else begin $display(" Assertion 6 is violated ");,2
CHECKER.sv,278,assert property(SPEC_7) else begin $display(" Assertion 7 is violated ");,2
CHECKER.sv,295,assert property(SPEC_8_MONTH) else begin // $display(" SPEC_8_MONTH ");,2
CHECKER.sv,301,assert property(SPEC_8_MONTH) else begin // $display(" SPEC_8_MONTH ");,2
CHECKER.sv,306,assert property(SPEC_8_MONTH) else begin // $display(" SPEC_8_MONTH ");,2
CHECKER.sv,337,assert property(SPEC_9) else begin $display(" Assertion 9 is violated ");,2
CHECKER.sv,113,assert property(SPEC_1) else begin $display(" Assertion 1 is violated ");,2
CHECKER.sv,130,assert property(SPEC_2) else begin $display(" Assertion 2 is violated ");,2
CHECKER.sv,144,assert property(SPEC_3) else begin $display(" Assertion 3 is violated ");,2
CHECKER.sv,170,assert property(SPEC_4_IndexCheck) else begin // $display(" SPEC_4_IndexCheck ");,2
CHECKER.sv,180,assert property(SPEC_4_IndexCheck) else begin // $display(" SPEC_4_IndexCheck ");,2
CHECKER.sv,218,assert property(SPEC_5_sel_action_valid) else begin,1
CHECKER.sv,223,assert property(SPEC_5_sel_action_valid) else begin $display(" Assertion 5 is violated ");,2
CHECKER.sv,228,assert property(SPEC_5_sel_action_valid) else begin $display(" Assertion 5 is violated ");,2
CHECKER.sv,233,assert property(SPEC_5_sel_action_valid) else begin $display(" Assertion 5 is violated ");,2
CHECKER.sv,266,assert property(SPEC_6) else begin $display(" Assertion 6 is violated ");,2
CHECKER.sv,278,assert property(SPEC_7) else begin $display(" Assertion 7 is violated ");,2
CHECKER.sv,295,assert property(SPEC_8_MONTH) else begin // $display(" SPEC_8_MONTH ");,2
CHECKER.sv,301,assert property(SPEC_8_MONTH) else begin // $display(" SPEC_8_MONTH ");,2
CHECKER.sv,306,assert property(SPEC_8_MONTH) else begin // $display(" SPEC_8_MONTH ");,2
CHECKER.sv,337,assert property(SPEC_9) else begin $display(" Assertion 9 is violated ");,2
MIPS_TB.sv,953,"assert property (Add_property) $display(""[ADD] Correct %0t"",$time);",1
MIPS_TB.sv,964,"assert property (Sub_property) $display(""[SUB] Correct %0t"",$time);",1
MIPS_TB.sv,974,"assert property (AND_property) $display(""[AND] Correct %0t"",$time);",1
MIPS_TB.sv,984,"assert property (OR_property) $display(""[OR] Correct %0t"",$time);",1
MIPS_TB.sv,994,"assert property (sll_property) $display(""[SLL] Correct %0t"",$time);",1
MIPS_TB.sv,1008,"assert property (J_property) $display(""[J] Correct %0t"",$time);",1
MIPS_TB.sv,1018,"assert property (Jal_property) $display(""[Jal] Correct %0t"",$time);",1
MIPS_TB.sv,1028,"assert property (Jr_property) $display(""[Jr] Correct %0t"",$time);",1
MIPS_TB.sv,1042,"assert property (Addi_property) $display(""[ADDI] Correct %0t"",$time);",1
MIPS_TB.sv,1053,"assert property (Addiu_property) $display(""[ADDIU] Correct %0t"",$time);",1
MIPS_TB.sv,1064,"assert property (beq_property) $display(""[beq] Correct %0t"",$time);",1
MIPS_TB.sv,1075,"assert property (lw_property) $display(""[lw] Correct %0t"",$time);",1
MIPS_TB.sv,1086,"assert property (sw_property) $display(""[sw] Correct %0t"",$time);",1
mem_cntrl_tb.sv,91,assert property (cmd_to_ready_delay) else $error("Memory interface not ready within expected time after command");,2
model_100gbe.sv,89,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,773,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,808,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1397,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1415,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1430,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1439,assert (resp==OKAY);,1
MIPS_TB.sv,954,"assert property (Add_property) $display(""[ADD] Correct %0t"",$time);",1
MIPS_TB.sv,965,"assert property (Sub_property) $display(""[SUB] Correct %0t"",$time);",1
MIPS_TB.sv,975,"assert property (AND_property) $display(""[AND] Correct %0t"",$time);",1
MIPS_TB.sv,985,"assert property (OR_property) $display(""[OR] Correct %0t"",$time);",1
MIPS_TB.sv,995,"assert property (sll_property) $display(""[SLL] Correct %0t"",$time);",1
MIPS_TB.sv,1009,"assert property (J_property) $display(""[J] Correct %0t"",$time);",1
MIPS_TB.sv,1019,"assert property (Jal_property) $display(""[Jal] Correct %0t"",$time);",1
MIPS_TB.sv,1029,"assert property (Jr_property) $display(""[Jr] Correct %0t"",$time);",1
MIPS_TB.sv,1043,"assert property (Addi_property) $display(""[ADDI] Correct %0t"",$time);",1
MIPS_TB.sv,1054,"assert property (Addiu_property) $display(""[ADDIU] Correct %0t"",$time);",1
MIPS_TB.sv,1065,"assert property (beq_property) $display(""[beq] Correct %0t"",$time);",1
MIPS_TB.sv,1076,"assert property (lw_property) $display(""[lw] Correct %0t"",$time);",1
MIPS_TB.sv,1087,"assert property (sw_property) $display(""[sw] Correct %0t"",$time);",1
MIPS_TB.sv,858,"assert property (Add_property) $display(""[ADD] Correct %0t"",$time);",1
MIPS_TB.sv,869,"assert property (Sub_property) $display(""[SUB] Correct %0t"",$time);",1
MIPS_TB.sv,879,"assert property (AND_property) $display(""[AND] Correct %0t"",$time);",1
MIPS_TB.sv,889,"assert property (OR_property) $display(""[OR] Correct %0t"",$time);",1
MIPS_TB.sv,899,"assert property (sll_property) $display(""[SLL] Correct %0t"",$time);",1
MIPS_TB.sv,913,"assert property (J_property) $display(""[J] Correct %0t"",$time);",1
MIPS_TB.sv,923,"assert property (Jal_property) $display(""[Jal] Correct %0t"",$time);",1
MIPS_TB.sv,933,"assert property (Jr_property) $display(""[Jr] Correct %0t"",$time);",1
MIPS_TB.sv,947,"assert property (Addi_property) $display(""[ADDI] Correct %0t"",$time);",1
MIPS_TB.sv,958,"assert property (Addiu_property) $display(""[ADDIU] Correct %0t"",$time);",1
MIPS_TB.sv,969,"assert property (beq_property) $display(""[beq] Correct %0t"",$time);",1
MIPS_TB.sv,980,"assert property (lw_property) $display(""[lw] Correct %0t"",$time);",1
MIPS_TB.sv,991,"assert property (sw_property) $display(""[sw] Correct %0t"",$time);",1
MIPS_TB.sv,857,"assert property (Add_property) $display(""[ADD] Correct %0t"",$time);",1
MIPS_TB.sv,868,"assert property (Sub_property) $display(""[SUB] Correct %0t"",$time);",1
MIPS_TB.sv,878,"assert property (AND_property) $display(""[AND] Correct %0t"",$time);",1
MIPS_TB.sv,888,"assert property (OR_property) $display(""[OR] Correct %0t"",$time);",1
MIPS_TB.sv,898,"assert property (sll_property) $display(""[SLL] Correct %0t"",$time);",1
MIPS_TB.sv,912,"assert property (J_property) $display(""[J] Correct %0t"",$time);",1
MIPS_TB.sv,922,"assert property (Jal_property) $display(""[Jal] Correct %0t"",$time);",1
MIPS_TB.sv,932,"assert property (Jr_property) $display(""[Jr] Correct %0t"",$time);",1
MIPS_TB.sv,946,"assert property (Addi_property) $display(""[ADDI] Correct %0t"",$time);",1
MIPS_TB.sv,957,"assert property (Addiu_property) $display(""[ADDIU] Correct %0t"",$time);",1
MIPS_TB.sv,968,"assert property (beq_property) $display(""[beq] Correct %0t"",$time);",1
MIPS_TB.sv,979,"assert property (lw_property) $display(""[lw] Correct %0t"",$time);",1
MIPS_TB.sv,990,"assert property (sw_property) $display(""[sw] Correct %0t"",$time);",1
MIPS_TB.sv,952,"assert property (Add_property) $display(""[ADD] Correct %0t"",$time);",1
MIPS_TB.sv,963,"assert property (Sub_property) $display(""[SUB] Correct %0t"",$time);",1
MIPS_TB.sv,973,"assert property (AND_property) $display(""[AND] Correct %0t"",$time);",1
MIPS_TB.sv,983,"assert property (OR_property) $display(""[OR] Correct %0t"",$time);",1
MIPS_TB.sv,993,"assert property (sll_property) $display(""[SLL] Correct %0t"",$time);",1
MIPS_TB.sv,1007,"assert property (J_property) $display(""[J] Correct %0t"",$time);",1
MIPS_TB.sv,1017,"assert property (Jal_property) $display(""[Jal] Correct %0t"",$time);",1
MIPS_TB.sv,1027,"assert property (Jr_property) $display(""[Jr] Correct %0t"",$time);",1
MIPS_TB.sv,1041,"assert property (Addi_property) $display(""[ADDI] Correct %0t"",$time);",1
MIPS_TB.sv,1052,"assert property (Addiu_property) $display(""[ADDIU] Correct %0t"",$time);",1
MIPS_TB.sv,1063,"assert property (beq_property) $display(""[beq] Correct %0t"",$time);",1
MIPS_TB.sv,1074,"assert property (lw_property) $display(""[lw] Correct %0t"",$time);",1
MIPS_TB.sv,1085,"assert property (sw_property) $display(""[sw] Correct %0t"",$time);",1
MIPS_TB.sv,858,"assert property (Add_property) $display(""[ADD] Correct %0t"",$time);",1
MIPS_TB.sv,869,"assert property (Sub_property) $display(""[SUB] Correct %0t"",$time);",1
MIPS_TB.sv,879,"assert property (AND_property) $display(""[AND] Correct %0t"",$time);",1
MIPS_TB.sv,889,"assert property (OR_property) $display(""[OR] Correct %0t"",$time);",1
MIPS_TB.sv,899,"assert property (sll_property) $display(""[SLL] Correct %0t"",$time);",1
MIPS_TB.sv,913,"assert property (J_property) $display(""[J] Correct %0t"",$time);",1
MIPS_TB.sv,923,"assert property (Jal_property) $display(""[Jal] Correct %0t"",$time);",1
MIPS_TB.sv,933,"assert property (Jr_property) $display(""[Jr] Correct %0t"",$time);",1
MIPS_TB.sv,947,"assert property (Addi_property) $display(""[ADDI] Correct %0t"",$time);",1
MIPS_TB.sv,958,"assert property (Addiu_property) $display(""[ADDIU] Correct %0t"",$time);",1
MIPS_TB.sv,969,"assert property (beq_property) $display(""[beq] Correct %0t"",$time);",1
MIPS_TB.sv,980,"assert property (lw_property) $display(""[lw] Correct %0t"",$time);",1
MIPS_TB.sv,991,"assert property (sw_property) $display(""[sw] Correct %0t"",$time);",1
MIPS_TB.sv,858,"assert property (Add_property) $display(""[ADD] Correct %0t"",$time);",1
MIPS_TB.sv,869,"assert property (Sub_property) $display(""[SUB] Correct %0t"",$time);",1
MIPS_TB.sv,879,"assert property (AND_property) $display(""[AND] Correct %0t"",$time);",1
MIPS_TB.sv,889,"assert property (OR_property) $display(""[OR] Correct %0t"",$time);",1
MIPS_TB.sv,899,"assert property (sll_property) $display(""[SLL] Correct %0t"",$time);",1
MIPS_TB.sv,913,"assert property (J_property) $display(""[J] Correct %0t"",$time);",1
MIPS_TB.sv,923,"assert property (Jal_property) $display(""[Jal] Correct %0t"",$time);",1
MIPS_TB.sv,933,"assert property (Jr_property) $display(""[Jr] Correct %0t"",$time);",1
MIPS_TB.sv,947,"assert property (Addi_property) $display(""[ADDI] Correct %0t"",$time);",1
MIPS_TB.sv,958,"assert property (Addiu_property) $display(""[ADDIU] Correct %0t"",$time);",1
MIPS_TB.sv,969,"assert property (beq_property) $display(""[beq] Correct %0t"",$time);",1
MIPS_TB.sv,980,"assert property (lw_property) $display(""[lw] Correct %0t"",$time);",1
MIPS_TB.sv,991,"assert property (sw_property) $display(""[sw] Correct %0t"",$time);",1
vortex_afu.sv,795,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
all-syntax.sv,536,assert property (property_spec);,1
all-syntax.sv,537,assume property (property_spec);,1
all-syntax.sv,538,cover property (property_spec);,1
all-syntax.sv,745,assert #0 (condition) else $error("message");,1
all-syntax.sv,803,cover property (a ##1 b ##1 c);,1
DatapathPipelined.sv,1143,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathPipelined.sv,1144,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathAxilMemory.sv,126,assert (!insn.ARVALID || insn.ARADDR[1:0] == 2'b00);,1
DatapathAxilMemory.sv,127,assert (!data.ARVALID || data.ARADDR[1:0] == 2'b00);,1
DatapathAxilMemory.sv,128,assert (!data.AWVALID || data.AWADDR[1:0] == 2'b00);,1
DatapathAxilMemory.sv,130,assert (insn.ARPROT == 3'd0);,1
DatapathAxilMemory.sv,131,assert (data.ARPROT == 3'd0);,1
DatapathAxilMemory.sv,132,assert (data.AWPROT == 3'd0);,1
DatapathAxilMemory.sv,352,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathAxilMemory.sv,353,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,89,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathMultiCycle.sv,90,assert (addr_to_dmem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,603,assert (pc_to_imem[1:0] == 2'b00);,1
DatapathSingleCycle.sv,604,assert (addr_to_dmem[1:0] == 2'b00);,1
vortex_afu.sv,797,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
mem.sv,120,assert(proc2mem_addr[0] == 0);,1
mem.sv,124,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,138,assert(proc2mem_addr[0] == 0);,1
mem.sv,143,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,148,assert(proc2mem_addr[1:0] == 0);,1
plusarg_file_mem.sv,43,assert(ADDR_BITS <= 64);,1
formal_tb.sv,67,assume (multdiv_ready_id_i);,1
formal_tb.sv,73,assert (checked);,1
mem_model.sv,38,assert(addr[1:0] == 2'b0);,1
mem_model.sv,49,assert(addr[2:0] == 3'b0);,1
otbn_core_model.sv,90,assert(model_handle != chandle_null);,1
properties.sv,176,"assume property(asserted_for_only_1_cycle(req, M1));",1
ariane_pkg.sv,84,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,87,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,88,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,89,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
find_first_one.sv,33,assert(WIDTH >= 0);,1
cdc_fifo_gray.sv,48,assert(LOG_DEPTH > 0);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,79,assert(tck_src > 0);,1
cdc_2phase_tb.sv,105,assert(tck_dst > 0);,1
cdc_fifo_tb.sv,83,assert(tck_src > 0);,1
cdc_fifo_tb.sv,109,assert(tck_dst > 0);,1
graycode_tb.sv,26,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_id_remap.sv,79,assert(ADDR_WIDTH >= 0);,1
axi_id_remap.sv,80,assert(DATA_WIDTH >= 0);,1
axi_id_remap.sv,81,assert(ID_WIDTH_IN >= 0);,1
axi_id_remap.sv,82,assert(ID_WIDTH_OUT >= 0);,1
axi_id_remap.sv,83,assert(USER_WIDTH >= 0);,1
axi_id_remap.sv,84,assert(in.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_id_remap.sv,85,assert(in.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_id_remap.sv,86,assert(in.AXI_ID_WIDTH == ID_WIDTH_IN);,1
axi_id_remap.sv,87,assert(in.AXI_USER_WIDTH == USER_WIDTH);,1
axi_id_remap.sv,88,assert(out.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_id_remap.sv,89,assert(out.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_id_remap.sv,90,assert(out.AXI_ID_WIDTH == ID_WIDTH_OUT);,1
axi_id_remap.sv,91,assert(out.AXI_USER_WIDTH == USER_WIDTH);,1
axi_lite_xbar.sv,103,assert(NUM_MASTER > 0);,1
axi_lite_xbar.sv,104,assert(NUM_SLAVE > 0);,1
axi_lite_xbar.sv,105,assert(NUM_RULES > 0);,1
axi_lite_xbar.sv,106,assert(rules.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_xbar.sv,107,assert(rules.NUM_SLAVE == NUM_SLAVE);,1
axi_lite_xbar.sv,113,assert(master[i].AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_xbar.sv,114,assert(master[i].AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_lite_xbar.sv,121,assert(slave[i].AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_xbar.sv,122,assert(slave[i].AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_join.sv,23,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,24,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,25,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,26,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_cut.sv,35,assert(ADDR_WIDTH >= 0);,1
axi_lite_cut.sv,36,assert(DATA_WIDTH >= 0);,1
axi_lite_cut.sv,37,assert(in.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_cut.sv,38,assert(in.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_lite_cut.sv,39,assert(out.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_cut.sv,40,assert(out.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_lite_join.sv,23,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,24,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_to_axi_lite.sv,36,assert(NUM_PENDING_RD > 0);,1
axi_to_axi_lite.sv,37,assert(NUM_PENDING_WR > 0);,1
axi_to_axi_lite.sv,38,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_to_axi_lite.sv,39,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_multicut.sv,37,assert(NUM_CUTS >= 0);,1
axi_cut.sv,48,assert(ADDR_WIDTH >= 0);,1
axi_cut.sv,49,assert(DATA_WIDTH >= 0);,1
axi_cut.sv,50,assert(ID_WIDTH >= 0);,1
axi_cut.sv,51,assert(USER_WIDTH >= 0);,1
axi_cut.sv,52,assert(in.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_cut.sv,53,assert(in.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_cut.sv,54,assert(in.AXI_ID_WIDTH == ID_WIDTH);,1
axi_cut.sv,55,assert(in.AXI_USER_WIDTH == USER_WIDTH);,1
axi_cut.sv,56,assert(out.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_cut.sv,57,assert(out.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_cut.sv,58,assert(out.AXI_ID_WIDTH == ID_WIDTH);,1
axi_cut.sv,59,assert(out.AXI_USER_WIDTH == USER_WIDTH);,1
axi_modify_address.sv,30,assert(ADDR_WIDTH_IN > 0);,1
axi_modify_address.sv,31,assert(ADDR_WIDTH_OUT > 0);,1
axi_multicut.sv,41,assert(NUM_CUTS >= 0);,1
axi_arbiter.sv,27,assert(NUM_REQ >= 0);,1
axi_arbiter.sv,28,assert(arb.NUM_REQ == NUM_REQ);,1
axi_arbiter.sv,78,assert(NUM_REQ >= 0);,1
axi_arbiter.sv,79,assert(ID_WIDTH >= 0);,1
axi_lite_to_axi.sv,22,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,23,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
tb_axi_lite_xbar.sv,137,assert(rand_success);,1
tb_axi_lite_xbar.sv,160,assert(rand_success);,1
tb_axi_atop_filter.sv,471,assert (downstream.aw_atop == '0);,1
tb_axi_atop_filter.sv,569,assert (downstream.ar_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,570,assert (downstream.ar_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,571,assert (downstream.ar_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,572,assert (downstream.ar_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,573,assert (downstream.ar_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,574,assert (downstream.ar_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,575,assert (downstream.ar_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,576,assert (downstream.ar_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,577,assert (downstream.ar_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,578,assert (downstream.ar_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,585,assert (downstream.aw_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,586,assert (downstream.aw_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,587,assert (downstream.aw_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,588,assert (downstream.aw_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,589,assert (downstream.aw_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,590,assert (downstream.aw_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,591,assert (downstream.aw_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,592,assert (downstream.aw_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,593,assert (downstream.aw_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,594,assert (downstream.aw_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,601,assert (downstream.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,602,assert (downstream.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,603,assert (downstream.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,604,assert (downstream.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,616,assert (upstream.r_id == exp_beat.r_id);,1
tb_axi_atop_filter.sv,617,assert (upstream.r_data == exp_beat.r_data);,1
tb_axi_atop_filter.sv,618,assert (upstream.r_resp == exp_beat.r_resp);,1
tb_axi_atop_filter.sv,619,assert (upstream.r_last == exp_beat.r_last);,1
tb_axi_atop_filter.sv,620,assert (upstream.r_user == exp_beat.r_user);,1
tb_axi_atop_filter.sv,632,assert (upstream.b_id == exp_beat.b_id);,1
tb_axi_atop_filter.sv,633,assert (upstream.b_resp == exp_beat.b_resp);,1
tb_axi_atop_filter.sv,634,assert (upstream.b_user == exp_beat.b_user);,1
axi_lite_to_reg.sv,32,assert(ADDR_WIDTH > 0);,1
axi_lite_to_reg.sv,33,assert(DATA_WIDTH > 0);,1
cdc_fifo_gray.sv,48,assert(LOG_DEPTH > 0);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,79,assert(tck_src > 0);,1
cdc_2phase_tb.sv,105,assert(tck_dst > 0);,1
cdc_fifo_tb.sv,83,assert(tck_src > 0);,1
cdc_fifo_tb.sv,109,assert(tck_dst > 0);,1
graycode_tb.sv,26,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
plusarg_file_mem.sv,43,assert(ADDR_BITS <= 64);,1
or operator in SVA.sv,9,assert property(assert_or_example) else $fatal("Assertion failed: Either signal_a or signal_b must be high.");,2
or operator in SVA.sv,14,assert property(assert_or_example) else $fatal("Assertion failed: Either signal_a or signal_b must be high.");,2
or operator in SVA.sv,19,assert property(assert_or_example) else $fatal("Assertion failed: Either signal_a or signal_b must be high.");,2
top.sv,30,assert property(s_a);,1
top.sv,34,assert property(s_a);,1
top.sv,38,assert property(s_a);,1
top.sv,42,assert property(s_a);,1
top.sv,43,assert property(s_b);,1
top.sv,44,assert property(s_c);,1
top.sv,31,assert property (p_expr);,1
top.sv,35,assert property (p_expr);,1
top.sv,39,assert property (p_expr);,1
top.sv,43,assert property (p_expr);,1
throughtout_within_SVA.sv,9,assert property(assert_throughout_example) else $fatal("Assertion failed: signal_a must be high throughout seq_b or signal_b must be high throughout seq_a.");,3
throughtout_within_SVA.sv,14,assert property(assert_throughout_example) else $fatal("Assertion failed: signal_a must be high throughout seq_b or signal_b must be high throughout seq_a.");,3
throughtout_within_SVA.sv,19,assert property(assert_throughout_example) else $fatal("Assertion failed: signal_a must be high throughout seq_b or signal_b must be high throughout seq_a.");,3
throughtout_within_SVA.sv,29,assert property(assert_within_example) else $fatal("Assertion failed: signal_a must be high within seq_b or signal_b must be high within seq_a.");,3
test.sv,38,assert(th1.randomize);,1
top.sv,29,assert property (handshake);,1
top.sv,33,assert property (handshake);,1
top.sv,37,assert property (handshake);,1
top.sv,41,assert property (handshake);,1
example.v.sv,9,assert property(assert_and_example) else $fatal("Assertion failed: Both signal_a and signal_b must be high.");,2
example.v.sv,14,assert property(assert_and_example) else $fatal("Assertion failed: Both signal_a and signal_b must be high.");,2
example.v.sv,19,assert property(assert_and_example) else $fatal("Assertion failed: Both signal_a and signal_b must be high.");,2
pattren.sv,47,assert(th1.randomize);,1
test_ir_transmitter.sv,140,assert(ir_led_pulse_count == expected_ir_led_pulse_count);,1
ariane_pkg.sv,86,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,89,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,90,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,91,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
ariane_pkg.sv,92,assert(Cfg.NrPMPEntries <= 16);,1
ariane_pkg.sv,86,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,89,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,90,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,91,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
ariane_pkg.sv,92,assert(Cfg.NrPMPEntries <= 16);,1
sp3_demux_tb.sv,89,assert(word_a == tx_word_a);,1
sp3_demux_tb.sv,90,assert(word_b == tx_word_b);,1
sram_mem.sv,57,assert(num_words*WidthBytes <= PreloadBufferSize);,1
CHECKER.sv,179,assert property ( Index_Check_delay and Update_delay and Check_Valid_Date_delay ) else begin $display("*************************************************************************");,5
CHECKER.sv,187,assert property ( Index_Check_delay and Update_delay and Check_Valid_Date_delay ) else begin $display("*************************************************************************");,5
miter.sv,164,assert (uut_gbl_cyc == o_wb_gbl_cyc);,1
miter.sv,165,assert (uut_gbl_stb == o_wb_gbl_stb);,1
miter.sv,166,assert (uut_lcl_cyc == o_wb_lcl_cyc);,1
miter.sv,167,assert (uut_lcl_stb == o_wb_lcl_stb);,1
miter.sv,171,assert (uut_we == o_wb_we);,1
miter.sv,172,assert (uut_addr == o_wb_addr);,1
miter.sv,173,assert (uut_data == o_wb_data);,1
miter.sv,174,assert (uut_sel == o_wb_sel);,1
tb.sv,273,assert (a_count <= max_transfers);,1
tb.sv,286,assert (b_count <= max_transfers);,1
CHECKER.sv,190,"assert property(rst_check) $fatal(0,""Assertion 1 is violated"");",1
CHECKER.sv,217,"assert property( make_valid_check) else $fatal(0,""Assertion 4 is violated"");",2
CHECKER.sv,238,"assert property( make_inter_check) else $fatal(0,""Assertion 5 is violated"");",2
CHECKER.sv,243,"assert property( make_inter_check) else $fatal(0,""Assertion 5 is violated"");",2
CHECKER.sv,248,"assert property( make_inter_check) else $fatal(0,""Assertion 5 is violated"");",2
simplebus_master_driver.sv,26,assert (item.tr_type == simplebus_item::REQ);,1
simplebus_slave_driver.sv,28,assert (item.tr_type == simplebus_item::GET_REQ);,1
simplebus_slave_driver.sv,39,assert (item.tr_type == simplebus_item::RESP);,1
top.sv,34,assert property(stable);,1
top.sv,38,assert property(stable);,1
top.sv,40,assert property(addr);,1
top.sv,44,assert property(addr);,1
sync_fifo.v,241,assert(!full);,1
sync_fifo.v,242,assert(empty);,1
sync_fifo.v,243,assert(count == 0);,1
sync_fifo.v,253,assert(rd_addr == 0);,1
sync_fifo.v,254,assert(!full);,1
sync_fifo.v,256,assert(wr_addr == 0);,1
sync_fifo.v,257,assert(empty);,1
sync_fifo.v,262,assert(wr_addr[ADDR_WIDTH-1:0] < SIZE);,1
sync_fifo.v,263,assert(rd_addr[ADDR_WIDTH-1:0] < SIZE);,1
sync_fifo.v,264,assert(count <= SIZE);,1
sync_fifo.v,276,assert(count == 0);,1
sync_fifo.v,277,assert(!full);,1
sync_fifo.v,278,assert(empty);,1
sync_fifo.v,279,assert(dequeue_value == 0);,1
sync_fifo.v,290,assert(wr_addr == 0);,1
sync_fifo.v,291,assert(rd_addr == 0);,1
sync_fifo.v,292,assert(count == 0);,1
sync_fifo.v,294,assert(wr_addr_flip == 0);,1
sync_fifo.v,295,assert(rd_addr_flip == 0);,1
sync_fifo.v,312,assert(data[rd_addr[ADDR_WIDTH-1:0]] == dequeue_value);,1
sync_fifo.v,323,assert(wr_addr[ADDR_WIDTH-1:0] == 0);,1
sync_fifo.v,326,assert(wr_addr_flip == 0);,1
sync_fifo.v,347,assert(rd_addr[ADDR_WIDTH-1:0] == 0);,1
sync_fifo.v,350,assert(rd_addr_flip == 0);,1
sync_fifo.v,364,assert(data[rd_addr[ADDR_WIDTH-1:0]] == dequeue_value);,1
sync_fifo.v,372,assert(wr_addr[ADDR_WIDTH-1:0] == 0);,1
sync_fifo.v,375,assert(wr_addr_flip == 0);,1
sync_fifo.v,389,assert(rd_addr[ADDR_WIDTH-1:0] == 0);,1
sync_fifo.v,392,assert(rd_addr_flip == 0);,1
sync_fifo.v,407,assert(wr_addr == 0);,1
sync_fifo.v,408,assert(rd_addr == 0);,1
sync_fifo.v,409,assert(wr_addr_flip == 0);,1
sync_fifo.v,410,assert(rd_addr_flip == 0);,1
sync_fifo.v,412,assert(count == 0);,1
sync_fifo.v,419,assert(wr_addr >= rd_addr); // read pointer is always lagging behind write pointer else assert(wr_addr < rd_addr);,3
sync_fifo.v,439,cover(reset);,1
sync_fifo.v,447,cover(full);,1
sync_fifo.v,461,cover(enqueue_en);,1
sync_fifo.v,651,assert(this_data_location_had_been_written_once == 0);,1
sync_fifo.v,655,assert(&this_data_location_had_been_written_once); // all fifo locations had been traversed else assert(this_data_location_had_been_written_once == ((1 << wr_addr[ADDR_WIDTH-1:0]) - 1)); // same as {{wr_addr[ADDR_WIDTH-1:0]}1'b1} end end // for address rollover always @(posedge clk) begin if(wr_addr[ADDR_WIDTH-1:0] == rd_addr[ADDR_WIDTH-1:0]) begin if((wr_addr[ADDR_WIDTH:0] == rd_addr[ADDR_WIDTH:0])) assert(empty);,13
sync_fifo.v,698,assert(wr_addr[ADDR_WIDTH] != rd_addr[ADDR_WIDTH]);,1
sync_fifo.v,710,"assert(data[data_block_index] >= 0); // != {WIDTH{1'bx}}); , use >= 0 since 'data' is unsigned end endgenerate always @(posedge clk) begin case(f_state) IDLE: begin end FIRST_DATA_IS_WRITTEN: begin if($past(f_state) == IDLE) assert($past(wr) && ($past(wr_addr) == f_first_addr) && ($past(enqueue_value) == first_data)); //assert(f_first_addr_in_fifo); assume(!dequeue_en); // do not read until the two pieces of data is written",21
sync_fifo.v,733,assume(!enqueue_en);,1
sync_fifo.v,735,assert(data[f_first_addr] == first_data);,1
sync_fifo.v,737,assert(!empty);,1
sync_fifo.v,745,assert(count >= 2);,1
sync_fifo.v,746,assert(!empty);,1
sync_fifo.v,749,assume(!enqueue_en); // do not write anymore since this is only a twin-write test assert(data[f_first_addr] == first_data);,2
sync_fifo.v,753,assert(data[f_second_addr] == second_data);,1
sync_fifo.v,756,assert(dequeue_value == first_data);,1
sync_fifo.v,763,"assert(!empty); // we have only read out one data, there is still one more data in the fifo assume(!enqueue_en); // do not write anymore since this is only a twin-write test if(rd_addr != f_first_addr) assume(!dequeue_en);",5
sync_fifo.v,770,assert(data[f_second_addr] == second_data);,1
sync_fifo.v,772,assert(dequeue_value == second_data);,1
sync_fifo.v,820,assume(!reset);,1
sync_fifo.v,821,assume(enqueue_en);,1
sync_fifo.v,822,assume(dequeue_en);,1
sync_fifo.v,831,assume(enqueue_en);,1
sync_fifo.v,832,assume(!dequeue_en); // do not read yet when the desired data had not been written assume(enqueue_value == 1); // Wrote first value end end always @(posedge clk) // test for reliability if(first_clock_had_passed) cover((f_running_state == FOREVER_RUNNING) && ($past(f_running_state) == FOREVER_RUNNING) && ($past(count) == 1) && ($past(enqueue_value) == SIZE-1));,9
async_fifo.v,369,assert(read_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER);,1
async_fifo.v,371,assert(read_ptr == 0);,1
async_fifo.v,374,assert(read_ptr_gray == 0);,1
async_fifo.v,394,assert(read_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER); // needs manual rollover end else assert(read_ptr == $past(read_ptr) + 1); // no need manual rollover `else `ifdef REGISTER_RETIMING_FOR_READ_DATA assert(previous_read_data == `else assert(read_data == `endif fifo_data[$past(read_ptr[ADDR_WIDTH-1:0]])); // passed verilator Warning-WIDTH assert(read_ptr == $past(read_ptr) + 1); // no need manual rollover `endif end end end `endif,20
async_fifo.v,521,assert(write_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER);,1
async_fifo.v,523,assert(write_ptr == 0);,1
async_fifo.v,526,assert(write_ptr_gray == 0);,1
async_fifo.v,548,assert(write_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER); // needs manual rollover end else assert(write_ptr == $past(write_ptr) + 1); // no need manual rollover `else assert(write_ptr == $past(write_ptr) + 1); // no need manual rollover `endif end end end `endif /*See https://zipcpu.com/blog/2018/07/06/afifo.html for a formal proof of afifo in general*/ `ifdef FORMAL reg first_clock_had_passed;,20
async_fifo.v,600,assert(first_write_clock_had_passed == 0);,1
async_fifo.v,601,assert(first_read_clock_had_passed == 0);,1
async_fifo.v,611,assert(~empty || ~full); // ensures that only one condition is satisfied end */ initial assume(write_reset);,4
async_fifo.v,680,assert(write_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER);,1
async_fifo.v,681,assert(write_ptr_gray == 0);,1
async_fifo.v,693,assert(read_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER);,1
async_fifo.v,694,assert(read_ptr_gray == 0);,1
async_fifo.v,695,assert(read_data == 0);,1
async_fifo.v,696,assert(empty);,1
async_fifo.v,742,assume(f_wclk_step != 0);,1
async_fifo.v,744,assume(f_rclk_step != 0);,1
async_fifo.v,746,"assume(f_rclk_step != f_wclk_step); // so that we have two different clock speed reg [F_CLKBITS-1:0] f_wclk_count, f_rclk_count;",3
async_fifo.v,757,assume(write_clk == gclk_w);,1
async_fifo.v,758,assume(read_clk == gclk_r);,1
async_fifo.v,759,cover(write_clk);,1
async_fifo.v,760,cover(read_clk);,1
async_fifo.v,824,assume(write_data == first_data);,1
async_fifo.v,837,assume(write_data == second_data);,1
async_fifo.v,853,assert(first_data_is_written == 0);,1
async_fifo.v,854,assert(second_data_is_written == 0);,1
async_fifo.v,859,assert(first_data_is_read == 0);,1
async_fifo.v,860,assert(second_data_is_read == 0);,1
async_fifo.v,870,assert(first_data_is_written == 0);,1
async_fifo.v,871,assert(second_data_is_written == 0);,1
async_fifo.v,878,assert(first_data_is_written == 1);,1
async_fifo.v,879,assert(second_data_is_written == 0);,1
async_fifo.v,880,assert(first_data_is_read == 0);,1
async_fifo.v,881,assert(second_data_is_read == 0);,1
async_fifo.v,895,assert(first_data_is_written == 1);,1
async_fifo.v,896,assert(second_data_is_written == 1);,1
async_fifo.v,912,assert(~second_data_is_written);,1
async_fifo.v,919,assert(first_data_is_written);,1
async_fifo.v,927,assert(first_data_is_written == 0);,1
async_fifo.v,928,assert(second_data_is_written == 0);,1
async_fifo.v,979,assert(first_data_is_read == 0);,1
async_fifo.v,980,assert(second_data_is_read == 0);,1
async_fifo.v,988,assert(first_data_is_read == 1);,1
async_fifo.v,989,assert(second_data_is_read == 0);,1
async_fifo.v,995,assert(second_data_is_read == 1);,1
async_fifo.v,996,assert(first_data_is_read == 1);,1
async_fifo.v,1008,assert(~second_data_is_read);,1
async_fifo.v,1015,assert(first_data_is_read);,1
async_fifo.v,1023,assert(first_data_is_read == 1);,1
async_fifo.v,1025,assert(second_data_is_read == 1);,1
async_fifo.v,1034,assert(first_data_is_read == 0);,1
async_fifo.v,1035,assert(second_data_is_read == 0);,1
async_fifo.v,1191,assume(write_en);,1
async_fifo.v,1192,assume(write_data == test_write_data);,1
async_fifo.v,1197,assume(!write_en);,1
async_fifo.v,1211,assume(!write_reset);,1
async_fifo.v,1212,assume(!read_reset);,1
async_fifo.v,1232,assert(fifo_data[fifo_check_index] == {WIDTH{1'b0}});,1
async_fifo.v,1268,"assert(read_data <= {WIDTH{1'b1}}); // don't care end end end end `endif `ifdef FORMAL //////////////////////////////////////////////////// // // Some cover statements, to make sure valuable states // are even reachable // //////////////////////////////////////////////////// // // Make sure a reset is possible in either domain always @(posedge write_clk)",21
async_fifo.v,1289,cover(first_write_clock_had_passed && write_reset);,1
async_fifo.v,1292,cover(first_read_clock_had_passed && read_reset);,1
async_fifo.v,1301,cover(full);,1
async_fifo.v,1315,cover(write_en);,1
ddr3_memory_controller.v,2257,cover(main_state == STATE_READ_DATA); // to obtain a RAM read transaction waveform cover(main_state == STATE_WRITE_DATA); // to obtain a RAM write transaction waveform end end always @(posedge clk_serdes) begin if(data_write_is_ongoing) begin assert(dqs == dqs_w);,10
ddr3_memory_controller.v,2276,assert(dqs_n == dqs_n_w);,1
ddr3_memory_controller.v,2286,assert(dq == dq_w);,1
cells_sim.v,558,assert(A0m==A1m);,1
cells_sim.v,559,assert(B0m==B1m);,1
cells_sim.v,560,assert(C0m==C1m);,1
cells_sim.v,561,assert(D0m==D1m);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
Compressor.v,428,assert property (LOAD_W_EN_CHECK);,1
Compressor.v,433,assert property (LOAD_W_EN_CHECK);,1
Compressor.v,435,assert property (P2);,1
Compressor.v,440,assert property (P2);,1
Compressor.v,443,assert property (P3);,1
Compressor.v,448,assert property (P3);,1
Compressor.v,451,assert property (P4);,1
Compressor.v,455,assert property (P4);,1
Compressor.v,457,assert property (P5);,1
Compressor.v,461,assert property (P5);,1
Compressor.v,464,assert property (P6);,1
Compressor.v,468,assert property (P6);,1
Compressor.v,471,assert property (P7);,1
Compressor.v,475,assert property (P7);,1
Compressor.v,478,assert property (P8);,1
Compressor.v,482,assert property (P8);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
picorv32_pcpi.v,2114,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32_pcpi.v,2117,restrict property (resetn != $initstate);,1
picorv32_pcpi.v,2127,assert (mem_wstrb == 0);,1
picorv32_pcpi.v,2139,assert (ok);,1
picorv32_pcpi.v,2157,assert(mem_valid);,1
picorv32_pcpi.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32_pcpi.v,2159,assert(mem_wstrb == 0);,1
picorv32_pcpi.v,2162,assert(mem_valid);,1
picorv32_pcpi.v,2163,assert(mem_addr == last_mem_la_addr);,1
picorv32_pcpi.v,2164,assert(mem_wdata == last_mem_la_wdata);,1
picorv32_pcpi.v,2165,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32_pcpi.v,2168,assert(!mem_valid || mem_ready);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
axi2axilite.v,927,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,932,assert(m_axi_awvalid);,1
axi2axilite.v,934,assert(!skids_awready);,1
axi2axilite.v,936,assert(!skids_awready);,1
axi2axilite.v,938,assert(!skids_awready);,1
axi2axilite.v,943,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,963,assert(rid == S_AXI_RID);,1
axi2axilite.v,967,assert(rid == S_AXI_RID);,1
axi2axilite.v,971,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,976,assert(m_axi_arvalid);,1
axi2axilite.v,977,assert(!skids_arready);,1
axi2axilite.v,995,assume(!skids_awvalid);,1
axi2axilite.v,996,assume(!skids_wvalid);,1
axi2axilite.v,997,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,998,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,999,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1000,assert(!skidm_bvalid);,1
axi2axilite.v,1001,assert(!S_AXI_BVALID);,1
axi2axilite.v,1010,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1011,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1012,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1044,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1046,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1070,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1072,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
aximwr2wbsp.v,664,assume(!i_wb_err);,1
aximwr2wbsp.v,665,assert(!err_state);,1
aximwr2wbsp.v,669,assert(o_wb_cyc);,1
aximwr2wbsp.v,671,assert(!S_AXI_BRESP[1]);,1
aximwr2wbsp.v,672,assert(!S_AXI_BRESP[0]);,1
axi3reorder.v,479,assert(sr_write == 0);,1
axi3reorder.v,494,cover(cvr_sreg_full && sr_valid == 0);,1
axi3reorder.v,631,assume(!S_AXI_ARESETN);,1
axi3reorder.v,636,assume(!S_AXI3_AWVALID);,1
axi3reorder.v,637,assume(!S_AXI3_WVALID);,1
axi3reorder.v,639,assume(!M_AXI_WVALID);,1
axi3reorder.v,643,assume(S_AXI3_AWVALID);,1
axi3reorder.v,649,assume(S_AXI3_WVALID);,1
axi3reorder.v,658,assert(M_AXI_WVALID);,1
axi3reorder.v,695,assert(!f_ckfifo_empty);,1
axi3reorder.v,696,assert(f_ckfifo_id == M_AXI_WID);,1
axi3reorder.v,697,assert(f_ckfifo_data == M_AXI_WDATA);,1
axi3reorder.v,698,assert(f_ckfifo_strb == M_AXI_WSTRB);,1
axi3reorder.v,699,assert(f_ckfifo_last == M_AXI_WLAST);,1
axi3reorder.v,716,assert(f_awid_count > 0);,1
axi3reorder.v,722,assume(S_AXI3_AWID == 0);,1
axi3reorder.v,727,assume(S_AXI3_WID == 0);,1
axi3reorder.v,728,assume(S_AXI3_WDATA == 0);,1
axi3reorder.v,729,assume(S_AXI3_WSTRB == 0);,1
axi3reorder.v,730,assume(S_AXI3_WLAST == 0);,1
axi3reorder.v,736,assert(M_AXI_WID == 0);,1
axi3reorder.v,737,assert(M_AXI_WDATA == 0);,1
axi3reorder.v,738,assert(M_AXI_WSTRB == 0);,1
axi3reorder.v,739,assert(M_AXI_WLAST == 0);,1
aximrd2wbsp.v,490,assume(w_reset);,1
aximrd2wbsp.v,505,assert(!o_wb_stb && !o_wb_cyc);,1
aximrd2wbsp.v,530,assert(fwb_outstanding == 0);,1
aximrd2wbsp.v,596,assert(resp_fifo_fill == 1);,1
aximrd2wbsp.v,603,assert(o_wb_stb || lastid_fifo_full);,1
aximrd2wbsp.v,607,assert(stblen == 0);,1
aximrd2wbsp.v,612,assert(!o_wb_stb);,1
aximrd2wbsp.v,613,assert(!lastid_fifo_wr);,1
aximrd2wbsp.v,620,assert(!last_ack);,1
aximrd2wbsp.v,626,assert(!last_ack);,1
aximrd2wbsp.v,628,assert(midissue || last_ack);,1
aximrd2wbsp.v,630,assert(last_ack == last_stb);,1
aximrd2wbsp.v,633,assert(o_wb_cyc);,1
aximrd2wbsp.v,647,assert(!o_wb_cyc);,1
aximrd2wbsp.v,730,cover(cvr_reads == 4);,1
aximrd2wbsp.v,733,cover(cvr_read_bursts == 4);,1
aximrd2wbsp.v,736,cover(cvr_rdid_bursts == 4);,1
axissafety.v,435,assume(!S_AXI_ARESETN);,1
axissafety.v,441,assert(!M_AXIS_TVALID);,1
axissafety.v,444,assert(M_AXIS_TVALID);,1
axissafety.v,466,assert(fm_packet_counter < OPT_PACKET_LENGTH);,1
axissafety.v,469,assert(m_packet_count == fm_packet_counter);,1
axissafety.v,474,assert(s_packet_counter == 0);,1
axissafety.v,475,assert(m_packet_count == OPT_PACKET_LENGTH-2);,1
axissafety.v,479,assert(m_packet_count == OPT_PACKET_LENGTH-1);,1
axissafety.v,489,assert(s_packet_counter < OPT_PACKET_LENGTH);,1
axissafety.v,506,assert(fm_stall_count < OPT_MAX_STALL);,1
axissafety.v,516,assume(!S_AXIS_TVALID);,1
axissafety.v,519,assume(S_AXIS_TVALID);,1
axissafety.v,546,assert(s_packet_counter == fs_packet_counter);,1
axissafety.v,548,assert(s_packet_counter == 0);,1
axissafety.v,583,assert(stall_count == f_stall_count);,1
axissafety.v,586,assume(f_stall_count <= OPT_MAX_STALL);,1
axissafety.v,592,assert(!o_fault);,1
demofull.v,996,assume(!S_AXI_ARESETN);,1
demofull.v,1084,assert(S_AXI_BVALID);,1
demofull.v,1091,assert(!S_AXI_WREADY);,1
demofull.v,1115,assert(S_AXI_ARREADY);,1
demofull.v,1118,assert(axi_rlen <= 256);,1
demofull.v,1133,assert(!rskd_lock);,1
demofull.v,1136,assert(S_AXI_BRESP == 2'b00);,1
demofull.v,1142,assert(S_AXI_RID == 0);,1
demofull.v,1143,assert(S_AXI_RDATA == 0);,1
demofull.v,1144,assert(S_AXI_RRESP == 2'b00);,1
demofull.v,1149,assert(o_waddr == 0);,1
demofull.v,1150,assert(o_wdata == 0);,1
demofull.v,1151,assert(o_wstrb == 0);,1
demofull.v,1194,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
axlite2wbsp.v,436,assume(!i_axi_reset_n);,1
axlite2wbsp.v,495,assert(f_axi_rd_outstanding == f_rd_fifo_axi_used);,1
axlite2wbsp.v,503,assert(f_axi_awr_outstanding == 0);,1
axlite2wbsp.v,504,assert(f_axi_wr_outstanding == 0);,1
axlite2wbsp.v,510,assert(f_axi_rd_outstanding == 0);,1
axlite2wbsp.v,519,assume(i_axi_awvalid == 0);,1
axlite2wbsp.v,520,assume(i_axi_wvalid == 0);,1
axlite2wbsp.v,522,assert(o_axi_bvalid == 0);,1
axlite2wbsp.v,528,assume(i_axi_arvalid == 0);,1
axlite2wbsp.v,529,assert(o_axi_rvalid == 0);,1
demoaxi.v,450,assert(f_axi_rd_outstanding == 0);,1
demoaxi.v,454,assert(f_axi_rd_outstanding == 1);,1
demoaxi.v,628,cover(fw_wrdemo_pipe[0]);,1
demoaxi.v,629,cover(fw_wrdemo_pipe[1]);,1
demoaxi.v,630,cover(fw_wrdemo_pipe[2]);,1
demoaxi.v,631,cover(fw_wrdemo_pipe[3]);,1
demoaxi.v,632,cover(fw_wrdemo_pipe[4]);,1
demoaxi.v,633,cover(fw_wrdemo_pipe[5]);,1
demoaxi.v,634,cover(fw_wrdemo_pipe[6]);,1
demoaxi.v,635,cover(fw_wrdemo_pipe[7]); // cover(fw_wrdemo_pipe[8]);,2
demoaxi.v,637,cover(fw_wrdemo_pipe[9]);,1
demoaxi.v,638,cover(fw_wrdemo_pipe[10]);,1
demoaxi.v,639,cover(fw_wrdemo_pipe[11]);,1
demoaxi.v,640,cover(fw_wrdemo_pipe[12]);,1
demoaxi.v,641,cover(fw_wrdemo_pipe[13]);,1
demoaxi.v,642,cover(fw_wrdemo_pipe[14]);,1
demoaxi.v,643,cover(fw_wrdemo_pipe[15]);,1
demoaxi.v,644,cover(fw_wrdemo_pipe[16]);,1
demoaxi.v,645,cover(fw_wrdemo_pipe[17]);,1
demoaxi.v,646,cover(fw_wrdemo_pipe[18]);,1
demoaxi.v,647,cover(fw_wrdemo_pipe[19]);,1
demoaxi.v,648,cover(fw_wrdemo_pipe[20]);,1
demoaxi.v,649,cover(fw_wrdemo_pipe[21]);,1
demoaxi.v,650,cover(fw_wrdemo_pipe[22]);,1
demoaxi.v,701,cover(fw_rddemo_pipe[0]);,1
demoaxi.v,702,cover(fw_rddemo_pipe[1]);,1
demoaxi.v,703,cover(fw_rddemo_pipe[2]);,1
demoaxi.v,704,cover(fw_rddemo_pipe[3]);,1
demoaxi.v,705,cover(fw_rddemo_pipe[4]);,1
demoaxi.v,706,cover(fw_rddemo_pipe[5]);,1
demoaxi.v,707,cover(fw_rddemo_pipe[6]);,1
demoaxi.v,708,cover(fw_rddemo_pipe[7]);,1
demoaxi.v,709,cover(fw_rddemo_pipe[8]);,1
demoaxi.v,710,cover(fw_rddemo_pipe[9]);,1
demoaxi.v,711,cover(fw_rddemo_pipe[10]);,1
wbxclk.v,154,assert(bus_abort);,1
wbxclk.v,195,assert(xck_reset);,1
wbxclk.v,360,assume(fwb_step >= 2);,1
wbxclk.v,361,assume(fxck_step >= 2);,1
wbxclk.v,363,assume(fwb_step <= 4'b1000);,1
wbxclk.v,364,assume(fxck_step <= 4'b1000);,1
wbxclk.v,380,assume(i_wb_clk == fwb_count[3]);,1
wbxclk.v,381,assume(i_xclk_clk == fxck_count[3]);,1
wbxclk.v,438,assume(past_wb_reset== i_reset);,1
wbxclk.v,439,assume(past_wb_cyc == i_wb_cyc);,1
wbxclk.v,440,assume(past_wb_stb == i_wb_stb);,1
wbxclk.v,441,assume(past_wb_we == i_wb_we);,1
wbxclk.v,442,assume(past_wb_err == o_wb_err);,1
wbxclk.v,445,assume(!i_wb_cyc);,1
wbxclk.v,447,assume(past_wb_we == i_wb_we);,1
wbxclk.v,462,assume(past_xclk_stall == i_xclk_stall);,1
wbxclk.v,463,assume(past_xclk_data == i_xclk_data);,1
wbxclk.v,464,assume(past_xclk_ack == i_xclk_ack);,1
wbxclk.v,465,assume(past_xclk_err == i_xclk_err);,1
wbxclk.v,513,assert(ackfifo_fill == 0 || xclk_err_state);,1
wbxclk.v,524,assert(wb_active);,1
wbxclk.v,534,assert(reqfifo_fill == fwb_outstanding + 1);,1
wbxclk.v,538,assert(o_xclk_cyc && !o_xclk_stb);,1
wbxclk.v,539,assert(ackfifo_fill == 0);,1
wbxclk.v,540,assert(fxck_outstanding == 0);,1
wbxclk.v,543,assert(wb_active);,1
wbxclk.v,545,assert(!wb_active);,1
wbxclk.v,550,assert(fxck_outstanding == 0);,1
wbxclk.v,551,assert(xck_reset || wb_active || !i_wb_cyc);,1
wbxclk.v,552,assert(!o_xclk_stb);,1
wbxclk.v,554,assert(no_returns || err_stb);,1
wbxclk.v,556,assert(o_wb_err);,1
wbxclk.v,562,assert(reqfifo_fill <= fwb_outstanding + 1);,1
wbxclk.v,563,assert(ackfifo_fill <= fwb_outstanding);,1
wbxclk.v,564,assert(fxck_outstanding <= fwb_outstanding);,1
wbxclk.v,566,assert(wb_active || f_drop_cyc_request);,1
wbxclk.v,574,assert(reqfifo_fill== fwb_outstanding + 1);,1
wbxclk.v,575,assert(ackfifo_fill == 0);,1
wbxclk.v,576,assert(fxck_outstanding == 0);,1
wbxclk.v,577,assert(!o_xclk_stb);,1
wbxclk.v,578,assert(o_xclk_cyc);,1
wbxclk.v,587,assert(o_xclk_cyc || xclk_err_state);,1
wbxclk.v,588,assert(!f_drop_cyc_request);,1
wbxclk.v,589,assert(!xck_reset || bus_abort);,1
wbxclk.v,599,assert(o_xclk_cyc || xck_reset || xclk_err_state);,1
wbxclk.v,608,assert(!i_wb_cyc || fwb_outstanding == reqfifo_fill);,1
wbxclk.v,612,assert(!wb_active);,1
wbxclk.v,618,assert(!ackfifo_full);,1
wbxclk.v,624,assert(i_wb_we == o_xclk_we);,1
wbxclk.v,628,assert(acks_outstanding == fwb_outstanding);,1
wbxclk.v,632,assert(!o_xclk_cyc);,1
wbxclk.v,640,assert(!req_stb || xck_reset);,1
wbxclk.v,641,assert(reqfifo_fill <= 1);,1
wbxclk.v,643,assert(!o_xclk_cyc);,1
wbxclk.v,666,assert(acks_outstanding >= ackfifo_fill);,1
wbxclk.v,667,assert(acks_outstanding >= fxck_outstanding);,1
wbxclk.v,674,assert(acks_outstanding +1 == reqfifo_fill);,1
wbxclk.v,676,assert(!wb_active || o_xclk_cyc || xclk_err_state);,1
wbxclk.v,679,assert(acks_outstanding +1 == reqfifo_fill);,1
wbxclk.v,680,assert(ackfifo_fill == 0);,1
wbxclk.v,681,assert(fxck_outstanding == 0);,1
wbxclk.v,682,assert(!o_xclk_stb);,1
wbxclk.v,683,assert(o_xclk_cyc);,1
wbxclk.v,689,assert(o_xclk_cyc);,1
wbxclk.v,693,assert(!xck_reset);,1
wbxclk.v,696,assert(!xclk_err_state || acks_outstanding != 0 || xck_reset);,1
wbxclk.v,703,assert(f_drop_cyc_request);,1
wbxclk.v,723,assert(o_xclk_cyc);,1
wbxclk.v,728,assert(!ign_ackfifo_stall);,1
wbxclk.v,816,cover(cvr_replies > 1); // 33 cover(cvr_replies > 3); // 38 cover(cvr_replies > 9);,3
wbxclk.v,820,cover(cvr_abort); // 31 cover(cvr_post_abort > 1 && cvr_replies > 1); // 63 cover(cvr_post_abort > 1 && cvr_replies > 2); // 63 cover(cvr_post_abort > 1 && cvr_replies > 3); // 65 cover(cvr_post_abort > 2 && cvr_replies > 3); // 65 cover(cvr_post_abort > 3 && cvr_replies > 3); // 68 cover(cvr_post_abort > 4 && cvr_replies > 3); // 70 cover(cvr_post_abort > 3 && cvr_replies > 6); // 72 end always @(posedge gbl_clk) if (!i_reset) cover(cvr_replies > 9 && !i_wb_clk && acks_outstanding == 0 && fwb_nreqs == fwb_nacks && fwb_nreqs == cvr_replies && !bus_abort && fwb_count != fxck_count);,15
axilsafety.v,979,assert(reset_counter < OPT_MIN_RESET);,1
axilsafety.v,1061,assume(!S_AXI_ARESETN);,1
axilsafety.v,1062,assert(!M_AXI_ARESETN);,1
axilsafety.v,1120,assume(!S_AXI_AWVALID);,1
axilsafety.v,1121,assume(!S_AXI_WVALID);,1
axilsafety.v,1122,assert(aw_count == 0);,1
axilsafety.v,1123,assert(w_count == 0);,1
axilsafety.v,1124,assert(!M_AXI_AWVALID);,1
axilsafety.v,1125,assert(!M_AXI_WVALID);,1
axilsafety.v,1133,assume(!S_AXI_ARVALID);,1
axilsafety.v,1134,assert(r_count == 0);,1
axilsafety.v,1135,assert(!S_AXI_RVALID);,1
axilsafety.v,1136,assert(!M_AXI_ARVALID);,1
axilsafety.v,1176,assert(aw_count == faxils_awr_outstanding);,1
axilsafety.v,1177,assert(w_count == faxils_wr_outstanding);,1
axilsafety.v,1178,assert(r_count == faxils_rd_outstanding);,1
axilsafety.v,1250,assert(!o_write_fault);,1
axilsafety.v,1252,assert(!o_read_fault);,1
axilsafety.v,1264,assert(!aw_stall_limit);,1
axilsafety.v,1265,assert(!w_stall_limit);,1
axilsafety.v,1266,assert(!w_ack_limit);,1
axilsafety.v,1268,assert(!r_stall_limit);,1
axilsafety.v,1269,assert(!r_ack_limit);,1
axilsafety.v,1273,assert(downstream_aw_count == faxilm_awr_outstanding);,1
axilsafety.v,1274,assert(downstream_w_count == faxilm_wr_outstanding);,1
axilsafety.v,1275,assert(downstream_r_count == faxilm_rd_outstanding);,1
axilsafety.v,1297,assert(f_axi_awstall == aw_stall_counter);,1
axilsafety.v,1301,assert(f_axi_wstall == w_stall_counter);,1
axilsafety.v,1305,assert(f_axi_arstall == r_stall_counter);,1
axilsafety.v,1356,cover(faulted && M_AXI_ARESETN && S_AXI_BVALID);,1
axilsafety.v,1359,cover(faulted && M_AXI_ARESETN && S_AXI_RVALID);,1
axilsafety.v,1372,cover(cvr_writes > 5);,1
axilsafety.v,1384,cover(cvr_reads > 5);,1
axilsafety.v,1408,assume(S_AXI_AWADDR != fc_never_write_addr);,1
axilsafety.v,1412,assert(M_AXI_AWADDR != fc_never_write_addr);,1
axilsafety.v,1419,"assume({ S_AXI_WDATA, S_AXI_WSTRB } != fc_never_write_data);",1
axilsafety.v,1423,"assert({ M_AXI_WDATA, M_AXI_WSTRB } != fc_never_write_data);",1
axilsafety.v,1430,assume(S_AXI_ARADDR != fc_never_read_addr);,1
axilsafety.v,1434,assert(M_AXI_ARADDR != fc_never_read_addr);,1
axilsafety.v,1441,assume(M_AXI_RDATA != fc_never_read_data);,1
axilsafety.v,1445,assert(S_AXI_RDATA != fc_never_read_data);,1
aximm2s.v,1404,assert(fifo_fill == 0 || reset_fifo);,1
aximm2s.v,1415,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
aximm2s.v,1424,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1425,assert(fv_start_addr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1426,assert(axi_araddr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1427,assert(axi_raddr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1451,assert(f_next_start == f_last_addr);,1
aximm2s.v,1518,assert(fv_ar_requests_remaining == ar_requests_remaining);,1
aximm2s.v,1528,assert(fv_ar_requests_remaining <= cmd_length_aligned_w);,1
aximm2s.v,1559,assert(axi_raddr[ADDRLSB-1:0] == cmd_addr[ADDRLSB-1:0]);,1
aximm2s.v,1560,assert(axi_abort_pending || fv_axi_raddr == axi_raddr);,1
aximm2s.v,1563,assert(fv_axi_raddr == fv_start_addr);,1
aximm2s.v,1564,assert(axi_raddr == fv_start_addr);,1
aximm2s.v,1570,assert(fv_axi_raddr <= f_last_addr);,1
aximm2s.v,1571,assert(fv_axi_raddr >= fv_start_addr);,1
aximm2s.v,1584,assert(axi_raddr <= fv_axi_raddr);,1
aximm2s.v,1585,assert(fv_start_addr <= axi_raddr);,1
aximm2s.v,1601,assert(!M_AXI_ARVALID);,1
aximm2s.v,1602,assert(!M_AXI_RVALID);,1
aximm2s.v,1617,assert(!r_busy);,1
aximm2s.v,1630,assert(!r_busy);,1
aximm2s.v,1673,assert(M_AXI_ARVALID);,1
aximm2s.v,1678,assert(r_max_burst > 0);,1
aximm2s.v,1684,assert(initial_burstlen > 0);,1
aximm2s.v,1696,assert(cmd_addr == axi_raddr);,1
aximm2s.v,1698,assert(cmd_addr == fv_start_addr);,1
aximm2s.v,1738,assert(M_AXI_ARADDR == fv_start_addr);,1
aximm2s.v,1748,assert(rd_reads_remaining <= cmd_length_w);,1
aximm2s.v,1752,assert(ar_bursts_outstanding <= rd_reads_remaining);,1
aximm2s.v,1771,assert(!M_AXI_ARVALID);,1
aximm2s.v,1813,assert(!o_int);,1
aximm2s.v,1831,assume(M_AXI_RDATA != f_restricted);,1
aximm2s.v,1836,assert(M_AXIS_TDATA != f_restricted);,1
aximm2s.v,1881,cover( r_err && cvr_aborted);,1
aximm2s.v,1882,cover( r_err && cvr_buserr);,1
aximm2s.v,1883,cover(!r_err);,1
aximm2s.v,1886,cover(cmd_length_w > 5);,1
aximm2s.v,1887,cover(cmd_length_w > 8);,1
aximm2s.v,1891,cover(&cvr_continued);,1
aximm2s.v,1899,cover(!r_err && fifo_fill > 8 && !r_busy);,1
aximm2s.v,1902,cover(r_busy);,1
aximm2s.v,1905,cover(start_burst);,1
aximm2s.v,1908,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
aximm2s.v,1911,cover(M_AXI_RVALID);,1
aximm2s.v,1914,cover(M_AXI_RVALID & M_AXI_RLAST);,1
aximm2s.v,1918,cover(!ar_none_remaining);,1
aximm2s.v,1921,cover(1);,1
aximm2s.v,1925,cover(!phantom_start);,1
aximm2s.v,1926,cover(phantom_start);,1
aximm2s.v,1944,cover(M_AXIS_TVALID && M_AXIS_TREADY && M_AXIS_TLAST);,1
aximm2s.v,1947,cover(o_int && cvr_lastcount > 2);,1
aximm2s.v,1959,cover(r_err);,1
aximm2s.v,1960,cover(!r_err);,1
aximm2s.v,1961,cover(axi_abort_pending);,1
aximm2s.v,1962,cover(!axi_abort_pending);,1
aximm2s.v,1963,cover(cvr_aborted);,1
aximm2s.v,1964,cover(!cvr_aborted);,1
aximm2s.v,1965,cover(cvr_buserr);,1
aximm2s.v,1966,cover(!cvr_buserr);,1
aximm2s.v,1967,cover(!cvr_buserr && !axi_abort_pending);,1
axivcamera.v,1224,assume(!lost_sync && cfg_active);,1
axivfifo.v,1083,assert(!phantom_write);,1
axivfifo.v,1084,assert(!phantom_read);,1
axivfifo.v,1102,assert(!ofifo_full);,1
axivfifo.v,1117,assert(!M_AXI_WVALID);,1
axivfifo.v,1121,assert(read_from_fifo);,1
axivfifo.v,1123,assert(read_from_fifo);,1
axivfifo.v,1147,assert(o_err);,1
axivfifo.v,1149,assert(o_err);,1
axivfifo.v,1163,assert(!M_AXI_AWVALID);,1
axivfifo.v,1164,assert(!M_AXI_WVALID);,1
axivfifo.v,1165,assert(!M_AXI_ARVALID);,1
axivfifo.v,1225,assert(M_AXI_ARADDR != M_AXI_AWADDR);,1
axivfifo.v,1251,assert(mem_space_available == f_space_available);,1
axivfifo.v,1255,assert(M_AXI_ARADDR == M_AXI_AWADDR);,1
axivfifo.v,1256,assert(!M_AXI_AWVALID || phantom_write);,1
axivfifo.v,1280,assert(mem_data_available == f_data_available);,1
axivfifo.v,1283,assert(vfifo_fill[C_AXI_ADDR_WIDTH]);,1
axivfifo.v,1284,assert(ofifo_empty);,1
axivfifo.v,1313,assert(!M_AXI_AWVALID);,1
axivfifo.v,1314,assert(!M_AXI_WVALID);,1
axivfifo.v,1315,assert(!M_AXI_ARVALID);,1
axivfifo.v,1318,assert(mem_data_available == 0);,1
axivfifo.v,1320,assert(!phantom_read);,1
axivfifo.v,1321,assert(!phantom_write);,1
axivfifo.v,1323,assert(vfifo_fill == 0);,1
axivfifo.v,1356,assume(M_AXI_AWREADY || writes_pending > 0);,1
axivfifo.v,1357,assume(M_AXIS_TREADY);,1
axivfifo.v,1358,assume(M_AXI_WREADY);,1
axivfifo.v,1359,assume(M_AXI_ARREADY);,1
axivfifo.v,1382,cover(cvr_read_bursts > 1 && cvr_write_bursts > 1);,1
axisrandom.v,108,assume(!S_AXI_ARESETN);,1
axisrandom.v,122,assert(!M_AXIS_TVALID);,1
axisrandom.v,124,assert(M_AXIS_TVALID);,1
sfifothresh.v,93,assert(!o_int);,1
wbsafety.v,424,assume(i_reset);,1
wbsafety.v,453,assert(expected_returns == fwbs_outstanding);,1
wbsafety.v,489,assert(!o_fault);,1
wbsafety.v,502,assert(!timeout);,1
wbsafety.v,506,assert(!o_wb_cyc);,1
wbsafety.v,513,assert(sacks == fwbm_nacks);,1
wbsafety.v,517,assert(o_wb_cyc || o_wb_err);,1
wbsafety.v,524,assert(fwbs_nreqs == mreqs);,1
wbsafety.v,528,assert(i_wb_we == o_wb_we);,1
wbsafety.v,532,assert(o_wb_cyc || o_wb_err);,1
wbsafety.v,543,cover(o_fault);,1
wbsafety.v,547,cover(o_fault);,1
wbsafety.v,551,cover(o_fault);,1
wbsafety.v,574,cover(faulted && !o_reset && o_wb_ack);,1
wbsafety.v,581,cover(!i_reset && fwbs_nacks > 4);,1
axiempty.v,273,assume(!S_AXI_ARESETN);,1
axiempty.v,380,assert(S_AXI_ARREADY);,1
axiempty.v,424,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
wbp2classic.v,155,assume(i_reset);,1
wbp2classic.v,195,assume(i_sstb);,1
axisafety.v,1505,assert(f_axi_awr_nbursts <= 1);,1
axisafety.v,1510,assert(!S_AXI_AWREADY);,1
axisafety.v,1512,assert(f_axi_wr_pending == 0);,1
axisafety.v,1521,assert(!r_wvalid || !r_wlast);,1
axisafety.v,1523,assert(s_wbursts == 0);,1
axisafety.v,1524,assert(!S_AXI_WREADY);,1
axisafety.v,1526,assert(1 || S_AXI_AWREADY || !M_AXI_ARESETN || !S_AXI_ARESETN);,1
axisafety.v,1528,assert(S_AXI_AWREADY);,1
axisafety.v,1539,assert(S_AXI_AWREADY == !OPT_SELF_RESET);,1
axisafety.v,1541,assert(!S_AXI_AWREADY);,1
axisafety.v,1543,assert(!S_AXI_AWREADY);,1
axisafety.v,1545,assert(S_AXI_AWREADY);,1
axisafety.v,1547,assert(S_AXI_AWREADY || OPT_SELF_RESET);,1
axisafety.v,1551,assert(s_wbursts == 0);,1
axisafety.v,1553,assert(s_wbursts == f_axi_awr_nbursts);,1
axisafety.v,1555,assert(s_wbursts == 0);,1
axisafety.v,1559,assert(!M_AXI_AWVALID);,1
axisafety.v,1564,assert(o_write_fault || !M_AXI_AWVALID);,1
axisafety.v,1565,assert(!S_AXI_BVALID);,1
axisafety.v,1566,assert(s_wbursts == 0);,1
axisafety.v,1568,assert(f_axi_wr_pending > 0);,1
axisafety.v,1572,assert(waddr_valid);,1
axisafety.v,1576,assert(M_AXI_WVALID && r_wvalid);,1
axisafety.v,1581,assert(waddr_valid == !S_AXI_AWREADY);,1
axisafety.v,1589,assert(M_AXI_WVALID);,1
axisafety.v,1594,assert(M_AXI_AWVALID || !M_AXI_WVALID);,1
axisafety.v,1595,assert(M_AXI_AWVALID || f_axi_wr_pending == 0);,1
axisafety.v,1606,assert(m_wpending == 0);,1
axisafety.v,1611,assert(m_wpending <= 9'h100);,1
axisafety.v,1615,assert(!M_AXI_AWVALID);,1
axisafety.v,1622,assert(!M_AXI_AWVALID);,1
axisafety.v,1623,assert(!M_AXI_WVALID);,1
axisafety.v,1633,assert(!M_AXI_AWVALID);,1
axisafety.v,1634,assert(!M_AXI_WVALID);,1
axisafety.v,1638,assert(f_axi_awr_nbursts == 1);,1
axisafety.v,1641,assert(m_wpending == 0);,1
axisafety.v,1644,assert(!M_AXI_AWVALID);,1
axisafety.v,1648,assert(!r_awvalid);,1
axisafety.v,1665,assert(o_write_fault || write_timeout);,1
axisafety.v,1669,assert(waddr_valid == !S_AXI_AWREADY);,1
axisafety.v,1671,assert(!S_AXI_AWREADY);,1
axisafety.v,1675,assert(waddr_valid == !S_AXI_AWREADY);,1
axisafety.v,1679,assert(!S_AXI_WREADY);,1
axisafety.v,1692,assert(f_axi_rd_nbursts <= 1);,1
axisafety.v,1697,assert(rfifo_id == f_axi_rd_checkid);,1
axisafety.v,1699,assert(rfifo_id != f_axi_rd_checkid);,1
axisafety.v,1703,assert(raddr_valid);,1
axisafety.v,1707,assert(!S_AXI_ARREADY);,1
axisafety.v,1711,assert(raddr_valid == !S_AXI_ARREADY);,1
axisafety.v,1723,assert(!raddr_valid || OPT_SELF_RESET);,1
axisafety.v,1727,assert(!M_AXI_ARVALID);,1
axisafety.v,1731,assert(rfifo_counter == f_axi_rd_outstanding);,1
axisafety.v,1746,assert(skid_arvalid);,1
axisafety.v,1750,assert(read_timeout);,1
axisafety.v,1756,assume(!M_AXI_BVALID);,1
axisafety.v,1757,assume(!M_AXI_RVALID);,1
axisafety.v,1762,assert(raddr_valid == !S_AXI_ARREADY);,1
axisafety.v,1766,assert(raddr_valid);,1
axisafety.v,1772,assert(o_read_fault || o_write_fault /* ... */ );,1
axisafety.v,1886,assert(!o_write_fault || !M_AXI_ARESETN);,1
axisafety.v,1888,assert(!o_write_fault);,1
axisafety.v,1892,assert(!o_read_fault || !M_AXI_ARESETN);,1
axisafety.v,1894,assert(!o_read_fault);,1
axisafety.v,1898,assert(!read_timeout || !M_AXI_ARESETN);,1
axisafety.v,1900,assert(!read_timeout);,1
axisafety.v,1904,assert(!write_timeout || !M_AXI_ARESETN);,1
axisafety.v,1906,assert(!write_timeout);,1
axisafety.v,1910,assert(!M_AXI_AWVALID);,1
axisafety.v,1935,assert(!M_AXI_ARVALID);,1
axisafety.v,1939,assert(m_wpending == fm_axi_wr_pending);,1
axisafety.v,1944,assert(fm_axi_awr_nbursts== f_axi_awr_nbursts);,1
axisafety.v,1945,assert(fm_axi_awr_nbursts == 1);,1
axisafety.v,1978,assume(S_AXI_AWADDR != fc_never_write_addr);,1
axisafety.v,1982,assert(M_AXI_AWADDR != fc_never_write_addr);,1
axisafety.v,1989,"assume({ S_AXI_WDATA, S_AXI_WSTRB } != fc_never_write_data);",1
axisafety.v,1993,"assert({ M_AXI_WDATA, M_AXI_WSTRB } != fc_never_write_data);",1
axisafety.v,2000,assume(S_AXI_ARADDR != fc_never_read_addr);,1
axisafety.v,2004,assume(r_araddr != fc_never_read_addr);,1
axisafety.v,2008,assert(M_AXI_ARADDR != fc_never_read_addr);,1
axisafety.v,2015,assume(M_AXI_RDATA != fc_never_read_data);,1
axisafety.v,2019,assert(S_AXI_RDATA != fc_never_read_data);,1
axisafety.v,2058,cover(S_AXI_AWVALID && S_AXI_AWREADY);,1
axisafety.v,2061,cover(S_AXI_AWVALID && S_AXI_AWREADY && S_AXI_AWLEN == 3);,1
axilempty.v,125,assert(awskd_unused == 0);,1
axilempty.v,139,assert(wskd_unused == 0);,1
axilempty.v,208,assert(arskd_unused == 0);,1
axilempty.v,341,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
axilempty.v,351,assert(S_AXI_RDATA == 0);,1
axilempty.v,353,assert(S_AXI_RRESP == 2'b11);,1
axilempty.v,355,assert(S_AXI_BRESP == 2'b11);,1
axilite2axi.v,299,assert(faxi_awr_nbursts == faxil_awr_outstanding);,1
axilite2axi.v,319,assert(faxil_wr_outstanding == 0);,1
axilite2axi.v,354,assume(S_AXI_AWVALID || !S_AXI_WVALID);,1
axilite2axi.v,356,assume(!S_AXI_AWVALID);,1
axilite2axi.v,366,assume(!S_AXI_ARVALID);,1
axilite2axi.v,370,assume(!S_AXI_AWVALID);,1
wbxbar.v,1114,assume(i_reset);,1
wbxbar.v,1132,assert(grant[N][M-1:0] == 0);,1
wbxbar.v,1138,assert(o_merr[N] || m_stall[N]);,1
wbxbar.v,1151,assert(checkgrant == mgrant[N]);,1
wbxbar.v,1165,assert(mgrant[N]);,1
wbxbar.v,1166,assert(mindex[N] == M);,1
wbxbar.v,1167,assert(sgrant[M]);,1
wbxbar.v,1168,assert(sindex[M] == N);,1
wbxbar.v,1181,assert(grant[sindex[M]][M]);,1
wbxbar.v,1192,assert(sgrant[M] == f_sgrant);,1
wbxbar.v,1217,assume(sgrant == 0);,1
wbxbar.v,1224,assume(o_scyc[M] == 0);,1
wbxbar.v,1225,assume(o_sstb[M] == 0);,1
wbxbar.v,1226,assume(sgrant[M] == 0);,1
wbxbar.v,1235,assume(grant[N] == 0);,1
wbxbar.v,1236,assume(mgrant[N] == 0);,1
wbxbar.v,1269,assert(f_moutstanding[N] <= 1);,1
wbxbar.v,1273,assert(m_stall[N] || o_merr[N]);,1
wbxbar.v,1310,assert(m_stall[N]);,1
wbxbar.v,1348,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1350,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1352,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1354,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1356,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1358,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1366,assert(i_mwe[N] == m_we[N]);,1
wbxbar.v,1376,assert(!o_scyc[M]);,1
wbxbar.v,1421,assume(special_master == 0);,1
wbxbar.v,1424,assume(special_slave == 0);,1
wbxbar.v,1457,assert(address_found == 0);,1
wbxbar.v,1476,assume(special_value == 0);,1
wbxbar.v,1486,assume(i_sack[special_slave]);,1
wbxbar.v,1493,assume(!i_sack[special_slave]);,1
wbxbar.v,1494,assume(!i_serr[special_slave]);,1
wbxbar.v,1542,assert(grant[special_master][special_slave]);,1
wbxbar.v,1543,assert(mgrant[special_master]);,1
wbxbar.v,1544,assert(sgrant[special_slave]);,1
wbxbar.v,1545,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1546,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1547,assert(!o_merr[special_master]);,1
wbxbar.v,1552,assert(o_scyc[special_slave]);,1
wbxbar.v,1553,assert(o_sstb[special_slave]);,1
wbxbar.v,1554,assert(!o_swe[special_slave]);,1
wbxbar.v,1555,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1562,assert(!m_we[special_master]);,1
wbxbar.v,1563,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1570,assert(o_scyc[special_slave]);,1
wbxbar.v,1571,assert(o_sstb[special_slave]);,1
wbxbar.v,1572,assert(!o_swe[special_slave]);,1
wbxbar.v,1573,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1577,assert(i_sack[special_slave]);,1
wbxbar.v,1585,assert(o_mack[special_master]);,1
wbxbar.v,1593,cover(i_mcyc[special_master] && f_read_ack);,1
wbxbar.v,1630,assert(grant[special_master][special_slave]);,1
wbxbar.v,1631,assert(mgrant[special_master]);,1
wbxbar.v,1632,assert(sgrant[special_slave]);,1
wbxbar.v,1633,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1634,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1635,assert(!o_merr[special_master]);,1
wbxbar.v,1640,assert(o_scyc[special_slave]);,1
wbxbar.v,1641,assert(o_sstb[special_slave]);,1
wbxbar.v,1642,assert(o_swe[special_slave]);,1
wbxbar.v,1643,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1654,assert(m_we[special_master]);,1
wbxbar.v,1655,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1664,assert(o_scyc[special_slave]);,1
wbxbar.v,1665,assert(o_sstb[special_slave]);,1
wbxbar.v,1666,assert(o_swe[special_slave]);,1
wbxbar.v,1667,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1680,assert(i_sack[special_slave]);,1
wbxbar.v,1687,assert(o_mack[special_master]);,1
wbxbar.v,1692,cover(i_mcyc[special_master] && f_write_ack);,1
sfifo.v,256,assert(o_fill == f_fill);,1
sfifo.v,260,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,264,assert(o_full == r_full);,1
sfifo.v,271,assert(o_empty == r_empty);,1
sfifo.v,282,assert(r_empty);,1
sfifo.v,286,assert(!r_empty);,1
sfifo.v,288,assert(!r_empty);,1
sfifo.v,295,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,297,assert(o_data == i_data);,1
sfifo.v,350,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,356,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,369,assert(f_first_in_fifo);,1
sfifo.v,371,assert(!f_first_in_fifo);,1
sfifo.v,380,assert(!f_first_in_fifo);,1
sfifo.v,385,assert(f_second_in_fifo);,1
sfifo.v,392,assert(f_second_in_fifo);,1
sfifo.v,394,assert(!f_second_in_fifo);,1
sfifo.v,397,assert(f_first_in_fifo);,1
sfifo.v,400,assert(f_second_in_fifo);,1
sfifo.v,403,assert(f_first_in_fifo);,1
sfifo.v,405,assert(o_data == f_first_data);,1
sfifo.v,407,assert(!f_first_in_fifo);,1
sfifo.v,408,assert(o_data == f_second_data);,1
sfifo.v,435,cover(f_was_full && f_empty);,1
apbslave.v,137,assert(PREADY);,1
apbslave.v,155,assume(mem[f_addr[AW-1:APBLSB]] == f_data);,1
apbslave.v,168,assert(PRDATA == f_data);,1
apbslave.v,171,assert(f_data == mem[f_addr[AW-1:APBLSB]]);,1
apbslave.v,198,cover(cvr_writes[2]);,1
apbslave.v,201,cover(cvr_reads[2]);,1
apbslave.v,220,cover(cvr_seq[0]);,1
apbslave.v,221,cover(cvr_seq[1]);,1
apbslave.v,222,cover(cvr_seq[2]);,1
apbslave.v,226,cover(PRESETn && !PSEL && !PENABLE && cvr_seq[2]);,1
easyaxil.v,397,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
easyaxil.v,408,assert(S_AXI_RDATA == 0);,1
axixbar.v,2050,assert(rerr_id[N] == 0);,1
axixbar.v,2122,assert(mwgrant[N]);,1
axixbar.v,2123,assert(mwindex[N] == iM);,1
axixbar.v,2126,assert(swgrant[iM]);,1
axixbar.v,2127,assert(swindex[iM] == N);,1
axixbar.v,2134,assert(wgrant[N] != 0);,1
axixbar.v,2138,assert(wrequest[N][NS-1:0] == 0);,1
axixbar.v,2158,assert(mrgrant[N]);,1
axixbar.v,2159,assert(mrindex[N] == iM);,1
axixbar.v,2162,assert(srgrant[iM]);,1
axixbar.v,2163,assert(srindex[iM] == N);,1
axixbar.v,2170,assert(rgrant[N] != 0);,1
axixbar.v,2178,assert(!mrempty[N]);,1
axixbar.v,2263,assert(mwfull[N] == &w_mawpending[N]);,1
axixbar.v,2269,assert(mrfull[N] == &w_mrpending[N]);,1
axixbar.v,2469,assume(S_AXI_AWVALID[N] == 0);,1
axixbar.v,2471,assert(wgrant[N] == 0);,1
axixbar.v,2473,assert(mwgrant[N] == 0);,1
axixbar.v,2475,assert(S_AXI_BVALID[N]== 0);,1
axixbar.v,2481,assume(S_AXI_ARVALID [N]== 0);,1
axixbar.v,2483,assert(rgrant[N] == 0);,1
axixbar.v,2485,assert(S_AXI_RVALID[N] == 0);,1
axixbar.v,2491,assert(OPT_READS | OPT_WRITES);,1
axivdisplay.v,773,"assert(req_addr >= { 1'b0, cfg_frame_addr });",1
axivdisplay.v,774,"assert(req_line_addr >= { 1'b0, cfg_frame_addr });",1
axivdisplay.v,775,assert(req_line_addr <= req_addr);,1
axivdisplay.v,781,assert(cfg_frame_lines != 0);,1
axivdisplay.v,782,assert(cfg_line_words != 0);,1
axivdisplay.v,788,assert(r_frame_lines != 0);,1
axivdisplay.v,789,assert(r_line_words != 0);,1
axivdisplay.v,986,assert(axi_arlen+1 == req_line_words);,1
axivdisplay.v,988,assert(axi_arlen+1 < req_line_words);,1
axivdisplay.v,992,assert(!req_hlast);,1
axivdisplay.v,994,assert(axi_arlen < max_burst);,1
axivdisplay.v,996,assert(max_burst > 0);,1
axivdisplay.v,1000,assert(max_burst == req_line_words);,1
axivdisplay.v,1180,assert(!cfg_active);,1
axivdisplay.v,1266,assert(M_AXI_ARBURST == 2'b01);,1
axivdisplay.v,1272,assert(!r_stopped);,1
axivdisplay.v,1288,assert(cfg_frame_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1291,assert(req_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1292,assert(req_line_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1314,assert(M_AXI_RLAST);,1
axivdisplay.v,1317,assume(!M_AXI_RLAST);,1
axivdisplay.v,1373,cover(!soft_reset);,1
axivdisplay.v,1376,cover(start_burst);,1
axivdisplay.v,1379,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
axivdisplay.v,1382,cover(M_AXI_RVALID);,1
axivdisplay.v,1385,cover(M_AXI_RVALID & M_AXI_RLAST);,1
axivdisplay.v,1388,cover(!r_stopped && cvr_full_frame);,1
axivdisplay.v,1391,cover(cvr_full_frame && phantom_start && !r_stopped);,1
axivdisplay.v,1397,assume(M_AXI_ARREADY && M_AXI_RREADY);,1
axivdisplay.v,1398,assume(M_AXIS_TREADY);,1
axivdisplay.v,1399,assume(cfg_frame_addr[12:0] == 0);,1
axivdisplay.v,1400,assume(cfg_line_step[3:0] == 0);,1
axivdisplay.v,1404,cover(cvr_hlast_rlast && cvr_full_frame && phantom_start && !r_stopped);,1
axivdisplay.v,1424,assume(!f_sequential);,1
axivdisplay.v,1427,assume(!f_biglines);,1
axivdisplay.v,1430,assume(!req_addr[C_AXI_ADDR_WIDTH]);,1
axivdisplay.v,1433,assume(!req_line_addr[C_AXI_ADDR_WIDTH]);,1
addrdecode.v,245,assume(i_reset);,1
addrdecode.v,250,assume(!i_valid);,1
addrdecode.v,253,assume(i_valid);,1
addrdecode.v,260,assert(i_reset);,1
addrdecode.v,265,assert(!i_valid);,1
addrdecode.v,268,assert(i_valid);,1
addrdecode.v,276,assert(!o_valid);,1
addrdecode.v,277,assert(o_decode == 0);,1
addrdecode.v,306,assert(!o_decode[iM]);,1
addrdecode.v,313,assert(o_addr == 0);,1
addrdecode.v,314,assert(o_decode == 0);,1
addrdecode.v,315,assert(o_data == 0);,1
addrdecode.v,338,assert(onehot_request);,1
addrdecode.v,353,cover(i_valid);,1
addrdecode.v,356,cover(o_valid);,1
addrdecode.v,359,cover(o_valid && !i_stall);,1
addrdecode.v,373,cover(f_reached[0]);,1
addrdecode.v,382,cover(&f_reached);,1
axidma.v,907,assert(!clear_read_pipeline);,1
axidma.v,910,assert(!clear_read_pipeline);,1
axidma.v,913,assert(!clear_read_pipeline);,1
axidma.v,1575,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1579,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1659,assert(!M_AXI_AWVALID);,1
axidma.v,1660,assert(!M_AXI_WVALID);,1
axidma.v,1661,assert(!M_AXI_ARVALID);,1
axidma.v,1680,assert(f_length != 0);,1
axidma.v,1681,assert(f_length[LGLEN] == 0);,1
axidma.v,1683,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axidma.v,1684,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axidma.v,1762,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1763,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1764,assert(f_length[ADDRLSB-1:0] == 0);,1
axidma.v,1771,assert(!extra_realignment_write);,1
axidma.v,1773,assert(!extra_realignment_write);,1
axidma.v,1775,assert(extra_realignment_write);,1
axidma.v,1779,assert(r_partial_outvalid);,1
axidma.v,1786,assert(f_extra_realignment_read);,1
axidma.v,1788,assert(f_extra_realignment_read == extra_realignment_read);,1
axidma.v,1797,assert(no_read_bursts_outstanding);,1
axidma.v,1801,assert(!r_int);,1
axidma.v,1830,assert(M_AXI_WVALID);,1
axidma.v,1848,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
axidma.v,1854,assert(r_len[ADDRLSB-1:0] == 0);,1
axidma.v,1855,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1856,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1862,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,1863,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,1864,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,1870,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,1872,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axidma.v,1876,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,1881,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,1907,assert(reads_remaining_w == 0);,1
axidma.v,1908,assert(!M_AXI_ARVALID);,1
axidma.v,1909,assert(writes_remaining_w == 0);,1
axidma.v,1934,assert(r_partial_outvalid);,1
axidma.v,1936,assert(!fifo_empty || r_abort || r_err);,1
axidma.v,1962,assert(!M_AXI_WVALID);,1
axidma.v,1969,assert(fifo_data_available == 0);,1
axidma.v,2053,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2057,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
axidma.v,2059,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2066,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
axidma.v,2069,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
axidma.v,2071,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
axidma.v,2087,assert(read_address == f_read_address);,1
axidma.v,2089,assert(read_address[ADDRLSB-1:0] == 0);,1
axidma.v,2093,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2098,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2123,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
axidma.v,2138,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
axidma.v,2146,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
axidma.v,2163,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
axidma.v,2170,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2171,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2173,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
axidma.v,2188,assert(readlen_w != 0);,1
axidma.v,2211,assert(!r_done);,1
axidma.v,2213,assert(!r_done);,1
axidma.v,2221,assert(r_done);,1
axidma.v,2233,assert(M_AXI_WSTRB == 0);,1
axidma.v,2251,assert(reads_remaining_w == 0);,1
axidma.v,2253,assert(reads_remaining_w > 0);,1
axidma.v,2256,assert(readlen_w <= reads_remaining_w);,1
axidma.v,2264,assert(M_AXI_BREADY);,1
axidma.v,2268,assert(M_AXI_RREADY);,1
axidma.v,2291,assert(M_AXI_ARVALID);,1
axidma.v,2295,assert(M_AXI_AWVALID);,1
axidma.v,2316,assert(M_AXI_WVALID);,1
axidma.v,2337,assert(!S_AXIL_BVALID);,1
axidma.v,2338,assert(!S_AXIL_RVALID);,1
axidma.v,2340,assert(!M_AXI_AWVALID);,1
axidma.v,2341,assert(!M_AXI_WVALID);,1
axidma.v,2342,assert(!M_AXI_ARVALID);,1
axidma.v,2344,assert(write_bursts_outstanding == 0);,1
axidma.v,2345,assert(write_requests_remaining == 0);,1
axidma.v,2347,assert(!phantom_read);,1
axidma.v,2348,assert(!phantom_write);,1
axidma.v,2349,assert(!r_busy);,1
axidma.v,2350,assert(read_bursts_outstanding == 0);,1
axidma.v,2351,assert(no_read_bursts_outstanding);,1
axidma.v,2353,assert(r_len == 0);,1
axidma.v,2354,assert(zero_len);,1
axidma.v,2356,assert(write_count == 0);,1
axidma.v,2357,assert(!M_AXI_WLAST);,1
axidma.v,2358,assert(M_AXI_AWLEN == 0);,1
axidma.v,2359,assert(!r_write_fifo);,1
axidma.v,2360,assert(r_src_addr == 0);,1
axidma.v,2361,assert(r_dst_addr == 0);,1
axidma.v,2365,assert(ADDRLSB + LGMAXBURST <= 12);,1
axidma.v,2403,assume(f_const_posn < f_length);,1
axidma.v,2441,assert(f_shifted_wstrb[0]);,1
axidma.v,2442,assert(f_shifted_write[7:0] == f_const_byte);,1
axidma.v,2444,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
axidma.v,2479,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
axidma.v,2516,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
axidma.v,2577,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
axidma.v,2589,cover(!r_busy && r_err);,1
axidma.v,2593,cover(!r_busy && r_abort);,1
axidma.v,2597,cover(reads_remaining_w == 0);,1
axidma.v,2601,cover(reads_remaining_w == 0 && fifo_empty);,1
wbc2pipeline.v,153,assume(i_reset);,1
afifo.v,584,assume(i_wclk == now_wclk);,1
afifo.v,585,assume(i_rclk == now_rclk);,1
afifo.v,596,assume(!pre_wclk && !wclk);,1
afifo.v,597,assume(!pre_rclk && !i_rclk);,1
afifo.v,741,cover(o_rd_empty);,1
afifo.v,742,cover(!o_rd_empty);,1
afifo.v,743,cover(f_state == 2'b01);,1
afifo.v,744,cover(f_state == 2'b10);,1
afifo.v,745,cover(f_state == 2'b11);,1
afifo.v,746,cover(&f_fill[MSB-1:0]);,1
afifo.v,748,cover(i_rd);,1
afifo.v,749,cover(i_rd && !o_rd_empty);,1
afifo.v,770,cover(o_wr_full);,1
afifo.v,771,cover(o_rd_empty && cvr_full);,1
afifo.v,772,cover(o_rd_empty && f_fill == 0 && cvr_full);,1
afifo.v,791,cover(cvr_nearly_full && i_wr_reset_n);,1
afifo.v,792,cover(o_rd_empty && cvr_nearly_full);,1
afifo.v,793,cover(o_rd_empty && f_fill == 0 && cvr_nearly_full);,1
axilsingle.v,317,assert(bfifo.f_first_data != 2'b01);,1
axilsingle.v,320,assert(bfifo.f_second_data != 2'b01);,1
axilsingle.v,324,assume(S_AXI_BRESP != 2'b01);,1
axilsingle.v,328,assume(S_AXI_BRESP != 2'b01);,1
axilsingle.v,336,assert(!bffull || !write_bvalid);,1
axilsingle.v,436,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
axilsingle.v,440,assert(rfifo.f_first_data[1:0] != 2'b01);,1
axilsingle.v,443,assert(rfifo.f_second_data[1:0] != 2'b01);,1
axilsingle.v,447,assume(S_AXI_RRESP != 2'b01);,1
axilsingle.v,451,assume(S_AXI_RRESP != 2'b01);,1
axilsingle.v,585,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
axilsingle.v,615,assert(M_AXI_AWPROT == 0);,1
axilsingle.v,632,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
axilsingle.v,646,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
axilsingle.v,665,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
axilsingle.v,705,cover(cvr_awvalids > 4);,1
axilsingle.v,708,cover(cvr_arvalids > 4);,1
axilsingle.v,711,cover(cvr_reads > 4);,1
axilsingle.v,714,cover(cvr_writes > 4);,1
axil2axis.v,301,assert(write_timer <= OPT_TIMEOUT-1);,1
axil2axis.v,442,assert(read_timer <= OPT_TIMEOUT-1);,1
axil2axis.v,632,assume(!S_AXI_ARESETN);,1
axil2axis.v,737,assert(f_reads == reads_completed);,1
axil2axis.v,739,assert(f_read_pkts == read_bursts_completed);,1
axil2axis.v,743,assert(S_AXIS_TREADY);,1
axil2axis.v,764,assert(f_writes == 0);,1
axil2axis.v,765,assert(f_write_pkts == 0);,1
axil2axis.v,770,assert(f_writes == writes_completed);,1
axil2axis.v,771,assert(f_write_pkts == write_bursts_completed);,1
axil2axis.v,784,assert(S_AXI_RVALID);,1
axil2axis.v,791,assert(&S_AXI_RDATA[C_AXI_DATA_WIDTH-1:SW]);,1
axil2axis.v,793,assert(S_AXI_RDATA[C_AXI_DATA_WIDTH-1:SW] == 0);,1
axil2axis.v,797,assert(S_AXI_RRESP == 2'b00);,1
axil2axis.v,807,assert(S_AXI_RRESP == 2'b00);,1
axil2axis.v,809,assert(S_AXI_RDATA[31:16+LGFIFO+1] == 0);,1
axil2axis.v,813,assert(S_AXI_RDATA[14:LGFIFO+1] == 0);,1
axil2axis.v,826,assert(S_AXI_RDATA == 0);,1
axil2axis.v,841,assume(!S_AXIS_TVALID);,1
axil2axis.v,844,assume(S_AXIS_TVALID);,1
axil2axis.v,853,assert(!M_AXIS_TVALID);,1
axil2axis.v,856,assert(M_AXIS_TVALID);,1
axil2axis.v,870,cover(S_AXI_ARESETN && writes_completed == 16);,1
axil2axis.v,873,cover(S_AXI_ARESETN && reads_completed == 16);,1
axil2axis.v,880,cover(S_AXI_BVALID && S_AXI_BRESP != 2'b00);,1
axil2axis.v,883,cover(S_AXI_RVALID && S_AXI_RRESP != 2'b00);,1
axil2apb.v,550,assert(S_AXI_BVALID);,1
axil2apb.v,552,assert(S_AXI_RVALID);,1
axil2apb.v,589,assert(!M_APB_PENABLE);,1
axil2apb.v,601,assert(!axil_write_ready || !axil_read_ready);,1
axil2apb.v,623,assume(f_never_addr[AXILLSB-1:0] == 0);,1
axil2apb.v,627,assume(S_AXI_AWADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,628,assume(S_AXI_AWPROT != f_never_prot);,1
axil2apb.v,633,assume(S_AXI_WDATA != f_never_data);,1
axil2apb.v,634,assume(S_AXI_WSTRB != f_never_strb);,1
axil2apb.v,639,assume(S_AXI_ARADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,640,assume(S_AXI_ARPROT != f_never_prot);,1
axil2apb.v,644,assume(M_APB_PRDATA != f_never_data);,1
axil2apb.v,655,assert(awskd_addr != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,656,assert(awskd_prot != f_never_prot);,1
axil2apb.v,661,assert(wskd_data != f_never_data);,1
axil2apb.v,662,assert(wskd_strb != f_never_strb);,1
axil2apb.v,667,assert(arskd_addr != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,668,assert(arskd_prot != f_never_prot);,1
axil2apb.v,672,assert(r_apb_data != f_never_data);,1
axil2apb.v,683,assert(M_APB_PADDR != f_never_addr);,1
axil2apb.v,684,assert(M_APB_PPROT != f_never_prot);,1
axil2apb.v,687,assert(M_APB_PWDATA != f_never_data);,1
axil2apb.v,688,assert(M_APB_PWSTRB != f_never_strb);,1
axil2apb.v,693,assert(S_AXI_RDATA != f_never_data);,1
axisswitch.v,469,assert(S_AXI_RDATA[C_AXI_DATA_WIDTH-1:LGNS] == 0);,1
axisswitch.v,475,assert(S_AXI_RVALID);,1
axisswitch.v,485,assert(S_AXI_RDATA == 0);,1
axisswitch.v,501,assert(!M_AXIS_TVALID);,1
axisswitch.v,504,assert(M_AXIS_TVALID);,1
axisswitch.v,512,assert(M_AXIS_TDATA == 0);,1
axisswitch.v,513,assert(M_AXIS_TLAST == 0);,1
axisswitch.v,523,assume(f_const_index < NUM_STREAMS);,1
axisswitch.v,535,assert(f_this_index < NUM_STREAMS);,1
axisswitch.v,538,assert(switch_index < NUM_STREAMS);,1
axisswitch.v,572,assert(f_recount == f_count);,1
axisswitch.v,579,assert(f_this_index == switch_index);,1
axisswitch.v,585,"assume({ S_AXIS_TDATA[f_const_index * C_AXIS_DATA_WIDTH +: C_AXIS_DATA_WIDTH], S_AXIS_TLAST[f_const_index] } != f_never_data);",1
axisswitch.v,593,"assert({ skd_data[f_const_index], skd_last[f_const_index] } != f_never_data);",1
axisswitch.v,595,"assert({ M_AXIS_TDATA, M_AXIS_TLAST } != f_never_data);",1
axilwr2wbsp.v,443,assert(!r_awvalid || !o_axi_awready);,1
axilwr2wbsp.v,444,assert(!r_wvalid || !o_axi_wready);,1
axilwr2wbsp.v,446,assert(!o_wb_cyc);,1
axilwr2wbsp.v,456,assert(!fifo_empty);,1
axilwr2wbsp.v,457,assert(r_first[LGFIFO-1:0] == r_last[LGFIFO-1:0]);,1
axilwr2wbsp.v,458,assert(r_first[LGFIFO] != r_last[LGFIFO]);,1
axilwr2wbsp.v,467,assert(!r_awvalid || !o_axi_awready);,1
axilwr2wbsp.v,468,assert(!r_wvalid || !o_axi_wready);,1
axilwr2wbsp.v,491,assert(f_wb_outstanding == wb_outstanding);,1
axilwr2wbsp.v,499,assert(wb_fill <= f_fifo_fill);,1
axilwr2wbsp.v,504,assert(wb_outstanding+1 == wb_fill);,1
axilwr2wbsp.v,506,assert(wb_outstanding == wb_fill);,1
axilwr2wbsp.v,543,assert(f_axi_rd_outstanding == 0);,1
axilwr2wbsp.v,560,assert(!o_axi_bresp[1]);,1
axilwr2wbsp.v,562,assert(o_axi_bresp == 2'b10);,1
axilwr2wbsp.v,564,assert(!o_axi_bresp[1]);,1
axilwr2wbsp.v,566,assert(o_axi_bresp[1]);,1
axilwr2wbsp.v,581,assert(f_first_minus_err != 0);,1
axilwr2wbsp.v,585,assert(f_mid_minus_err <= f_first_minus_err);,1
axilwr2wbsp.v,592,assert(!o_axi_awready);,1
axilwr2wbsp.v,595,assert(!o_axi_wready);,1
axilwr2wbsp.v,605,cover(o_wb_cyc && o_wb_stb && !i_wb_stall);,1
axilwr2wbsp.v,607,cover(o_wb_cyc && i_wb_ack);,1
wbm2axilite.v,326,assume(f_past_valid || i_reset);,1
wbm2axilite.v,405,assert(o_axi_bready);,1
wbm2axilite.v,411,assert(o_axi_rready);,1
wbm2axilite.v,421,assert(!o_axi_awvalid);,1
wbm2axilite.v,422,assert(!o_axi_wvalid);,1
wbm2axilite.v,431,assert(o_axi_awvalid);,1
wbm2axilite.v,432,assert(o_axi_wvalid);,1
wbm2axilite.v,433,assert(wb_we);,1
wbm2axilite.v,437,assert(!o_axi_awvalid);,1
wbm2axilite.v,439,assert(!o_axi_wvalid);,1
wbm2axilite.v,467,assert(o_axi_arvalid);,1
wbm2axilite.v,483,assert(outstanding == 0);,1
wbm2axilite.v,484,assert(err_pending == 0);,1
wbm2axilite.v,491,assert(f_axi_awr_outstanding == 0);,1
wbm2axilite.v,492,assert(f_axi_wr_outstanding == 0);,1
wbm2axilite.v,493,assert(f_axi_rd_outstanding == 0);,1
wbm2axilite.v,495,assert(f_wb_outstanding == 0);,1
wbm2axilite.v,496,assert(!pending);,1
wbm2axilite.v,497,assert(outstanding == 0);,1
wbm2axilite.v,498,assert(err_pending == 0);,1
wbm2axilite.v,565,cover(i_axi_bvalid && o_axi_bready);,1
wbm2axilite.v,567,cover(i_axi_rvalid && o_axi_rready);,1
wbm2axilite.v,596,cover(i_axi_rvalid && o_axi_rready);,1
wbm2axilite.v,600,cover(i_wb_cyc && o_wb_ack);,1
axisgfsm.v,519,assume(!S_AXI_ARESETN);,1
axisgfsm.v,524,assume(!i_abort);,1
axisgfsm.v,525,assume(i_tbl_addr[1:0] == 2'b00);,1
axisgfsm.v,546,assert(o_pf_pc[1:0] == 2'b00);,1
axisgfsm.v,556,assume(i_pf_pc == f_pc);,1
axisgfsm.v,560,assert(f_pc[1:0] == 2'b00);,1
axisgfsm.v,565,assume(!i_pf_illegal);,1
axisgfsm.v,708,assert(sgstate == SG_SRCADDR);,1
axisgfsm.v,710,assert(sgstate == SG_SRCHALF);,1
axisgfsm.v,754,assert(sgstate != SG_SRCHALF);,1
axisgfsm.v,755,assert(sgstate != SG_DSTHALF);,1
axisgfsm.v,796,assert(sgstate == SG_SRCADDR);,1
axisgfsm.v,797,assert(!o_dmac_wvalid);,1
axisgfsm.v,798,assert(!dma_busy);,1
axisgfsm.v,810,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,811,assert(f_pc == o_pf_pc);,1
axisgfsm.v,819,assert(o_new_pc);,1
axisgfsm.v,834,assert(sgstate == SG_DSTADDR);,1
axisgfsm.v,835,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,836,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,838,assert(o_dmac_wvalid);,1
axisgfsm.v,839,assert(o_dmac_waddr == DMA_SRCLO);,1
axisgfsm.v,840,assert(o_dmac_wdata == f_tblentry[31:0]);,1
axisgfsm.v,841,assert(&o_dmac_wstrb);,1
axisgfsm.v,842,assert(!dma_busy);,1
axisgfsm.v,843,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,855,assert(sgstate == SG_LENGTH);,1
axisgfsm.v,856,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,857,assert(tbl_int_enable == f_tbl_int_enable);,1
axisgfsm.v,858,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,860,assert(o_dmac_wvalid);,1
axisgfsm.v,861,assert(o_dmac_waddr == DMA_DSTLO);,1
axisgfsm.v,862,"assert(o_dmac_wdata == { 2'b00, f_tblentry[61:32] });",1
axisgfsm.v,863,assert(&o_dmac_wstrb);,1
axisgfsm.v,864,assert(!dma_busy);,1
axisgfsm.v,865,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,877,assert(sgstate == SG_CONTROL);,1
axisgfsm.v,878,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,879,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,880,assert(o_dmac_wvalid);,1
axisgfsm.v,881,assert(o_dmac_waddr == DMA_LENLO);,1
axisgfsm.v,882,assert(o_dmac_wdata == f_tblentry[95:64]);,1
axisgfsm.v,883,assert(&o_dmac_wstrb);,1
axisgfsm.v,884,assert(!dma_busy);,1
axisgfsm.v,885,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,897,assert(sgstate == SG_WAIT);,1
axisgfsm.v,898,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,899,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,900,assert(o_dmac_wvalid);,1
axisgfsm.v,901,assert(o_dmac_waddr == DMA_CONTROL);,1
axisgfsm.v,902,assert(o_dmac_wdata[15:0] == 16'h1f);,1
axisgfsm.v,903,assert(&o_dmac_wstrb);,1
axisgfsm.v,904,assert(!dma_busy);,1
axisgfsm.v,905,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,917,assert(sgstate == SG_WAIT);,1
axisgfsm.v,918,assert(!o_dmac_wvalid);,1
axisgfsm.v,919,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,920,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,921,assert(!o_dmac_wvalid);,1
axisgfsm.v,922,assert(o_dmac_waddr == DMA_CONTROL);,1
axisgfsm.v,924,assert(&o_dmac_wstrb);,1
axisgfsm.v,926,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,948,assert(sgstate == SG_IDLE);,1
axisgfsm.v,949,assert(!o_new_pc);,1
axisgfsm.v,950,assert(!o_dmac_wvalid);,1
axisgfsm.v,958,assert(o_pf_clear_cache);,1
axisgfsm.v,959,assert(!dma_busy);,1
axisgfsm.v,995,assert(!o_done);,1
axisgfsm.v,996,assert(!o_err);,1
axisgfsm.v,1010,assert(!o_dmac_wvalid || i_dmac_wready);,1
axisgfsm.v,1031,assume(!i_abort);,1
axisgfsm.v,1035,assume(!i_abort);,1
skidbuffer.v,233,assume(i_reset);,1
skidbuffer.v,251,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,255,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,261,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,263,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,304,assert(o_ready);,1
skidbuffer.v,335,assert(o_valid == i_valid);,1
skidbuffer.v,345,assert(o_valid);,1
skidbuffer.v,348,assert(!o_valid);,1
skidbuffer.v,359,assert(o_ready);,1
skidbuffer.v,369,assert(o_data == 0);,1
skidbuffer.v,373,assert(r_data == 0);,1
skidbuffer.v,440,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,446,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
axilrd2wbsp.v,376,assume(w_reset);,1
axilrd2wbsp.v,380,assert(!o_axi_arready);,1
axilrd2wbsp.v,401,assert(!o_axi_arready);,1
axilrd2wbsp.v,406,assert(!o_axi_arready);,1
axilrd2wbsp.v,429,assert(f_wb_outstanding == wb_outstanding);,1
axilrd2wbsp.v,437,assert(wb_fill <= f_fifo_fill);,1
axilrd2wbsp.v,443,assert(&o_wb_sel);,1
axilrd2wbsp.v,446,assert(wb_outstanding == wb_fill);,1
axilrd2wbsp.v,451,assert(o_wb_stb);,1
axilrd2wbsp.v,452,assert(!o_axi_arready);,1
axilrd2wbsp.v,484,assert(f_axi_wr_outstanding == 0);,1
axilrd2wbsp.v,486,assert(f_axi_awr_outstanding == 0);,1
axilrd2wbsp.v,488,assert(f_axi_rd_outstanding == f_fifo_fill);,1
axilrd2wbsp.v,497,assert(!o_axi_rresp[1]);,1
axilrd2wbsp.v,499,assert(o_axi_rresp == 2'b10);,1
axilrd2wbsp.v,501,assert(!o_axi_rresp[1]);,1
axilrd2wbsp.v,503,assert(o_axi_rresp[1]);,1
axilrd2wbsp.v,518,assert(f_first_minus_err != 0);,1
axilrd2wbsp.v,522,assert(f_mid_minus_err <= f_first_minus_err);,1
axilrd2wbsp.v,542,cover(o_wb_cyc && o_wb_stb);,1
axilrd2wbsp.v,546,cover(o_wb_cyc && f_wb_outstanding > 2);,1
axilrd2wbsp.v,555,cover(o_axi_rvalid && i_axi_rready);,1
axilfetch.v,327,assert(!o_valid);,1
axi2axilsub.v,548,assert(mst_awaddr == 0);,1
axi2axilsub.v,549,assert(mst_awprot == 0);,1
axi2axilsub.v,621,assert(slv_wstrb == 0);,1
axi2axilsub.v,622,assert(slv_wdata == 0);,1
axi2axilsub.v,795,assume(skidm_bresp <= f_max_bresp);,1
axi2axilsub.v,796,assume(skidm_bresp != EXOKAY);,1
axi2axilsub.v,798,assert(bresp <= f_max_bresp);,1
axi2axilsub.v,799,assert(bresp != EXOKAY);,1
axi2axilsub.v,802,assert(S_AXI_BRESP <= f_max_bresp);,1
axi2axilsub.v,803,assert(S_AXI_BRESP != EXOKAY);,1
axi2axilsub.v,954,assert(faxi_rd_nbursts == 0);,1
axi2axilsub.v,1027,assert(faxil_rd_outstanding == 0);,1
axi2axilsub.v,1048,assert(f_bfifo_packets <= wfifo_count);,1
axi2axilsub.v,1466,assert(mst_arid == 0);,1
axi2axilsub.v,1467,assert(mst_araddr == 0);,1
axi2axilsub.v,1468,assert(mst_arprot == 0);,1
axi2axilsub.v,1747,assert(faxi_awr_nbursts == 0);,1
axi2axilsub.v,1748,assert(faxi_wr_pending == 0);,1
axi2axilsub.v,1749,assert(faxi_wr_ckvalid == 0);,1
axi2axilsub.v,1822,assert(faxil_awr_outstanding == 0);,1
axi2axilsub.v,1823,assert(faxil_wr_outstanding == 0);,1
axi2axilsub.v,1907,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilsub.v,1912,assert(m_axi_awvalid);,1
axi2axilsub.v,1914,assert(!skids_awready);,1
axi2axilsub.v,1916,assert(!skids_awready);,1
axi2axilsub.v,1918,assert(!skids_awready);,1
axi2axilsub.v,1923,assert(axi_bresp != EXOKAY);,1
axi2axilsub.v,1962,assert(f_wfifo_bursts == wfifo_count);,1
axi2axilsub.v,1964,assert(f_wfifo_bursts <= f_wfifo_within);,1
axi2axilsub.v,1967,"assert(f_wfifo_within <= { f_wfifo_bursts, 8'h00 });",1
axi2axilsub.v,1988,assert(f_wfifo_within + bcounts >= faxi_wr_pending);,1
axi2axilsub.v,2063,assert(rid == S_AXI_RID);,1
axi2axilsub.v,2067,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilsub.v,2072,assert(m_axi_arvalid);,1
axi2axilsub.v,2073,assert(!skids_arready);,1
axi2axilsub.v,2128,assert(f_rfifo_bursts == rfifo_count);,1
axi2axilsub.v,2168,assert(rcounts <= 256);,1
axi2axilsub.v,2184,assert(S_AXI_RLAST);,1
axi2axilsub.v,2202,assume(!skids_awvalid);,1
axi2axilsub.v,2203,assume(!skids_wvalid);,1
axi2axilsub.v,2204,assert(M_AXI_AWVALID == 0);,1
axi2axilsub.v,2205,assert(faxil_awr_outstanding == 0);,1
axi2axilsub.v,2206,assert(faxil_wr_outstanding == 0);,1
axi2axilsub.v,2207,assert(!skidm_bvalid);,1
axi2axilsub.v,2208,assert(!S_AXI_BVALID);,1
axi2axilsub.v,2217,assume(!S_AXI_ARVALID);,1
axi2axilsub.v,2218,assert(M_AXI_ARVALID == 0);,1
axi2axilsub.v,2219,assert(faxil_rd_outstanding == 0);,1
axi2axilsub.v,2251,cover(cvr_write_count_simple > 6 && faxi_awr_nbursts == 0 && !S_AXI_BVALID);,1
axi2axilsub.v,2253,cover(cvr_write_count > 2 && faxi_awr_nbursts == 0 && !S_AXI_BVALID);,1
axi2axilsub.v,2277,cover(cvr_read_count_simple > 6 && faxi_rd_nbursts == 0 && !S_AXI_RVALID);,1
axi2axilsub.v,2279,cover(cvr_read_count > 2 && faxi_rd_nbursts == 0 && !S_AXI_RVALID);,1
axi2axilsub.v,2299,assume(f_count_awwait < 3);,1
axildouble.v,332,assert(bfifo.f_first_data != 2'b01);,1
axildouble.v,335,assert(bfifo.f_second_data != 2'b01);,1
axildouble.v,341,assume(S_AXI_BRESP != 2'b01);,1
axildouble.v,345,assume(S_AXI_BRESP != 2'b01);,1
axildouble.v,353,assert(!bffull || !write_bvalid);,1
axildouble.v,456,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
axildouble.v,460,assert(rfifo.f_first_data[1:0] != 2'b01);,1
axildouble.v,463,assert(rfifo.f_second_data[1:0] != 2'b01);,1
axildouble.v,469,assume(S_AXI_RRESP != 2'b01);,1
axildouble.v,473,assume(S_AXI_RRESP != 2'b01);,1
axildouble.v,606,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
axildouble.v,636,assert(M_AXI_AWPROT == 0);,1
axildouble.v,653,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
axildouble.v,667,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
axildouble.v,686,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
axildouble.v,727,cover(cvr_awvalids > 4);,1
axildouble.v,730,cover(cvr_arvalids > 4);,1
axildouble.v,733,cover(cvr_reads > 4);,1
axildouble.v,736,cover(cvr_writes > 4);,1
wbarbiter.v,310,assert(f_b_nreqs == 0);,1
wbarbiter.v,311,assert(f_b_nacks == 0);,1
wbarbiter.v,312,assert(f_a_outstanding == f_outstanding);,1
wbarbiter.v,314,assert(f_a_nreqs == 0);,1
wbarbiter.v,315,assert(f_a_nacks == 0);,1
wbarbiter.v,316,assert(f_b_outstanding == f_outstanding);,1
wbarbiter.v,322,assert(r_a_owner);,1
wbarbiter.v,326,assert(!r_a_owner);,1
wbarbiter.v,348,cover(f_prior_b_ack && o_cyc && o_a_ack);,1
wbarbiter.v,355,cover(f_prior_a_ack && o_cyc && o_b_ack);,1
wbarbiter.v,363,cover(o_cyc && o_b_ack);,1
axiperf.v,1155,assert(S_AXIL_RDATA == 0);,1
axis2mm.v,1551,assert(wr_writes_pending == 0);,1
axis2mm.v,1552,assert(wr_none_pending);,1
axis2mm.v,1555,assert(wr_writes_pending <= M_AXI_AWLEN+1);,1
axis2mm.v,1564,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axis2mm.v,1568,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
axis2mm.v,1587,assert(!M_AXI_AWVALID);,1
axis2mm.v,1588,assert(!M_AXI_WVALID);,1
axis2mm.v,1589,assert(!M_AXI_BVALID);,1
axis2mm.v,1613,assert(wr_writes_pending == 0);,1
axis2mm.v,1620,assert(fifo_fill >= wr_writes_pending);,1
axis2mm.v,1631,assert(wr_writes_pending <= r_remaining_w);,1
axis2mm.v,1634,assert(aw_requests_remaining == r_remaining_w);,1
axis2mm.v,1637,assert(wr_writes_pending == 0);,1
axis2mm.v,1640,assert(!M_AXI_WVALID);,1
axis2mm.v,1658,assert(!r_busy);,1
axis2mm.v,1661,assert(fifo_fill >= wr_writes_pending);,1
axis2mm.v,1675,assert(M_AXI_AWVALID && M_AXI_WVALID);,1
axis2mm.v,1676,assert(wr_none_pending);,1
axis2mm.v,1683,assert(r_max_burst > 0);,1
axis2mm.v,1689,assert(initial_burstlen > 0);,1
axis2mm.v,1699,assert(M_AXI_AWLEN+1 <= MAX_FIXED_BURST);,1
axis2mm.v,1725,assert(M_AXI_AWADDR[ADDRLSB +: LGMAXBURST] == 0);,1
axis2mm.v,1740,assert(!S_AXIS_TREADY);,1
axis2mm.v,1745,assert(S_AXIS_TREADY);,1
axis2mm.v,1749,assert(S_AXIS_TREADY);,1
axis2mm.v,1754,assert(!S_AXIS_TREADY);,1
axis2mm.v,1757,assert(S_AXIS_TREADY);,1
axis2mm.v,1771,assert(r_errcode == 0);,1
axis2mm.v,1773,assert(r_errcode != 0);,1
axis2mm.v,1782,assert(!r_err);,1
axis2mm.v,1805,assert(axi_addr == cmd_addr);,1
axis2mm.v,1852,cover( r_err && cvr_aborted);,1
axis2mm.v,1853,cover( r_err && cvr_buserr);,1
axis2mm.v,1854,cover(!r_err);,1
axis2mm.v,1857,cover(cmd_length_w > 5);,1
axis2mm.v,1858,cover(cmd_length_w > 8);,1
axilxbar.v,432,assert(skd_awprot[N] == 0);,1
axilxbar.v,517,assert(skd_arprot[N] == 0);,1
axilxbar.v,929,assert(m_awprot[N] == 0);,1
axilxbar.v,933,assert(m_arprot[N] == 0);,1
axilxbar.v,1151,assert(axi_awaddr == 0);,1
axilxbar.v,1152,assert(axi_awprot == 0);,1
axilxbar.v,1158,assert(axi_wdata == 0);,1
axilxbar.v,1159,assert(axi_wstrb == 0);,1
axilxbar.v,1257,assert(axi_araddr == 0);,1
axilxbar.v,1258,assert(axi_arprot == 0);,1
axilxbar.v,1357,assert(r_bresp[N] != 2'b01);,1
axilxbar.v,1360,assert(m_axi_bready[swindex[N]] == !r_bvalid[N]);,1
axilxbar.v,1362,assert(!r_bvalid[N]);,1
axilxbar.v,1365,assert(r_bresp[N] == 0);,1
axilxbar.v,1369,assert(axi_bresp == 0);,1
axilxbar.v,1498,assert(r_rresp[N] != 2'b01);,1
axilxbar.v,1501,assert(m_axi_rready[srindex[N]] == !r_rvalid[N]);,1
axilxbar.v,1503,assert(!r_rvalid[N]);,1
axilxbar.v,1507,assert(r_rresp[N] == 0);,1
axilxbar.v,1508,assert(r_rdata[N] == 0);,1
axilxbar.v,1514,assert(axi_rresp == 0);,1
axilxbar.v,1515,assert(axi_rdata == 0);,1
axilxbar.v,1623,assert(missing_wdata == awpending - wpending);,1
axilxbar.v,1627,assert(awpending >= wpending);,1
axilxbar.v,1706,assume(swindex[iN] == 0);,1
axilxbar.v,1709,assume(srindex[iN] == 0);,1
axilxbar.v,1740,assert(swgrant[N]);,1
axilxbar.v,1741,assert(swindex[N] == iM);,1
axilxbar.v,1744,assert(mwgrant[iM]);,1
axilxbar.v,1745,assert(mwindex[iM] == N);,1
axilxbar.v,1752,assert(wgrant[N] != 0);,1
axilxbar.v,1756,assert(wrequest[N][NS-1:0] == 0);,1
axilxbar.v,1769,assert(srgrant[N]);,1
axilxbar.v,1770,assert(srindex[N] == iM);,1
axilxbar.v,1773,assert(mrgrant[iM]);,1
axilxbar.v,1774,assert(mrindex[iM] == N);,1
axilxbar.v,1781,assert(rgrant[N] != 0);,1
axilxbar.v,1785,assert(rrequest[N][NS-1:0] == 0);,1
axilxbar.v,1875,assert(!S_AXI_BVALID[N]);,1
axilxbar.v,1880,assert(w_sawpending[N] == 0);,1
axilxbar.v,1881,assert(w_swpending[N] == 0);,1
axilxbar.v,1916,assert(!S_AXI_RVALID[N]);,1
axilxbar.v,1919,assert(w_srpending[N] == 0);,1
axilxbar.v,1929,assert(swfull[N] == &w_sawpending[N]);,1
axilxbar.v,1935,assert(srfull[N] == &w_srpending[N]);,1
axilxbar.v,1992,assert(fs_awr_outstanding[M] == 0);,1
axilxbar.v,1993,assert(fs_wr_outstanding[M] == 0);,1
axilxbar.v,1998,assert(fs_rd_outstanding[M] == 0);,1
axilxbar.v,2145,cover(!swgrant[N] && whsreturn);,1
axilxbar.v,2147,cover(!swgrant[N] && was_wevery);,1
axilxbar.v,2150,cover(S_AXI_ARESETN && wrequest[N][NS]);,1
axilxbar.v,2152,cover(S_AXI_ARESETN && wrequest[N][NS] && slave_awaccepts[N]);,1
axilxbar.v,2154,cover(err_wr_return);,1
axilxbar.v,2156,cover(!swgrant[N] && err_wr_return);,1
axilxbar.v,2161,assert(swgrant[N]);,1
axilxbar.v,2221,cover(!srgrant[N] && rhsreturn); // @26 always @(*) cover(!srgrant[N] && was_revery); // @26 always @(*) cover(S_AXI_ARVALID[N] && rrequest[N][NS]);,6
axilxbar.v,2228,cover(rgrant[N][NS]);,1
axilxbar.v,2230,cover(err_rd_return);,1
axilxbar.v,2232,cover(!srgrant[N] && err_rd_return); //@! `endif always @(*) if (S_AXI_BVALID[N] && wgrant[N][NS]) assert(S_AXI_BRESP[2*N+:2]==INTERCONNECT_ERROR);,6
axilxbar.v,2240,assert(S_AXI_RRESP[2*N+:2]==INTERCONNECT_ERROR);,1
axilxbar.v,2260,cover(multi_write_hit);,1
axilxbar.v,2263,cover(multi_read_hit);,1
axilxbar.v,2266,cover(S_AXI_ARESETN && multi_write_hit & mwgrant == 0 && M_AXI_BVALID == 0);,1
axilxbar.v,2269,cover(S_AXI_ARESETN && multi_read_hit & mrgrant == 0 && M_AXI_RVALID == 0);,1
axilxbar.v,2294,assume(f_const_source < NM);,1
axilxbar.v,2305,assume(f_const_slave < NS);,1
axilxbar.v,2321,assume(f_awaddr != f_const_addr_n);,1
axilxbar.v,2322,assume(S_AXI_AWPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2326,assume(m_wdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2327,assume(m_wstrb[f_const_source] != f_const_strb_n);,1
axilxbar.v,2331,assume(f_araddr != f_const_addr_n);,1
axilxbar.v,2332,assume(S_AXI_ARPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2337,assume(m_axi_bresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2342,assume(m_axi_rdata[f_const_slave] != f_const_data_n);,1
axilxbar.v,2343,assume(m_axi_rresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2352,assert(skd_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2353,assert(skd_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2357,assert(m_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2358,assert(m_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2362,assert(M_AXI_AWADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2363,assert(M_AXI_AWPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2367,assert(M_AXI_WDATA[f_const_slave*DW+:DW] != f_const_data_n);,1
axilxbar.v,2372,assert(skd_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2373,assert(skd_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2377,assert(m_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2378,assert(m_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2382,assert(M_AXI_ARADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2383,assert(M_AXI_ARPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2387,assert(r_bresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2389,assert(S_AXI_BRESP[f_const_source*2+:2] != f_const_resp_n);,1
axilxbar.v,2392,assert(r_rresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2393,assert(r_rdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2397,assert(S_AXI_RRESP[f_const_source*2+:2]!=f_const_resp_n);,1
axilxbar.v,2398,assert(S_AXI_RDATA[f_const_source*DW+:DW]!=f_const_data_n);,1
axidouble.v,1174,assert(!S_AXI_BVALID || S_AXI_BRESP != EXOKAY);,1
axidouble.v,1175,assert(!S_AXI_RVALID || S_AXI_RRESP != EXOKAY);,1
axidouble.v,1201,assert(M_AXI_AWVALID == 0);,1
axidouble.v,1203,assert(M_AXI_AWVALID == 0);,1
axidouble.v,1206,assert(M_AXI_AWVALID == wdecode[NS-1:0]);,1
axidouble.v,1209,assert(M_AXI_AWVALID == 0);,1
axidouble.v,1241,assume(!S_AXI_AWVALID);,1
axidouble.v,1243,assert(!S_AXI_BVALID);,1
axidouble.v,1245,assert(!M_AXI_AWVALID);,1
axidouble.v,1253,assume(!S_AXI_ARVALID);,1
axidouble.v,1255,assert(!S_AXI_RVALID);,1
axidouble.v,1257,assert(M_AXI_ARVALID == 0);,1
axidouble.v,1259,assert(rdecode == 0);,1
axidouble.v,1279,assume(S_AXI_AWLEN > 2);,1
axidouble.v,1283,assume(S_AXI_ARLEN > 2);,1
axidouble.v,1318,cover(cvr_awvalids > 2);,1
axidouble.v,1321,cover(cvr_writes > 2);,1
axidouble.v,1324,cover(cvr_writes > 4);,1
axidouble.v,1330,cover(cvr_arvalids > 2);,1
axidouble.v,1333,cover(cvr_reads > 2);,1
axidouble.v,1336,cover(cvr_reads > 4);,1
axidouble.v,1346,cover(S_AXI_BVALID && S_AXI_BRESP == EXOKAY);,1
wbm2axisp.v,508,assert(wr_addr - rd_addr == npending);,1
wbm2axisp.v,568,assert(C_AXI_DATA_WIDTH >= DW);,1
wbm2axisp.v,595,assume(i_reset);,1
wbm2axisp.v,689,assert(direction);,1
wbm2axisp.v,690,assert(f_axi_rd_nbursts == 0);,1
wbm2axisp.v,700,assert(o_axi_wvalid);,1
wbm2axisp.v,706,assert(!direction);,1
wbm2axisp.v,709,assert(f_axi_awr_nbursts == 0);,1
wbm2axisp.v,720,assert(!o_axi_arvalid);,1
wbm2axisp.v,721,assert(f_axi_rd_nbursts == 0);,1
wbm2axisp.v,722,assert(!i_axi_rvalid);,1
wbm2axisp.v,725,assert(!o_axi_awvalid);,1
wbm2axisp.v,726,assert(!o_axi_wvalid);,1
wbm2axisp.v,727,assert(f_axi_awr_nbursts == 0);,1
wbm2axisp.v,745,assert(o_wb_stall);,1
wbm2axisp.v,760,assert(o_axi_bready);,1
wbm2axisp.v,766,assert(o_axi_rready);,1
wbm2axisp.v,775,assert(direction);,1
wbm2axisp.v,786,assert(!direction);,1
wbm2axisp.v,839,assume(i_axi_rdata == f_data);,1
wbm2axisp.v,1036,cover(!i_reset && cvr_flushed && !flushing);,1
wbm2axisp.v,1037,cover(!i_reset && cvr_flushed && !flushing && !o_wb_stall);,1
wbm2axisp.v,1062,cover(cvr_read2write && direction && o_wb_ack && f_wb_outstanding == 1);,1
wbm2axisp.v,1063,cover(cvr_write2read && !direction && o_wb_ack && f_wb_outstanding == 1);,1
wbm2axisp.v,1081,cover(&cvr_ack_after_abort[1:0]);,1
wbm2axisp.v,1085,cover(&cvr_ack_after_abort[2:0]);,1
wbm2axisp.v,1087,cover(!i_wb_cyc && &cvr_ack_after_abort[2:0]);,1
wbm2axisp.v,1102,cover(cvr_nwrites == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
wbm2axisp.v,1105,cover(cvr_nreads == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
wbm2axisp.v,1114,assume(!i_reset && i_wb_cyc && !o_wb_err);,1
axilupsz.v,190,assert(awskd_prot == 3'h0);,1
axilupsz.v,381,assert(rdata == 0);,1
axilupsz.v,382,assert(rresp == 0);,1
axilupsz.v,566,assert(rfifo_fill == fmst_rd_outstanding);,1
axilupsz.v,569,assert(!rfifo_empty);,1
saxi_slave.v,162,assert(F_LGDEPTH > 8);,1
fav_slave.v,140,assume(!i_av_read);,1
fav_slave.v,141,assume(!i_av_write);,1
fav_slave.v,142,assume(!i_av_lock);,1
fav_slave.v,147,assume(|i_av_byteenable);,1
fav_slave.v,236,assume(!i_av_read);,1
fav_slave.v,237,assume(!i_av_write);,1
fav_slave.v,243,assert(!i_av_readdatavalid);,1
fav_slave.v,244,assert(!i_av_writeresponsevalid);,1
fav_slave.v,245,assert(f_rd_nreqs == 0);,1
fav_slave.v,246,assert(f_rd_nacks == 0);,1
fav_slave.v,247,assert(f_wr_nreqs == 0);,1
fav_slave.v,248,assert(f_wr_nacks == 0);,1
fav_slave.v,262,assert(!i_av_readdatavalid);,1
fav_slave.v,267,assert(!i_av_writeresponsevalid);,1
faxil_master.v,190,assume(!i_axi_reset_n);,1
faxil_master.v,194,assert(!i_axi_reset_n);,1
faxil_master.v,216,assume(!i_axi_reset_n);,1
faxil_master.v,220,assume(!i_axi_reset_n);,1
faxil_master.v,227,assert(!i_axi_reset_n);,1
faxil_master.v,231,assert(!i_axi_reset_n);,1
faxil_master.v,614,assert(!i_axi_awvalid);,1
faxil_master.v,617,assert(!i_axi_wvalid);,1
faxil_master.v,620,assert(!i_axi_arvalid);,1
faxil_master.v,733,assert(f_axi_rd_outstanding == 0);,1
faxil_master.v,749,assert(f_axi_wr_outstanding == 0);,1
faxil_master.v,751,assert(f_axi_awr_outstanding == 0);,1
faxil_master.v,803,cover(cvr_writes == F_OPT_COVER_BURST);,1
faxil_master.v,821,cover(cvr_reads == F_OPT_COVER_BURST);,1
faxi_master.v,135,assert(F_LGDEPTH > 8);,1
faxi_master.v,191,assert(!i_axi_reset_n);,1
faxi_master.v,206,assume(!i_axi_reset_n);,1
faxi_master.v,210,assert(!i_axi_reset_n);,1
faxi_master.v,234,assume(!i_axi_reset_n);,1
faxi_master.v,238,assume(!i_axi_reset_n);,1
faxi_master.v,245,assert(!i_axi_reset_n);,1
faxi_master.v,249,assert(!i_axi_reset_n);,1
faxi_master.v,611,assert(f_axi_rd_nbursts <= f_axi_rd_outstanding);,1
faxi_master.v,645,"assert({ 8'h00, f_axi_rd_outstanding } <= { f_axi_rd_nbursts, 8'h0 });",1
faxi_master.v,808,assert(f_axi_wr_pending <= f_axi_wr_len + 1);,1
faxi_master.v,810,assert(f_axi_wr_pending <= 9'h100);,1
faxi_master.v,941,assert(f_axi_wr_pending <= 1);,1
faxi_master.v,944,assert(f_axi_wr_len == 0);,1
fwbc_master.v,337,cover(!i_wb_cyc && ack_count > 4);,1
fwbc_master.v,339,cover(!i_wb_cyc && ack_count > 3);,1
faxil_register.v,82,assume(!S_AXI_ARESETN);,1
faxil_register.v,136,assert(!S_AXIL_BVALID);,1
faxil_register.v,139,assert(S_AXIL_BVALID);,1
faxil_register.v,144,assert(!S_AXIL_RVALID);,1
faxil_register.v,147,assert(S_AXIL_RVALID);,1
xlnxdemo.v,809,assert(f_axi_awr_outstanding == f_axi_wr_outstanding);,1
xlnxdemo.v,934,cover(fw_rdcover[0]);,1
xlnxdemo.v,935,cover(fw_rdcover[1]);,1
xlnxdemo.v,936,cover(fw_rdcover[2]);,1
xlnxdemo.v,937,cover(fw_rdcover[3]);,1
xlnxdemo.v,938,cover(fw_rdcover[4]);,1
xlnxdemo.v,939,cover(fw_rdcover[5]); // cover(fw_rdcover[6]);,2
xlnxdemo.v,941,cover(fw_rdcover[7]);,1
xlnxdemo.v,942,cover(fw_rdcover[8]);,1
xlnxdemo.v,943,cover(fw_rdcover[9]);,1
xlnxdemo.v,944,cover(fw_rdcover[10]);,1
xlnxdemo.v,945,cover(fw_rdcover[11]);,1
xlnxdemo.v,946,cover(fw_rdcover[12]);,1
xlnxdemo.v,1052,cover(fw_wrcover[0]);,1
xlnxdemo.v,1053,cover(fw_wrcover[1]);,1
xlnxdemo.v,1054,cover(fw_wrcover[2]);,1
xlnxdemo.v,1055,cover(fw_wrcover[3]);,1
xlnxdemo.v,1056,cover(fw_wrcover[4]);,1
xlnxdemo.v,1057,cover(fw_wrcover[5]); // cover(fw_wrcover[6]);,2
xlnxdemo.v,1059,cover(fw_wrcover[7]);,1
xlnxdemo.v,1060,cover(fw_wrcover[8]);,1
xlnxdemo.v,1061,cover(fw_wrcover[9]);,1
xlnxdemo.v,1062,cover(fw_wrcover[11]);,1
xlnxdemo.v,1063,cover(fw_wrcover[12]);,1
xlnxdemo.v,1064,cover(fw_wrcover[13]);,1
xlnxdemo.v,1065,cover(fw_wrcover[14]);,1
xlnxdemo.v,1066,cover(fw_wrcover[15]);,1
xlnxdemo.v,1067,cover(fw_wrcover[16]);,1
xlnxdemo.v,1068,cover(fw_wrcover[17]);,1
xlnxdemo.v,1069,cover(fw_wrcover[18]);,1
xlnxdemo.v,1070,cover(fw_wrcover[19]);,1
xlnxdemo.v,1071,cover(fw_wrcover[20]);,1
xlnxdemo.v,1072,cover(fw_wrcover[21]);,1
xlnxdemo.v,1073,cover(fw_wrcover[22]);,1
xlnxdemo.v,1074,cover(fw_wrcover[23]);,1
xlnxdemo.v,1075,cover(fw_wrcover[24]);,1
fwb_master.v,523,assume(!i_wb_stall);,1
axi_addr_miter.v,26,assume(i_burst != 2'b11);,1
axi_addr_miter.v,29,assume(i_size <= DSZ);,1
axi_addr_miter.v,59,assume(aligned);,1
axi_addr_miter.v,62,assert(uut_next_addr == ref_next_addr);,1
axi_addr_miter.v,66,assume(i_last_addr[AW-1:12] == ref_next_addr[AW-1:12]);,1
fwbc_slave.v,337,cover(!i_wb_cyc && ack_count > 4);,1
fwbc_slave.v,339,cover(!i_wb_cyc && ack_count > 3);,1
xlnxstream_2018_3.v,258,assume(!M_AXIS_ARESETN);,1
xlnxstream_2018_3.v,266,assert(mst_exec_state == IDLE);,1
xlnxstream_2018_3.v,267,assert(read_pointer == 0);,1
xlnxstream_2018_3.v,268,assert(count == 0);,1
xlnxstream_2018_3.v,269,assert(!tx_done);,1
xlnxstream_2018_3.v,298,assert(count <= C_M_START_COUNT-1);,1
xlnxstream_2018_3.v,303,assert(!M_AXIS_TVALID);,1
xlnxstream_2018_3.v,304,assert(read_pointer == 0);,1
xlnxstream_2018_3.v,310,assert(read_pointer == NUMBER_OF_OUTPUT_WORDS);,1
xlnxstream_2018_3.v,315,assert(read_pointer <= NUMBER_OF_OUTPUT_WORDS);,1
xlnxstream_2018_3.v,319,assert(!M_AXIS_TVALID);,1
xlnxstream_2018_3.v,323,assert(M_AXIS_TVALID);,1
xlnxstream_2018_3.v,332,assert(count == C_M_START_COUNT-1);,1
xlnxstream_2018_3.v,362,cover(tx_done);,1
xlnxstream_2018_3.v,365,cover(&final_counter);,1
faxil_slave.v,190,assume(!i_axi_reset_n);,1
faxil_slave.v,194,assert(!i_axi_reset_n);,1
faxil_slave.v,216,assume(!i_axi_reset_n);,1
faxil_slave.v,220,assume(!i_axi_reset_n);,1
faxil_slave.v,227,assert(!i_axi_reset_n);,1
faxil_slave.v,231,assert(!i_axi_reset_n);,1
faxil_slave.v,614,assert(!i_axi_awready);,1
faxil_slave.v,617,assert(!i_axi_wready);,1
faxil_slave.v,620,assert(!i_axi_arready);,1
faxil_slave.v,733,assert(f_axi_rd_outstanding == 0);,1
faxil_slave.v,749,assert(f_axi_wr_outstanding == 0);,1
faxil_slave.v,751,assert(f_axi_awr_outstanding == 0);,1
faxil_slave.v,803,cover(cvr_writes == F_OPT_COVER_BURST);,1
faxil_slave.v,821,cover(cvr_reads == F_OPT_COVER_BURST);,1
fwb_register.v,75,assume(i_reset);,1
fwb_register.v,107,assert(i_wb_ack);,1
fwb_register.v,109,assert(!i_wb_ack);,1
faxi_slave.v,136,assert(F_LGDEPTH > 8);,1
faxi_slave.v,192,assume(!i_axi_reset_n);,1
faxi_slave.v,207,assume(!i_axi_reset_n);,1
faxi_slave.v,211,assert(!i_axi_reset_n);,1
faxi_slave.v,235,assume(!i_axi_reset_n);,1
faxi_slave.v,239,assume(!i_axi_reset_n);,1
faxi_slave.v,246,assert(!i_axi_reset_n);,1
faxi_slave.v,250,assert(!i_axi_reset_n);,1
faxi_slave.v,612,assert(f_axi_rd_nbursts <= f_axi_rd_outstanding);,1
faxi_slave.v,646,"assert({ 8'h00, f_axi_rd_outstanding } <= { f_axi_rd_nbursts, 8'h0 });",1
faxi_slave.v,809,assert(f_axi_wr_pending <= f_axi_wr_len + 1);,1
faxi_slave.v,811,assert(f_axi_wr_pending <= 9'h100);,1
faxi_slave.v,942,assert(f_axi_wr_pending <= 1);,1
faxi_slave.v,945,assert(f_axi_wr_len == 0);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
picorv32_base.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32_base.v,2107,restrict property (resetn != $initstate);,1
picorv32_base.v,2117,assert (mem_wstrb == 0);,1
picorv32_base.v,2129,assert (ok);,1
picorv32_base.v,2147,assert(mem_valid);,1
picorv32_base.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32_base.v,2149,assert(mem_wstrb == 0);,1
picorv32_base.v,2152,assert(mem_valid);,1
picorv32_base.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32_base.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32_base.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32_base.v,2158,assert(!mem_valid || mem_ready);,1
fnv_1a_32_formal.v,34,assert (in != out);,1
lzc_formal.v,18,cover (out == 32'h0);,1
counter.v,29,assert property(start_over_combined);,1
counter.v,32,assert property(start_over_combined);,1
counter.v,36,assert property(inc1);,1
counter.v,41,assert property(inc1);,1
counter.v,46,assert property(inc1);,1
counter.v,47,assert property(inc2);,1
counter.v,51,cover property(sequence1);,1
counter.v,54,cover property(sequence1);,1
DW_lp_fifoctl_1c_df.v,1147,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
DW_lp_fifoctl_1c_df.v,1152,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
prak6.v,35,"assert property (sum_prop) $info(""%d + %d = %d"", a, b, c);",2
prak6.v,39,"assert property (sum_prop) $info(""%d + %d = %d"", a, b, c);",2
prak6.v,43,"assert property (sum_prop) $info(""%d + %d = %d"", a, b, c);",2
tb_watch_top.v,27,assert(i_freq <= 1000 * 1000 * 1000);,1
tb_watch_top.v,26,"assert(i_freq <= 1000 * 1000 * 1000); // less than 1GHz $display(""Initialize value [%d]"", $time);",3
alu.v,89,assert(result == a + b);,1
alu.v,94,assert(result == a - b);,1
alu.v,103,assert(div_by_zero == (b == 0));,1
alu.v,107,assert(result == a / b);,1
alu.v,109,assert(result == {WIDTH{1'b1}});,1
alu.v,119,assert(negative_flag == result[WIDTH-1]);,1
alu.v,122,assert(!overflow_flag);,1
alu.v,123,assert(!overflow_flag);,1
alu.v,124,assert(!overflow_flag);,1
alu.v,125,assert(!overflow_flag);,1
alu.v,127,assert(!overflow_flag);,1
alu.v,129,assert(error_flag);,1
alu.v,138,cover(op_code == ADD && !add_overflow);,1
alu.v,139,cover(op_code == SUB && !sub_overflow);,1
alu.v,140,cover(op_code == AND);,1
alu.v,141,cover(op_code == OR);,1
alu.v,142,cover(op_code == XOR);,1
alu.v,143,cover(op_code == MULT && !overflow_flag);,1
alu.v,144,cover(op_code == DIV && !div_by_zero);,1
alu.v,147,cover(op_code == DIV && div_by_zero);,1
alu.v,148,cover(op_code > DIV); // Invalid opcode end `endif endmodule,5
adder.v,24,"assert(temp == {cout, sum});",1
adder.v,31,assert(sum == 0);,1
adder.v,32,assert(cout == 0);,1
adder.v,39,cover(cout == 0);,1
adder.v,42,cover(cout == 1);,1
adder.v,45,cover(a == 0 && b == 0 && cin == 0);,1
adder.v,48,cover(a == {WIDTH{1'b1}} && b == {WIDTH{1'b1}});,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
tb.v,178,"assert(dma_read_ctrl_valid == 1'b0); // initial state of valid rst <= 1'b1; // complete, move to IDLE state #cyc;",3
tb.v,192,"assert(dma_read_ctrl_data_index == 32'h00000000); // 0 MEM addr assert(dma_read_ctrl_data_length == 32'd8); // 16 instr, 8 beats assert(dma_read_ctrl_data_size == 3'b010); // WORD, 32 bits assert(dma_read_ctrl_valid == 1'b1); // read valid // set dma_read_ctrl_ready, wait a cycle then deactivate it. dma_read_ctrl_ready <= 1'b1;",7
system_tb.v,187,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,188,assert(FPGA_SERIAL_RX == 1'b1);,1
system_tb.v,199,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,200,assert(FPGA_SERIAL_RX == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
top_level.v,173,assert property(counter_counts);,1
top_level.v,178,assert property(counter_counts);,1
top_level.v,183,assert property(counter_counts);,1
top_level.v,188,assert property(counter_counts);,1
top_level.v,189,assert property(counter_doesnt_count);,1
top_level.v,190,assert property (counters_equal_2_cycles_apart);,1
top_level.v,173,assert property(counter_counts);,1
top_level.v,178,assert property(counter_counts);,1
top_level.v,183,assert property(counter_counts);,1
top_level.v,188,assert property(counter_counts);,1
top_level.v,189,assert property(counter_doesnt_count);,1
top_level.v,190,assert property (counters_equal_2_cycles_apart);,1
counter.v,186,assume(strobe || counter_ff == tick_counter + 1 );,1
example2.v,15,assert property (enable && state[0] |-> ##1 !state[0]);,1
example2.v,16,assert property (state!=3);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
fftstage.v,407,assume(f_mpydelay > 1);,1
fftstage.v,417,assert(iaddr == 0);,1
fftstage.v,418,assert(wait_for_sync);,1
fftstage.v,419,assert(o_sync == 0);,1
fftstage.v,420,assert(oaddr == 0);,1
fftstage.v,421,assert(!b_started);,1
fftstage.v,422,assert(!o_sync);,1
fftstage.v,438,assume(!i_ce);,1
fftstage.v,441,assume(f_addr[LGSPAN]==1'b0);,1
fftstage.v,449,assert(iaddr == 0);,1
fftstage.v,455,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,465,assert(ib_a == f_left);,1
fftstage.v,466,assert(ib_b == f_right);,1
fftstage.v,467,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,492,assert(f_output_active == b_started);,1
fftstage.v,496,assert(!f_output_active);,1
fftstage.v,501,assert(oaddr == f_oaddr);,1
fftstage.v,503,assert(oaddr == 0);,1
fftstage.v,507,assume(!ob_sync);,1
fftstage.v,530,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
fftstage.v,535,assert(o_sync);,1
fftstage.v,537,assert(!o_sync);,1
fftstage.v,541,assert(o_data == f_oleft);,1
fftstage.v,546,assert(pre_ovalue == f_oright);,1
fftstage.v,551,assert(o_data == f_oright);,1
hwbfly.v,674,assume(i_ce);,1
hwbfly.v,686,assume(!i_ce);,1
hwbfly.v,693,assume(!i_ce);,1
hwbfly.v,730,assert(left_sr == f_sumrx);,1
hwbfly.v,731,assert(left_si == f_sumix);,1
hwbfly.v,732,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,736,assert(mpy_r == 0);,1
hwbfly.v,737,assert(mpy_i == 0);,1
hwbfly.v,741,assert(mpy_r == 0);,1
hwbfly.v,742,assert(mpy_i == 0);,1
hwbfly.v,747,assert(mpy_r == f_difrx);,1
hwbfly.v,748,assert(mpy_i == f_difix);,1
hwbfly.v,753,assert(mpy_r == -f_difix);,1
hwbfly.v,754,assert(mpy_i == f_difrx);,1
hwbfly.v,759,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,760,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,765,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,766,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,796,assert(p_one == 0);,1
hwbfly.v,798,assert(p_two == 0);,1
hwbfly.v,801,assert(p_one == f_predifrx);,1
hwbfly.v,803,assert(p_two == f_predifix);,1
hwbfly.v,806,assert(p_one == 0);,1
hwbfly.v,808,assert(p_two == 0);,1
hwbfly.v,812,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,814,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,818,assert(p_three == 0);,1
hwbfly.v,820,assert(p_three == 0);,1
hwbfly.v,823,assert(p_three == f_sumdiff);,1
hwbfly.v,825,assert(p_three == f_sumcoef);,1
hwbfly.v,828,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,829,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,830,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1008,assume(i_ce);,1
butterfly.v,1016,assume(i_ce);,1
butterfly.v,1026,assume(!i_ce);,1
butterfly.v,1031,assume(i_ce);,1
butterfly.v,1036,assume(i_ce);,1
butterfly.v,1045,assume(!i_ce);,1
butterfly.v,1052,assume(i_ce);,1
butterfly.v,1062,assume(i_ce);,1
butterfly.v,1101,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,1102,assert(left_sr == f_sumrx);,1
butterfly.v,1103,assert(left_si == f_sumix);,1
butterfly.v,1104,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,1108,assert(mpy_r == 0);,1
butterfly.v,1109,assert(mpy_i == 0);,1
butterfly.v,1113,assert(mpy_r == 0);,1
butterfly.v,1114,assert(mpy_i == 0);,1
butterfly.v,1119,assert(mpy_r == f_difrx);,1
butterfly.v,1120,assert(mpy_i == f_difix);,1
butterfly.v,1125,assert(mpy_r == -f_difix);,1
butterfly.v,1126,assert(mpy_i == f_difrx);,1
butterfly.v,1131,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,1132,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,1137,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,1138,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,1168,assert(p_one == 0);,1
butterfly.v,1170,assert(p_two == 0);,1
butterfly.v,1173,assert(p_one == f_predifrx);,1
butterfly.v,1175,assert(p_two == f_predifix);,1
butterfly.v,1178,assert(p_one == 0);,1
butterfly.v,1180,assert(p_two == 0);,1
butterfly.v,1184,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,1186,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,1190,assert(p_three == 0);,1
butterfly.v,1192,assert(p_three == 0);,1
butterfly.v,1195,assert(p_three == f_sumdiff);,1
butterfly.v,1197,assert(p_three == f_sumcoef);,1
butterfly.v,1202,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1203,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1204,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1224,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1225,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1226,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1227,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,198,assert(o_out == f_addr_value);,1
bitreverse.v,202,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,257,assume(i_ce);,1
longbimpy.v,448,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,450,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,459,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,460,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,467,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,473,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,280,assume(!i_sync);,1
qtrstage.v,283,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,291,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,292,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,293,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,294,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,296,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,297,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,303,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,304,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,305,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,306,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,313,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,314,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,320,assert(!o_sync);,1
qtrstage.v,321,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,322,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,328,assert(!o_sync);,1
qtrstage.v,329,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,330,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,335,assume(i_sync);,1
qtrstage.v,343,assert(!wait_for_sync);,1
qtrstage.v,348,assert(!o_sync);,1
qtrstage.v,351,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,352,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,354,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,355,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,214,assume(!i_sync);,1
laststage.v,217,assert(stage == f_state[0]);,1
laststage.v,222,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,223,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,229,assert(!o_sync);,1
laststage.v,230,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,231,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,237,assert(!f_rsyncd);,1
laststage.v,238,assert(!o_sync);,1
laststage.v,239,assert(f_state == 0);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
synth_top_tb.v,112,assert(top.synth_mod_shift == 'd8);,1
synth_top_tb.v,127,assert(top.synth_mod_fcw == fcw);,1
synth_top_tb.v,136,assert(top.synth_carrier_fcws[0] == fcw);,1
synth_top_tb.v,137,assert(top.synth_note_en[0] == 1'b1);,1
synth_top_tb.v,158,assert(top.synth_note_en[0] == 1'b0);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
txfifo.v,346,assert(f_raddr_plus_one == r_next);,1
txfifo.v,351,assert(!w_read);,1
txfifo.v,352,assert(!osrc);,1
txfifo.v,358,assert(r_fill == f_fill);,1
txfifo.v,425,assert(!will_underflow);,1
txfifo.v,426,assert(f_first_in_fifo);,1
txfifo.v,427,assert(!f_second_in_fifo);,1
txfifo.v,428,assert(wr_addr == f_next_addr);,1
txfifo.v,429,assert(fifo[f_const_addr] == f_const_data);,1
txfifo.v,431,assert(o_data == f_const_data);,1
txfifo.v,434,assert(f_first_in_fifo);,1
txfifo.v,435,assert(f_second_in_fifo);,1
txfifo.v,438,assert(f_second_in_fifo);,1
txfifo.v,439,assert(rd_addr == f_next_addr);,1
txfifo.v,440,assert(o_data == f_const_second);,1
txfifo.v,456,cover(o_empty_n);,1
txfifo.v,462,cover(o_err);,1
txfifo.v,472,cover(cvr_filled && !o_empty_n);,1
txuart.v,487,assert(r_setup == fsv_setup);,1
txuart.v,495,assert(zero_baud_counter);,1
txuart.v,505,"assert(baud_counter <= { fsv_setup[23:0], 4'h0 });",1
txuart.v,549,assert(fsv_setup[29:28] == data_bits);,1
txuart.v,550,assert(data_bits == 2'b11);,1
txuart.v,551,assert(baud_counter < fsv_setup[23:0]);,1
txuart.v,553,assert(1'b0 == |f_six_seq);,1
txuart.v,554,assert(1'b0 == |f_seven_seq);,1
txuart.v,555,assert(1'b0 == |f_eight_seq);,1
txuart.v,556,assert(r_busy);,1
txuart.v,557,assert(state > 4'h2);,1
txuart.v,564,assert(state == 4'h3);,1
txuart.v,565,assert(o_uart_tx == 1'b0);,1
txuart.v,566,assert(lcl_data[4:0] == fsv_data[4:0]);,1
txuart.v,568,assert(calc_parity == parity_odd);,1
txuart.v,571,assert(state == 4'h4);,1
txuart.v,572,assert(o_uart_tx == fsv_data[0]);,1
txuart.v,573,assert(lcl_data[3:0] == fsv_data[4:1]);,1
txuart.v,575,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
txuart.v,578,assert(state == 4'h5);,1
txuart.v,579,assert(o_uart_tx == fsv_data[1]);,1
txuart.v,580,assert(lcl_data[2:0] == fsv_data[4:2]);,1
txuart.v,585,assert(state == 4'h6);,1
txuart.v,586,assert(o_uart_tx == fsv_data[2]);,1
txuart.v,587,assert(lcl_data[1:0] == fsv_data[4:3]);,1
txuart.v,592,assert(state == 4'h7);,1
txuart.v,593,assert(o_uart_tx == fsv_data[3]);,1
txuart.v,594,assert(lcl_data[0] == fsv_data[4]);,1
txuart.v,600,assert(state == 4'h8);,1
txuart.v,602,assert(state == 4'h9);,1
txuart.v,603,assert(o_uart_tx == fsv_data[4]);,1
txuart.v,631,assert(fsv_setup[29:28] == 2'b10);,1
txuart.v,632,assert(fsv_setup[29:28] == data_bits);,1
txuart.v,633,assert(baud_counter < fsv_setup[23:0]);,1
txuart.v,635,assert(1'b0 == |f_five_seq);,1
txuart.v,636,assert(1'b0 == |f_seven_seq);,1
txuart.v,637,assert(1'b0 == |f_eight_seq);,1
txuart.v,638,assert(r_busy);,1
txuart.v,639,assert(state > 4'h1);,1
txuart.v,646,assert(state == 4'h2);,1
txuart.v,647,assert(o_uart_tx == 1'b0);,1
txuart.v,648,assert(lcl_data[5:0] == fsv_data[5:0]);,1
txuart.v,650,assert(calc_parity == parity_odd);,1
txuart.v,653,assert(state == 4'h3);,1
txuart.v,654,assert(o_uart_tx == fsv_data[0]);,1
txuart.v,655,assert(lcl_data[4:0] == fsv_data[5:1]);,1
txuart.v,657,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
txuart.v,660,assert(state == 4'h4);,1
txuart.v,661,assert(o_uart_tx == fsv_data[1]);,1
txuart.v,662,assert(lcl_data[3:0] == fsv_data[5:2]);,1
txuart.v,667,assert(state == 4'h5);,1
txuart.v,668,assert(o_uart_tx == fsv_data[2]);,1
txuart.v,669,assert(lcl_data[2:0] == fsv_data[5:3]);,1
txuart.v,674,assert(state == 4'h6);,1
txuart.v,675,assert(o_uart_tx == fsv_data[3]);,1
txuart.v,676,assert(lcl_data[1:0] == fsv_data[5:4]);,1
txuart.v,681,assert(state == 4'h7);,1
txuart.v,682,assert(lcl_data[0] == fsv_data[5]);,1
txuart.v,683,assert(o_uart_tx == fsv_data[4]);,1
txuart.v,689,assert(state == 4'h8);,1
txuart.v,691,assert(state == 4'h9);,1
txuart.v,692,assert(o_uart_tx == fsv_data[5]);,1
txuart.v,720,assert(fsv_setup[29:28] == 2'b01);,1
txuart.v,721,assert(fsv_setup[29:28] == data_bits);,1
txuart.v,722,assert(baud_counter < fsv_setup[23:0]);,1
txuart.v,724,assert(1'b0 == |f_five_seq);,1
txuart.v,725,assert(1'b0 == |f_six_seq);,1
txuart.v,726,assert(1'b0 == |f_eight_seq);,1
txuart.v,727,assert(r_busy);,1
txuart.v,728,assert(state != 4'h0);,1
txuart.v,735,assert(state == 4'h1);,1
txuart.v,736,assert(o_uart_tx == 1'b0);,1
txuart.v,737,assert(lcl_data[6:0] == fsv_data[6:0]);,1
txuart.v,739,assert(calc_parity == parity_odd);,1
txuart.v,742,assert(state == 4'h2);,1
txuart.v,743,assert(o_uart_tx == fsv_data[0]);,1
txuart.v,744,assert(lcl_data[5:0] == fsv_data[6:1]);,1
txuart.v,746,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
txuart.v,749,assert(state == 4'h3);,1
txuart.v,750,assert(o_uart_tx == fsv_data[1]);,1
txuart.v,751,assert(lcl_data[4:0] == fsv_data[6:2]);,1
txuart.v,756,assert(state == 4'h4);,1
txuart.v,757,assert(o_uart_tx == fsv_data[2]);,1
txuart.v,758,assert(lcl_data[3:0] == fsv_data[6:3]);,1
txuart.v,763,assert(state == 4'h5);,1
txuart.v,764,assert(o_uart_tx == fsv_data[3]);,1
txuart.v,765,assert(lcl_data[2:0] == fsv_data[6:4]);,1
txuart.v,770,assert(state == 4'h6);,1
txuart.v,771,assert(o_uart_tx == fsv_data[4]);,1
txuart.v,772,assert(lcl_data[1:0] == fsv_data[6:5]);,1
txuart.v,777,assert(state == 4'h7);,1
txuart.v,778,assert(lcl_data[0] == fsv_data[6]);,1
txuart.v,779,assert(o_uart_tx == fsv_data[5]);,1
txuart.v,785,assert(state == 4'h8);,1
txuart.v,787,assert(state == 4'h9);,1
txuart.v,788,assert(o_uart_tx == fsv_data[6]);,1
txuart.v,813,assert(fsv_setup[29:28] == 2'b00);,1
txuart.v,814,assert(fsv_setup[29:28] == data_bits);,1
txuart.v,815,"assert(baud_counter < { 6'h0, fsv_setup[23:0]});",1
txuart.v,817,assert(1'b0 == |f_five_seq);,1
txuart.v,818,assert(1'b0 == |f_six_seq);,1
txuart.v,819,assert(1'b0 == |f_seven_seq);,1
txuart.v,820,assert(r_busy);,1
txuart.v,827,assert(state == 4'h0);,1
txuart.v,828,assert(o_uart_tx == 1'b0);,1
txuart.v,829,assert(lcl_data[7:0] == fsv_data[7:0]);,1
txuart.v,831,assert(calc_parity == parity_odd);,1
txuart.v,834,assert(state == 4'h1);,1
txuart.v,835,assert(o_uart_tx == fsv_data[0]);,1
txuart.v,836,assert(lcl_data[6:0] == fsv_data[7:1]);,1
txuart.v,838,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
txuart.v,841,assert(state == 4'h2);,1
txuart.v,842,assert(o_uart_tx == fsv_data[1]);,1
txuart.v,843,assert(lcl_data[5:0] == fsv_data[7:2]);,1
txuart.v,848,assert(state == 4'h3);,1
txuart.v,849,assert(o_uart_tx == fsv_data[2]);,1
txuart.v,850,assert(lcl_data[4:0] == fsv_data[7:3]);,1
txuart.v,855,assert(state == 4'h4);,1
txuart.v,856,assert(o_uart_tx == fsv_data[3]);,1
txuart.v,857,assert(lcl_data[3:0] == fsv_data[7:4]);,1
txuart.v,862,assert(state == 4'h5);,1
txuart.v,863,assert(o_uart_tx == fsv_data[4]);,1
txuart.v,864,assert(lcl_data[2:0] == fsv_data[7:5]);,1
txuart.v,869,assert(state == 4'h6);,1
txuart.v,870,assert(o_uart_tx == fsv_data[5]);,1
txuart.v,871,assert(lcl_data[1:0] == fsv_data[7:6]);,1
txuart.v,876,assert(state == 4'h7);,1
txuart.v,877,assert(o_uart_tx == fsv_data[6]);,1
txuart.v,878,assert(lcl_data[0] == fsv_data[7]);,1
txuart.v,884,assert(state == 4'h8);,1
txuart.v,886,assert(state == 4'h9);,1
txuart.v,887,assert(o_uart_tx == fsv_data[7]);,1
txuart.v,904,"assert(baud_counter == { 4'h0, fsv_setup[23:0] }-1);",1
txuart.v,948,assert(1'b0 == |f_five_seq[4:0]);,1
txuart.v,949,assert(1'b0 == |f_six_seq[5:0]);,1
txuart.v,950,assert(1'b0 == |f_seven_seq[6:0]);,1
txuart.v,951,assert(1'b0 == |f_eight_seq[7:0]);,1
txuart.v,953,assert(r_busy);,1
txuart.v,961,assert(state == TXU_STOP);,1
txuart.v,963,assert(state == TXU_STOP);,1
txuart.v,964,assert(use_parity);,1
txuart.v,965,assert(o_uart_tx == fsv_parity);,1
txuart.v,972,assert(state == TXU_SECOND_STOP);,1
txuart.v,973,assert(dblstop);,1
txuart.v,974,assert(o_uart_tx);,1
txuart.v,980,assert(state == 4'hf);,1
txuart.v,981,assert(o_uart_tx);,1
txuart.v,982,assert(baud_counter < fsv_setup[23:0]-1'b1);,1
txuart.v,1021,assert(state == TXU_IDLE);,1
txuart.v,1022,assert(o_uart_tx == 1'b1);,1
txuart.v,1028,assert(state == TXU_BREAK);,1
txuart.v,1029,assert(r_busy);,1
txuart.v,1030,assert(o_uart_tx == 1'b0);,1
txuart.v,1146,assert(dblstop && use_parity);,1
txuart.v,1185,assert(dblstop);,1
txuart.v,1186,assert(use_parity);,1
txuart.v,1220,assume(i_setup[23:0] > 2);,1
txuart.v,1222,assert(fsv_setup[23:0] > 2);,1
rxfifo.v,346,assert(f_raddr_plus_one == r_next);,1
rxfifo.v,351,assert(!w_read);,1
rxfifo.v,352,assert(!osrc);,1
rxfifo.v,358,assert(r_fill == f_fill);,1
rxfifo.v,425,assert(!will_underflow);,1
rxfifo.v,426,assert(f_first_in_fifo);,1
rxfifo.v,427,assert(!f_second_in_fifo);,1
rxfifo.v,428,assert(wr_addr == f_next_addr);,1
rxfifo.v,429,assert(fifo[f_const_addr] == f_const_data);,1
rxfifo.v,431,assert(o_data == f_const_data);,1
rxfifo.v,434,assert(f_first_in_fifo);,1
rxfifo.v,435,assert(f_second_in_fifo);,1
rxfifo.v,438,assert(f_second_in_fifo);,1
rxfifo.v,439,assert(rd_addr == f_next_addr);,1
rxfifo.v,440,assert(o_data == f_const_second);,1
rxfifo.v,456,cover(o_empty_n);,1
rxfifo.v,462,cover(o_err);,1
rxfifo.v,472,cover(cvr_filled && !o_empty_n);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2119,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2122,restrict property (resetn != $initstate);,1
picorv32.v,2132,assert (mem_wstrb == 0);,1
picorv32.v,2144,assert (ok);,1
picorv32.v,2162,assert(mem_valid);,1
picorv32.v,2163,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2164,assert(mem_wstrb == 0);,1
picorv32.v,2167,assert(mem_valid);,1
picorv32.v,2168,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2169,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2170,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2173,assert(!mem_valid || mem_ready);,1
picorv32.v,2127,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2130,restrict property (resetn != $initstate);,1
picorv32.v,2140,assert (mem_wstrb == 0);,1
picorv32.v,2152,assert (ok);,1
picorv32.v,2170,assert(mem_valid);,1
picorv32.v,2171,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2172,assert(mem_wstrb == 0);,1
picorv32.v,2175,assert(mem_valid);,1
picorv32.v,2176,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2177,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2178,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2181,assert(!mem_valid || mem_ready);,1
top_level.v,173,assert property(counter_counts);,1
top_level.v,178,assert property(counter_counts);,1
top_level.v,183,assert property(counter_counts);,1
top_level.v,188,assert property(counter_counts);,1
top_level.v,189,assert property(counter_doesnt_count);,1
top_level.v,190,assert property (counters_equal_2_cycles_apart);,1
sodor5_lb_unified_bmc.v,157,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,161,assert(!lb_diverge);,1
sodor1_ind.v,47,assume(mo_ou_io_port_regfile == de_ou_io_port_regfile);,1
sodor1_ind.v,48,assume(mo_ou_io_port_pc == de_ou_io_imem_req_bits_addr);,1
sodor1_ind.v,99,assert(mo_ou_io_port_pc == de_ou_io_imem_req_bits_addr);,1
sodor1_ind.v,100,assert(mo_ou_io_port_regfile == de_ou_io_port_regfile);,1
sodor1_ind.v,105,assume(!reset);,1
sodor1_bmc.v,81,assume(mo_ou_io_port_regfile == de_ou_io_port_regfile);,1
sodor1_bmc.v,98,assert(mo_ou_io_port_pc == de_ou_io_imem_req_bits_addr);,1
sodor1_bmc.v,99,assert(mo_ou_io_port_regfile == de_ou_io_port_regfile);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_distinguisher_old.v,392,assume(de_io_port_imm == copy1_imm);,1
sodor5_distinguisher_old.v,393,assume(de_io_port_alu_out == copy1_alu_out);,1
sodor5_distinguisher_old.v,394,assume(de_io_port_reg_rs1_addr_in == copy1_reg_rs1_addr_in);,1
sodor5_distinguisher_old.v,395,assume(de_io_port_reg_rs2_addr_in == copy1_reg_rs2_addr_in);,1
sodor5_distinguisher_old.v,396,assume(de_io_port_reg_rs1_data_out == copy1_reg_rs1_data_out);,1
sodor5_distinguisher_old.v,397,assume(de_io_port_reg_rs2_data_out == copy1_reg_rs2_data_out);,1
sodor5_distinguisher_old.v,398,assume(de_io_port_reg_rd_data_in == copy1_reg_rd_data_in);,1
sodor5_distinguisher_old.v,399,assume(de_io_port_reg_rd_addr_in == copy1_reg_rd_addr_in);,1
sodor5_distinguisher_old.v,400,assume(de_io_port_regfile == copy1_port_regfile);,1
sodor5_distinguisher_old.v,402,assume(de_io_port_imm == copy2_imm);,1
sodor5_distinguisher_old.v,403,assume(de_io_port_alu_out == copy2_alu_out);,1
sodor5_distinguisher_old.v,404,assume(de_io_port_reg_rs1_addr_in == copy2_reg_rs1_addr_in);,1
sodor5_distinguisher_old.v,405,assume(de_io_port_reg_rs2_addr_in == copy2_reg_rs2_addr_in);,1
sodor5_distinguisher_old.v,406,assume(de_io_port_reg_rs1_data_out == copy2_reg_rs1_data_out);,1
sodor5_distinguisher_old.v,407,assume(de_io_port_reg_rs2_data_out == copy2_reg_rs2_data_out);,1
sodor5_distinguisher_old.v,408,assume(de_io_port_reg_rd_data_in == copy2_reg_rd_data_in);,1
sodor5_distinguisher_old.v,409,assume(de_io_port_reg_rd_addr_in == copy2_reg_rd_addr_in);,1
sodor5_distinguisher_old.v,410,assume(de_io_port_regfile == copy2_port_regfile);,1
sodor5_lb_unified_bmc.v,170,assert(!lb_diverge);,1
sodor5_lb_bmc.v,157,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_bmc.v,161,assert(!lb_diverge);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_lb_model_bmc.v,159,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_model_bmc.v,163,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,157,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,161,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,158,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,162,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,165,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,166,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,170,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,164,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,160,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,164,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,165,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,165,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
cva6_tlb_equiv.v,154,assume(tb_io_update_i == 0);,1
cva6_tlb_equiv.v,158,assert(mo_io_content_q == de_io_content_q);,1
cva6_tlb_equiv.v,159,assert(mo_io_tags_q == de_io_tags_q);,1
cva6_tlb_equiv.v,154,assume(tb_io_update_i == 0);,1
cva6_tlb_equiv.v,158,assert(mo_io_content_q == de_io_content_q);,1
cva6_tlb_equiv.v,159,assert(mo_io_tags_q == de_io_tags_q);,1
cva6_tlb_ni_model.v,137,assume(eviction_indices_0 == 1 || eviction_indices_0 == 2 || eviction_indices_0 == 4 || eviction_indices_0 == 8);,1
cva6_tlb_ni_model.v,138,assume(eviction_indices_1 == 1 || eviction_indices_1 == 2 || eviction_indices_1 == 4 || eviction_indices_1 == 8);,1
cva6_tlb_ni_model.v,139,assume(eviction_indices_2 == 1 || eviction_indices_2 == 2 || eviction_indices_2 == 4 || eviction_indices_2 == 8);,1
cva6_tlb_ni_model.v,140,assume(eviction_indices_3 == 1 || eviction_indices_3 == 2 || eviction_indices_3 == 4 || eviction_indices_3 == 8);,1
cva6_tlb_ni_model.v,141,assume(eviction_indices_0 != eviction_indices_1);,1
cva6_tlb_ni_model.v,142,assume(eviction_indices_0 != eviction_indices_2);,1
cva6_tlb_ni_model.v,143,assume(eviction_indices_0 != eviction_indices_3);,1
cva6_tlb_ni_model.v,144,assume(eviction_indices_1 != eviction_indices_3);,1
cva6_tlb_ni_model.v,145,assume(eviction_indices_2 != eviction_indices_3);,1
cva6_tlb_ni_model.v,146,assume(eviction_indices_1 != eviction_indices_2);,1
cva6_tlb_ni_model.v,149,assume(tb_io_update_i_0 == tb_io_update_i_1);,1
cva6_tlb_ni_model.v,150,assume(tb_io_update_i_0[62]);,1
cva6_tlb_ni_model.v,151,assume(tb_io_update_i_1[62]);,1
cva6_tlb_ni_model.v,152,assume(!tb_io_flush_i);,1
cva6_tlb_ni_model.v,153,assume(eviction_master == de_io_replace_en_0);,1
cva6_tlb_ni_model.v,154,assume(eviction_master == de_io_replace_en_1);,1
cva6_tlb_ni_model.v,157,assert(de_io_content_q_0 == de_io_content_q_1);,1
cva6_tlb_ni_model.v,158,assert(de_io_tags_q_0 == de_io_tags_q_1);,1
cva6_tlb_distinguisher.v,154,assume(asid == 9'd1);,1
cva6_tlb_ni.v,155,assume(tb_io_update_i_0 == tb_io_update_i_1);,1
cva6_tlb_ni.v,156,assume(tb_io_update_i_0[62]);,1
cva6_tlb_ni.v,157,assume(tb_io_update_i_1[62]);,1
cva6_tlb_ni.v,158,assume(!tb_io_flush_i);,1
cva6_tlb_ni.v,161,assert(de_io_content_q_0 == de_io_content_q_1);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0010011 && instr0[14:12] == 3'b000);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,168,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,169,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,205,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_wbuffer_equiv.v,553,assert(all_equal);,1
cva6_wbuffer_distinguisher_old0.v,368,assert(0);,1
cva6_lsu_formal.v,199,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,200,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,201,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,202,assume(instr3[6:0] == 7'b0000011 && instr3[14:12] == 3'b010);,1
cva6_lsu_formal.v,204,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,206,assume(instr0[11:7] != instr2[19:15]);,1
cva6_lsu_formal.v,208,assume(instr0[11:7] != instr3[19:15]);,1
cva6_lsu_formal.v,209,assume(instr2[11:7] != instr3[19:15]);,1
cva6_lsu_formal.v,211,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,215,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,216,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,252,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_tlb_equiv.v,154,assume(tb_io_update_i == 0);,1
cva6_tlb_equiv.v,158,assert(mo_io_content_q == de_io_content_q);,1
cva6_tlb_equiv.v,159,assert(mo_io_tags_q == de_io_tags_q);,1
cva6_tlb_equiv.v,154,assume(tb_io_update_i == 0);,1
cva6_tlb_equiv.v,158,assert(mo_io_content_q == de_io_content_q);,1
cva6_tlb_equiv.v,159,assert(mo_io_tags_q == de_io_tags_q);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,164,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,166,assume(instr0[11:7] != instr2[19:15]);,1
cva6_lsu_formal.v,168,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,172,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,173,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,209,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0010011 && instr0[14:12] == 3'b000);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,168,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,169,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,205,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0010011 && instr0[14:12] == 3'b000);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,164,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,168,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,169,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,205,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0010011 && instr0[14:12] == 3'b000);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,164,assume(instr1[31:25] == 0 && instr1[11:7] == 0 && instr1[19:15] == instr2[19:15]);,1
cva6_lsu_formal.v,165,assume(instr2[31:20] == 0);,1
cva6_lsu_formal.v,171,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,172,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,208,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,164,assume(instr1[31:25] == 0 && instr1[11:7] == 0 && instr1[19:15] == instr2[19:15]);,1
cva6_lsu_formal.v,165,assume(instr2[31:20] == 0);,1
cva6_lsu_formal.v,171,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,172,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,208,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0000011 && instr3[14:12] == 3'b010);,1
cva6_lsu_formal.v,164,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,166,assume(instr0[11:7] != instr2[19:15]);,1
cva6_lsu_formal.v,168,assume(instr0[11:7] != instr3[19:15]);,1
cva6_lsu_formal.v,169,assume(instr2[11:7] != instr3[19:15]);,1
cva6_lsu_formal.v,171,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,175,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,176,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,212,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0000011 && instr3[14:12] == 3'b010);,1
cva6_lsu_formal.v,164,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,166,assume(instr0[11:7] != instr2[19:15]);,1
cva6_lsu_formal.v,171,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,175,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,176,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,212,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,171,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,172,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,208,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,160,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,163,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,165,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,170,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,174,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,175,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,211,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,167,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,171,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,172,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,208,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_wbuffer_equiv.v,553,assert(all_equal);,1
distinguisher_1667703718.v,154,assume(asid == 9'd1);,1
distinguisher_1667711022.v,154,assume(asid == 9'd1);,1
distinguisher_1667710881.v,154,assume(asid == 9'd1);,1
distinguisher_1667711164.v,154,assume(asid == 9'd1);,1
distinguisher_1667710976.v,154,assume(asid == 9'd1);,1
distinguisher_1667711896.v,154,assume(asid == 9'd1);,1
distinguisher_1667710965.v,154,assume(asid == 9'd1);,1
distinguisher_1667710821.v,154,assume(asid == 9'd1);,1
distinguisher_1667708647.v,154,assume(asid == 9'd1);,1
distinguisher_1667710188.v,154,assume(asid == 9'd1);,1
distinguisher_1667711092.v,154,assume(asid == 9'd1);,1
t_assert_basic.v,19,assert (!(cyc==5) || toggle);,1
t_assert_cover.v,84,cover property (C1) $display("*COVER: Cyc==5");,1
axixbar.v,3531,assert(rerr_id[N] == 0);,1
axixbar.v,3603,assert(mwgrant[N]);,1
axixbar.v,3604,assert(mwindex[N] == iM);,1
axixbar.v,3607,assert(swgrant[iM]);,1
axixbar.v,3608,assert(swindex[iM] == N);,1
axixbar.v,3615,assert(wgrant[N] != 0);,1
axixbar.v,3619,assert(wrequest[N][NS-1:0] == 0);,1
axixbar.v,3639,assert(mrgrant[N]);,1
axixbar.v,3640,assert(mrindex[N] == iM);,1
axixbar.v,3643,assert(srgrant[iM]);,1
axixbar.v,3644,assert(srindex[iM] == N);,1
axixbar.v,3651,assert(rgrant[N] != 0);,1
axixbar.v,3659,assert(!mrempty[N]);,1
axixbar.v,3744,assert(mwfull[N] == &w_mawpending[N]);,1
axixbar.v,3750,assert(mrfull[N] == &w_mrpending[N]);,1
axixbar.v,3950,assume(S_AXI_AWVALID[N] == 0);,1
axixbar.v,3952,assert(wgrant[N] == 0);,1
axixbar.v,3954,assert(mwgrant[N] == 0);,1
axixbar.v,3956,assert(S_AXI_BVALID[N]== 0);,1
axixbar.v,3962,assume(S_AXI_ARVALID [N]== 0);,1
axixbar.v,3964,assert(rgrant[N] == 0);,1
axixbar.v,3966,assert(S_AXI_RVALID[N] == 0);,1
axixbar.v,3972,assert(OPT_READS | OPT_WRITES);,1
addrdecode.v,288,assume(i_reset);,1
addrdecode.v,292,assert(i_reset);,1
addrdecode.v,298,assert(!o_valid);,1
addrdecode.v,299,assert(o_decode == 0);,1
addrdecode.v,328,assert(!o_decode[iM]);,1
addrdecode.v,337,assert(o_addr == 0);,1
addrdecode.v,338,assert(o_decode == 0);,1
addrdecode.v,339,assert(o_data == 0);,1
addrdecode.v,363,assert(onehot_request);,1
addrdecode.v,381,cover(i_valid);,1
addrdecode.v,384,cover(o_valid);,1
addrdecode.v,387,cover(o_valid && !i_stall);,1
addrdecode.v,401,cover(f_reached[0]);,1
addrdecode.v,410,cover(&f_reached);,1
r_hasher_4_isp.v,3064,assert(rerr_id[N] == 0);,1
r_hasher_4_isp.v,3136,assert(mwgrant[N]);,1
r_hasher_4_isp.v,3137,assert(mwindex[N] == iM);,1
r_hasher_4_isp.v,3140,assert(swgrant[iM]);,1
r_hasher_4_isp.v,3141,assert(swindex[iM] == N);,1
r_hasher_4_isp.v,3148,assert(wgrant[N] != 0);,1
r_hasher_4_isp.v,3152,assert(wrequest[N][NS-1:0] == 0);,1
r_hasher_4_isp.v,3172,assert(mrgrant[N]);,1
r_hasher_4_isp.v,3173,assert(mrindex[N] == iM);,1
r_hasher_4_isp.v,3176,assert(srgrant[iM]);,1
r_hasher_4_isp.v,3177,assert(srindex[iM] == N);,1
r_hasher_4_isp.v,3184,assert(rgrant[N] != 0);,1
r_hasher_4_isp.v,3192,assert(!mrempty[N]);,1
r_hasher_4_isp.v,3277,assert(mwfull[N] == &w_mawpending[N]);,1
r_hasher_4_isp.v,3283,assert(mrfull[N] == &w_mrpending[N]);,1
r_hasher_4_isp.v,3483,assume(S_AXI_AWVALID[N] == 0);,1
r_hasher_4_isp.v,3485,assert(wgrant[N] == 0);,1
r_hasher_4_isp.v,3487,assert(mwgrant[N] == 0);,1
r_hasher_4_isp.v,3489,assert(S_AXI_BVALID[N]== 0);,1
r_hasher_4_isp.v,3495,assume(S_AXI_ARVALID [N]== 0);,1
r_hasher_4_isp.v,3497,assert(rgrant[N] == 0);,1
r_hasher_4_isp.v,3499,assert(S_AXI_RVALID[N] == 0);,1
r_hasher_4_isp.v,3505,assert(OPT_READS | OPT_WRITES);,1
skidbuffer.v,250,assume(i_reset);,1
skidbuffer.v,268,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,272,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,278,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,298,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,321,assert(o_ready);,1
skidbuffer.v,352,assert(o_valid == i_valid);,1
skidbuffer.v,362,assert(o_valid);,1
skidbuffer.v,365,assert(!o_valid);,1
skidbuffer.v,376,assert(o_ready);,1
skidbuffer.v,386,assert(o_data == 0);,1
skidbuffer.v,390,assert(w_data == 0);,1
skidbuffer.v,458,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,464,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
bubblesort_testbench.v,175,assert (readdata0_o_dut==readdata0_o_gt);,1
bubblesort_testbench.v,176,assert (readdata1_o_dut==readdata1_o_gt);,1
bubblesort_testbench.v,177,assert (readdata2_o_dut==readdata2_o_gt);,1
bubblesort_testbench.v,178,assert (readdata3_o_dut==readdata3_o_gt);,1
bubblesort_testbench.v,179,assert (readdata4_o_dut==readdata4_o_gt);,1
bubblesort_testbench.v,180,assert (readdata5_o_dut==readdata5_o_gt);,1
bubblesort_testbench.v,181,assert (readdata6_o_dut==readdata6_o_gt);,1
DualCoreCPU_tb.v,82,assert property (valid_arbitration) else $error("Arbitration failed: Multiple cores accessing memory simultaneously");,2
warp_fetch.v,195,assume (!i_rst_n);,1
warp_fetch.v,196,assume (!i_clk);,1
warp_fetch.v,197,assume (!i_mem_valid);,1
warp_fetch.v,198,assume (!i_branch_valid);,1
warp_fetch.v,200,assert (!o_output_valid);,1
warp_fetch.v,201,assert (!o_mem_ren);,1
warp_fetch.v,207,assume (!i_mem_valid);,1
warp_fetch.v,208,assume (!i_branch_valid);,1
warp_fetch.v,210,assert (!o_mem_ren);,1
warp_fetch.v,211,assert (!o_output_valid);,1
warp_fetch.v,258,assume (f_mem_outstanding);,1
warp_fetch.v,262,assert (!f_mem_outstanding || i_mem_valid);,1
warp_fetch.v,286,assume (!f_in2);,1
warp_fetch.v,299,assert (!o_output_valid);,1
warp_decode.v,89,assume (!i_clk);,1
warp_decode.v,90,assume (!i_rst_n);,1
warp_decode.v,91,assume (!i_input_valid);,1
warp_decode.v,93,assert (o_input_ready);,1
warp_decode.v,94,assert (!o_output_valid);,1
warp_decode.v,99,assume (!i_clk);,1
warp_decode.v,100,assume (!i_rst_n);,1
warp_decode.v,101,assume (!i_input_valid);,1
warp_decode.v,103,assert (o_input_ready);,1
warp_decode.v,104,assert (!o_output_valid);,1
warp_decode.v,127,assert (o_input_ready);,1
warp_decode.v,128,assert (!o_output_valid);,1
warp_util.v,85,assert(o_input_ready);,1
warp_util.v,86,assert(!o_output_valid);,1
warp_util.v,91,cover(o_input_ready);,1
warp_util.v,92,cover(!o_input_ready);,1
warp_util.v,93,cover(o_output_valid);,1
warp_util.v,94,cover(!o_output_valid);,1
warp_util.v,96,cover(load);,1
warp_util.v,97,cover(flow);,1
warp_util.v,98,cover(fill);,1
warp_util.v,99,cover(unload);,1
warp_util.v,100,cover(flush);,1
merged_verilog.v,194244,assert (resp==OKAY);,1
merged_verilog.v,194279,assert (resp==OKAY);,1
merged_verilog.v,194868,assert (resp==OKAY);,1
merged_verilog.v,194886,assert (resp==OKAY);,1
merged_verilog.v,194901,assert (resp==OKAY);,1
merged_verilog.v,194910,assert (resp==OKAY);,1
merged_verilog.v,207678,assert(sha_tready);,1
merged_verilog.v,838007,assert (resp==OKAY);,1
hanoi.v,154,cover property (peg0_count == '1);,1
hanoi.v,155,cover property (peg0_count == '0);,1
hanoi.v,156,cover property (peg1_count == '0);,1
hanoi.v,157,cover property (peg2_count == '0);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
system_tb.v,187,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,188,assert(FPGA_SERIAL_RX == 1'b1);,1
system_tb.v,199,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,200,assert(FPGA_SERIAL_RX == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
system_tb.v,186,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,187,assert(FPGA_SERIAL_RX == 1'b1);,1
system_tb.v,198,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,199,assert(FPGA_SERIAL_RX == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
adder_testbench.v,29,assert(sum == 15'd2);,1
synth_top_tb.v,112,assert(top.synth_mod_shift == 'd8);,1
synth_top_tb.v,127,assert(top.synth_mod_fcw == fcw);,1
synth_top_tb.v,136,assert(top.synth_carrier_fcws[0] == fcw);,1
synth_top_tb.v,137,assert(top.synth_note_en[0] == 1'b1);,1
synth_top_tb.v,158,assert(top.synth_note_en[0] == 1'b0);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
smtlib2_module.v,29,assert(add == add2);,1
smtlib2_module.v,30,assert(sub == sub2);,1
generate.v,196,assert property (out1 == 4);,1
generate.v,197,assert property (out2 == 2);,1
generate.v,198,assert property (out3 == 7);,1
generate.v,199,assert property (cond.sub_out1 == 4);,1
generate.v,200,assert property (cond.sub_out2 == 2);,1
generate.v,201,assert property (cond.sub_out3 == 7);,1
asserts.v,8,assert(state < 3);,1
asserts.v,13,assert property (y !== 1'b1);,1
initval.v,20,"assert property (foo == {last_bar[3:2], bar[1:0]});",1
asserts_seq.v,16,assert(a_old != b);,1
asserts_seq.v,33,assert(a_old != b);,1
asserts_seq.v,50,assert(a_old != b);,1
asserts_seq.v,67,"assert(a_old == b); // <-- this will fail end endmodule module test_005(clk, a, a_old, b);",5
asserts_seq.v,84,assert(a_old != b);,1
mem_tb.v,77,assert(rq_a == rq_a_e);,1
mem_tb.v,79,assert(rq_b == rq_b_e);,1
meminit.v,47,assert(read_val == expect_val);,1
example.v,9,assert property (counter != 15);,1
demo.v,8,assume(counter != 0);,1
demo7.v,18,assert property (1000 < memory[addr] && memory[addr] < 2000);,1
demo1.v,11,assert property (cnt != 15);,1
demo9.v,9,assume(trigger == 1'b1);,1
demo9.v,10,cover(1);,1
demo8.v,10,assume(prime > 1);,1
demo5.v,16,assert(hash == 32'h A18FAC0A);,1
button_pulse.v,51,cover property (comp < MAX_COUNT - 1);,1
button_pulse.v,54,assert property (button && count == 0 |-> pulse);,1
button_pulse.v,55,assert property (pulse |=> !pulse);,1
button_pulse.v,51,cover property (comp < MAX_COUNT - 1);,1
button_pulse.v,54,assert property (button && count == 0 |-> pulse);,1
button_pulse.v,55,assert property (pulse |=> !pulse);,1
led_walker.v,39,assert(led_index < 4'ha);,1
led_walker.v,55,assert(f_valid_output);,1
tt_um_formal.v,32,cover(ui_in == 8'hAA);,1
tt_um_formal.v,34,cover(ui_in == 8'hAA);,1
tt_um_formal.v,36,cover(ui_in == 8'hAA);,1
tt_um_formal.v,37,cover(uio_in == 8'hAA);,1
tt_um_formal.v,40,assert(ui_in == 0);,1
tt_um_formal.v,41,assert(uio_in == 0);,1
tt_um_formal.v,43,assert(rst_n == 0);,1
tt_um_formal.v,45,assert(clk == 0);,1
button_pulse.v,51,cover property (comp < MAX_COUNT - 1);,1
button_pulse.v,54,assert property (button && count == 0 |-> pulse);,1
button_pulse.v,55,assert property (pulse |=> !pulse);,1
lzc_formal.v,14,cover(out == 32'h0); // only one solution which is 0xFFFF_FFFF // cover(out == 32'hFFFF_FFFF); // only one solution with is 0x0 end endmodule,5
picorv32.v,2038,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2041,restrict property (resetn != $initstate);,1
picorv32.v,2051,assert (mem_wstrb == 0);,1
picorv32.v,2063,assert (ok);,1
picorv32.v,2081,assert(mem_valid);,1
picorv32.v,2082,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2083,assert(mem_wstrb == 0);,1
picorv32.v,2086,assert(mem_valid);,1
picorv32.v,2087,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2088,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2089,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2092,assert(!mem_valid || mem_ready);,1
cheat_wizard.v,118,assume(i_wb_idata == 128'h00000000_00000000_00000000_00000001);,1
cheat_wizard.v,123,assume(i_wb_idata == 128'h00000000_00000000_00000000_00000001);,1
cheat_wizard.v,128,assume(i_wb_idata == 128'h00000001_000023A2_000000D6_00000024);,1
cheat_wizard.v,132,assume(i_wb_stb);,1
cheat_wizard.v,133,assume(i_wb_we);,1
cheat_wizard.v,134,assume(~i_wb_err);,1
cheat_wizard.v,135,assume(~i_wb_cyc);,1
cheat_wizard.v,137,assume(~i_wb_stb);,1
cheat_wizard.v,138,assume(~i_wb_we);,1
cheat_wizard.v,139,assume(~i_wb_err);,1
cheat_wizard.v,140,assume(i_wb_cyc);,1
cheat_wizard.v,156,assert(wb_err == 1'b0);,1
cheat_wizard.v,164,cover(o_cheat_stb);,1
cheat_wizard.v,169,assert(wb_odata == i_wb_idata);,1
cheat_wizard.v,175,assert(o_wb_ack);,1
cheat_wizard.v,190,assert(o_sram_data == cheats_replace_value[0]);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2116,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2119,restrict property (resetn != $initstate);,1
picorv32.v,2129,assert (mem_wstrb == 0);,1
picorv32.v,2141,assert (ok);,1
picorv32.v,2159,assert(mem_valid);,1
picorv32.v,2160,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2161,assert(mem_wstrb == 0);,1
picorv32.v,2164,assert(mem_valid);,1
picorv32.v,2165,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2166,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2167,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2170,assert(!mem_valid || mem_ready);,1
DW_lp_fifoctl_1c_df.v,1147,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
DW_lp_fifoctl_1c_df.v,1152,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
picorv32.v,2106,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2109,restrict property (resetn != $initstate);,1
picorv32.v,2119,assert (mem_wstrb == 0);,1
picorv32.v,2131,assert (ok);,1
picorv32.v,2149,assert(mem_valid);,1
picorv32.v,2150,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2151,assert(mem_wstrb == 0);,1
picorv32.v,2154,assert(mem_valid);,1
picorv32.v,2155,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2156,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2157,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2160,assert(!mem_valid || mem_ready);,1
22469.v,43,assert (!pl_alloc_status_reg[i]);,1
40552.v,52,assume(pc_op == `PC_RESET);,1
40552.v,53,assume(pc_in == 0);,1
40552.v,54,assume(pc == 0);,1
40552.v,55,assume(clk == 0);,1
40552.v,63,assume(en == 1 && rst == 0);,1
40552.v,66,assert(pc == 0);,1
11476.v,197,assert(bsg_clk_gen_i == ext_clk_i);,1
12911.v,50,assert property (a == 2);,1
12911.v,51,assert property (A == 3);,1
12911.v,52,assert property (x1 == 16);,1
12911.v,53,assert property (x2 == 4);,1
12911.v,54,assert property (x3 == 16);,1
32318.v,17,assert(q == 6'd0);,1
32318.v,21,assert(q == 6'd1);,1
32318.v,23,assert(q == 6'd2);,1
32318.v,25,assert(q == 6'd4);,1
32318.v,27,assert(q == 6'd8);,1
32318.v,29,assert(q == 6'd16);,1
32318.v,31,assert(q == 6'd32);,1
32318.v,33,assert(q == 6'd0);,1
32318.v,35,assert(q == 6'd0);,1
18961.v,18,assert(q == 6'd0);,1
18961.v,21,assert(q == 6'd1);,1
18961.v,23,assert(q == 6'd2);,1
18961.v,25,assert(q == 6'd4);,1
18961.v,27,assert(q == 6'd8);,1
18961.v,29,assert(q == 6'd16);,1
18961.v,31,assert(q == 6'd32);,1
18961.v,33,assert(q == 6'd1);,1
18961.v,35,assert(q == 6'd2);,1
18961.v,37,assert(q == 6'd4);,1
34603.v,175,"assert property(THP_CHECK)else begin $display(""[Error][Assertion] : THP - Start%d, End%d"", $past(onDISP_HSYNC, P_THP), onDISP_HSYNC);",2
34603.v,185,"assert property(THB_HAREA_THF_CHECK)else begin $display(""[Error][Assertion] : Display Area-H - Start%d, End%d"", $past(onDISP_HSYNC, (P_THB+P_AREA_H+P_THF)), onDISP_HSYNC);",2
34603.v,195,"assert property(HAREA_CHECK)else begin $display(""[Error][Assertion] : Display Area-H - Start%d, End%d"", $past(oDISP_ENA, P_THP), oDISP_ENA);",2
34603.v,205,"assert property(TVP_CHECK)else begin $display(""[Error][Assertion] : TVP - Start%d, End%d"", $past(onDISP_VSYNC, (P_TVP*(P_THP+P_THB+P_AREA_H+P_THF))), onDISP_VSYNC);",2
12126.v,10,assert (!(cyc==5) || toggle);,1
47018.v,1747,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
47018.v,1749,restrict property (resetn != $initstate);,1
47018.v,1757,assert (mem_wstrb == 0);,1
47018.v,1768,assert (ok);,1
47018.v,1783,assert(mem_valid);,1
47018.v,1784,assert(mem_addr == last_mem_la_addr);,1
47018.v,1785,assert(mem_wstrb == 0);,1
47018.v,1788,assert(mem_valid);,1
47018.v,1789,assert(mem_addr == last_mem_la_addr);,1
47018.v,1790,assert(mem_wdata == last_mem_la_wdata);,1
47018.v,1791,assert(mem_wstrb == last_mem_la_wstrb);,1
47018.v,1794,assert(!mem_valid || mem_ready);,1
16208.v,208,assert property(PRO_FIFO_NEVER_NOT_EMPTY);,1
22403.v,202,assert(!o_busy);,1
22403.v,203,assert(!o_valid);,1
22403.v,204,assert(!o_err);,1
22403.v,205,assert(!r_busy);,1
22403.v,206,assert(!zero_divisor);,1
22403.v,207,assert(r_bit==0);,1
22403.v,208,assert(!last_bit);,1
22403.v,209,assert(!pre_sign);,1
22403.v,210,assert(!r_z);,1
22403.v,211,assert(r_dividend==0);,1
22403.v,212,assert(o_quotient==0);,1
22403.v,213,assert(!r_c);,1
22403.v,214,assert(r_divisor==0);,1
22403.v,223,assert(o_valid);,1
22403.v,232,assert(o_valid);,1
22403.v,235,assert(!pre_sign);,1
22403.v,239,assert(pre_sign);,1
22403.v,245,assert(o_busy);,1
22403.v,248,assert(!o_valid);,1
22403.v,254,assert(w_n == o_quotient[BW-1]);,1
22403.v,257,assert(!o_busy);,1
22403.v,280,assert(o_err);,1
22403.v,289,assert(r_divisor[BW-2:0] == 0);,1
22403.v,297,assert(r_divisor[2*BW-2]==0);,1
22403.v,301,assert(o_quotient[0]);,1
22403.v,303,assert(!o_quotient[0]);,1
46665.v,43,cover property (@(posedge clk) count_c==3);,1
14034.v,166,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
14034.v,198,assert(S_AXI_RDATA == 0);,1
10928.v,336,assert(r_setup == fsv_setup);,1
10928.v,341,assert(zero_baud_counter);,1
10928.v,346,"assert(baud_counter <= { fsv_setup[23:0], 4'h0 });",1
10928.v,379,assert(fsv_setup[29:28] == data_bits);,1
10928.v,380,assert(data_bits == 2'b11);,1
10928.v,381,assert(baud_counter < fsv_setup[23:0]);,1
10928.v,382,assert(1'b0 == |f_six_seq);,1
10928.v,383,assert(1'b0 == |f_seven_seq);,1
10928.v,384,assert(1'b0 == |f_eight_seq);,1
10928.v,385,assert(r_busy);,1
10928.v,386,assert(state > 4'h2);,1
10928.v,392,assert(state == 4'h3);,1
10928.v,393,assert(o_uart_tx == 1'b0);,1
10928.v,394,assert(lcl_data[4:0] == fsv_data[4:0]);,1
10928.v,396,assert(calc_parity == parity_odd);,1
10928.v,399,assert(state == 4'h4);,1
10928.v,400,assert(o_uart_tx == fsv_data[0]);,1
10928.v,401,assert(lcl_data[3:0] == fsv_data[4:1]);,1
10928.v,403,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
10928.v,406,assert(state == 4'h5);,1
10928.v,407,assert(o_uart_tx == fsv_data[1]);,1
10928.v,408,assert(lcl_data[2:0] == fsv_data[4:2]);,1
10928.v,413,assert(state == 4'h6);,1
10928.v,414,assert(o_uart_tx == fsv_data[2]);,1
10928.v,415,assert(lcl_data[1:0] == fsv_data[4:3]);,1
10928.v,420,assert(state == 4'h7);,1
10928.v,421,assert(o_uart_tx == fsv_data[3]);,1
10928.v,422,assert(lcl_data[0] == fsv_data[4]);,1
10928.v,428,assert(state == 4'h8);,1
10928.v,430,assert(state == 4'h9);,1
10928.v,431,assert(o_uart_tx == fsv_data[4]);,1
10928.v,454,assert(fsv_setup[29:28] == 2'b10);,1
10928.v,455,assert(fsv_setup[29:28] == data_bits);,1
10928.v,456,assert(baud_counter < fsv_setup[23:0]);,1
10928.v,457,assert(1'b0 == |f_five_seq);,1
10928.v,458,assert(1'b0 == |f_seven_seq);,1
10928.v,459,assert(1'b0 == |f_eight_seq);,1
10928.v,460,assert(r_busy);,1
10928.v,461,assert(state > 4'h1);,1
10928.v,467,assert(state == 4'h2);,1
10928.v,468,assert(o_uart_tx == 1'b0);,1
10928.v,469,assert(lcl_data[5:0] == fsv_data[5:0]);,1
10928.v,471,assert(calc_parity == parity_odd);,1
10928.v,474,assert(state == 4'h3);,1
10928.v,475,assert(o_uart_tx == fsv_data[0]);,1
10928.v,476,assert(lcl_data[4:0] == fsv_data[5:1]);,1
10928.v,478,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
10928.v,481,assert(state == 4'h4);,1
10928.v,482,assert(o_uart_tx == fsv_data[1]);,1
10928.v,483,assert(lcl_data[3:0] == fsv_data[5:2]);,1
10928.v,488,assert(state == 4'h5);,1
10928.v,489,assert(o_uart_tx == fsv_data[2]);,1
10928.v,490,assert(lcl_data[2:0] == fsv_data[5:3]);,1
10928.v,495,assert(state == 4'h6);,1
10928.v,496,assert(o_uart_tx == fsv_data[3]);,1
10928.v,497,assert(lcl_data[1:0] == fsv_data[5:4]);,1
10928.v,502,assert(state == 4'h7);,1
10928.v,503,assert(lcl_data[0] == fsv_data[5]);,1
10928.v,504,assert(o_uart_tx == fsv_data[4]);,1
10928.v,510,assert(state == 4'h8);,1
10928.v,512,assert(state == 4'h9);,1
10928.v,513,assert(o_uart_tx == fsv_data[5]);,1
10928.v,536,assert(fsv_setup[29:28] == 2'b01);,1
10928.v,537,assert(fsv_setup[29:28] == data_bits);,1
10928.v,538,assert(baud_counter < fsv_setup[23:0]);,1
10928.v,539,assert(1'b0 == |f_five_seq);,1
10928.v,540,assert(1'b0 == |f_six_seq);,1
10928.v,541,assert(1'b0 == |f_eight_seq);,1
10928.v,542,assert(r_busy);,1
10928.v,543,assert(state != 4'h0);,1
10928.v,549,assert(state == 4'h1);,1
10928.v,550,assert(o_uart_tx == 1'b0);,1
10928.v,551,assert(lcl_data[6:0] == fsv_data[6:0]);,1
10928.v,553,assert(calc_parity == parity_odd);,1
10928.v,556,assert(state == 4'h2);,1
10928.v,557,assert(o_uart_tx == fsv_data[0]);,1
10928.v,558,assert(lcl_data[5:0] == fsv_data[6:1]);,1
10928.v,560,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
10928.v,563,assert(state == 4'h3);,1
10928.v,564,assert(o_uart_tx == fsv_data[1]);,1
10928.v,565,assert(lcl_data[4:0] == fsv_data[6:2]);,1
10928.v,570,assert(state == 4'h4);,1
10928.v,571,assert(o_uart_tx == fsv_data[2]);,1
10928.v,572,assert(lcl_data[3:0] == fsv_data[6:3]);,1
10928.v,577,assert(state == 4'h5);,1
10928.v,578,assert(o_uart_tx == fsv_data[3]);,1
10928.v,579,assert(lcl_data[2:0] == fsv_data[6:4]);,1
10928.v,584,assert(state == 4'h6);,1
10928.v,585,assert(o_uart_tx == fsv_data[4]);,1
10928.v,586,assert(lcl_data[1:0] == fsv_data[6:5]);,1
10928.v,591,assert(state == 4'h7);,1
10928.v,592,assert(lcl_data[0] == fsv_data[6]);,1
10928.v,593,assert(o_uart_tx == fsv_data[5]);,1
10928.v,599,assert(state == 4'h8);,1
10928.v,601,assert(state == 4'h9);,1
10928.v,602,assert(o_uart_tx == fsv_data[6]);,1
10928.v,625,assert(fsv_setup[29:28] == 2'b00);,1
10928.v,626,assert(fsv_setup[29:28] == data_bits);,1
10928.v,627,"assert(baud_counter < { 6'h0, fsv_setup[23:0]});",1
10928.v,628,assert(1'b0 == |f_five_seq);,1
10928.v,629,assert(1'b0 == |f_six_seq);,1
10928.v,630,assert(1'b0 == |f_seven_seq);,1
10928.v,631,assert(r_busy);,1
10928.v,637,assert(state == 4'h0);,1
10928.v,638,assert(o_uart_tx == 1'b0);,1
10928.v,639,assert(lcl_data[7:0] == fsv_data[7:0]);,1
10928.v,641,assert(calc_parity == parity_odd);,1
10928.v,644,assert(state == 4'h1);,1
10928.v,645,assert(o_uart_tx == fsv_data[0]);,1
10928.v,646,assert(lcl_data[6:0] == fsv_data[7:1]);,1
10928.v,648,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
10928.v,651,assert(state == 4'h2);,1
10928.v,652,assert(o_uart_tx == fsv_data[1]);,1
10928.v,653,assert(lcl_data[5:0] == fsv_data[7:2]);,1
10928.v,658,assert(state == 4'h3);,1
10928.v,659,assert(o_uart_tx == fsv_data[2]);,1
10928.v,660,assert(lcl_data[4:0] == fsv_data[7:3]);,1
10928.v,665,assert(state == 4'h4);,1
10928.v,666,assert(o_uart_tx == fsv_data[3]);,1
10928.v,667,assert(lcl_data[3:0] == fsv_data[7:4]);,1
10928.v,672,assert(state == 4'h5);,1
10928.v,673,assert(o_uart_tx == fsv_data[4]);,1
10928.v,674,assert(lcl_data[2:0] == fsv_data[7:5]);,1
10928.v,679,assert(state == 4'h6);,1
10928.v,680,assert(o_uart_tx == fsv_data[5]);,1
10928.v,681,assert(lcl_data[1:0] == fsv_data[7:6]);,1
10928.v,686,assert(state == 4'h7);,1
10928.v,687,assert(o_uart_tx == fsv_data[6]);,1
10928.v,688,assert(lcl_data[0] == fsv_data[7]);,1
10928.v,694,assert(state == 4'h8);,1
10928.v,696,assert(state == 4'h9);,1
10928.v,697,assert(o_uart_tx == fsv_data[7]);,1
10928.v,712,"assert(baud_counter == { 4'h0, fsv_setup[23:0] }-1);",1
10928.v,749,assert(1'b0 == |f_five_seq[4:0]);,1
10928.v,750,assert(1'b0 == |f_six_seq[5:0]);,1
10928.v,751,assert(1'b0 == |f_seven_seq[6:0]);,1
10928.v,752,assert(1'b0 == |f_eight_seq[7:0]);,1
10928.v,753,assert(r_busy);,1
10928.v,760,assert(state == TXU_STOP);,1
10928.v,762,assert(state == TXU_STOP);,1
10928.v,763,assert(use_parity);,1
10928.v,764,assert(o_uart_tx == fsv_parity);,1
10928.v,770,assert(state == TXU_SECOND_STOP);,1
10928.v,771,assert(dblstop);,1
10928.v,772,assert(o_uart_tx);,1
10928.v,777,assert(state == 4'hf);,1
10928.v,778,assert(o_uart_tx);,1
10928.v,779,assert(baud_counter < fsv_setup[23:0]-1'b1);,1
10928.v,813,assert(state == TXU_IDLE);,1
10928.v,814,assert(o_uart_tx == 1'b1);,1
10928.v,819,assert(state == TXU_BREAK);,1
10928.v,820,assert(r_busy);,1
10928.v,821,assert(o_uart_tx == 1'b0);,1
10928.v,933,assert(dblstop && use_parity);,1
10928.v,972,assert(dblstop);,1
10928.v,973,assert(use_parity);,1
10928.v,1003,assume(i_setup[23:0] > 2);,1
10928.v,1005,assert(fsv_setup[23:0] > 2);,1
31884.v,124,assume(!i_axi_reset_n);,1
31884.v,128,assert(!i_axi_reset_n);,1
31884.v,144,assume(!i_axi_reset_n);,1
31884.v,147,assume(!i_axi_reset_n);,1
31884.v,152,assert(!i_axi_reset_n);,1
31884.v,155,assert(!i_axi_reset_n);,1
31884.v,443,assert(!i_axi_awready);,1
31884.v,446,assert(!i_axi_wready);,1
31884.v,449,assert(!i_axi_arready);,1
31884.v,523,assert(f_axi_rd_outstanding == 0);,1
31884.v,536,assert(f_axi_wr_outstanding == 0);,1
31884.v,538,assert(f_axi_awr_outstanding == 0);,1
31884.v,573,cover(cvr_writes == F_OPT_COVER_BURST);,1
31884.v,586,cover(cvr_reads == F_OPT_COVER_BURST);,1
40320.v,117,assume(data_in[7:0] == 0);,1
40320.v,118,assume(led_out == 0);,1
40320.v,119,assume(en == 1);,1
40320.v,120,assume(write_enable == 0);,1
40320.v,121,assume(real_addr == 0);,1
28384.v,17,assert(v_lo == 1'b0);,1
28384.v,18,assert(addr_lo == 8'b0);,1
28384.v,21,assert(v_lo == 1'b1);,1
28384.v,22,assert(addr_lo == 8'b0);,1
28384.v,25,assert(v_lo == 1'b1);,1
28384.v,26,assert(addr_lo == 8'b0);,1
28384.v,29,assert(v_lo == 1'b1);,1
28384.v,30,assert(addr_lo == 8'b1);,1
28384.v,33,assert(v_lo == 1'b1);,1
28384.v,34,assert(addr_lo == 8'd2);,1
28384.v,37,assert(v_lo == 1'b1);,1
28384.v,38,assert(addr_lo == 8'd3);,1
28384.v,41,assert(v_lo == 1'b1);,1
28384.v,42,assert(addr_lo == 8'd7);,1
28384.v,45,assert(v_lo == 1'b1);,1
28384.v,46,assert(addr_lo == 8'd5);,1
28384.v,49,assert(v_lo == 1'b1);,1
28384.v,50,assert(addr_lo == 8'd4);,1
15463.v,124,assert property(PRO_FIFO_NEVER_NOT_FULL);,1
36149.v,1805,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
36149.v,1807,restrict property (resetn != $initstate);,1
36149.v,1815,assert (mem_wstrb == 0);,1
36149.v,1826,assert (ok);,1
36149.v,1841,assert(mem_valid);,1
36149.v,1842,assert(mem_addr == last_mem_la_addr);,1
36149.v,1843,assert(mem_wstrb == 0);,1
36149.v,1846,assert(mem_valid);,1
36149.v,1847,assert(mem_addr == last_mem_la_addr);,1
36149.v,1848,assert(mem_wdata == last_mem_la_wdata);,1
36149.v,1849,assert(mem_wstrb == last_mem_la_wstrb);,1
36149.v,1852,assert(!mem_valid || mem_ready);,1
10968.v,1227,assert property(PRO_DATAPIPE_REQ_ACK);,1
10968.v,1230,assert property(PRO_DATAPIPE_REQ_ACK);,1
45982.v,43,cover property (@(posedge clk) count_c==3);,1
6209.v,96,assert(A0==A1);,1
6209.v,97,assert(B0==B1);,1
6209.v,98,assert(C0==C1);,1
6209.v,99,assert(D0==D1);,1
30896.v,117,assume property(en == 1);,1
30896.v,121,assume(s_alu_control == 0);,1
30896.v,122,assume(s_en_imm == 0);,1
30896.v,123,assume(s_immediate == 0);,1
30896.v,124,assume(opcode_prev == 0);,1
30896.v,125,assume(s_next_word == 0);,1
30896.v,131,assert(s_en_imm == 0);,1
30896.v,132,assert(s_alu_control == `OPC_ADD);,1
30896.v,135,assert(s_en_imm == 1);,1
30896.v,136,assert(s_next_word == 1);,1
30896.v,139,assert(s_en_imm == 1);,1
30896.v,140,assert(s_next_word == 0);,1
30896.v,143,assert(s_en_imm == 0);,1
30896.v,144,assert(s_next_word == 0);,1
30896.v,150,assume(instruction == 0);,1
30896.v,151,assume(s_rD_sel == 0);,1
30896.v,152,assume(s_rS_sel == 0);,1
30896.v,161,assert(s_next_word == 1);,1
30896.v,163,assert(s_next_word == 0);,1
30896.v,165,assert(s_next_word == 0);,1
30896.v,166,assert(s_en_imm == 1);,1
30896.v,177,assert(s_rS_sel == 3'b111);,1
30896.v,180,assert (lr_is_input == 1);,1
37537.v,37,assert (!pl_alloc_status_reg[i]);,1
22619.v,213,assume(i_clk == f_rx_clock[1]);,1
22619.v,243,assume(!f_tx_start);,1
22619.v,322,assume(i_uart_rx);,1
22619.v,324,assume(i_uart_rx == f_tx_reg[0]);,1
22619.v,559,"cover(o_wr); // Step 626, takes about 20mins always @(posedge i_clk) begin cover(!ck_uart);",4
22619.v,589,assert(baud_counter <= CLOCKS_PER_BAUD-1'b1);,1
6105.v,43,assert (!pl_alloc_status_reg[i]);,1
33950.v,1805,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
33950.v,1807,restrict property (resetn != $initstate);,1
33950.v,1815,assert (mem_wstrb == 0);,1
33950.v,1826,assert (ok);,1
33950.v,1841,assert(mem_valid);,1
33950.v,1842,assert(mem_addr == last_mem_la_addr);,1
33950.v,1843,assert(mem_wstrb == 0);,1
33950.v,1846,assert(mem_valid);,1
33950.v,1847,assert(mem_addr == last_mem_la_addr);,1
33950.v,1848,assert(mem_wdata == last_mem_la_wdata);,1
33950.v,1849,assert(mem_wstrb == last_mem_la_wstrb);,1
33950.v,1852,assert(!mem_valid || mem_ready);,1
30570.v,26,assert property (a1 == 0);,1
30570.v,27,assert property (a2 == 0);,1
30570.v,28,assert property (a3 == "BAR");,1
30570.v,29,assert property (a4 == 0);,1
30570.v,30,assert property (b1 == "FOO");,1
30570.v,31,assert property (b2 == "FOO");,1
30570.v,32,assert property (b3 == 0);,1
30570.v,33,assert property (b4 == "HI");,1
30570.v,34,assert property (c1 == 1);,1
30570.v,35,assert property (c2 == 1);,1
30570.v,36,assert property (c3 == 0);,1
30570.v,37,assert property (c4 == 0);,1
30570.v,38,assert property (d1 == 0);,1
30570.v,39,assert property (d2 == 0);,1
30570.v,40,assert property (d3 == 1);,1
30570.v,41,assert property (d4 == 1);,1
30570.v,42,assert property (Y == 3);,1
30570.v,43,assert property (Z == ~3);,1
27591.v,407,assert(f_nbits != 0);,1
27591.v,429,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
27591.v,431,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
27591.v,444,assert(!o_cs_n);,1
27591.v,457,assert(o_sck);,1
27591.v,475,assert(!o_cs_n);,1
27591.v,488,assert(f_nsent == f_nbits);,1
14801.v,43,cover property (C1) $display("*COVER: Cyc==5");,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
ibex_aes.v,10775,assert property(roundkey_0);,1
ibex_aes_sandboxing.v,1805,assume property(in_aes);,1
ibex_aes_sandboxing.v,10775,assert property(roundkey_0);,1
ibex_verifypin_v1.v,9324,assume property(~alert_minor_o);,1
ibex_verifypin_v1.v,9325,assume property(~alert_major_internal_o);,1
ibex_verifypin_v1.v,9326,assume property(~alert_major_bus_o);,1
ibex_verifypin_v1.v,10790,assume property(PIN1);,1
ibex_verifypin_v1.v,10791,assume property(PIN2);,1
ibex_verifypin_v1.v,10792,assume property(PIN3);,1
ibex_verifypin_v1.v,10794,assert property(unauthenticated);,1
ibex_verifypin_v1_sandboxing.v,1805,assume property(in_verifypin);,1
ibex_verifypin_v1_sandboxing.v,9324,assume property(~alert_minor_o);,1
ibex_verifypin_v1_sandboxing.v,9325,assume property(~alert_major_internal_o);,1
ibex_verifypin_v1_sandboxing.v,9326,assume property(~alert_major_bus_o);,1
ibex_verifypin_v1_sandboxing.v,10790,assume property(PIN1);,1
ibex_verifypin_v1_sandboxing.v,10791,assume property(PIN2);,1
ibex_verifypin_v1_sandboxing.v,10792,assume property(PIN3);,1
ibex_verifypin_v1_sandboxing.v,10794,assert property(unauthenticated);,1
cv32e40p_verifypin_v7.v,9139,assume property(PIN1);,1
cv32e40p_verifypin_v7.v,9140,assume property(PIN2);,1
cv32e40p_verifypin_v7.v,9141,assume property(PIN3);,1
cv32e40p_verifypin_v7.v,9143,assert property(unauthenticated);,1
cv32e40p_verifypin_v7_sandboxing.v,2375,assume property(in_verifypin);,1
cv32e40p_verifypin_v7_sandboxing.v,9142,assume property(PIN1);,1
cv32e40p_verifypin_v7_sandboxing.v,9143,assume property(PIN2);,1
cv32e40p_verifypin_v7_sandboxing.v,9144,assume property(PIN3);,1
cv32e40p_verifypin_v7_sandboxing.v,9146,assert property(unauthenticated);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32m.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32m.v,2107,restrict property (resetn != $initstate);,1
picorv32m.v,2117,assert (mem_wstrb == 0);,1
picorv32m.v,2129,assert (ok);,1
picorv32m.v,2147,assert(mem_valid);,1
picorv32m.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32m.v,2149,assert(mem_wstrb == 0);,1
picorv32m.v,2152,assert(mem_valid);,1
picorv32m.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32m.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32m.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32m.v,2158,assert(!mem_valid || mem_ready);,1
main.v,3053,restrict property (|last_mem_nowait || mem_ready || !mem_valid_i);,1
main.v,3056,restrict property (resetn != $initstate);,1
main.v,3066,assert (mem_wstrb_i == 0);,1
main.v,3078,assert (ok);,1
main.v,3096,assert(mem_valid_i);,1
main.v,3097,assert(mem_addr_i == last_mem_la_addr);,1
main.v,3098,assert(mem_wstrb_i == 0);,1
main.v,3101,assert(mem_valid_i);,1
main.v,3102,assert(mem_addr_i == last_mem_la_addr);,1
main.v,3103,assert(mem_wdata_i == last_mem_la_wdata);,1
main.v,3104,assert(mem_wstrb_i == last_mem_la_wstrb);,1
main.v,3107,assert(!mem_valid_i || mem_ready);,1
main.v,3055,restrict property (|last_mem_nowait || mem_ready || !mem_valid_i);,1
main.v,3058,restrict property (resetn != $initstate);,1
main.v,3068,assert (mem_wstrb_i == 0);,1
main.v,3080,assert (ok);,1
main.v,3098,assert(mem_valid_i);,1
main.v,3099,assert(mem_addr_i == last_mem_la_addr);,1
main.v,3100,assert(mem_wstrb_i == 0);,1
main.v,3103,assert(mem_valid_i);,1
main.v,3104,assert(mem_addr_i == last_mem_la_addr);,1
main.v,3105,assert(mem_wdata_i == last_mem_la_wdata);,1
main.v,3106,assert(mem_wstrb_i == last_mem_la_wstrb);,1
main.v,3109,assert(!mem_valid_i || mem_ready);,1
main.v,3053,restrict property (|last_mem_nowait || mem_ready || !mem_valid_i);,1
main.v,3056,restrict property (resetn != $initstate);,1
main.v,3066,assert (mem_wstrb_i == 0);,1
main.v,3078,assert (ok);,1
main.v,3096,assert(mem_valid_i);,1
main.v,3097,assert(mem_addr_i == last_mem_la_addr);,1
main.v,3098,assert(mem_wstrb_i == 0);,1
main.v,3101,assert(mem_valid_i);,1
main.v,3102,assert(mem_addr_i == last_mem_la_addr);,1
main.v,3103,assert(mem_wdata_i == last_mem_la_wdata);,1
main.v,3104,assert(mem_wstrb_i == last_mem_la_wstrb);,1
main.v,3107,assert(!mem_valid_i || mem_ready);,1
main.v,3051,restrict property (|last_mem_nowait || mem_ready || !mem_valid_i);,1
main.v,3054,restrict property (resetn != $initstate);,1
main.v,3064,assert (mem_wstrb_i == 0);,1
main.v,3076,assert (ok);,1
main.v,3094,assert(mem_valid_i);,1
main.v,3095,assert(mem_addr_i == last_mem_la_addr);,1
main.v,3096,assert(mem_wstrb_i == 0);,1
main.v,3099,assert(mem_valid_i);,1
main.v,3100,assert(mem_addr_i == last_mem_la_addr);,1
main.v,3101,assert(mem_wdata_i == last_mem_la_wdata);,1
main.v,3102,assert(mem_wstrb_i == last_mem_la_wstrb);,1
main.v,3105,assert(!mem_valid_i || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
txuart.v,122,assert(state <= 'b0001);,1
txuart.v,126,assert(state == 'b0000);,1
txuart.v,146,assert(baud_count == bauds);,1
txuart.v,153,assert(baud_count == bauds);,1
txuart.v,157,assert(baud_count == bauds);,1
txuart.v,165,assert(baud_stb == 'b1);,1
txuart.v,183,assert(busy_out == !($past(state) == 'b0000));,1
top.v,88,assert(count == 'b11111111);,1
top.v,92,assert(tx_wr == 'b1);,1
top.v,96,assert(!tx_wr);,1
top.v,113,assert(uart_rxd_out == $past(tx_out)) ;,1
immediate_generator_tb.v,16,assert (immediate === 32'b00000000000000000001001101000100);,1
immediate_generator_tb.v,21,assert (immediate === 32'b00000000000000000010001101000100);,1
immediate_generator_tb.v,26,assert (immediate === 32'b11111111111111111011101100000000);,1
immediate_generator_tb.v,31,assert (immediate === 32'b00000000000000000000010000000000);,1
immediate_generator_tb.v,36,assert (immediate === 32'b11111111111110000000000000001011);,1
immediate_generator_tb.v,41,assert (immediate === 32'b00000000000000000000000001000000);,1
immediate_generator_tb.v,46,assert (immediate === 32'b00000000000000000000000000000000);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
hwbfly.v,488,assume(i_ce);,1
hwbfly.v,500,assume(!i_ce);,1
hwbfly.v,507,assume(!i_ce);,1
hwbfly.v,550,assert(left_sr == f_sumrx);,1
hwbfly.v,551,assert(left_si == f_sumix);,1
hwbfly.v,552,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,556,assert(mpy_r == 0);,1
hwbfly.v,557,assert(mpy_i == 0);,1
hwbfly.v,561,assert(mpy_r == 0);,1
hwbfly.v,562,assert(mpy_i == 0);,1
hwbfly.v,567,assert(mpy_r == f_difrx);,1
hwbfly.v,568,assert(mpy_i == f_difix);,1
hwbfly.v,573,assert(mpy_r == -f_difix);,1
hwbfly.v,574,assert(mpy_i == f_difrx);,1
hwbfly.v,579,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,580,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,585,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,586,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,620,assert(p_one == 0);,1
hwbfly.v,622,assert(p_two == 0);,1
hwbfly.v,625,assert(p_one == f_predifrx);,1
hwbfly.v,627,assert(p_two == f_predifix);,1
hwbfly.v,630,assert(p_one == 0);,1
hwbfly.v,632,assert(p_two == 0);,1
hwbfly.v,636,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,638,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,642,assert(p_three == 0);,1
hwbfly.v,644,assert(p_three == 0);,1
hwbfly.v,647,assert(p_three == f_sumdiff);,1
hwbfly.v,649,assert(p_three == f_sumcoef);,1
hwbfly.v,652,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,653,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,654,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,807,assume(i_ce);,1
butterfly.v,815,assume(i_ce);,1
butterfly.v,825,assume(!i_ce);,1
butterfly.v,830,assume(i_ce);,1
butterfly.v,835,assume(i_ce);,1
butterfly.v,844,assume(!i_ce);,1
butterfly.v,851,assume(i_ce);,1
butterfly.v,861,assume(i_ce);,1
butterfly.v,900,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,901,assert(left_sr == f_sumrx);,1
butterfly.v,902,assert(left_si == f_sumix);,1
butterfly.v,903,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,907,assert(mpy_r == 0);,1
butterfly.v,908,assert(mpy_i == 0);,1
butterfly.v,912,assert(mpy_r == 0);,1
butterfly.v,913,assert(mpy_i == 0);,1
butterfly.v,918,assert(mpy_r == f_difrx);,1
butterfly.v,919,assert(mpy_i == f_difix);,1
butterfly.v,924,assert(mpy_r == -f_difix);,1
butterfly.v,925,assert(mpy_i == f_difrx);,1
butterfly.v,930,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,931,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,936,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,937,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,967,assert(p_one == 0);,1
butterfly.v,969,assert(p_two == 0);,1
butterfly.v,972,assert(p_one == f_predifrx);,1
butterfly.v,974,assert(p_two == f_predifix);,1
butterfly.v,977,assert(p_one == 0);,1
butterfly.v,979,assert(p_two == 0);,1
butterfly.v,983,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,985,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,989,assert(p_three == 0);,1
butterfly.v,991,assert(p_three == 0);,1
butterfly.v,994,assert(p_three == f_sumdiff);,1
butterfly.v,996,assert(p_three == f_sumcoef);,1
butterfly.v,1001,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1002,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1003,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1023,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1024,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1025,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1026,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,152,assert(o_out == f_addr_value);,1
bitreverse.v,156,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,217,assume(i_ce);,1
longbimpy.v,404,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,406,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,415,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,416,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,423,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,429,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,275,assume(!i_sync);,1
qtrstage.v,278,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,291,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,292,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,293,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,294,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,296,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,297,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,303,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,304,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,305,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,306,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,313,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,314,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,320,assert(!o_sync);,1
qtrstage.v,321,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,322,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,328,assert(!o_sync);,1
qtrstage.v,329,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,330,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,335,assume(i_sync);,1
qtrstage.v,343,assert(!wait_for_sync);,1
qtrstage.v,348,assert(!o_sync);,1
qtrstage.v,351,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,352,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,354,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,355,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,178,assume(!i_sync);,1
laststage.v,181,assert(stage == f_state[0]);,1
laststage.v,186,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,187,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,193,assert(!o_sync);,1
laststage.v,194,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,195,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,201,assert(!f_rsyncd);,1
laststage.v,202,assert(!o_sync);,1
laststage.v,203,assert(f_state == 0);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32m.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32m.v,2107,restrict property (resetn != $initstate);,1
picorv32m.v,2117,assert (mem_wstrb == 0);,1
picorv32m.v,2129,assert (ok);,1
picorv32m.v,2147,assert(mem_valid);,1
picorv32m.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32m.v,2149,assert(mem_wstrb == 0);,1
picorv32m.v,2152,assert(mem_valid);,1
picorv32m.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32m.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32m.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32m.v,2158,assert(!mem_valid || mem_ready);,1
atxfifo.v,278,assume(f_wclk_step != 0);,1
atxfifo.v,280,assume(f_rclk_step != 0);,1
atxfifo.v,291,assume(i_wclk == f_wclk_count[F_CLKBITS-1]);,1
atxfifo.v,292,assume(i_rclk == f_rclk_count[F_CLKBITS-1]);,1
atxfifo.v,323,assert(f_sync_reset_wr != 2'b10);,1
atxfifo.v,326,assume(i_wrst_n == f_sync_reset_wr[1]);,1
atxfifo.v,339,assume(i_rrst_n == f_sync_reset_rd[1]);,1
atxfifo.v,344,assert(f_sync_reset_rd != 2'b10);,1
atxfifo.v,605,cover(i_wrst_n);,1
atxfifo.v,608,cover(i_rrst_n);,1
atxfifo.v,616,cover(o_wfull);,1
atxfifo.v,630,cover(i_wr);,1
fastfir.v,189,assume(i_ce);,1
fastfir.v,194,assume(i_sample == 0);,1
fastfir.v,248,assume(f_is_impulse);,1
fastfir.v,393,assume(i_reset);,1
fastfir.v,396,assume(i_reset);,1
abs_mpy.v,87,assume(any_result == 0);,1
abs_mpy.v,91,assume(any_result == 0);,1
abs_mpy.v,96,assume(u_result[AW+BW-1:BW] <= u_a);,1
abs_mpy.v,97,assume(u_result[AW+BW-1:AW] <= u_b);,1
dp.v,25,assert property ( prop );,1
vsaR_p09.v,287,assert property ( prop );,1
vsaR_p03.v,242,assert property ( prop );,1
vsa16a_p1_mod.v,203,assert property ( prop );,1
vsa16a_p1.v,203,assert property ( prop );,1
s1269b_p2_mod.v,193,assert property ( prop );,1
s1269b_p2.v,193,assert property ( prop );,1
main.v,285,assert property ( prop );,1
swap1.v,16,assert property ( prop );,1
two_processor_bin_2.v,71,assert property ( prop );,1
itc99_b13_p20.v,350,assert property ( prop );,1
mpeg_1.v,111,assert property ( prop );,1
main.v,145,assert property ( prop );,1
synabs.v,29,assert property ( prop );,1
itc99_b13_p03.v,316,assert property ( prop );,1
vsaR_p08.v,269,assert property ( prop );,1
am2901.v,159,assert property ( prop );,1
vsaR_p10.v,301,assert property ( prop );,1
itc99_b13_p10.v,330,assert property ( prop );,1
vsaR_p01.v,235,assert property ( prop );,1
vsa16a_p5.v,216,assert property ( prop );,1
vsa16a_p5_mod.v,216,assert property ( prop );,1
vsaR_p02.v,238,assert property ( prop );,1
rotate32.v,58,assert property ( prop );,1
main.v,224,assert property ( prop );,1
itc99_b12_p1.v,563,assert property ( prop );,1
vsaR_p04.v,245,assert property ( prop );,1
palu.v,128,assert property ( prop );,1
vMiim_p2.v,457,assert property ( prop );,1
vsaR_p16.v,329,assert property ( prop );,1
pipeline.v,40,assert property ( prop );,1
vMiim_p1.v,455,assert property ( prop );,1
bpbs_p1.v,217,assert property ( prop );,1
vMiim.v,445,assert property ( prop );,1
itc99_b13_p15.v,340,assert property ( prop );,1
usb_phy_1.v,232,assert property ( prop );,1
vsa16a_p3.v,209,assert property ( prop );,1
vsa16a_p3_mod.v,209,assert property ( prop );,1
itc99_b13_p13.v,336,assert property ( prop );,1
itc99_b13_p21.v,352,assert property ( prop );,1
ar.v,23,assert property ( prop );,1
main.v,42,assert property ( prop );,1
sdlx_control.v,898,assert property ( prop );,1
s1269b_p1_mod.v,192,assert property ( prop );,1
s1269b_p1.v,192,assert property ( prop );,1
bit-vector.v,17,assert property ( prop );,1
main.v,42,assert property ( prop );,1
vsa16a_p8_mod.v,225,assert property ( prop );,1
vsa16a_p8.v,225,assert property ( prop );,1
itc99_b13_p05.v,319,assert property ( prop );,1
three_processor_bin_2.v,96,assert property ( prop );,1
vsaR_p06.v,252,assert property ( prop );,1
control1.v,901,assert property ( prop );,1
itc99_b13_p11.v,332,assert property ( prop );,1
itc99_b13_p16.v,342,assert property ( prop );,1
itc99_b13_p18.v,346,assert property ( prop );,1
itc99_b13_p17.v,344,assert property ( prop );,1
vsaR_p14.v,318,assert property ( prop );,1
itc99_b13_p06.v,322,assert property ( prop );,1
bpbs_p4.v,305,assert property ( prop );,1
1.v,21,assert property ( prop );,1
fru32_p3.v,597,assert property ( prop );,1
main.v,63,assert property ( prop );,1
main_2.v,77,assert property ( prop );,1
vsaR_p13.v,315,assert property ( prop );,1
vsaR_p05.v,250,assert property ( prop );,1
fru32_p2.v,595,assert property ( prop );,1
vlunc.v,48,assert property ( prop );,1
fru32_p1.v,592,assert property ( prop );,1
field5.v,104,assert property ( prop );,1
two_p2.v,75,assert property ( prop );,1
main.v,56,assert property ( prop );,1
vsa16a_p2_mod.v,206,assert property ( prop );,1
vsa16a_p2.v,206,assert property ( prop );,1
am2910_p4.v,152,assert property ( prop );,1
icctl1.v,804,assert property ( prop );,1
vsaR_p15.v,321,assert property ( prop );,1
pj_icu_icctl_p1.v,794,assert property ( prop );,1
icram.v,155,assert property ( prop );,1
icram_2.v,155,assert property ( prop );,1
main_1_2.v,1026,assert property ( prop );,1
main_1.v,1025,assert property ( prop );,1
pj_icu_icctl_p3.v,796,assert property ( prop );,1
b12_1.v,564,assert property ( prop );,1
bcuvis32.v,329,assert property ( prop );,1
vsa16a_p4_mod.v,213,assert property ( prop );,1
vsa16a_p4.v,213,assert property ( prop );,1
swap2.v,18,assert property ( prop );,1
vsaR_p07.v,255,assert property ( prop );,1
synabs.v,17,assert property ( prop );,1
main.v,162,assert property ( prop );,1
itc99_b13_p01.v,312,assert property ( prop );,1
itc99_b13_p22.v,354,assert property ( prop );,1
pj_icu_icctl_p4.v,796,assert property ( prop );,1
example.v,19,assert property ( prop );,1
buf_bug.v,72,assert property ( prop );,1
usb_phy_1.v,231,assert property ( prop );,1
bufferAlloc.v,101,assert property ( prop );,1
pj_icu_icctl_p2.v,795,assert property ( prop );,1
spinner32.v,65,assert property ( prop );,1
s1269b_p3_mod.v,194,assert property ( prop );,1
s1269b_p3.v,194,assert property ( prop );,1
two_p1.v,73,assert property ( prop );,1
itc99_b13_p12.v,334,assert property ( prop );,1
bpbs_p2.v,263,assert property ( prop );,1
itc99_b13_p07.v,324,assert property ( prop );,1
itc99_b13_p02.v,314,assert property ( prop );,1
itc99_b13_p04.v,318,assert property ( prop );,1
vsa16a_p7.v,222,assert property ( prop );,1
vsa16a_p7_mod.v,222,assert property ( prop );,1
am2910_p3.v,147,assert property ( prop );,1
zdlx_impl.v_for_pred.v,475,assert property ( prop );,1
am2910_p2.v,141,assert property ( prop );,1
vsaR_p11.v,304,assert property ( prop );,1
example.v,19,assert property ( prop );,1
itc99_b12_p2.v,564,assert property ( prop );,1
s1269b_p5_mod.v,195,assert property ( prop );,1
s1269b_p5.v,195,assert property ( prop );,1
b13_1.v,377,assert property ( prop );,1
ibuf.v,119,assert property ( prop );,1
ibuf_mod.v,119,assert property ( prop );,1
vsaR_p12.v,312,assert property ( prop );,1
itc99_b13_p09.v,328,assert property ( prop );,1
bpbs_p3.v,301,assert property ( prop );,1
vsa16a_p6_mod.v,219,assert property ( prop );,1
vsa16a_p6.v,219,assert property ( prop );,1
ethernet2.v,103,assert property ( prop );,1
ethernet.v,102,assert property ( prop );,1
itc99_b13_p19.v,348,assert property ( prop );,1
am2910_p1.v,130,assert property ( prop );,1
main.v,33,assert property ( prop );,1
FIFOs.v,38,assert property ( prop );,1
itc99_b13_p08.v,326,assert property ( prop );,1
main.v,42,assert property ( prop );,1
main.v,182,assert property ( prop );,1
itc99_b13_p14.v,338,assert property ( prop );,1
s1269b_p4_mod.v,195,assert property ( prop );,1
s1269b_p4.v,195,assert property ( prop );,1
diagonal_v.v,24,assert property ( prop );,1
diagonal.v,22,assert property ( prop );,1
toy_lock.v,183,assert property (prop);,1
client_server.v,62,assert property ( prop );,1
cav14_example_v.v,22,assert property ( prop );,1
cav14_example.v,26,assert property ( prop );,1
eq_sdp_v1.v,37,assert property ( prop );,1
sw_state_machine.v,76,assert property ( prop );,1
sw_ball2004_2.v,83,assert property ( prop );,1
sw_sym_ex.v,72,assert property ( prop );,1
sw_loop_v.v,64,assert property ( prop );,1
eq_sdp_v2.v,37,assert property ( prop );,1
sw_ball2001.v,78,assert property ( prop );,1
paper_v3.v,88,assert property ( prop );,1
counter_v.v,20,assert property ( prop );,1
eq_sdp_v5.v,37,assert property ( prop );,1
sw_sym_ex_v.v,72,assert property ( prop );,1
eq_sdp_v3.v,37,assert property ( prop );,1
counter.v,20,assert property ( prop );,1
eq_sdp_v6.v,76,assert property ( prop );,1
sw_ball2004_1.v,53,assert property ( prop );,1
eq_sdp_v4.v,37,assert property ( prop );,1
sw_loop.v,64,assert property ( prop );,1
eq_sdp_v7.v,76,assert property ( prop );,1
multiplier.v,33,assert property ( ma == mb );,1
counter.v,18,assert(count != `W'b1111111111);,1
counter.v,10,assert property ( count != 3'b111 );,1
picorv32_ecc.v,2254,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32_ecc.v,2257,restrict property (resetn != $initstate);,1
picorv32_ecc.v,2267,assert (mem_wstrb == 0);,1
picorv32_ecc.v,2279,assert (ok);,1
picorv32_ecc.v,2297,assert(mem_valid);,1
picorv32_ecc.v,2298,assert(mem_addr == last_mem_la_addr);,1
picorv32_ecc.v,2299,assert(mem_wstrb == 0);,1
picorv32_ecc.v,2302,assert(mem_valid);,1
picorv32_ecc.v,2303,assert(mem_addr == last_mem_la_addr);,1
picorv32_ecc.v,2304,assert(mem_wdata == last_mem_la_wdata);,1
picorv32_ecc.v,2305,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32_ecc.v,2308,assert(!mem_valid || mem_ready);,1
picorv32.v,2119,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2122,restrict property (resetn != $initstate);,1
picorv32.v,2132,assert (mem_wstrb == 0);,1
picorv32.v,2144,assert (ok);,1
picorv32.v,2162,assert(mem_valid);,1
picorv32.v,2163,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2164,assert(mem_wstrb == 0);,1
picorv32.v,2167,assert(mem_valid);,1
picorv32.v,2168,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2169,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2170,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2173,assert(!mem_valid || mem_ready);,1
fifo_async.v,276,assume(f_wclk_step != 0);,1
fifo_async.v,277,assume(f_rclk_step != 0);,1
fifo_async.v,289,assume(i_wclk == f_wclk_count[F_CLKBITS-1]);,1
fifo_async.v,290,assume(i_rclk == f_rclk_count[F_CLKBITS-1]);,1
fifo_async.v,316,assert(rbin == 0);,1
fifo_async.v,346,assume(i_wr == 0);,1
fifo_async.v,348,assert(wptr == 0);,1
fifo_async.v,349,assert(wbin == 0);,1
fifo_async.v,350,assert(!o_wfull);,1
fifo_async.v,352,assert(rbin == 0);,1
fifo_async.v,353,assert(o_rempty);,1
fifo_async.v,355,assert(wq1_rptr == 0);,1
fifo_async.v,356,assert(wq2_rptr == 0);,1
fifo_async.v,357,assert(rq1_wptr == 0);,1
fifo_async.v,358,assert(rq2_wptr == 0);,1
fifo_async.v,364,assume(i_rd == 0);,1
fifo_async.v,366,assert(rptr == 0);,1
fifo_async.v,367,assert(rbin == 0);,1
fifo_async.v,368,assert(o_rempty);,1
fifo_async.v,370,assert(wq1_rptr == 0);,1
fifo_async.v,371,assert(wq2_rptr == 0);,1
fifo_async.v,372,assert(rq1_wptr == 0);,1
fifo_async.v,373,assert(rq2_wptr == 0);,1
fifo_async.v,394,"assert(f_fill <= {1'b1, {PTR_WIDTH{1'b0}} });",1
fifo_async.v,399,assert(o_wfull);,1
fifo_async.v,409,assert(o_rempty);,1
fifo_async.v,481,assert(o_wfull);,1
fifo_async.v,485,assert(o_rempty);,1
fifo_async.v,614,cover(i_wrstn);,1
fifo_async.v,617,cover(i_rrstn);,1
fifo_async.v,625,cover(o_wfull);,1
fifo_async.v,632,cover(i_wr);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2110,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2113,restrict property (resetn != $initstate);,1
picorv32.v,2123,assert (mem_wstrb == 0);,1
picorv32.v,2135,assert (ok);,1
picorv32.v,2153,assert(mem_valid);,1
picorv32.v,2154,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2155,assert(mem_wstrb == 0);,1
picorv32.v,2158,assert(mem_valid);,1
picorv32.v,2159,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2160,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2161,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2164,assert(!mem_valid || mem_ready);,1
p_addsub_ftb.v,35,restrict(pw_sum == 1);,1
p_addsub_ftb.v,39,assert(result == expectation);,1
p_addsub_ftb.v,43,assert(result == expectation);,1
p_addsub_ftb.v,47,assert(result == expectation);,1
p_addsub_ftb.v,51,assert(result == expectation);,1
p_addsub_ftb.v,55,assert(result == expectation);,1
xc_aesmix_ftb.v,47,assert(grm_result == dut_result);,1
xc_aesmix_ftb.v,48,cover (grm_result == dut_result);,1
xc_aesmix_ftb.v,52,assert(grm_result == dut_result);,1
xc_aesmix_ftb.v,53,cover (grm_result == dut_result);,1
b_bop_ftb.v,25,assert(result == expectation);,1
p_shfrot_ftb.v,37,restrict(one_hot_w <= 1);,1
p_shfrot_ftb.v,39,restrict(crs1 == 32'b1);,1
p_shfrot_ftb.v,41,restrict(shift ^ rotate);,1
p_shfrot_ftb.v,42,restrict(left ^ right );,1
p_shfrot_ftb.v,45,assert(result == expectation);,1
p_shfrot_ftb.v,49,assert(result == expectation);,1
p_shfrot_ftb.v,53,assert(result == expectation);,1
p_shfrot_ftb.v,57,assert(result == expectation);,1
p_shfrot_ftb.v,61,assert(result == expectation);,1
xc_aessub_ftb.v,51,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,52,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,54,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,55,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,59,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,60,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,62,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,63,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,71,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,72,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,74,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,75,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,79,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,80,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,82,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,83,cover (grm_result == dut_result);,1
xc_sha3_ftb.v,32,restrict(onehot <= 1);,1
xc_sha3_ftb.v,33,restrict(rs1[4:0] < 25);,1
xc_sha3_ftb.v,34,restrict(rs2[4:0] < 25);,1
xc_sha3_ftb.v,38,assert(result == expectation);,1
xc_sha3_ftb.v,42,assert(result == expectation);,1
xc_sha3_ftb.v,46,assert(result == expectation);,1
xc_sha3_ftb.v,50,assert(result == expectation);,1
xc_sha3_ftb.v,54,assert(result == expectation);,1
b_lut_ftb.v,24,assert(result == expectation);,1
b_lut_ftb.v,29,assert(result == 32'h76543210);,1
b_lut_ftb.v,35,assert(result == 32'h76543210);,1
frv_pipeline_writeback.v,638,assume(!mmio_error);,1
p_addsub_ftb.v,35,restrict(pw_sum == 1);,1
p_addsub_ftb.v,39,assert(result == expectation);,1
p_addsub_ftb.v,43,assert(result == expectation);,1
p_addsub_ftb.v,47,assert(result == expectation);,1
p_addsub_ftb.v,51,assert(result == expectation);,1
p_addsub_ftb.v,55,assert(result == expectation);,1
xc_aesmix_ftb.v,47,assert(grm_result == dut_result);,1
xc_aesmix_ftb.v,48,cover (grm_result == dut_result);,1
xc_aesmix_ftb.v,52,assert(grm_result == dut_result);,1
xc_aesmix_ftb.v,53,cover (grm_result == dut_result);,1
b_bop_ftb.v,25,assert(result == expectation);,1
p_shfrot_ftb.v,37,restrict(one_hot_w <= 1);,1
p_shfrot_ftb.v,39,restrict(crs1 == 32'b1);,1
p_shfrot_ftb.v,41,restrict(shift ^ rotate);,1
p_shfrot_ftb.v,42,restrict(left ^ right );,1
p_shfrot_ftb.v,45,assert(result == expectation);,1
p_shfrot_ftb.v,49,assert(result == expectation);,1
p_shfrot_ftb.v,53,assert(result == expectation);,1
p_shfrot_ftb.v,57,assert(result == expectation);,1
p_shfrot_ftb.v,61,assert(result == expectation);,1
xc_aessub_ftb.v,51,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,52,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,54,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,55,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,59,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,60,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,62,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,63,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,71,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,72,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,74,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,75,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,79,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,80,cover (grm_result == dut_result);,1
xc_aessub_ftb.v,82,assert(grm_result == dut_result);,1
xc_aessub_ftb.v,83,cover (grm_result == dut_result);,1
xc_sha3_ftb.v,32,restrict(onehot <= 1);,1
xc_sha3_ftb.v,33,restrict(rs1[4:0] < 25);,1
xc_sha3_ftb.v,34,restrict(rs2[4:0] < 25);,1
xc_sha3_ftb.v,38,assert(result == expectation);,1
xc_sha3_ftb.v,42,assert(result == expectation);,1
xc_sha3_ftb.v,46,assert(result == expectation);,1
xc_sha3_ftb.v,50,assert(result == expectation);,1
xc_sha3_ftb.v,54,assert(result == expectation);,1
b_lut_ftb.v,24,assert(result == expectation);,1
b_lut_ftb.v,29,assert(result == 32'h76543210);,1
b_lut_ftb.v,35,assert(result == 32'h76543210);,1
frv_pipeline_writeback.v,638,assume(!mmio_error);,1
smtlib2_module.v,29,assert(add == add2);,1
smtlib2_module.v,30,assert(sub == sub2);,1
generate.v,196,assert property (out1 == 4);,1
generate.v,197,assert property (out2 == 2);,1
generate.v,198,assert property (out3 == 7);,1
generate.v,199,assert property (cond.sub_out1 == 4);,1
generate.v,200,assert property (cond.sub_out2 == 2);,1
generate.v,201,assert property (cond.sub_out3 == 7);,1
asserts.v,8,assert(state < 3);,1
asserts.v,13,assert property (y !== 1'b1);,1
initval.v,20,"assert property (foo == {last_bar[3:2], bar[1:0]});",1
asserts_seq.v,16,assert(a_old != b);,1
asserts_seq.v,33,assert(a_old != b);,1
asserts_seq.v,50,assert(a_old != b);,1
asserts_seq.v,67,"assert(a_old == b); // <-- this will fail end endmodule module test_005(clk, a, a_old, b);",5
asserts_seq.v,84,assert(a_old != b);,1
cells_sim.v,545,assert(A0m==A1m);,1
cells_sim.v,546,assert(B0m==B1m);,1
cells_sim.v,547,assert(C0m==C1m);,1
cells_sim.v,548,assert(D0m==D1m);,1
example.v,9,assert property (counter != 15);,1
demo.v,8,assume(counter != 0);,1
demo7.v,18,assert property (1000 < memory[addr] && memory[addr] < 2000);,1
demo1.v,11,assert property (cnt != 15);,1
demo9.v,9,assume(trigger == 1'b1);,1
demo9.v,10,cover(1);,1
demo8.v,10,assume(prime > 1);,1
demo5.v,16,assert(hash == 32'h A18FAC0A);,1
picorv32.v,2038,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2041,restrict property (resetn != $initstate);,1
picorv32.v,2051,assert (mem_wstrb == 0);,1
picorv32.v,2063,assert (ok);,1
picorv32.v,2081,assert(mem_valid);,1
picorv32.v,2082,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2083,assert(mem_wstrb == 0);,1
picorv32.v,2086,assert(mem_valid);,1
picorv32.v,2087,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2088,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2089,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2092,assert(!mem_valid || mem_ready);,1
picorv32_core.v,2038,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32_core.v,2041,restrict property (resetn != $initstate);,1
picorv32_core.v,2051,assert (mem_wstrb == 0);,1
picorv32_core.v,2063,assert (ok);,1
picorv32_core.v,2081,assert(mem_valid);,1
picorv32_core.v,2082,assert(mem_addr == last_mem_la_addr);,1
picorv32_core.v,2083,assert(mem_wstrb == 0);,1
picorv32_core.v,2086,assert(mem_valid);,1
picorv32_core.v,2087,assert(mem_addr == last_mem_la_addr);,1
picorv32_core.v,2088,assert(mem_wdata == last_mem_la_wdata);,1
picorv32_core.v,2089,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32_core.v,2092,assert(!mem_valid || mem_ready);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
sel_reg_wr_tb.v,22,assert(reg_val === 8'h00 );,1
sel_reg_wr_tb.v,28,assert(reg_val === 8'h44 );,1
sel_reg_wr_tb.v,34,assert(reg_val === 8'hF3 );,1
program_counter_tb.v,28,assert(program_counter === 0);,1
program_counter_tb.v,30,assert(program_counter === 1);,1
program_counter_tb.v,34,assert(program_counter === 2);,1
program_counter_tb.v,37,assert(program_counter === 32);,1
program_counter_tb.v,40,assert(program_counter === 33);,1
program_counter_tb.v,45,assert(program_counter === 42);,1
program_counter_tb.v,49,assert(program_counter === 43);,1
program_mem_tb.v,25,assert(instruction === 16'b0100_1001_0000_0011);,1
program_mem_tb.v,29,assert(instruction === 16'b0100_1010_0001_0100);,1
program_mem_tb.v,33,assert(instruction === 16'b0100_1011_1111_0000);,1
program_mem_tb.v,37,assert(instruction === 16'b0000_1001_0001_0000);,1
program_mem_tb.v,41,assert(instruction === 16'b0001_1001_0001_1000);,1
program_mem_tb.v,45,assert(instruction === 16'b0100_1000_0000_1111);,1
program_mem_tb.v,49,assert(instruction === 16'b0010_0000_0000_1000);,1
program_mem_tb.v,53,assert(instruction === 16'b0010_1001_0001_1000);,1
program_mem_tb.v,57,assert(instruction === 16'b0011_0011_0000_1000);,1
program_mem_tb.v,61,assert(instruction === 16'b0001_0011_0000_1000);,1
program_mem_tb.v,65,assert(instruction === 16'b1000_1000_0000_0010);,1
program_mem_tb.v,69,assert(instruction === 16'b0000_0000_0000_0000);,1
program_mem_tb.v,73,assert(instruction === 16'b0000_0000_0000_0000);,1
program_mem_tb.v,77,assert(instruction === 16'b0011_1001_0000_0010);,1
program_mem_tb.v,81,assert(instruction === 16'b0100_0010_0000_0100);,1
program_mem_tb.v,85,assert(instruction === 16'b1001_0000_0000_0011);,1
program_mem_tb.v,89,assert(instruction === 16'b0000_0000_0000_0000);,1
program_mem_tb.v,93,assert(instruction === 16'b0000_0000_0000_0000);,1
program_mem_tb.v,97,assert(instruction === 16'b0000_0000_0000_0000);,1
program_mem_tb.v,101,assert(instruction === 16'b0001_0010_0001_0000);,1
program_mem_tb.v,105,assert(instruction === 16'b1000_1000_0000_0001);,1
program_mem_tb.v,109,assert(instruction === 16'b0000_0000_0000_0000);,1
program_mem_tb.v,113,assert(instruction === 16'b1001_1000_0000_0001);,1
program_mem_tb.v,117,assert(instruction === 16'b0000_0000_0000_0000);,1
program_mem_tb.v,121,assert(instruction === 16'b0000_1001_0001_0000);,1
program_mem_tb.v,125,assert(instruction === 16'b1001_1000_0000_0001);,1
program_mem_tb.v,129,assert(instruction === 16'b0000_0000_0000_0000);,1
program_mem_tb.v,133,assert(instruction === 16'b0101_0001_0000_0000);,1
program_mem_tb.v,137,assert(instruction === 16'b1010_0000_0000_0001);,1
program_mem_tb.v,141,assert(instruction === 16'b0101_0000_0000_1000);,1
program_mem_tb.v,145,assert(instruction === 16'b1010_0000_0000_0001);,1
program_mem_tb.v,149,assert(instruction === 16'b0000_0000_0000_0000);,1
program_mem_tb.v,153,assert(instruction === 16'b1000_0000_0000_1000);,1
registerset_tb.v,38,assert(reg_out_1 === 0);,1
registerset_tb.v,39,assert(reg_out_2 === 0);,1
registerset_tb.v,45,assert(reg_out_1 === 0);,1
registerset_tb.v,46,assert(reg_out_2 === 0);,1
registerset_tb.v,51,assert(reg_out_1 === 0);,1
registerset_tb.v,52,assert(reg_out_2 === 0);,1
registerset_tb.v,57,assert(reg_out_1 === 0);,1
registerset_tb.v,58,assert(reg_out_2 === 0);,1
registerset_tb.v,64,assert(reg_out_1 === 255);,1
registerset_tb.v,65,assert(reg_out_2 === 0);,1
registerset_tb.v,70,assert(reg_out_1 === 0);,1
registerset_tb.v,71,assert(reg_out_2 === 0);,1
registerset_tb.v,78,assert(reg_out_1 === 0);,1
registerset_tb.v,79,assert(reg_out_2 === 128);,1
registerset_tb.v,86,assert(reg_out_1 === 15);,1
registerset_tb.v,87,assert(reg_out_2 === 15);,1
registerset_tb.v,92,assert(reg_out_1 === 3);,1
registerset_tb.v,93,assert(reg_out_2 === 255);,1
alu_tb.v,55,assert(result_t === 4);,1
alu_tb.v,56,assert(status_t[3:0] === 0);,1
alu_tb.v,57,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,58,assert(status_t[SmallerThanBit] === 1); //smaller than #9 opcode_t = Op_ADD;,3
alu_tb.v,64,assert(result_t === 10);,1
alu_tb.v,65,assert(status_t[3:0] === 0);,1
alu_tb.v,66,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,67,assert(status_t[SmallerThanBit] === 1); //smaller than #9 opcode_t = Op_ADD;,3
alu_tb.v,73,assert(result_t === 1);,1
alu_tb.v,74,assert(status_t[CarryBit] === 1);,1
alu_tb.v,75,assert(status_t[3:1] === 0);,1
alu_tb.v,76,assert(status_t[GreaterThanBit] === 1); //greater than assert(status_t[SmallerThanBit] === 0);,2
alu_tb.v,83,assert(result_t === 8'b1000_1000);,1
alu_tb.v,84,assert(status_t[3:0] === 0);,1
alu_tb.v,85,assert(status_t[GreaterThanBit] === 1); //greater than assert(status_t[SmallerThanBit] === 0);,2
alu_tb.v,92,assert(result_t === 8'b0000_0000);,1
alu_tb.v,93,assert(status_t[1:0] === 0);,1
alu_tb.v,94,assert(status_t[ZeroBit] === 1);,1
alu_tb.v,95,assert(status_t[EqualBit] === 0);,1
alu_tb.v,96,assert(status_t[GreaterThanBit] === 1); //greater than assert(status_t[SmallerThanBit] === 0);,2
alu_tb.v,103,assert(result_t === 8'b0000_0000);,1
alu_tb.v,104,assert(status_t[CarryBit] === 1);,1
alu_tb.v,105,assert(status_t[UnderflowBit] === 0);,1
alu_tb.v,106,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,107,assert(status_t[EqualBit] === 0);,1
alu_tb.v,108,assert(status_t[GreaterThanBit] === 1); //greater than assert(status_t[SmallerThanBit] === 0);,2
alu_tb.v,115,assert(result_t === 8'b0000_0000);,1
alu_tb.v,116,assert(status_t[CarryBit] === 0);,1
alu_tb.v,117,assert(status_t[UnderflowBit] === 0);,1
alu_tb.v,119,assert(status_t[EqualBit] === 1); //equal assert(status_t[GreaterThanBit] === 0);,2
alu_tb.v,121,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,127,assert(result_t === 8'b1111_1111);,1
alu_tb.v,128,assert(status_t[3:0] === 0);,1
alu_tb.v,129,assert(status_t[GreaterThanBit] === 1); //greater than assert(status_t[SmallerThanBit] === 0);,2
alu_tb.v,136,assert(result_t === 8'b1111_1100);,1
alu_tb.v,137,assert(status_t[3:0] === 0);,1
alu_tb.v,138,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,139,assert(status_t[SmallerThanBit] === 1); //smaller than #9 opcode_t = Op_OR;,3
alu_tb.v,145,assert(result_t === 8'b0000_0000);,1
alu_tb.v,146,assert(status_t[1:0] === 0);,1
alu_tb.v,147,assert(status_t[ZeroBit] === 1);,1
alu_tb.v,148,assert(status_t[EqualBit] === 1); //equal assert(status_t[GreaterThanBit] === 0);,2
alu_tb.v,150,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,156,assert(result_t === 8'b1111_0000);,1
alu_tb.v,157,assert(status_t === 0);,1
alu_tb.v,163,assert(result_t === 8'b0101_0011);,1
alu_tb.v,164,assert(status_t === 0);,1
alu_tb.v,170,assert(result_t === 8'b0000_0000);,1
alu_tb.v,171,assert(status_t[1:0] === 0);,1
alu_tb.v,172,assert(status_t[ZeroBit] === 1);,1
alu_tb.v,173,assert(status_t[EqualBit] === 0);,1
alu_tb.v,174,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,175,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,181,assert(result_t === 8'b1111_0000);,1
alu_tb.v,182,assert(status_t[1:0] === 0);,1
alu_tb.v,183,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,184,assert(status_t[EqualBit] === 0);,1
alu_tb.v,185,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,186,assert(status_t[SmallerThanBit] === 1); //smaller than #9 opcode_t = Op_XOR;,3
alu_tb.v,192,assert(result_t === 8'b1111_1010);,1
alu_tb.v,193,assert(status_t[1:0] === 0);,1
alu_tb.v,194,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,195,assert(status_t[EqualBit] === 0);,1
alu_tb.v,196,assert(status_t[GreaterThanBit] === 1); //greater than assert(status_t[SmallerThanBit] === 0);,2
alu_tb.v,203,assert(result_t === 8'b0000_0000);,1
alu_tb.v,204,assert(status_t[1:0] === 0);,1
alu_tb.v,205,assert(status_t[ZeroBit] === 1);,1
alu_tb.v,206,assert(status_t[EqualBit] === 1); //equal assert(status_t[GreaterThanBit] === 0);,2
alu_tb.v,208,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,214,assert(result_t === 8'b0011_0000);,1
alu_tb.v,215,assert(status_t[1:0] === 0);,1
alu_tb.v,216,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,217,assert(status_t[EqualBit] === 0);,1
alu_tb.v,218,assert(status_t[GreaterThanBit] === 1); //greater than assert(status_t[SmallerThanBit] === 0);,2
alu_tb.v,225,assert(result_t === 8'b1111_1111);,1
alu_tb.v,226,assert(status_t[1:0] === 2'b10);,1
alu_tb.v,227,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,228,assert(status_t[EqualBit] === 0);,1
alu_tb.v,229,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,230,assert(status_t[SmallerThanBit] === 1); //smaller than #9 opcode_t = Op_SUB;,3
alu_tb.v,236,assert(result_t === 8'b0000_0000);,1
alu_tb.v,237,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,238,assert(status_t[ZeroBit] === 1);,1
alu_tb.v,239,assert(status_t[EqualBit] === 1); //equal assert(status_t[GreaterThanBit] === 0);,2
alu_tb.v,241,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,248,assert(result_t === 8'b1110_1100);,1
alu_tb.v,249,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,250,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,251,assert(status_t[EqualBit] === 0);,1
alu_tb.v,252,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,253,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,260,assert(result_t === 8'b0011_0000);,1
alu_tb.v,261,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,262,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,263,assert(status_t[EqualBit] === 0);,1
alu_tb.v,264,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,265,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,272,assert(result_t === 8'b0000_0000);,1
alu_tb.v,273,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,274,assert(status_t[ZeroBit] === 1);,1
alu_tb.v,275,assert(status_t[EqualBit] === 0);,1
alu_tb.v,276,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,277,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,284,assert(result_t === 8'b0011_1011);,1
alu_tb.v,285,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,286,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,287,assert(status_t[EqualBit] === 0);,1
alu_tb.v,288,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,289,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,296,assert(result_t === 8'b0000_0110);,1
alu_tb.v,297,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,298,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,299,assert(status_t[EqualBit] === 0);,1
alu_tb.v,300,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,301,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,308,assert(result_t === 8'b0000_0000);,1
alu_tb.v,309,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,310,assert(status_t[ZeroBit] === 1);,1
alu_tb.v,311,assert(status_t[EqualBit] === 0);,1
alu_tb.v,312,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,313,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,320,assert(result_t === 8'b0000_0000);,1
alu_tb.v,321,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,322,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,323,assert(status_t[EqualBit] === 0);,1
alu_tb.v,324,assert(status_t[GreaterThanBit] === 1);,1
alu_tb.v,325,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,332,assert(result_t === 8'b0000_0000);,1
alu_tb.v,333,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,334,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,335,assert(status_t[EqualBit] === 1);,1
alu_tb.v,336,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,337,assert(status_t[SmallerThanBit] === 0);,1
alu_tb.v,344,assert(result_t === 8'b0000_0000);,1
alu_tb.v,345,assert(status_t[1:0] === 2'b00);,1
alu_tb.v,346,assert(status_t[ZeroBit] === 0);,1
alu_tb.v,347,assert(status_t[EqualBit] === 0);,1
alu_tb.v,348,assert(status_t[GreaterThanBit] === 0);,1
alu_tb.v,349,assert(status_t[SmallerThanBit] === 1);,1
decoder_tb.v,96,assert(stat_wr_en === 0);,1
decoder_tb.v,97,assert(status_out === 6'b000000);,1
decoder_tb.v,98,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,105,assert(opcode === Op_ADD);,1
decoder_tb.v,106,assert(rd_sel1 === 2'b01);,1
decoder_tb.v,107,assert(rd_sel2 === 2'b10);,1
decoder_tb.v,108,assert(rd_en1 === 1);,1
decoder_tb.v,109,assert(rd_en2 === 1);,1
decoder_tb.v,110,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,111,assert(wr_en === 1);,1
decoder_tb.v,112,assert(wr_sel === 2'b01);,1
decoder_tb.v,113,assert(status_out === 6'b000000);,1
decoder_tb.v,114,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,115,assert(stat_wr_en === 1);,1
decoder_tb.v,116,assert(add_offset === 0);,1
decoder_tb.v,123,assert(opcode === Op_SUB);,1
decoder_tb.v,124,assert(rd_sel1 === 2'b10);,1
decoder_tb.v,125,assert(rd_sel2 === 2'b01);,1
decoder_tb.v,126,assert(rd_en1 === 1);,1
decoder_tb.v,127,assert(rd_en2 === 1);,1
decoder_tb.v,128,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,129,assert(wr_en === 1);,1
decoder_tb.v,130,assert(wr_sel === 2'b10);,1
decoder_tb.v,131,assert(status_out === 6'b000000);,1
decoder_tb.v,132,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,133,assert(stat_wr_en === 1);,1
decoder_tb.v,134,assert(add_offset === 0);,1
decoder_tb.v,141,assert(opcode === Op_AND);,1
decoder_tb.v,142,assert(rd_sel1 === 2'b11);,1
decoder_tb.v,143,assert(rd_sel2 === 2'b10);,1
decoder_tb.v,144,assert(rd_en1 === 1);,1
decoder_tb.v,145,assert(rd_en2 === 1);,1
decoder_tb.v,146,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,147,assert(wr_en === 1);,1
decoder_tb.v,148,assert(wr_sel === 2'b11);,1
decoder_tb.v,149,assert(status_out === 6'b000000);,1
decoder_tb.v,150,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,151,assert(stat_wr_en === 1);,1
decoder_tb.v,152,assert(add_offset === 0);,1
decoder_tb.v,159,assert(opcode === Op_OR);,1
decoder_tb.v,160,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,161,assert(rd_sel2 === 2'b01);,1
decoder_tb.v,162,assert(rd_en1 === 1);,1
decoder_tb.v,163,assert(rd_en2 === 1);,1
decoder_tb.v,164,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,165,assert(wr_en === 1);,1
decoder_tb.v,166,assert(wr_sel === 2'b00);,1
decoder_tb.v,167,assert(status_out === 6'b000000);,1
decoder_tb.v,168,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,169,assert(stat_wr_en === 1);,1
decoder_tb.v,170,assert(add_offset === 0);,1
decoder_tb.v,177,assert(opcode === Op_NOT);,1
decoder_tb.v,178,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,179,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,180,assert(rd_en1 === 0);,1
decoder_tb.v,181,assert(rd_en2 === 1);,1
decoder_tb.v,182,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,183,assert(wr_en === 1);,1
decoder_tb.v,184,assert(wr_sel === 2'b10);,1
decoder_tb.v,185,assert(status_out === 6'b00_0000);,1
decoder_tb.v,186,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,187,assert(stat_wr_en === 1);,1
decoder_tb.v,188,assert(add_offset === 0);,1
decoder_tb.v,195,assert(opcode === Op_VAL);,1
decoder_tb.v,196,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,197,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,198,assert(rd_en1 === 0);,1
decoder_tb.v,199,assert(rd_en2 === 0);,1
decoder_tb.v,200,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,201,assert(wr_en === 1);,1
decoder_tb.v,202,assert(wr_sel === 2'b11);,1
decoder_tb.v,203,assert(param === 8'hA5);,1
decoder_tb.v,204,assert(status_out === 6'b00_0000);,1
decoder_tb.v,205,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,206,assert(stat_wr_en === 0);,1
decoder_tb.v,207,assert(add_offset === 0);,1
decoder_tb.v,214,assert(opcode === Op_GOTO);,1
decoder_tb.v,215,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,216,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,217,assert(rd_en1 === 0);,1
decoder_tb.v,218,assert(rd_en2 === 0);,1
decoder_tb.v,219,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,220,assert(wr_en === 0);,1
decoder_tb.v,221,assert(wr_sel === 2'b00);,1
decoder_tb.v,222,assert(cnt_wr_en === 1 );,1
decoder_tb.v,223,assert(literal_adr === 8'h3F);,1
decoder_tb.v,224,assert(status_out === 6'b00_0000);,1
decoder_tb.v,225,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,226,assert(stat_wr_en === 0);,1
decoder_tb.v,227,assert(add_offset === 0);,1
decoder_tb.v,234,assert(opcode === Op_XOR);,1
decoder_tb.v,235,assert(rd_sel1 === 2'b11);,1
decoder_tb.v,236,assert(rd_sel2 === 2'b10);,1
decoder_tb.v,237,assert(rd_en1 === 1);,1
decoder_tb.v,238,assert(rd_en2 === 1);,1
decoder_tb.v,239,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,240,assert(wr_en === 1);,1
decoder_tb.v,241,assert(wr_sel === 2'b11);,1
decoder_tb.v,242,assert(status_out === 6'b00_0000);,1
decoder_tb.v,243,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,244,assert(stat_wr_en === 1);,1
decoder_tb.v,245,assert(add_offset === 0);,1
decoder_tb.v,252,assert(opcode === Op_SHL);,1
decoder_tb.v,253,assert(rd_sel1 === 2'b01);,1
decoder_tb.v,254,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,255,assert(rd_en1 === 1);,1
decoder_tb.v,256,assert(rd_en2 === 0);,1
decoder_tb.v,257,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,258,assert(wr_en === 1);,1
decoder_tb.v,259,assert(wr_sel === 2'b01);,1
decoder_tb.v,260,assert(status_out === 6'b00_0000);,1
decoder_tb.v,261,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,262,assert(stat_wr_en === 1);,1
decoder_tb.v,263,assert(add_offset === 0);,1
decoder_tb.v,270,assert(opcode === Op_SHR);,1
decoder_tb.v,271,assert(rd_sel1 === 2'b10);,1
decoder_tb.v,272,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,273,assert(rd_en1 === 1);,1
decoder_tb.v,274,assert(rd_en2 === 0);,1
decoder_tb.v,275,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,276,assert(wr_en === 1);,1
decoder_tb.v,277,assert(wr_sel === 2'b10);,1
decoder_tb.v,278,assert(status_out === 6'b00_0000);,1
decoder_tb.v,279,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,280,assert(stat_wr_en === 1);,1
decoder_tb.v,281,assert(add_offset === 0);,1
decoder_tb.v,288,assert(opcode === Op_IFZ);,1
decoder_tb.v,289,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,290,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,291,assert(rd_en1 === 0);,1
decoder_tb.v,292,assert(rd_en2 === 0);,1
decoder_tb.v,293,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,294,assert(wr_en === 0);,1
decoder_tb.v,295,assert(wr_sel === 2'b00);,1
decoder_tb.v,296,assert(status_out === 6'b00_0000);,1
decoder_tb.v,297,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,298,assert(stat_wr_en === 0);,1
decoder_tb.v,299,assert(add_offset === 0);,1
decoder_tb.v,300,assert(cnt_wr_en === 0 );,1
decoder_tb.v,308,assert(opcode === Op_IFZ);,1
decoder_tb.v,309,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,310,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,311,assert(rd_en1 === 0);,1
decoder_tb.v,312,assert(rd_en2 === 0);,1
decoder_tb.v,313,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,314,assert(wr_en === 0);,1
decoder_tb.v,315,assert(wr_sel === 2'b00);,1
decoder_tb.v,316,assert(status_out === 6'b00_0000);,1
decoder_tb.v,317,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,318,assert(stat_wr_en === 0);,1
decoder_tb.v,319,assert(add_offset === 1);,1
decoder_tb.v,320,assert(cnt_wr_en === 1 );,1
decoder_tb.v,327,assert(opcode === Op_IFNZ);,1
decoder_tb.v,328,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,329,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,330,assert(rd_en1 === 0);,1
decoder_tb.v,331,assert(rd_en2 === 0);,1
decoder_tb.v,332,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,333,assert(wr_en === 0);,1
decoder_tb.v,334,assert(wr_sel === 2'b00);,1
decoder_tb.v,335,assert(status_out === 6'b00_0000);,1
decoder_tb.v,336,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,337,assert(stat_wr_en === 0);,1
decoder_tb.v,338,assert(add_offset === 0);,1
decoder_tb.v,339,assert(cnt_wr_en === 0 );,1
decoder_tb.v,347,assert(opcode === Op_IFNZ);,1
decoder_tb.v,348,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,349,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,350,assert(rd_en1 === 0);,1
decoder_tb.v,351,assert(rd_en2 === 0);,1
decoder_tb.v,352,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,353,assert(wr_en === 0);,1
decoder_tb.v,354,assert(wr_sel === 2'b00);,1
decoder_tb.v,355,assert(status_out === 6'b00_0000);,1
decoder_tb.v,356,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,357,assert(stat_wr_en === 0);,1
decoder_tb.v,358,assert(add_offset === 1);,1
decoder_tb.v,359,assert(cnt_wr_en === 1 );,1
decoder_tb.v,367,assert(opcode === Op_IFEQ);,1
decoder_tb.v,368,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,369,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,370,assert(rd_en1 === 0);,1
decoder_tb.v,371,assert(rd_en2 === 0);,1
decoder_tb.v,372,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,373,assert(wr_en === 0);,1
decoder_tb.v,374,assert(wr_sel === 2'b00);,1
decoder_tb.v,375,assert(status_out === 6'b00_0000);,1
decoder_tb.v,376,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,377,assert(stat_wr_en === 0);,1
decoder_tb.v,378,assert(add_offset === 1);,1
decoder_tb.v,379,assert(cnt_wr_en === 1 );,1
decoder_tb.v,387,assert(opcode === Op_IFEQ);,1
decoder_tb.v,388,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,389,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,390,assert(rd_en1 === 0);,1
decoder_tb.v,391,assert(rd_en2 === 0);,1
decoder_tb.v,392,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,393,assert(wr_en === 0);,1
decoder_tb.v,394,assert(wr_sel === 2'b00);,1
decoder_tb.v,395,assert(status_out === 6'b00_0000);,1
decoder_tb.v,396,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,397,assert(stat_wr_en === 0);,1
decoder_tb.v,398,assert(add_offset === 0);,1
decoder_tb.v,399,assert(cnt_wr_en === 0 );,1
decoder_tb.v,407,assert(opcode === Op_IFST);,1
decoder_tb.v,408,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,409,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,410,assert(rd_en1 === 0);,1
decoder_tb.v,411,assert(rd_en2 === 0);,1
decoder_tb.v,412,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,413,assert(wr_en === 0);,1
decoder_tb.v,414,assert(wr_sel === 2'b00);,1
decoder_tb.v,415,assert(status_out === 6'b00_0000);,1
decoder_tb.v,416,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,417,assert(stat_wr_en === 0);,1
decoder_tb.v,418,assert(add_offset === 1);,1
decoder_tb.v,419,assert(cnt_wr_en === 1 );,1
decoder_tb.v,427,assert(opcode === Op_IFST);,1
decoder_tb.v,428,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,429,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,430,assert(rd_en1 === 0);,1
decoder_tb.v,431,assert(rd_en2 === 0);,1
decoder_tb.v,432,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,433,assert(wr_en === 0);,1
decoder_tb.v,434,assert(wr_sel === 2'b00);,1
decoder_tb.v,435,assert(status_out === 6'b00_0000);,1
decoder_tb.v,436,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,437,assert(stat_wr_en === 0);,1
decoder_tb.v,438,assert(add_offset === 0);,1
decoder_tb.v,439,assert(cnt_wr_en === 0 );,1
decoder_tb.v,446,assert(opcode === Op_CMP);,1
decoder_tb.v,447,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,448,assert(rd_sel2 === 2'b10);,1
decoder_tb.v,449,assert(rd_en1 === 1);,1
decoder_tb.v,450,assert(rd_en2 === 1);,1
decoder_tb.v,451,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,452,assert(wr_en === 0);,1
decoder_tb.v,453,assert(wr_sel === 2'b00);,1
decoder_tb.v,454,assert(status_out === 6'b00_0000);,1
decoder_tb.v,455,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,456,assert(stat_wr_en === 1);,1
decoder_tb.v,457,assert(add_offset === 0);,1
decoder_tb.v,458,assert(cnt_wr_en === 0 );,1
decoder_tb.v,466,assert(opcode === Op_ADDC);,1
decoder_tb.v,467,assert(rd_sel1 === 2'b11);,1
decoder_tb.v,468,assert(rd_sel2 === 2'b10);,1
decoder_tb.v,469,assert(rd_en1 === 1);,1
decoder_tb.v,470,assert(rd_en2 === 1);,1
decoder_tb.v,471,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,472,assert(wr_en === 1);,1
decoder_tb.v,473,assert(wr_sel === 2'b11);,1
decoder_tb.v,474,assert(status_out === 6'b000000);,1
decoder_tb.v,475,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,476,assert(stat_wr_en === 1);,1
decoder_tb.v,477,assert(add_offset === 0);,1
decoder_tb.v,484,assert(opcode === Op_SUBU);,1
decoder_tb.v,485,assert(rd_sel1 === 2'b01);,1
decoder_tb.v,486,assert(rd_sel2 === 2'b10);,1
decoder_tb.v,487,assert(rd_en1 === 1);,1
decoder_tb.v,488,assert(rd_en2 === 1);,1
decoder_tb.v,489,assert(sel_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,490,assert(wr_en === 1);,1
decoder_tb.v,491,assert(wr_sel === 2'b01);,1
decoder_tb.v,492,assert(status_out === 6'b000000);,1
decoder_tb.v,493,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,494,assert(stat_wr_en === 1);,1
decoder_tb.v,495,assert(add_offset === 0);,1
decoder_tb.v,503,assert(opcode === Op_IFGT);,1
decoder_tb.v,504,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,505,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,506,assert(rd_en1 === 0);,1
decoder_tb.v,507,assert(rd_en2 === 0);,1
decoder_tb.v,508,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,509,assert(wr_en === 0);,1
decoder_tb.v,510,assert(wr_sel === 2'b00);,1
decoder_tb.v,511,assert(status_out === 6'b00_0000);,1
decoder_tb.v,512,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,513,assert(stat_wr_en === 0);,1
decoder_tb.v,514,assert(add_offset === 1);,1
decoder_tb.v,515,assert(cnt_wr_en === 1 );,1
decoder_tb.v,523,assert(opcode === Op_IFGT);,1
decoder_tb.v,524,assert(rd_sel1 === 2'b00);,1
decoder_tb.v,525,assert(rd_sel2 === 2'b00);,1
decoder_tb.v,526,assert(rd_en1 === 0);,1
decoder_tb.v,527,assert(rd_en2 === 0);,1
decoder_tb.v,528,assert(sel_reg_in_alu_decoder === SEL_DECODER);,1
decoder_tb.v,529,assert(wr_en === 0);,1
decoder_tb.v,530,assert(wr_sel === 2'b00);,1
decoder_tb.v,531,assert(status_out === 6'b00_0000);,1
decoder_tb.v,532,assert(stat_reg_in_alu_decoder === SEL_ALU);,1
decoder_tb.v,533,assert(stat_wr_en === 0);,1
decoder_tb.v,534,assert(add_offset === 0);,1
decoder_tb.v,535,assert(cnt_wr_en === 0 );,1
status_reg_tb.v,30,assert(status === 6'b00_0000);,1
status_reg_tb.v,37,assert(status === 6'b00_0001);,1
status_reg_tb.v,41,assert(status === 6'b00_0010);,1
status_reg_tb.v,45,assert(status === 6'b00_0000);,1
status_reg_tb.v,50,assert(status === 6'b00_0000);,1
status_reg_tb.v,55,assert(status === 6'b00_0011);,1
sg13g2_a22oi_1.v,24,assert (Y == 0);,1
sg13g2_a22oi_1.v,26,assert (Y == 1);,1
sg13g2_and2_1.v,18,assert (X == 1);,1
sg13g2_and2_1.v,20,assert (X == 0);,1
spell.v,311,assert (!sleep || !stop);,1
spell.v,322,assume (cycles_per_ms > 0);,1
spell.v,323,assert (delay_counter != 8'hff);,1
spell.v,324,assert (delay_cycles < cycles_per_ms);,1
spell.v,327,assert (!mem_select);,1
spell.v,330,assert (!mem_write_en);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
streamcounter.v,372,assert(S_AXI_RVALID);,1
streamcounter.v,385,assert(S_AXI_RDATA == 0);,1
RegFile.v,52,assert (regs[0] == 0);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
picorv32.v,2204,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2207,restrict property (resetn != $initstate);,1
picorv32.v,2217,assert (mem_wstrb == 0);,1
picorv32.v,2229,assert (ok);,1
picorv32.v,2247,assert(mem_valid);,1
picorv32.v,2248,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2249,assert(mem_wstrb == 0);,1
picorv32.v,2252,assert(mem_valid);,1
picorv32.v,2253,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2254,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2255,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2258,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
synth_top_tb.v,119,assert(top.synth_mod_shift == 'd8);,1
synth_top_tb.v,125,assert(top.synth_synth_shift == 'd2);,1
synth_top_tb.v,134,assert(top.synth_mod_fcw == fcw);,1
synth_top_tb.v,143,assert(top.synth_carrier_fcws[24*1-1:24*0] == fcw);,1
synth_top_tb.v,144,assert(top.synth_note_en[0] == 1'b1);,1
synth_top_tb.v,153,assert(top.synth_carrier_fcws[24*2-1:24*1] == fcw);,1
synth_top_tb.v,154,assert(top.synth_note_en[1] == 1'b1);,1
synth_top_tb.v,165,assert(top.synth_note_en[0] == 1'b0);,1
DW_lp_fifoctl_1c_df.v,1150,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
DW_lp_fifoctl_1c_df.v,1155,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
project.v,106,assume(reset);,1
project.v,236,assume(reset);,1
project.v,424,assume(reset);,1
project.v,1294,assume(reset);,1
fnv_1a_32_formal.v,34,assert (in != out);,1
lzc_formal.v,18,cover (out == 32'h0);,1
project.v,106,assume(reset);,1
project.v,244,assume(reset);,1
project.v,751,assume(reset);,1
project.v,1305,assume(reset);,1
button_pulse.v,51,cover property (comp < MAX_COUNT - 1);,1
button_pulse.v,54,assert property (button && count == 0 |-> pulse);,1
button_pulse.v,55,assert property (pulse |=> !pulse);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
picorv32.v,2050,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2053,restrict property (resetn != $initstate);,1
picorv32.v,2063,assert (mem_wstrb == 0);,1
picorv32.v,2075,assert (ok);,1
picorv32.v,2093,assert(mem_valid);,1
picorv32.v,2094,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2095,assert(mem_wstrb == 0);,1
picorv32.v,2098,assert(mem_valid);,1
picorv32.v,2099,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2100,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2101,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2104,assert(!mem_valid || mem_ready);,1
muller_c_proj_formal.v,25,cover property (io_in == i);,1
muller_c_proj_formal.v,29,cover property (io_in == i);,1
encoder_proj_formal.v,48,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,49,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,50,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,53,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,56,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,60,cover property (io_in[int_i] == 1 && io_in[int_i+2] == 1);,1
encoder_proj_formal.v,63,cover property (io_in[int_i] == 1 && io_in[int_i+4] == 1);,1
decoder_proj_formal.v,45,cover property (io_in[k-1:0] == i);,1
muller_c_proj_formal.v,25,cover property (io_in == i);,1
muller_c_proj_formal.v,29,cover property (io_in == i);,1
muller_c_proj_formal.v,25,cover property (io_in == i);,1
muller_c_proj_formal.v,29,cover property (io_in == i);,1
encoder_proj_formal.v,48,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,49,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,50,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,53,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,56,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,60,cover property (io_in[int_i] == 1 && io_in[int_i+2] == 1);,1
encoder_proj_formal.v,63,cover property (io_in[int_i] == 1 && io_in[int_i+4] == 1);,1
encoder_proj_formal.v,48,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,49,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,50,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,53,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,56,cover property (io_in[int_i] == 1);,1
encoder_proj_formal.v,60,cover property (io_in[int_i] == 1 && io_in[int_i+2] == 1);,1
encoder_proj_formal.v,63,cover property (io_in[int_i] == 1 && io_in[int_i+4] == 1);,1
decoder_proj_formal.v,45,cover property (io_in[k-1:0] == i);,1
decoder_proj_formal.v,45,cover property (io_in[k-1:0] == i);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
project.v,106,assume(reset);,1
project.v,236,assume(reset);,1
project.v,424,assume(reset);,1
project.v,1294,assume(reset);,1
button_pulse.v,51,cover property (comp < MAX_COUNT - 1);,1
button_pulse.v,54,assert property (button && count == 0 |-> pulse);,1
button_pulse.v,55,assert property (pulse |=> !pulse);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,775,"assert(req_addr >= { 1'b0, cfg_frame_addr });",1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,776,"assert(req_line_addr >= { 1'b0, cfg_frame_addr });",1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,777,assert(req_line_addr <= req_addr);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,783,assert(cfg_frame_lines != 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,784,assert(cfg_line_words != 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,790,assert(r_frame_lines != 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,791,assert(r_line_words != 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,989,assert(axi_arlen+1 == req_line_words);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,991,assert(axi_arlen+1 < req_line_words);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,996,assert(!req_hlast);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,998,assert(axi_arlen < max_burst);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1000,assert(max_burst > 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1005,assert(max_burst == req_line_words);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1184,assert(!cfg_active);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1270,assert(M_AXI_ARBURST == 2'b01);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1276,assert(!r_stopped);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1292,assert(cfg_frame_addr[ADDRLSB-1:0] == 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1295,assert(req_addr[ADDRLSB-1:0] == 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1296,assert(req_line_addr[ADDRLSB-1:0] == 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1318,assert(M_AXI_RLAST);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1321,assume(!M_AXI_RLAST);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1377,cover(!soft_reset);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1380,cover(start_burst);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1383,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1386,cover(M_AXI_RVALID);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1389,cover(M_AXI_RVALID & M_AXI_RLAST);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1392,cover(!r_stopped && cvr_full_frame);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1395,cover(cvr_full_frame && phantom_start && !r_stopped);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1401,assume(M_AXI_ARREADY && M_AXI_RREADY);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1402,assume(M_AXIS_TREADY);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1403,assume(cfg_frame_addr[12:0] == 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1404,assume(cfg_line_step[3:0] == 0);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1408,cover(cvr_hlast_rlast && cvr_full_frame && phantom_start && !r_stopped);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1428,assume(!f_sequential);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1431,assume(!f_biglines);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1434,assume(!req_addr[C_AXI_ADDR_WIDTH]);,1
26690_conspiracion_rtl_wb2axip_axivdisplay.v,1437,assume(!req_line_addr[C_AXI_ADDR_WIDTH]);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1017,assert(!skidm_bvalid || !skidm_bready);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1022,assert(m_axi_awvalid);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1025,assert(!skids_awready);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1028,assert(!skids_awready);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1030,assert(!skids_awready);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1035,assert(axi_bresp != EXOKAY);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1059,assert(rid == S_AXI_RID);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1063,assert(!skidm_rvalid || !skidm_rready);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1068,assert(m_axi_arvalid);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1069,assert(!skids_arready);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1087,assume(!skids_awvalid);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1088,assume(!skids_wvalid);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1089,assert(M_AXI_AWVALID == 0);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1090,assert(faxil_awr_outstanding == 0);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1091,assert(faxil_wr_outstanding == 0);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1092,assert(!skidm_bvalid);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1093,assert(!S_AXI_BVALID);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1102,assume(!S_AXI_ARVALID);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1103,assert(M_AXI_ARVALID == 0);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1104,assert(faxil_rd_outstanding == 0);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1136,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1138,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1162,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
26657_conspiracion_rtl_wb2axip_axi2axilite.v,1164,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,547,assert(dma_aborting);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,549,assert(!dma_aborting);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,600,assume(!S_AXI_ARESETN);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,605,assume(!i_abort);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,606,assume(i_tbl_addr[1:0] == 2'b00);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,627,assert(o_pf_pc[1:0] == 2'b00);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,637,assume(i_pf_pc == f_pc);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,641,assert(f_pc[1:0] == 2'b00);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,647,assume(!i_pf_illegal);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,721,assert(fdma_awr_outstanding == fdma_wr_outstanding);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,723,assert(fdma_rd_outstanding <= 1);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,782,assert(!f_dma_busy);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,784,assert(!f_dma_busy);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,789,assert(!dma_starting);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,800,assume(!f_dma_complete);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,844,assert(sgstate == SG_SRCADDR);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,846,assert(sgstate == SG_SRCHALF);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,899,assert(sgstate != SG_SRCHALF);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,900,assert(sgstate != SG_DSTHALF);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,948,assert(sgstate == SG_SRCADDR);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,949,assert(!o_dmac_wvalid);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,950,assert(!dma_busy);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,962,assert(o_pf_pc == f_tbladdr);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,963,assert(f_pc == o_pf_pc);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,971,assert(o_new_pc);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,987,assert(sgstate == SG_DSTADDR);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,988,assert(tbl_last == f_tbl_last);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,989,assert(o_tbl_addr == f_tbladdr);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,991,assert(o_dmac_wvalid);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,992,assert(o_dmac_waddr == DMA_SRCLO);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,993,assert(o_dmac_wdata == f_tblentry[31:0]);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,994,assert(&o_dmac_wstrb);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,995,assert(!dma_busy);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,996,assert(o_pf_pc == f_tbladdr);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1008,assert(sgstate == SG_LENGTH);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1009,assert(tbl_last == f_tbl_last);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1010,assert(tbl_int_enable == f_tbl_int_enable);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1011,assert(o_tbl_addr == f_tbladdr);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1013,assert(o_dmac_wvalid);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1014,assert(o_dmac_waddr == DMA_DSTLO);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1015,"assert(o_dmac_wdata == { 2'b00, f_tblentry[61:32] });",1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1016,assert(&o_dmac_wstrb);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1017,assert(!dma_busy);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1018,assert(o_pf_pc == f_tbladdr);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1039,assert(sgstate == SG_CONTROL);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1040,assert(tbl_last == f_tbl_last);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1041,assert(o_tbl_addr == f_tbladdr);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1042,assert(o_dmac_wvalid);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1043,assert(o_dmac_waddr == DMA_LENLO);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1044,assert(o_dmac_wdata == f_tblentry[95:64]);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1045,assert(&o_dmac_wstrb);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1046,assert(!dma_busy);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1047,assert(o_pf_pc == f_tbladdr);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1048,assert(f_pc == f_tbladdr + TBL_SIZE);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1060,assert(sgstate == SG_WAIT);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1061,assert(tbl_last == f_tbl_last);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1062,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1063,assert(o_dmac_wvalid);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1064,assert(o_dmac_waddr == DMA_CONTROL);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1065,assert(o_dmac_wdata[15:0] == 16'h1f);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1066,assert(&o_dmac_wstrb);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1067,assert(!dma_busy);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1068,assert(o_pf_pc == f_tbladdr);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1069,assert(f_pc == f_tbladdr + TBL_SIZE);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1081,assert(sgstate == SG_WAIT);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1082,assert(tbl_last == f_tbl_last);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1083,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1084,assert(o_dmac_waddr == DMA_CONTROL);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1088,assert(&o_dmac_wstrb);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1089,assert(!o_dmac_wvalid);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1094,assert(!o_dmac_wstrb[0]);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1096,assert(o_pf_pc == f_tbladdr);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1097,assert(f_pc == f_tbladdr + TBL_SIZE);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1127,assert(sgstate == SG_IDLE);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1128,assert(!o_new_pc);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1129,assert(!o_dmac_wvalid);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1137,assert(o_pf_clear_cache);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1138,assert(!dma_busy);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1181,assert(!o_done);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1182,assert(!o_err);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1187,assert(o_done);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1197,assert(!o_dmac_wvalid || i_dmac_wready);,1
26684_conspiracion_rtl_wb2axip_axisgfsm.v,1219,assume(!i_abort);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,54,assert(grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,55,cover (grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,57,assert(grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,58,cover (grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,62,assert(grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,63,cover (grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,65,assert(grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,66,cover (grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,74,assert(grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,75,cover (grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,77,assert(grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,78,cover (grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,82,assert(grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,83,cover (grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,85,assert(grm_result == dut_result);,1
49431_xcrypto_rtl_xc_aessub_xc_aessub_ftb.v,86,cover (grm_result == dut_result);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,332,assume(i_reset);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,337,assume(i_ce);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,341,assume(i_navg > 3);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,345,assert(f_sum == acc);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,348,assert(f_navg > 3);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,364,assert(f_rdaddr == rdaddr);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,382,assert(full);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,394,assert(f_sum == acc);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,396,assert(f_sum == acc);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,1966,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,1969,restrict property (resetn != $initstate);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,1979,assert (mem_wstrb == 0);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,1991,assert (ok);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,2009,assert(mem_valid);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,2010,assert(mem_addr == last_mem_la_addr);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,2011,assert(mem_wstrb == 0);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,2014,assert(mem_valid);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,2015,assert(mem_addr == last_mem_la_addr);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,2016,assert(mem_wdata == last_mem_la_wdata);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,2017,assert(mem_wstrb == last_mem_la_wstrb);,1
29833_fpga_mimas-v2_picosoc_rtl_soc_picorv32.v,2020,assert(!mem_valid || mem_ready);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,493,assume(w_reset);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,508,assert(!o_wb_stb && !o_wb_cyc);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,533,assert(fwb_outstanding == 0);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,599,assert(resp_fifo_fill == 1);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,606,assert(o_wb_stb || lastid_fifo_full);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,610,assert(stblen == 0);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,615,assert(!o_wb_stb);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,616,assert(!lastid_fifo_wr);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,623,assert(!last_ack);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,629,assert(!last_ack);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,631,assert(midissue || last_ack);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,633,assert(last_ack == last_stb);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,636,assert(o_wb_cyc);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,650,assert(!o_wb_cyc);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,733,cover(cvr_reads == 4);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,736,cover(cvr_read_bursts == 4);,1
26677_conspiracion_rtl_wb2axip_aximrd2wbsp.v,739,cover(cvr_rdid_bursts == 4);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,300,assert(faxi_awr_nbursts == faxil_awr_outstanding);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,320,assert(faxil_wr_outstanding == 0);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,355,assume(S_AXI_AWVALID || !S_AXI_WVALID);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,357,assume(!S_AXI_AWVALID);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,367,assume(!S_AXI_ARVALID);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,371,assume(!S_AXI_AWVALID);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1899,assert(wr_writes_pending == 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1900,assert(wr_none_pending);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1903,assert(wr_writes_pending <= M_AXI_AWLEN+1);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1912,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1916,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1936,assert(!M_AXI_AWVALID);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1937,assert(!M_AXI_WVALID);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1938,assert(!M_AXI_BVALID);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1962,assert(wr_writes_pending == 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1969,assert(fifo_fill >= wr_writes_pending);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1980,assert(wr_writes_pending <= r_remaining_w);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1983,assert(aw_requests_remaining == r_remaining_w);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1986,assert(wr_writes_pending == 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,1989,assert(!M_AXI_WVALID);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2010,assert(!r_busy);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2013,assert(fifo_fill >= wr_writes_pending);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2027,assert(M_AXI_AWVALID && M_AXI_WVALID);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2028,assert(wr_none_pending);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2035,assert(r_max_burst > 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2041,assert(initial_burstlen > 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2051,assert(M_AXI_AWLEN+1 <= MAX_FIXED_BURST);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2077,assert(M_AXI_AWADDR[ADDRLSB +: LGMAXBURST] == 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2092,assert(!sskd_ready);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2097,assert(sskd_ready);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2101,assert(sskd_ready);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2106,assert(!sskd_ready);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2109,assert(sskd_ready);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2123,assert(r_errcode == 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2125,assert(r_errcode != 0);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2134,assert(!r_err);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2157,assert(axi_addr == cmd_addr);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2193,cover(cvr_abort_clear);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2218,cover( r_err && cvr_aborted);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2219,cover( r_err && cvr_buserr);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2220,cover(!r_err);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2223,cover(cmd_length_w > 5);,1
26680_conspiracion_rtl_wb2axip_axis2mm.v,2224,cover(cmd_length_w > 8);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,390,assume(w_reset);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,394,assert(!o_axi_arready);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,415,assert(!o_axi_arready);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,420,assert(!o_axi_arready);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,443,assert(f_wb_outstanding == wb_outstanding);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,451,assert(wb_fill <= f_fifo_fill);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,458,assert(&o_wb_sel);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,460,assert(wb_outstanding == wb_fill);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,465,assert(o_wb_stb);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,466,assert(!o_axi_arready);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,502,assert(f_axi_wr_outstanding == 0);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,504,assert(f_axi_awr_outstanding == 0);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,506,assert(f_axi_rd_outstanding == f_fifo_fill);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,517,assert(!o_axi_rresp[1]);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,520,assert(o_axi_rresp == 2'b10);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,523,assert(!o_axi_rresp[1]);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,525,assert(o_axi_rresp[1]);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,541,assert(f_first_minus_err != 0);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,545,assert(f_mid_minus_err <= f_first_minus_err);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,566,cover(o_wb_cyc && o_wb_stb);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,570,cover(o_wb_cyc && f_wb_outstanding > 2);,1
26672_conspiracion_rtl_wb2axip_axilrd2wbsp.v,579,cover(o_axi_rvalid && i_axi_rready);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2145,assert(rerr_id[N] == 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2217,assert(mwgrant[N]);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2218,assert(mwindex[N] == iM);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2221,assert(swgrant[iM]);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2222,assert(swindex[iM] == N);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2229,assert(wgrant[N] != 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2233,assert(wrequest[N][NS-1:0] == 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2253,assert(mrgrant[N]);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2254,assert(mrindex[N] == iM);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2257,assert(srgrant[iM]);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2258,assert(srindex[iM] == N);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2265,assert(rgrant[N] != 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2273,assert(!mrempty[N]);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2358,assert(mwfull[N] == &w_mawpending[N]);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2364,assert(mrfull[N] == &w_mrpending[N]);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2564,assume(S_AXI_AWVALID[N] == 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2566,assert(wgrant[N] == 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2568,assert(mwgrant[N] == 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2570,assert(S_AXI_BVALID[N]== 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2576,assume(S_AXI_ARVALID [N]== 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2578,assert(rgrant[N] == 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2580,assert(S_AXI_RVALID[N] == 0);,1
26692_conspiracion_rtl_wb2axip_axixbar.v,2586,assert(OPT_READS | OPT_WRITES);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,810,assume(i_ce);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,818,assume(i_ce);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,828,assume(!i_ce);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,833,assume(i_ce);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,838,assume(i_ce);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,847,assume(!i_ce);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,854,assume(i_ce);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,864,assume(i_ce);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,903,assert(aux_pipeline == f_dlyaux);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,904,assert(left_sr == f_sumrx);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,905,assert(left_si == f_sumix);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,906,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,910,assert(mpy_r == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,911,assert(mpy_i == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,915,assert(mpy_r == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,916,assert(mpy_i == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,921,assert(mpy_r == f_difrx);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,922,assert(mpy_i == f_difix);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,927,assert(mpy_r == -f_difix);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,928,assert(mpy_i == f_difrx);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,933,assert(mpy_r == f_widecoeff_r);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,934,assert(mpy_i == f_widecoeff_i);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,939,assert(mpy_r == -f_widecoeff_i);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,940,assert(mpy_i == f_widecoeff_r);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,970,assert(p_one == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,972,assert(p_two == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,975,assert(p_one == f_predifrx);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,977,assert(p_two == f_predifix);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,980,assert(p_one == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,982,assert(p_two == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,986,assert(p_one == f_dlycoeff_r[F_D-1]);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,988,assert(p_two == f_dlycoeff_i[F_D-1]);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,992,assert(p_three == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,994,assert(p_three == 0);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,997,assert(p_three == f_sumdiff);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,999,assert(p_three == f_sumcoef);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,1004,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,1005,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,1006,assert(p_three == f_sumdiff * f_sumcoef);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,1026,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,1027,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,1028,assert(fp_three_ic == f_p3c_in);,1
41814_openwifi-hw_ip_openofdm_tx_src_butterfly.v,1029,assert(fp_three_id == f_p3d_in);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,529,assume(mem[f_addr] == 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,608,assert(!pre_ack || !S_AXI_RVALID);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,678,assert(f_this_pipe[2:1] == 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,683,assert(first_reset_clock || f_this_counts == 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,685,assert(f_this_counts == f_mem_data);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,700,assert(read_addr == f_addr);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,704,assert(memnew <= f_this_counts);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,720,assert(f_mem_data == 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,755,assert(pre_ack == 2'b01 || pre_ack == 2'b10);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,756,assert(!S_AXI_RVALID);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,758,assert(f_read_sequence[1:0] == 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,761,assert(pre_ack[0] && read_addr == f_addr);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,764,assert(S_AXI_RVALID);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,767,assert(S_AXI_RDATA == f_mem_data);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,793,assert(pre_ack[0] && read_addr == f_addr);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,795,assert(pre_ack[1]);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,798,assert(o_wb_ack);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,799,assert(o_wb_data == f_mem_data);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,816,assert(count < NAVGS);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,819,assert(f_mem_data <= NAVGS);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,822,assert(f_this_counts <= NAVGS);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,826,assert(f_this_counts <= count);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,835,assert(count == 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,849,assert(o_int);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,851,assert(start_reset);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,852,assert(count == 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,858,assert(o_int);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,860,assert(!o_int);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,901,assert(resetpipe);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,906,assert(start_reset);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,923,cover(f_mem_data == 16);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,931,cover(start_reset && f_mem_data == 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,934,cover(f_mem_data > 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,937,cover(!resetpipe && f_mem_data > 0);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,940,cover(f_mem_data == NAVGS);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,1033,cover(cvr_int_count == 1);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,1036,cover(cvr_int_count == 2);,1
37165_micro_benchmark_dsp_dspfilters_rtl_histogram.v,1039,cover(cvr_int_count == 3);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,550,assert(S_AXI_BVALID);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,552,assert(S_AXI_RVALID);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,589,assert(!M_APB_PENABLE);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,601,assert(!axil_write_ready || !axil_read_ready);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,623,assume(f_never_addr[AXILLSB-1:0] == 0);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,627,assume(S_AXI_AWADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,628,assume(S_AXI_AWPROT != f_never_prot);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,633,assume(S_AXI_WDATA != f_never_data);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,634,assume(S_AXI_WSTRB != f_never_strb);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,639,assume(S_AXI_ARADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,640,assume(S_AXI_ARPROT != f_never_prot);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,644,assume(M_APB_PRDATA != f_never_data);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,655,assert(awskd_addr != f_never_addr[AW-1:AXILLSB]);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,656,assert(awskd_prot != f_never_prot);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,661,assert(wskd_data != f_never_data);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,662,assert(wskd_strb != f_never_strb);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,667,assert(arskd_addr != f_never_addr[AW-1:AXILLSB]);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,668,assert(arskd_prot != f_never_prot);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,672,assert(r_apb_data != f_never_data);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,683,assert(M_APB_PADDR != f_never_addr);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,684,assert(M_APB_PPROT != f_never_prot);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,687,assert(M_APB_PWDATA != f_never_data);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,688,assert(M_APB_PWSTRB != f_never_strb);,1
26665_conspiracion_rtl_wb2axip_axil2apb.v,693,assert(S_AXI_RDATA != f_never_data);,1
49429_xcrypto_rtl_xc_aesmix_xc_aesmix_ftb.v,50,assert(grm_result == dut_result);,1
49429_xcrypto_rtl_xc_aesmix_xc_aesmix_ftb.v,51,cover (grm_result == dut_result);,1
49429_xcrypto_rtl_xc_aesmix_xc_aesmix_ftb.v,55,assert(grm_result == dut_result);,1
49429_xcrypto_rtl_xc_aesmix_xc_aesmix_ftb.v,56,cover (grm_result == dut_result);,1
26966_cram-soc_deps_bio_picorv32.v,2177,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
26966_cram-soc_deps_bio_picorv32.v,2180,restrict property (resetn != $initstate);,1
26966_cram-soc_deps_bio_picorv32.v,2190,assert (mem_wstrb == 0);,1
26966_cram-soc_deps_bio_picorv32.v,2202,assert (ok);,1
26966_cram-soc_deps_bio_picorv32.v,2220,assert(mem_valid);,1
26966_cram-soc_deps_bio_picorv32.v,2221,assert(mem_addr == last_mem_la_addr);,1
26966_cram-soc_deps_bio_picorv32.v,2222,assert(mem_wstrb == 0);,1
26966_cram-soc_deps_bio_picorv32.v,2225,assert(mem_valid);,1
26966_cram-soc_deps_bio_picorv32.v,2226,assert(mem_addr == last_mem_la_addr);,1
26966_cram-soc_deps_bio_picorv32.v,2227,assert(mem_wdata == last_mem_la_wdata);,1
26966_cram-soc_deps_bio_picorv32.v,2228,assert(mem_wstrb == last_mem_la_wstrb);,1
26966_cram-soc_deps_bio_picorv32.v,2231,assert(!mem_valid || mem_ready);,1
49421_xcrypto_rtl_b_lut_b_lut_ftb.v,27,assert(result == expectation);,1
49421_xcrypto_rtl_b_lut_b_lut_ftb.v,32,assert(result == 32'h76543210);,1
49421_xcrypto_rtl_b_lut_b_lut_ftb.v,38,assert(result == 32'h76543210);,1
40173_opene906_E906_RTL_FACTORY_gen_rtl_tdt_rtl_debug_tdt_dtm_ctrl.v,482,assert property(jtag2_read_not_update_idr);,1
40173_opene906_E906_RTL_FACTORY_gen_rtl_tdt_rtl_debug_tdt_dtm_ctrl.v,485,assert property(jtag2_read_not_update_idr);,1
40173_opene906_E906_RTL_FACTORY_gen_rtl_tdt_rtl_debug_tdt_dtm_ctrl.v,487,assert property(jtag2_write_not_capture_idr);,1
40173_opene906_E906_RTL_FACTORY_gen_rtl_tdt_rtl_debug_tdt_dtm_ctrl.v,490,assert property(jtag2_write_not_capture_idr);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,181,assume(!i_sync);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,184,assert(stage == f_state[0]);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,189,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,190,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,196,assert(!o_sync);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,197,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,198,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,204,assert(!f_rsyncd);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,205,assert(!o_sync);,1
41822_openwifi-hw_ip_openofdm_tx_src_laststage.v,206,assert(f_state == 0);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1003,assume(!S_AXI_ARESETN);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1099,assert(S_AXI_BVALID);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1106,assert(!S_AXI_WREADY);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1130,assert(S_AXI_ARREADY);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1133,assert(axi_rlen <= 256);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1148,assert(!rskd_lock);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1151,assert(S_AXI_BRESP == 2'b00);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1157,assert(S_AXI_RID == 0);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1158,assert(S_AXI_RDATA == 0);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1159,assert(S_AXI_RRESP == 2'b00);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1164,assert(o_waddr == 0);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1165,assert(o_wdata == 0);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1166,assert(o_wstrb == 0);,1
26696_conspiracion_rtl_wb2axip_demofull.v,1209,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
47142_tt07-spell_src_spell.v,316,assert (!sleep || !stop);,1
47142_tt07-spell_src_spell.v,327,assume (cycles_per_ms > 0);,1
47142_tt07-spell_src_spell.v,328,assert (delay_counter != 8'hff);,1
47142_tt07-spell_src_spell.v,329,assert (delay_cycles < cycles_per_ms);,1
47142_tt07-spell_src_spell.v,332,assert (!mem_select);,1
47142_tt07-spell_src_spell.v,335,assert (!mem_write_en);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,39,assume(!mem_ready_0 == 0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,41,assume(mem_ready_1 == 0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,46,assume(last_mem_rdata == mem_rdata);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,55,assert(mem_addr_0 == mem_addr_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,56,assert(mem_wstrb_0 == mem_wstrb_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,77,assume(!mem_xfer_0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,80,assert(cmp_mem_addr == mem_addr_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,81,assert(cmp_mem_wstrb == mem_wstrb_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,89,assume(!mem_xfer_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,92,assert(cmp_mem_addr == mem_addr_0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,93,assert(cmp_mem_wstrb == mem_wstrb_0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,112,assert(trace_data_0 == trace_data_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,125,assume(!trace_valid_0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,128,assert(cmp_trace_data == trace_data_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,132,assume(!trace_valid_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,135,assert(cmp_trace_data == trace_data_0);,1
37167_micro_benchmark_dsp_dspfilters_rtl_lfsr.v,163,assume(i_reset);,1
49092_wbuart32_rtl_axiluart.v,784,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
49092_wbuart32_rtl_axiluart.v,825,assert(S_AXI_RDATA == 0);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,476,assert(S_AXI_RDATA[C_AXI_DATA_WIDTH-1:LGNS] == 0);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,482,assert(S_AXI_RVALID);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,492,assert(S_AXI_RDATA == 0);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,508,assume(S_AXIS_TVALID[gk] == 0);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,511,assume(S_AXIS_TVALID[gk]);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,519,assert(!M_AXIS_TVALID);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,522,assert(M_AXIS_TVALID);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,530,assert(M_AXIS_TDATA == 0);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,531,assert(M_AXIS_TLAST == 0);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,541,assume(f_const_index < NUM_STREAMS);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,553,assert(f_this_index < NUM_STREAMS);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,556,assert(switch_index < NUM_STREAMS);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,590,assert(f_recount == f_count);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,597,assert(f_this_index == switch_index);,1
26688_conspiracion_rtl_wb2axip_axisswitch.v,603,"assume({ S_AXIS_TDATA[f_const_index * C_AXIS_DATA_WIDTH +: C_AXIS_DATA_WIDTH], S_AXIS_TLAST[f_const_index] } != f_never_data);",1
26688_conspiracion_rtl_wb2axip_axisswitch.v,611,"assert({ skd_data[f_const_index], skd_last[f_const_index] } != f_never_data);",1
26688_conspiracion_rtl_wb2axip_axisswitch.v,613,"assert({ M_AXIS_TDATA, M_AXIS_TLAST } != f_never_data);",1
8115_Hazard3_test_formal_common_ahbl_slave_assumptions.v,58,assume(dst_hready_resp);,1
8115_Hazard3_test_formal_common_ahbl_slave_assumptions.v,59,assume(!dst_hresp);,1
8115_Hazard3_test_formal_common_ahbl_slave_assumptions.v,67,assume(dst_hresp);,1
8115_Hazard3_test_formal_common_ahbl_slave_assumptions.v,83,assume(bus_stall_ctr <= MAX_BUS_STALL);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,329,assume(i_reset);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,333,assert(i_reset);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,339,assert(!o_valid);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,340,assert(o_decode == 0);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,369,assert(!o_decode[iM]);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,378,assert(o_addr == 0);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,379,assert(o_decode == 0);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,380,assert(o_data == 0);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,404,assert(onehot_request);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,422,cover(i_valid);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,425,cover(o_valid);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,428,cover(o_valid && !i_stall);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,442,cover(f_reached[0]);,1
26653_conspiracion_rtl_wb2axip_addrdecode.v,451,cover(&f_reached);,1
22863_aes_src_singleKeyExpansion.v,92,assert(keyOutput == 128'd0);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,278,assume(!i_sync);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,281,assert(f_state[1:0] == iaddr[1:0]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,294,assume(f_piped_real[0] != 3'sb100);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,295,assume(f_piped_real[2] != 3'sb100);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,296,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,297,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,299,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,300,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,306,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,307,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,308,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,309,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,316,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,317,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,323,assert(!o_sync);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,324,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,325,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,331,assert(!o_sync);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,332,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,333,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,338,assume(i_sync);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,346,assert(!wait_for_sync);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,351,assert(!o_sync);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,354,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,355,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,357,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
41824_openwifi-hw_ip_openofdm_tx_src_qtrstage.v,358,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
26689_conspiracion_rtl_wb2axip_axivcamera.v,1218,assume(!lost_sync && cfg_active);,1
47177_tt07-vga-clock_src_button_pulse.v,54,cover property (comp < MAX_COUNT - 1);,1
47177_tt07-vga-clock_src_button_pulse.v,57,assert property (button && count == 0 |-> pulse);,1
47177_tt07-vga-clock_src_button_pulse.v,58,assert property (pulse |=> !pulse);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1086,assert(!phantom_write);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1087,assert(!phantom_read);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1105,assert(!ofifo_full);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1120,assert(!M_AXI_WVALID);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1125,assert(read_from_fifo);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1127,assert(read_from_fifo);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1151,assert(o_err);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1153,assert(o_err);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1167,assert(!M_AXI_AWVALID);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1168,assert(!M_AXI_WVALID);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1169,assert(!M_AXI_ARVALID);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1229,assert(M_AXI_ARADDR != M_AXI_AWADDR);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1255,assert(mem_space_available == f_space_available);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1259,assert(M_AXI_ARADDR == M_AXI_AWADDR);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1260,assert(!M_AXI_AWVALID || phantom_write);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1284,assert(mem_data_available == f_data_available);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1287,assert(vfifo_fill[C_AXI_ADDR_WIDTH]);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1288,assert(ofifo_empty);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1317,assert(!M_AXI_AWVALID);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1318,assert(!M_AXI_WVALID);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1319,assert(!M_AXI_ARVALID);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1322,assert(mem_data_available == 0);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1324,assert(!phantom_read);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1325,assert(!phantom_write);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1327,assert(vfifo_fill == 0);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1360,assume(M_AXI_AWREADY || writes_pending > 0);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1361,assume(M_AXIS_TREADY);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1362,assume(M_AXI_WREADY);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1363,assume(M_AXI_ARREADY);,1
26691_conspiracion_rtl_wb2axip_axivfifo.v,1386,cover(cvr_read_bursts > 1 && cvr_write_bursts > 1);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,513,assert(slv_wlen > 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,640,assert(mst_awaddr == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,734,assert(skids_wvalid && skids_wready);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1080,assert(faxi_rd_nbursts == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1154,assert(faxil_rd_outstanding == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1193,assert(f_bfifo_packets <= wfifo_count);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1612,assert(mst_arid == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1613,assert(mst_araddr == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1614,assert(mst_arprot == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1897,assert(faxi_awr_nbursts == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1898,assert(faxi_wr_pending == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1899,assert(faxi_wr_ckvalid == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1970,assert(faxil_awr_outstanding == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,1971,assert(faxil_wr_outstanding == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2053,assume(!S_AXI_AWVALID);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2054,assume(!S_AXI_WVALID);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2055,assert(!M_AXI_AWVALID);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2056,assert(!M_AXI_WVALID);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2057,assume(!M_AXI_BVALID);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2058,assert(!S_AXI_BVALID);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2067,assume(!S_AXI_ARVALID);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2068,assert(!M_AXI_ARVALID);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2102,assert(M_AXI_ARADDR == 0);,1
26658_conspiracion_rtl_wb2axip_axi2axilsub.v,2103,assert(M_AXI_ARPROT == 0);,1
49094_wbuart32_rtl_rxuartlite.v,308,assume(i_clk == f_rx_clock[1]);,1
49094_wbuart32_rtl_rxuartlite.v,357,assume(i_uart_rx);,1
49094_wbuart32_rtl_rxuartlite.v,365,assume(!f_tx_busy);,1
49094_wbuart32_rtl_rxuartlite.v,369,assume(!f_tx_start);,1
49094_wbuart32_rtl_rxuartlite.v,373,assume(f_tx_baud == CLOCKS_PER_BAUD-1);,1
49094_wbuart32_rtl_rxuartlite.v,383,assert(f_tx_baud < CLOCKS_PER_BAUD);,1
49094_wbuart32_rtl_rxuartlite.v,387,assert(f_tx_baud == 0);,1
49094_wbuart32_rtl_rxuartlite.v,422,assert(f_tx_busy);,1
49094_wbuart32_rtl_rxuartlite.v,443,"assert(f_tx_reg[8:0] == { f_tx_data, 1'b0 });",1
49094_wbuart32_rtl_rxuartlite.v,446,assert(f_tx_reg[7:0] == f_tx_data[7:0] );,1
49094_wbuart32_rtl_rxuartlite.v,449,assert(f_tx_reg[6:0] == f_tx_data[7:1] );,1
49094_wbuart32_rtl_rxuartlite.v,452,assert(f_tx_reg[5:0] == f_tx_data[7:2] );,1
49094_wbuart32_rtl_rxuartlite.v,455,assert(f_tx_reg[4:0] == f_tx_data[7:3] );,1
49094_wbuart32_rtl_rxuartlite.v,458,assert(f_tx_reg[3:0] == f_tx_data[7:4] );,1
49094_wbuart32_rtl_rxuartlite.v,461,assert(f_tx_reg[2:0] == f_tx_data[7:5] );,1
49094_wbuart32_rtl_rxuartlite.v,464,assert(f_tx_reg[1:0] == f_tx_data[7:6] );,1
49094_wbuart32_rtl_rxuartlite.v,467,assert(f_tx_reg[0] == f_tx_data[7]);,1
49094_wbuart32_rtl_rxuartlite.v,480,assume(i_uart_rx);,1
49094_wbuart32_rtl_rxuartlite.v,482,assume(i_uart_rx == f_tx_reg[0]);,1
49094_wbuart32_rtl_rxuartlite.v,491,assert(f_tx_count == 0);,1
49094_wbuart32_rtl_rxuartlite.v,580,assert(1'b0);,1
49094_wbuart32_rtl_rxuartlite.v,597,"assert({ ck_uart,qq_uart,q_uart,i_uart_rx } != 4'h2);",1
49094_wbuart32_rtl_rxuartlite.v,598,"assert({ ck_uart,qq_uart,q_uart,i_uart_rx } != 4'h4);",1
49094_wbuart32_rtl_rxuartlite.v,599,"assert({ ck_uart,qq_uart,q_uart,i_uart_rx } != 4'h5);",1
49094_wbuart32_rtl_rxuartlite.v,600,"assert({ ck_uart,qq_uart,q_uart,i_uart_rx } != 4'h6);",1
49094_wbuart32_rtl_rxuartlite.v,601,"assert({ ck_uart,qq_uart,q_uart,i_uart_rx } != 4'h9);",1
49094_wbuart32_rtl_rxuartlite.v,602,"assert({ ck_uart,qq_uart,q_uart,i_uart_rx } != 4'ha);",1
49094_wbuart32_rtl_rxuartlite.v,603,"assert({ ck_uart,qq_uart,q_uart,i_uart_rx } != 4'hb);",1
49094_wbuart32_rtl_rxuartlite.v,604,"assert({ ck_uart,qq_uart,q_uart,i_uart_rx } != 4'hd);",1
49094_wbuart32_rtl_rxuartlite.v,609,assert(state == RXUL_IDLE);,1
49094_wbuart32_rtl_rxuartlite.v,614,assert(zero_baud_counter);,1
49094_wbuart32_rtl_rxuartlite.v,761,"cover(o_wr); // Step 626, takes about 20mins always @(posedge i_clk) if (!i_reset && f_past_valid && !$past(i_reset)) begin cover(!ck_uart);",6
49094_wbuart32_rtl_rxuartlite.v,795,assert(baud_counter <= CLOCKS_PER_BAUD-1'b1);,1
26697_conspiracion_rtl_wb2axip_easyaxil.v,397,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
26697_conspiracion_rtl_wb2axip_easyaxil.v,408,assert(S_AXI_RDATA == 0);,1
22837_aes_src_AddRoundKey.v,68,assert(state_out == 128'd0);,1
22837_aes_src_AddRoundKey.v,69,assert(done == 1'b0);,1
22837_aes_src_AddRoundKey.v,86,assert(state_out == key^state);,1
30234_hdl_rosetta_stone_verilog_formal_formal_axistream_improve_timepath.v,75,assume(rst);,1
30234_hdl_rosetta_stone_verilog_formal_formal_axistream_improve_timepath.v,110,assert(index >= 0);,1
30234_hdl_rosetta_stone_verilog_formal_formal_axistream_improve_timepath.v,111,assert(index <= 2**ADDR_WIDTH + 1);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1233,assert(!S_AXI_BVALID || S_AXI_BRESP != EXOKAY);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1234,assert(!S_AXI_RVALID || S_AXI_RRESP != EXOKAY);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1260,assert(M_AXI_AWVALID == 0);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1262,assert(M_AXI_AWVALID == 0);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1265,assert(M_AXI_AWVALID == wdecode[NS-1:0]);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1268,assert(M_AXI_AWVALID == 0);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1300,assume(!S_AXI_AWVALID);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1302,assert(!S_AXI_BVALID);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1304,assert(!M_AXI_AWVALID);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1312,assume(!S_AXI_ARVALID);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1314,assert(!S_AXI_RVALID);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1316,assert(M_AXI_ARVALID == 0);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1318,assert(rdecode == 0);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1338,assume(S_AXI_AWLEN > 2);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1342,assume(S_AXI_ARLEN > 2);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1377,cover(cvr_awvalids > 2);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1380,cover(cvr_writes > 2);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1383,cover(cvr_writes > 4);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1389,cover(cvr_arvalids > 2);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1392,cover(cvr_reads > 2);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1395,cover(cvr_reads > 4);,1
26663_conspiracion_rtl_wb2axip_axidouble.v,1405,cover(S_AXI_BVALID && S_AXI_BRESP == EXOKAY);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,67,assume(rst);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,77,cover(was_full && empty);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,81,assume(!full || !wr_en);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,83,assume(!empty || !rd_en);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,88,assert(empty || !rst_1z);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,90,assert(rst || rst_1z || !rd_en_1z || data0_1z == dest_data);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,124,assert(index >= 0);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,125,assert(index <= 2**ADDR_WIDTH);,1
26662_conspiracion_rtl_wb2axip_axidma.v,991,assert(!clear_read_pipeline);,1
26662_conspiracion_rtl_wb2axip_axidma.v,994,assert(!clear_read_pipeline);,1
26662_conspiracion_rtl_wb2axip_axidma.v,997,assert(!clear_read_pipeline);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1812,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1816,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1896,assert(!M_AXI_AWVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1897,assert(!M_AXI_WVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1898,assert(!M_AXI_ARVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1917,assert(f_length != 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1918,assert(f_length[LGLEN] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1920,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1921,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,1999,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2000,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2001,assert(f_length[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2008,assert(!extra_realignment_write);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2010,assert(!extra_realignment_write);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2012,assert(extra_realignment_write);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2016,assert(r_partial_outvalid);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2023,assert(f_extra_realignment_read);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2025,assert(f_extra_realignment_read == extra_realignment_read);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2034,assert(no_read_bursts_outstanding);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2038,assert(!r_int);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2067,assert(M_AXI_WVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2085,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2091,assert(r_len[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2092,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2093,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2099,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2100,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2101,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2107,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2109,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2113,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2118,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2144,assert(reads_remaining_w == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2145,assert(!M_AXI_ARVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2146,assert(writes_remaining_w == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2171,assert(r_partial_outvalid);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2173,assert(!fifo_empty || r_abort || r_err);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2199,assert(!M_AXI_WVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2206,assert(fifo_data_available == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2290,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2294,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2296,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2303,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2306,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2308,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2324,assert(read_address == f_read_address);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2326,assert(read_address[ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2330,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2335,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2360,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2375,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2383,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2400,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2407,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2408,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2410,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2425,assert(readlen_w != 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2448,assert(!r_done);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2450,assert(!r_done);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2458,assert(r_done);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2470,assert(M_AXI_WSTRB == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2488,assert(reads_remaining_w == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2490,assert(reads_remaining_w > 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2493,assert(readlen_w <= reads_remaining_w);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2501,assert(M_AXI_BREADY);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2505,assert(M_AXI_RREADY);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2528,assert(M_AXI_ARVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2532,assert(M_AXI_AWVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2553,assert(M_AXI_WVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2574,assert(!S_AXIL_BVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2575,assert(!S_AXIL_RVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2577,assert(!M_AXI_AWVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2578,assert(!M_AXI_WVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2579,assert(!M_AXI_ARVALID);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2581,assert(write_bursts_outstanding == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2582,assert(write_requests_remaining == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2584,assert(!phantom_read);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2585,assert(!phantom_write);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2586,assert(!r_busy);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2587,assert(read_bursts_outstanding == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2588,assert(no_read_bursts_outstanding);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2590,assert(r_len == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2591,assert(zero_len);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2593,assert(write_count == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2594,assert(!M_AXI_WLAST);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2595,assert(M_AXI_AWLEN == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2596,assert(!r_write_fifo);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2597,assert(r_src_addr == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2598,assert(r_dst_addr == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2602,assert(ADDRLSB + LGMAXBURST <= 12);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2640,assume(f_const_posn < f_length);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2678,assert(f_shifted_wstrb[0]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2679,assert(f_shifted_write[7:0] == f_const_byte);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2681,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2716,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2753,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2814,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2826,cover(!r_busy && r_err);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2830,cover(!r_busy && r_abort);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2834,cover(reads_remaining_w == 0);,1
26662_conspiracion_rtl_wb2axip_axidma.v,2838,cover(reads_remaining_w == 0 && fifo_empty);,1
41953_picorv32_scripts_smtbmc_tracecmp3.v,76,assert(cpu0_mem_addr == cpu1_mem_addr);,1
41953_picorv32_scripts_smtbmc_tracecmp3.v,77,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
41953_picorv32_scripts_smtbmc_tracecmp3.v,84,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,429,assume(i_reset);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,458,assert(expected_returns == fwbs_outstanding);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,494,assert(!o_fault);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,507,assert(!timeout);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,511,assert(!o_wb_cyc);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,518,assert(sacks == fwbm_nacks);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,522,assert(o_wb_cyc || o_wb_err);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,529,assert(fwbs_nreqs == mreqs);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,533,assert(i_wb_we == o_wb_we);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,537,assert(o_wb_cyc || o_wb_err);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,548,cover(o_fault);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,552,cover(o_fault);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,556,cover(o_fault);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,579,cover(faulted && !o_reset && o_wb_ack);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,586,cover(!i_reset && fwbs_nacks > 4);,1
26678_conspiracion_rtl_wb2axip_aximwr2wbsp.v,666,assume(!i_wb_err);,1
26678_conspiracion_rtl_wb2axip_aximwr2wbsp.v,667,assert(!err_state);,1
26678_conspiracion_rtl_wb2axip_aximwr2wbsp.v,671,assert(o_wb_cyc);,1
26678_conspiracion_rtl_wb2axip_aximwr2wbsp.v,673,assert(!S_AXI_BRESP[1]);,1
26678_conspiracion_rtl_wb2axip_aximwr2wbsp.v,674,assert(!S_AXI_BRESP[0]);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,528,assert(wr_addr - rd_addr == npending);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,588,assert(C_AXI_DATA_WIDTH >= DW);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,615,assume(i_reset);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,709,assert(direction);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,710,assert(f_axi_rd_nbursts == 0);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,720,assert(o_axi_wvalid);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,726,assert(!direction);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,729,assert(f_axi_awr_nbursts == 0);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,740,assert(!o_axi_arvalid);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,741,assert(f_axi_rd_nbursts == 0);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,742,assert(!i_axi_rvalid);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,745,assert(!o_axi_awvalid);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,746,assert(!o_axi_wvalid);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,747,assert(f_axi_awr_nbursts == 0);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,765,assert(!m_ready);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,780,assert(o_axi_bready);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,786,assert(o_axi_rready);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,795,assert(direction);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,806,assert(!direction);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,860,assume(i_axi_rdata == f_data);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1061,cover(!i_reset && cvr_flushed && !flushing);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1062,cover(!i_reset && cvr_flushed && !flushing && !o_wb_stall);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1089,cover(cvr_read2write && direction && o_wb_ack && f_wb_outstanding == 1);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1090,cover(cvr_write2read && !direction && o_wb_ack && f_wb_outstanding == 1);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1109,cover(&cvr_ack_after_abort[1:0]);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1113,cover(&cvr_ack_after_abort[2:0]);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1115,cover(!i_wb_cyc && &cvr_ack_after_abort[2:0]);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1132,cover(cvr_nwrites == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1135,cover(cvr_nreads == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
26702_conspiracion_rtl_wb2axip_wbm2axisp.v,1144,assume(!i_reset && i_wb_cyc && !o_wb_err);,1
41949_picorv32_scripts_smtbmc_axicheck2.v,119,assert(trap_0 == trap_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,120,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
41949_picorv32_scripts_smtbmc_axicheck2.v,121,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,122,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,123,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,124,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,125,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,126,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,127,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
41949_picorv32_scripts_smtbmc_axicheck2.v,128,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,129,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,130,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
26669_conspiracion_rtl_wb2axip_axilfetch.v,329,assert(!o_valid);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,332,assert(bfifo.f_first_data != 2'b01);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,335,assert(bfifo.f_second_data != 2'b01);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,341,assume(S_AXI_BRESP != 2'b01);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,345,assume(S_AXI_BRESP != 2'b01);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,353,assert(!bffull || !write_bvalid);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,456,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,460,assert(rfifo.f_first_data[1:0] != 2'b01);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,463,assert(rfifo.f_second_data[1:0] != 2'b01);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,469,assume(S_AXI_RRESP != 2'b01);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,473,assume(S_AXI_RRESP != 2'b01);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,602,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,646,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,660,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,679,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,720,cover(cvr_awvalids > 4);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,723,cover(cvr_arvalids > 4);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,726,cover(cvr_reads > 4);,1
26667_conspiracion_rtl_wb2axip_axildouble.v,729,cover(cvr_writes > 4);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1394,assert property (p_power_down_urt);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1401,assert property (p_power_down_urt);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1407,assert property (p_power_down_urt);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1416,assert property (p_power_up_urt);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1422,assert property (p_power_up_urt);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1429,assert property (p_power_up_urt);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1441,assert property (p_power_down_smc);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1448,assert property (p_power_down_smc);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1454,assert property (p_power_down_smc);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1463,assert property (p_power_up_smc);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1469,assert property (p_power_up_smc);,1
47531_uvm_book_examples_designs_socv_rtl_rtl_lpw_power_ctrl_rtl_power_ctrl.v,1476,assert property (p_power_up_smc);,1
26703_conspiracion_rtl_wb2axip_wbp2classic.v,162,assume(i_reset);,1
26703_conspiracion_rtl_wb2axip_wbp2classic.v,202,assume(i_sstb);,1
49419_xcrypto_rtl_b_bop_b_bop_ftb.v,28,assert(result == expectation);,1
26700_conspiracion_rtl_wb2axip_sfifothresh.v,99,assert(!o_int);,1
32864_ivtest_ivltests_sv_immediate_assert.v,9,assert(i == 1);,1
32864_ivtest_ivltests_sv_immediate_assert.v,10,assert(i == 0);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,303,assert(write_timer <= OPT_TIMEOUT-1);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,440,assert(read_timer <= OPT_TIMEOUT-1);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,632,assume(!S_AXI_ARESETN);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,735,assert(f_reads == reads_completed);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,737,assert(f_read_pkts == read_bursts_completed);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,741,assert(S_AXIS_TREADY);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,762,assert(f_writes == 0);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,763,assert(f_write_pkts == 0);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,768,assert(f_writes == writes_completed);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,769,assert(f_write_pkts == write_bursts_completed);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,782,assert(S_AXI_RVALID);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,789,assert(&S_AXI_RDATA[C_AXI_DATA_WIDTH-1:SW]);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,791,assert(S_AXI_RDATA[C_AXI_DATA_WIDTH-1:SW] == 0);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,795,assert(S_AXI_RRESP == 2'b00);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,805,assert(S_AXI_RRESP == 2'b00);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,807,assert(S_AXI_RDATA[31:16+LGFIFO+1] == 0);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,811,assert(S_AXI_RDATA[14:LGFIFO+1] == 0);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,824,assert(S_AXI_RDATA == 0);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,839,assume(!S_AXIS_TVALID);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,842,assume(S_AXIS_TVALID);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,851,assert(!M_AXIS_TVALID);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,854,assert(M_AXIS_TVALID);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,868,cover(S_AXI_ARESETN && writes_completed == 16);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,871,cover(S_AXI_ARESETN && reads_completed == 16);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,878,cover(S_AXI_BVALID && S_AXI_BRESP != 2'b00);,1
26666_conspiracion_rtl_wb2axip_axil2axis.v,881,cover(S_AXI_RVALID && S_AXI_RRESP != 2'b00);,1
8114_Hazard3_test_formal_common_ahbl_master_assertions.v,68,assert(8 << src_hsize <= W_DATA);,1
8114_Hazard3_test_formal_common_ahbl_master_assertions.v,83,assert(src_active_dph);,1
8114_Hazard3_test_formal_common_ahbl_master_assertions.v,87,assert(src_haddr == src_addr_dph + W_DATA / 8);,1
8114_Hazard3_test_formal_common_ahbl_master_assertions.v,100,assert(global_reservation_valid);,1
26682_conspiracion_rtl_wb2axip_axisbroadcast.v,151,assume(!S_AXI_ARESETN);,1
26682_conspiracion_rtl_wb2axip_axisbroadcast.v,169,assume(!S_AXIS_TVALID);,1
26682_conspiracion_rtl_wb2axip_axisbroadcast.v,172,assume(S_AXIS_TVALID);,1
26682_conspiracion_rtl_wb2axip_axisbroadcast.v,180,assert(!M_AXIS_TVALID[fc_channel]);,1
26682_conspiracion_rtl_wb2axip_axisbroadcast.v,183,assert(M_AXIS_TVALID[fc_channel]);,1
26682_conspiracion_rtl_wb2axip_axisbroadcast.v,192,assume(!icount[F_LGDEPTH-1]);,1
49097_wbuart32_rtl_ufifo.v,349,assert(f_raddr_plus_one == r_next);,1
49097_wbuart32_rtl_ufifo.v,354,assert(!w_read);,1
49097_wbuart32_rtl_ufifo.v,355,assert(!osrc);,1
49097_wbuart32_rtl_ufifo.v,361,assert(r_fill == f_fill);,1
49097_wbuart32_rtl_ufifo.v,428,assert(!will_underflow);,1
49097_wbuart32_rtl_ufifo.v,429,assert(f_first_in_fifo);,1
49097_wbuart32_rtl_ufifo.v,430,assert(!f_second_in_fifo);,1
49097_wbuart32_rtl_ufifo.v,431,assert(wr_addr == f_next_addr);,1
49097_wbuart32_rtl_ufifo.v,432,assert(fifo[f_const_addr] == f_const_data);,1
49097_wbuart32_rtl_ufifo.v,434,assert(o_data == f_const_data);,1
49097_wbuart32_rtl_ufifo.v,437,assert(f_first_in_fifo);,1
49097_wbuart32_rtl_ufifo.v,438,assert(f_second_in_fifo);,1
49097_wbuart32_rtl_ufifo.v,441,assert(f_second_in_fifo);,1
49097_wbuart32_rtl_ufifo.v,442,assert(rd_addr == f_next_addr);,1
49097_wbuart32_rtl_ufifo.v,443,assert(o_data == f_const_second);,1
49097_wbuart32_rtl_ufifo.v,459,cover(o_empty_n);,1
49097_wbuart32_rtl_ufifo.v,465,cover(o_err);,1
49097_wbuart32_rtl_ufifo.v,475,cover(cvr_filled && !o_empty_n);,1
16184_RDF-2019_bin_synth_yosys-abc_share_yosys_ecp5_cells_sim.v,422,assert(A0==A1);,1
16184_RDF-2019_bin_synth_yosys-abc_share_yosys_ecp5_cells_sim.v,423,assert(B0==B1);,1
16184_RDF-2019_bin_synth_yosys-abc_share_yosys_ecp5_cells_sim.v,424,assert(C0==C1);,1
16184_RDF-2019_bin_synth_yosys-abc_share_yosys_ecp5_cells_sim.v,425,assert(D0==D1);,1
22838_aes_src_MixColumns.v,101,assert(state_out == 128'd0);,1
22838_aes_src_MixColumns.v,102,assert(done == 1'b0);,1
22838_aes_src_MixColumns.v,236,assert(state_out == f_state_out);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,438,assume(!S_AXI_ARESETN);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,444,assert(!M_AXIS_TVALID);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,447,assert(M_AXIS_TVALID);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,469,assert(fm_packet_counter < OPT_PACKET_LENGTH);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,472,assert(m_packet_count == fm_packet_counter);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,477,assert(s_packet_counter == 0);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,478,assert(m_packet_count == OPT_PACKET_LENGTH-2);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,482,assert(m_packet_count == OPT_PACKET_LENGTH-1);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,492,assert(s_packet_counter < OPT_PACKET_LENGTH);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,509,assert(fm_stall_count < OPT_MAX_STALL);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,519,assume(!S_AXIS_TVALID);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,522,assume(S_AXIS_TVALID);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,549,assert(s_packet_counter == fs_packet_counter);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,551,assert(s_packet_counter == 0);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,586,assert(stall_count == f_stall_count);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,589,assume(f_stall_count <= OPT_MAX_STALL);,1
26687_conspiracion_rtl_wb2axip_axissafety.v,595,assert(!o_fault);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1579,assert(fifo_fill == 0 || reset_fifo);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1591,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1600,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1601,assert(fv_start_addr[ADDRLSB-1:0] == 0);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1602,assert(axi_araddr[ADDRLSB-1:0] == 0);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1603,assert(axi_raddr[ADDRLSB-1:0] == 0);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1627,assert(f_next_start == f_last_addr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1695,assert(fv_ar_requests_remaining == ar_requests_remaining);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1705,assert(fv_ar_requests_remaining <= cmd_length_aligned_w);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1736,assert(axi_raddr[ADDRLSB-1:0] == cmd_addr[ADDRLSB-1:0]);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1737,assert(axi_abort_pending || fv_axi_raddr == axi_raddr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1740,assert(fv_axi_raddr == fv_start_addr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1741,assert(axi_raddr == fv_start_addr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1747,assert(fv_axi_raddr <= f_last_addr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1748,assert(fv_axi_raddr >= fv_start_addr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1761,assert(axi_raddr <= fv_axi_raddr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1762,assert(fv_start_addr <= axi_raddr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1778,assert(!M_AXI_ARVALID);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1779,assert(!M_AXI_RVALID);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1794,assert(!r_busy);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1807,assert(!r_busy);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1850,assert(M_AXI_ARVALID);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1855,assert(r_max_burst > 0);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1871,assert(cmd_addr == axi_raddr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1873,assert(cmd_addr == fv_start_addr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1915,assert(rd_reads_remaining <= cmd_length_w);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1919,assert(ar_bursts_outstanding <= rd_reads_remaining);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1938,assert(!M_AXI_ARVALID);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,1993,assert(!o_int);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2012,assume(M_AXI_RDATA != f_restricted);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2017,assert(M_AXIS_TDATA != f_restricted);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2062,cover( r_err && cvr_aborted);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2063,cover( r_err && cvr_buserr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2064,cover(!r_err);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2067,cover(cmd_length_w > 5);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2068,cover(cmd_length_w > 8);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2072,cover(&cvr_continued);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2080,cover(!r_err && fifo_fill > 8 && !r_busy);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2083,cover(r_busy);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2086,cover(start_burst);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2089,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2092,cover(M_AXI_RVALID);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2095,cover(M_AXI_RVALID & M_AXI_RLAST);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2099,cover(!ar_none_remaining);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2102,cover(1);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2106,cover(!phantom_start);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2107,cover(phantom_start);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2125,cover(M_AXIS_TVALID && M_AXIS_TREADY && M_AXIS_TLAST);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2128,cover(o_int && cvr_lastcount > 2);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2140,cover(r_err);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2141,cover(!r_err);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2142,cover(axi_abort_pending);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2143,cover(!axi_abort_pending);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2144,cover(cvr_aborted);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2145,cover(!cvr_aborted);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2146,cover(cvr_buserr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2147,cover(!cvr_buserr);,1
26676_conspiracion_rtl_wb2axip_aximm2s.v,2148,cover(!cvr_buserr && !axi_abort_pending);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1650,assert(f_axi_awr_nbursts <= 1);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1655,assert(!S_AXI_AWREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1657,assert(f_axi_wr_pending == 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1666,assert(!r_wvalid || !r_wlast);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1668,assert(s_wbursts == 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1669,assert(!S_AXI_WREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1672,assert(1 || S_AXI_AWREADY || !M_AXI_ARESETN || !S_AXI_ARESETN);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1674,assert(S_AXI_AWREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1686,assert(S_AXI_AWREADY == !OPT_SELF_RESET);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1689,assert(!S_AXI_AWREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1692,assert(!S_AXI_AWREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1695,assert(S_AXI_AWREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1697,assert(S_AXI_AWREADY || OPT_SELF_RESET);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1702,assert(s_wbursts == 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1707,assert(s_wbursts == 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1711,assert(!M_AXI_AWVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1716,assert(o_write_fault || !M_AXI_AWVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1717,assert(!S_AXI_BVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1718,assert(s_wbursts == 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1720,assert(f_axi_wr_pending > 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1725,assert(waddr_valid);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1729,assert(M_AXI_WVALID && r_wvalid);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1735,assert(waddr_valid == !S_AXI_AWREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1743,assert(M_AXI_WVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1748,assert(M_AXI_AWVALID || !M_AXI_WVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1749,assert(M_AXI_AWVALID || f_axi_wr_pending == 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1761,assert(m_wpending == 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1766,assert(m_wpending <= 9'h100);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1770,assert(!M_AXI_AWVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1777,assert(!M_AXI_AWVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1778,assert(!M_AXI_WVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1788,assert(!M_AXI_AWVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1789,assert(!M_AXI_WVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1793,assert(f_axi_awr_nbursts == 1);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1796,assert(m_wpending == 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1799,assert(!M_AXI_AWVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1803,assert(!r_awvalid);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1820,assert(o_write_fault || write_timeout);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1825,assert(waddr_valid == !S_AXI_AWREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1827,assert(!S_AXI_AWREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1831,assert(waddr_valid == !S_AXI_AWREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1835,assert(!S_AXI_WREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1846,assert(f_axi_rd_nbursts <= 1);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1852,assert(rfifo_id == f_axi_rd_checkid);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1854,assert(rfifo_id != f_axi_rd_checkid);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1858,assert(raddr_valid);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1862,assert(!S_AXI_ARREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1867,assert(raddr_valid == !S_AXI_ARREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1879,assert(!raddr_valid || OPT_SELF_RESET);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1883,assert(!M_AXI_ARVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1887,assert(rfifo_counter == f_axi_rd_outstanding);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1902,assert(skid_arvalid);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1906,assert(read_timeout);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1912,assume(!M_AXI_BVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1913,assume(!M_AXI_RVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1918,assert(raddr_valid == !S_AXI_ARREADY);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1922,assert(raddr_valid);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,1928,assert(o_read_fault || o_write_fault /* ... */ );,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2050,assert(!o_write_fault || !M_AXI_ARESETN);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2052,assert(!o_write_fault);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2057,assert(!o_read_fault || !M_AXI_ARESETN);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2059,assert(!o_read_fault);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2064,assert(!read_timeout || !M_AXI_ARESETN);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2066,assert(!read_timeout);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2071,assert(!write_timeout || !M_AXI_ARESETN);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2073,assert(!write_timeout);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2077,assert(!M_AXI_AWVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2102,assert(!M_AXI_ARVALID);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2106,assert(m_wpending == fm_axi_wr_pending);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2111,assert(fm_axi_awr_nbursts== f_axi_awr_nbursts);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2112,assert(fm_axi_awr_nbursts == 1);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2170,assume(S_AXI_AWADDR != fc_never_write_addr);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2174,assert(M_AXI_AWADDR != fc_never_write_addr);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2181,"assume({ S_AXI_WDATA, S_AXI_WSTRB } != fc_never_write_data);",1
26681_conspiracion_rtl_wb2axip_axisafety.v,2187,assert(M_AXI_WSTRB == 0);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2189,"assert({ M_AXI_WDATA, M_AXI_WSTRB } != fc_never_write_data);",1
26681_conspiracion_rtl_wb2axip_axisafety.v,2197,assume(S_AXI_ARADDR != fc_never_read_addr);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2201,assume(r_araddr != fc_never_read_addr);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2205,assert(M_AXI_ARADDR != fc_never_read_addr);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2212,assume(M_AXI_RDATA != fc_never_read_data);,1
26681_conspiracion_rtl_wb2axip_axisafety.v,2216,assert(S_AXI_RDATA != fc_never_read_data);,1
39113_open-fpga-verilog-tutorial_tutorial_ICE40-HX8K_Breakout_Board_T04-counter_counter.v,35,assert property (data[3:0] == counter[25:22]);,1
3326_DDR_ddr3_memory_controller.v,2260,cover(main_state == STATE_READ_DATA); // to obtain a RAM read transaction waveform cover(main_state == STATE_WRITE_DATA); // to obtain a RAM write transaction waveform end end always @(posedge clk_serdes) begin if(data_write_is_ongoing) begin assert(dqs == dqs_w);,10
3326_DDR_ddr3_memory_controller.v,2279,assert(dqs_n == dqs_n_w);,1
3326_DDR_ddr3_memory_controller.v,2289,assert(dq == dq_w);,1
26674_conspiracion_rtl_wb2axip_axilupsz.v,377,assert(rdata == 0);,1
26674_conspiracion_rtl_wb2axip_axilupsz.v,378,assert(rresp == 0);,1
26674_conspiracion_rtl_wb2axip_axilupsz.v,558,assert(rfifo_fill == fmst_rd_outstanding);,1
26674_conspiracion_rtl_wb2axip_axilupsz.v,561,assert(!rfifo_empty);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,319,assert(bfifo.f_first_data != 2'b01);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,322,assert(bfifo.f_second_data != 2'b01);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,326,assume(S_AXI_BRESP != 2'b01);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,330,assume(S_AXI_BRESP != 2'b01);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,338,assert(!bffull || !write_bvalid);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,438,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,442,assert(rfifo.f_first_data[1:0] != 2'b01);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,445,assert(rfifo.f_second_data[1:0] != 2'b01);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,449,assume(S_AXI_RRESP != 2'b01);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,453,assume(S_AXI_RRESP != 2'b01);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,583,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,627,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,641,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,660,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,700,cover(cvr_awvalids > 4);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,703,cover(cvr_arvalids > 4);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,706,cover(cvr_reads > 4);,1
26673_conspiracion_rtl_wb2axip_axilsingle.v,709,cover(cvr_writes > 4);,1
19007_Silixel_designs_silice_blaze.v,171,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,269,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,367,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,483,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,694,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,957,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,2733,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,2819,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,2932,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,3157,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,3345,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,3736,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,4123,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,4250,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,4336,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,4401,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,4455,assume(0);,1
19007_Silixel_designs_silice_blaze.v,4516,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,4570,assume(0);,1
19007_Silixel_designs_silice_blaze.v,4631,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,4685,assume(0);,1
19007_Silixel_designs_silice_blaze.v,5046,assume(reset);,1
19007_Silixel_designs_silice_blaze.v,5433,assume(0);,1
21696_UberDDR3_rtl_ddr3_controller.v,273,assert(STAGE2_DATA_DEPTH-2 >= 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,2446,"assert(0); //force FORMAL to fail if this is ever reached `endif end endcase end endfunction //find the delay to be used by delay_before_xxxx_counter. // - delay_nCK = delay required between the two commands in DDR3 clock cycles // - start_slot = slot number of the first command // - end_slot = slot number of the second command // returns the number of controller clock cycles to satisfy the delay required between the two commands function [3:0] find_delay(input integer delay_nCK, input reg[1:0] start_slot, input reg[1:0] end_slot);",13
21696_UberDDR3_rtl_ddr3_controller.v,2616,assume(i_wb_cyc == 1);,1
21696_UberDDR3_rtl_ddr3_controller.v,2617,assume(i_wb_stb == 1);,1
21696_UberDDR3_rtl_ddr3_controller.v,2619,assume(i_rst_n);,1
21696_UberDDR3_rtl_ddr3_controller.v,2621,assume(i_wb_we == f_wb_inputs[f_index][24]);,1
21696_UberDDR3_rtl_ddr3_controller.v,2622,assume(i_wb_addr == f_wb_inputs[f_index][23:0]);,1
21696_UberDDR3_rtl_ddr3_controller.v,2623,cover(f_index == 10);,1
21696_UberDDR3_rtl_ddr3_controller.v,2625,assume(i_rst_n); //dont reset just to skip a request forcefully end end `endif //endif for FORMAL_COVER `ifdef TEST_CONTROLLER_PIPELINE // wires and registers used in this formal section `ifdef TEST_DATA localparam F_TEST_CMD_DATA_WIDTH = $bits(i_wb_data) + $bits(i_wb_sel) + $bits(i_aux) + $bits(i_wb_addr) + $bits(i_wb_we);,10
21696_UberDDR3_rtl_ddr3_controller.v,2680,"assert(MR0[18] != 1'b1); //last Mode Register bit should never be zero assert(MR1_WL_EN[18] != 1'b1); //(as this is used for A10-AP control for non-MRS assert(MR1_WL_DIS[18] != 1'b1); //(as this is used for A10-AP control for non-MRS assert(MR2[18] != 1'b1); //commands in the reset sequence) assert(MR3_MPR_EN[18] != 1'b1); assert(MR3_MPR_DIS[18] != 1'b1); assert(DELAY_COUNTER_WIDTH <= $bits(MR0)); //bitwidth of mode register should be enough for the delay counter //sanity checking to ensure 5 bits is allotted for extra instruction {reset_finished, use_timer , stay_command , cke , reset_n } assert(($bits(instruction) - $bits(CMD_MRS) - $bits(MR0)) == 5 ); assert(DELAY_SLOT_WIDTH >= DELAY_COUNTER_WIDTH); //width occupied by delay timer slot on the reset rom must be able to occupy the maximum possible delay value on the reset sequence end always @(posedge i_controller_clk) f_past_valid <= 1; //The idea below is sourced from https://zipcpu.com/formal/2019/11/18/genuctrlr.html //We will form a packet of information describing each instruction as it goes through the pipeline and make assertions along the way. //2-stage Pipeline: f_addr (update address) -> f_read (read instruction from rom) //pipeline stage logic: f_addr (update address) -> f_read (read instruction from rom) always @(posedge i_controller_clk) begin",21
21696_UberDDR3_rtl_ddr3_controller.v,2714,assert(f_addr == instruction_address); //f_addr is the shadow of instruction_address (thus f_addr is the address of NEXT instruction) f_read_inst = read_rom_instruction(f_read); //f_read is the address of CURRENT instruction assert(f_read_inst == read_rom_instruction(f_read)); // needed for induction to make sure the engine will not create his own instruction if(f_addr == 0) begin f_read_inst = INITIAL_RESET_INSTRUCTION; //will only happen at the very start: f_addr (0) -> f_read (0) where we are reading the initial reset instruction and not the rom end assert(f_read_inst == instruction); // f_read_inst is the shadow of current instruction end // main assertions for the reset sequence always @(posedge i_controller_clk) begin if(past_sync_rst_controller) begin assert(f_addr == 0);,13
21696_UberDDR3_rtl_ddr3_controller.v,2727,assert(f_read == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,2728,assert(instruction_address == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,2735,assert(delay_counter == f_read_inst[DELAY_COUNTER_WIDTH - 1:0]);,1
21696_UberDDR3_rtl_ddr3_controller.v,2743,assert(delay_counter_is_zero);,1
21696_UberDDR3_rtl_ddr3_controller.v,2761,assert(delay_counter == 0 && delay_counter_is_zero);,1
21696_UberDDR3_rtl_ddr3_controller.v,2766,"assert(f_read == 0); //will only happen at the very start: f_addr (0) -> f_read (0) end else if(f_read == 0) begin assert(f_addr <= 1); //will only happen at the very first two cycles: f_addr (1) -> f_read (0) or f_addr (0) -> f_read (0) end //else if($past(reset_done)) assert(f_read == $past(f_read)); //reset instruction does not repeat after reaching end address thus it must saturate when pipeline reaches end else begin assert(f_read + 1 == f_addr); //address increments continuously end assert($past(f_read) < 21); //only instruction address 0-to-13 is for reset sequence (reset_done is asserted at address 14) end //assert the relationship between the stages FOR REFRESH SEQUENCE else begin if(f_read == 22) begin assert(f_addr == 19); //if current instruction is 22, then next instruction must be at 19 (instruction address wraps from 15 to 12) end else if(f_addr == 19) begin assert(f_read == 22); //if next instruction is at 12, then current instruction must be at 15 (instruction address wraps from 15 to 12) end else begin",21
21696_UberDDR3_rtl_ddr3_controller.v,2787,"assert(f_read + 1 == f_addr); //if there is no need to wrap around, then instruction address must increment end assert((f_read >= 19 && f_read <= 22) ); //refresh sequence is only on instruction address 19,20,21,22 end // reset_done must retain high when it was already asserted once if($past(reset_done)) begin assert(reset_done);",8
21696_UberDDR3_rtl_ddr3_controller.v,2799,assert(reset_done);,1
21696_UberDDR3_rtl_ddr3_controller.v,2804,assert(f_read == 21);,1
21696_UberDDR3_rtl_ddr3_controller.v,2816,assert( a[DELAY_COUNTER_WIDTH - 1:0] > 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,2823,assert(state_calibrate == IDLE);,1
21696_UberDDR3_rtl_ddr3_controller.v,2827,assert(instruction_address == 13);,1
21696_UberDDR3_rtl_ddr3_controller.v,2828,assert(pause_counter);,1
21696_UberDDR3_rtl_ddr3_controller.v,2833,assert(instruction_address == 17);,1
21696_UberDDR3_rtl_ddr3_controller.v,2834,assert(pause_counter);,1
21696_UberDDR3_rtl_ddr3_controller.v,2838,assert(delay_counter != 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,2842,"assume(instruction_address == 22); //write-then-read calibration will not take more than tREFI (7.8us, delay a address 22) assert(reset_done);",2
21696_UberDDR3_rtl_ddr3_controller.v,2847,assert(reset_done);,1
21696_UberDDR3_rtl_ddr3_controller.v,2851,assert(reset_done);,1
21696_UberDDR3_rtl_ddr3_controller.v,2852,assert(instruction_address >= 19);,1
21696_UberDDR3_rtl_ddr3_controller.v,2856,assert(instruction_address >= 19);,1
21696_UberDDR3_rtl_ddr3_controller.v,2859,assume(repeat_test == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,2865,assert(WRITE_SLOT != ACTIVATE_SLOT);,1
21696_UberDDR3_rtl_ddr3_controller.v,2866,assert(WRITE_SLOT != PRECHARGE_SLOT);,1
21696_UberDDR3_rtl_ddr3_controller.v,2867,assert(READ_SLOT != ACTIVATE_SLOT);,1
21696_UberDDR3_rtl_ddr3_controller.v,2868,assert(READ_SLOT != PRECHARGE_SLOT);,1
21696_UberDDR3_rtl_ddr3_controller.v,2893,assert(stage1_pending && stage2_pending);//there are 2 contents end if(stage1_pending && stage2_pending) begin assert(f_full);,4
21696_UberDDR3_rtl_ddr3_controller.v,2900,assert(stage1_pending ^ stage2_pending);//there is 1 content end if(stage1_pending ^ stage2_pending) begin assert(!f_empty && !f_full);,4
21696_UberDDR3_rtl_ddr3_controller.v,2907,assert(stage1_pending == 0 && stage2_pending==0); //there is 0 content end if(stage1_pending == 0 && stage2_pending == 0) begin assert(f_empty);,4
21696_UberDDR3_rtl_ddr3_controller.v,2915,assert(!stage1_pending && !stage2_pending);,1
21696_UberDDR3_rtl_ddr3_controller.v,2918,assert(stage1_we);,1
21696_UberDDR3_rtl_ddr3_controller.v,2921,assert(stage2_we);,1
21696_UberDDR3_rtl_ddr3_controller.v,2924,assert(!stage1_pending && !stage2_pending);,1
21696_UberDDR3_rtl_ddr3_controller.v,2928,assert(stage1_we);,1
21696_UberDDR3_rtl_ddr3_controller.v,2931,assert(stage2_we);,1
21696_UberDDR3_rtl_ddr3_controller.v,2933,assert(f_sum_of_pending_acks <= 2);,1
21696_UberDDR3_rtl_ddr3_controller.v,2937,assert(!stage1_we);,1
21696_UberDDR3_rtl_ddr3_controller.v,2940,assert(!stage2_we);,1
21696_UberDDR3_rtl_ddr3_controller.v,2943,assert(!stage1_we);,1
21696_UberDDR3_rtl_ddr3_controller.v,2944,assert(stage2_we);,1
21696_UberDDR3_rtl_ddr3_controller.v,2948,assume(state_calibrate != CHECK_STARTING_DATA && state_calibrate != BITSLIP_DQS_TRAIN_3); //this state should not be used (only for ddr3 with problems on DQ-DQS alignment) end always @(posedge i_controller_clk) begin if(f_past_valid) begin //switch from calibrate to done if(state_calibrate == DONE_CALIBRATE && $past(state_calibrate) != DONE_CALIBRATE) begin //assert($past(state_calibrate) == FINISH_READ);,8
21696_UberDDR3_rtl_ddr3_controller.v,2957,assert(f_empty);,1
21696_UberDDR3_rtl_ddr3_controller.v,2958,assert(!stage1_pending);,1
21696_UberDDR3_rtl_ddr3_controller.v,2959,assert(!stage2_pending);,1
21696_UberDDR3_rtl_ddr3_controller.v,2964,assert(!stage1_we);,1
21696_UberDDR3_rtl_ddr3_controller.v,2971,assert(f_bank_status == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,2972,assert(bank_status_q == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,2975,assert(f_bank_status == 0 || f_bank_status == 1); //only first bank is activated assert(bank_status_q == 0 || f_bank_status == 1);,2
21696_UberDDR3_rtl_ddr3_controller.v,3008,"assert(f_bank_status[cmd_d[WRITE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]] == 1'b1); //the bank that will be written must initially be active f_read_data_col = {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}; //column address must match assert(cmd_d[WRITE_SLOT][CMD_ADDRESS_START:0] == f_read_data_col);",3
21696_UberDDR3_rtl_ddr3_controller.v,3013,assert(cmd_d[WRITE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1] == f_read_data_bank);,1
21696_UberDDR3_rtl_ddr3_controller.v,3017,assert(stage2_aux == f_read_data_aux);,1
21696_UberDDR3_rtl_ddr3_controller.v,3020,assert(stage2_dm_unaligned == ~f_read_data_wb_sel); //data mask mst match inverse of wb sel assert(stage2_data_unaligned == f_read_data[$bits(i_wb_sel) + $bits(i_wb_addr) + AUX_WIDTH + 1 +: $bits(i_wb_data)]); //actual data must match `endif assert(f_read_data[0]); //i_wb_we must be high f_read_fifo = 1; //advance read pointer to prepare for next read end else if(state_calibrate > ISSUE_WRITE_1 && state_calibrate <= ANALYZE_DATA) begin assert(stage2_aux == 0);,9
21696_UberDDR3_rtl_ddr3_controller.v,3035,"assert(f_bank_status[cmd_d[READ_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]] == 1'b1); //the bank that will be read must initially be active f_read_data_col = {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}; //column address must match assert(cmd_d[READ_SLOT][CMD_ADDRESS_START:0] == f_read_data_col);",3
21696_UberDDR3_rtl_ddr3_controller.v,3040,assert(cmd_d[READ_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1] == f_read_data_bank);,1
21696_UberDDR3_rtl_ddr3_controller.v,3044,assert(stage2_aux == f_read_data_aux);,1
21696_UberDDR3_rtl_ddr3_controller.v,3047,assert(!f_read_data[0]); //i_wb_we must be low f_read_fifo = 1; //advance read pointer to prepare for next read end else if(state_calibrate > ISSUE_WRITE_1 && state_calibrate <= ANALYZE_DATA) begin assert(stage2_aux == 1);,5
21696_UberDDR3_rtl_ddr3_controller.v,3058,assert(f_bank_status[cmd_d[PRECHARGE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]] == 1'b1); //the bank that should be precharged must initially be active end end if(cmd_d[ACTIVATE_SLOT][CMD_CS_N:CMD_WE_N] == 4'b0011) begin //ACTIVATE if(state_calibrate == DONE_CALIBRATE) begin assert(f_bank_status[cmd_d[ACTIVATE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]] == 1'b0); //the bank that should be activated must initially be precharged end end if(reset_done) begin assert(cmd_d[PRECHARGE_SLOT][CMD_CKE] && cmd_d[PRECHARGE_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done assert(cmd_d[ACTIVATE_SLOT][CMD_CKE] && cmd_d[ACTIVATE_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done assert(cmd_d[READ_SLOT][CMD_CKE] && cmd_d[READ_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done assert(cmd_d[WRITE_SLOT][CMD_CKE] && cmd_d[WRITE_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done end end if(state_calibrate == DONE_CALIBRATE) begin assert(reset_done);,19
21696_UberDDR3_rtl_ddr3_controller.v,3079,"assert(o_wb_stall); //if not yet finished calibrating, stall should never go low end if(state_calibrate != DONE_CALIBRATE) begin assert(f_empty); //if not yet finished calibrating, stall should never go low end if(!f_empty) begin assert(state_calibrate == DONE_CALIBRATE);",7
21696_UberDDR3_rtl_ddr3_controller.v,3088,assume(f_sum_of_pending_acks == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3099,"assert(stage1_we == f_read_data[0]); //i_wb_we must be high end if(stage2_pending) begin //request is now on stage2 assert(stage2_bank == f_read_data[(COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]); //bank must match assert(stage2_col == {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match assert(stage2_we == f_read_data[0]); //i_wb_we must be high end end if(f_full) begin //both stages have request //stage2 is the request on the tip of the fifo assert(stage2_bank == f_read_data[(COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]); //bank must match assert(stage2_col == {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match assert(stage2_we == f_read_data[0]); //i_wb_we must be high //stage1 is the request on the other element of the fifo //(since the fifo only has 2 elements, the other element that //is not the tip will surely be the 2nd request that is being //handles by stage1) assert(stage1_bank == f_read_data_next[(COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]); //bank must match assert(stage1_col == {f_read_data_next[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match assert(stage1_we == f_read_data_next[0]); //i_wb_we must be high end",21
21696_UberDDR3_rtl_ddr3_controller.v,3125,assert(f_bank_status == bank_status_q);,1
21696_UberDDR3_rtl_ddr3_controller.v,3152,assert(bank <= 7);,1
21696_UberDDR3_rtl_ddr3_controller.v,3159,assert(bank <= 7);,1
21696_UberDDR3_rtl_ddr3_controller.v,3175,assert(stage1_pending || stage2_pending);,1
21696_UberDDR3_rtl_ddr3_controller.v,3178,assert(!f_empty || f_write_fifo);,1
21696_UberDDR3_rtl_ddr3_controller.v,3184,assert(!f_write_fifo); //must have no new request when not inside tREFI end if(instruction_address != 22 && $past(instruction_address) != 22) begin assert(o_wb_stall);,4
21696_UberDDR3_rtl_ddr3_controller.v,3188,assert(o_wb_stall_calib);,1
21696_UberDDR3_rtl_ddr3_controller.v,3192,assert(o_wb_stall);,1
21696_UberDDR3_rtl_ddr3_controller.v,3193,assert(o_wb_stall_calib);,1
21696_UberDDR3_rtl_ddr3_controller.v,3196,assert(!stage1_pending);,1
21696_UberDDR3_rtl_ddr3_controller.v,3197,assert(!stage2_pending);,1
21696_UberDDR3_rtl_ddr3_controller.v,3212,assert(!stage1_pending && !stage2_pending); //must be pending except in tREFI and in prestall delay end if(!reset_done) begin assert(stage1_pending == 0 && stage2_pending == 0);,5
21696_UberDDR3_rtl_ddr3_controller.v,3221,assert(o_wb_ack_read_q[f_index_1] == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3224,assert(shift_reg_read_pipe_q[f_index_1] == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3229,assert(bank_status_q == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3233,"assert(o_wb_ack == 0); //o_wb_ack must not go high before done calibration end if(state_calibrate > ISSUE_WRITE_1 && state_calibrate <= ANALYZE_DATA) begin if(stage1_pending) begin assert(!stage1_we == stage1_aux); //if write, then aux id must be 1 else 0 end if(stage2_pending) begin assert(!stage2_we == stage2_aux); //if write, then aux id must be 1 else 0 end end assert(state_calibrate <= DONE_CALIBRATE);",13
21696_UberDDR3_rtl_ddr3_controller.v,3258,assume(f_nreqs == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3259,assume(f_nacks == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3274,assert(o_wb_ack_read_q[f_index_1] == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3297,assert(f_outstanding == f_sum_of_pending_acks || !i_wb_cyc);,1
21696_UberDDR3_rtl_ddr3_controller.v,3300,assert(f_sum_of_pending_acks == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3303,assert(f_outstanding == 0 || !i_wb_cyc);,1
21696_UberDDR3_rtl_ddr3_controller.v,3307,assert(f_outstanding == 0 || !i_wb_cyc);,1
21696_UberDDR3_rtl_ddr3_controller.v,3308,assert(f_sum_of_pending_acks == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3311,assert(f_outstanding == 0 || !i_wb_cyc);,1
21696_UberDDR3_rtl_ddr3_controller.v,3312,assert(f_sum_of_pending_acks <= 3);,1
21696_UberDDR3_rtl_ddr3_controller.v,3315,"assert(o_wb_ack_read_q[0] == {0, 1'b1}); //if sum of pending acks > 1 then the first two will be write and have aux of 0, while the last will have aux of 1 (read) end f_ack_pipe_marker = 0;",4
21696_UberDDR3_rtl_ddr3_controller.v,3322,assert(f_ack_pipe_marker == 0); //read ack must be the last ack on the pipe(f_pipe_marker must still be zero) f_ack_pipe_marker = f_ack_pipe_marker + 1;,2
21696_UberDDR3_rtl_ddr3_controller.v,3324,assert(!stage1_pending && !stage2_pending); //a single read request must be the last request on this calibration end else begin //ack for write assert(f_aux_ack_pipe_after_stage2[f_index_1][AUX_WIDTH:1] == 0);,4
21696_UberDDR3_rtl_ddr3_controller.v,3332,assert(f_ack_pipe_marker <= 3);,1
21696_UberDDR3_rtl_ddr3_controller.v,3336,assert(f_outstanding == 0 || !i_wb_cyc);,1
21696_UberDDR3_rtl_ddr3_controller.v,3337,assert(f_sum_of_pending_acks == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3340,assert(f_nreqs == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3341,assert(f_nacks == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3342,assert(f_outstanding == 0 || !i_wb_cyc);,1
21696_UberDDR3_rtl_ddr3_controller.v,3347,assert(calib_aux == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3348,assert(calib_we == 1);,1
21696_UberDDR3_rtl_ddr3_controller.v,3353,assert(calib_aux == 1);,1
21696_UberDDR3_rtl_ddr3_controller.v,3354,assert(calib_we == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3358,assert(calib_stb == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3361,assert(!stage1_stall);,1
21696_UberDDR3_rtl_ddr3_controller.v,3365,assert(!stage2_stall);,1
21696_UberDDR3_rtl_ddr3_controller.v,3374,assert(f_nreqs == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3375,assert(f_nacks == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3376,assert(f_outstanding == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3377,assert(f_sum_of_pending_acks == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3381,"assert(!o_wb_stall);//if even 1 of the stage is empty, o_wb_stall must be low end end end //test the delay_before* always @* begin for(f_index_1=0; f_index_1< (1<<BA_BITS); f_index_1=f_index_1+1) begin assert(delay_before_precharge_counter_q[f_index_1] <= max(ACTIVATE_TO_PRECHARGE_DELAY, max(WRITE_TO_PRECHARGE_DELAY,READ_TO_PRECHARGE_DELAY)));",9
21696_UberDDR3_rtl_ddr3_controller.v,3390,assert(delay_before_activate_counter_q[f_index_1] <= PRECHARGE_TO_ACTIVATE_DELAY);,1
21696_UberDDR3_rtl_ddr3_controller.v,3396,assert(f_stall_count == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3409,assert(f_ackwait_count <= F_MAX_STALL);,1
21696_UberDDR3_rtl_ddr3_controller.v,3412,assert(f_ackwait_count == 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3489,assert(f_precharge_time_stamp[bank_const] <= f_timer);,1
21696_UberDDR3_rtl_ddr3_controller.v,3490,assert(f_activate_time_stamp[bank_const] <= f_timer);,1
21696_UberDDR3_rtl_ddr3_controller.v,3491,assert(f_read_time_stamp[bank_const] <= f_timer);,1
21696_UberDDR3_rtl_ddr3_controller.v,3492,assert(f_write_time_stamp[bank_const] <= f_timer);,1
21696_UberDDR3_rtl_ddr3_controller.v,3539,assert(instruction_address <= 22);,1
21696_UberDDR3_rtl_ddr3_controller.v,3540,assert(state_calibrate <= DONE_CALIBRATE);,1
21696_UberDDR3_rtl_ddr3_controller.v,3543,assert(state_calibrate == DONE_CALIBRATE);,1
21696_UberDDR3_rtl_ddr3_controller.v,3549,assert(pause_counter);,1
21696_UberDDR3_rtl_ddr3_controller.v,3554,assert(state_calibrate > ISSUE_WRITE_1);,1
21696_UberDDR3_rtl_ddr3_controller.v,3555,assert(instruction_address == 22 || instruction_address == 19);,1
21696_UberDDR3_rtl_ddr3_controller.v,3559,assert(state_calibrate == IDLE);,1
21696_UberDDR3_rtl_ddr3_controller.v,3563,assert(instruction_address == 13);,1
21696_UberDDR3_rtl_ddr3_controller.v,3564,assert(pause_counter);,1
21696_UberDDR3_rtl_ddr3_controller.v,3569,assert(instruction_address == 17);,1
21696_UberDDR3_rtl_ddr3_controller.v,3570,assert(pause_counter);,1
21696_UberDDR3_rtl_ddr3_controller.v,3574,assert(delay_counter != 0);,1
21696_UberDDR3_rtl_ddr3_controller.v,3578,"assume(instruction_address == 22); //write-then-read calibration will not take more than tREFI (7.8us, delay a address 22) assert(reset_done);",2
21696_UberDDR3_rtl_ddr3_controller.v,3583,assert(reset_done);,1
21696_UberDDR3_rtl_ddr3_controller.v,3584,assert(instruction_address >= 19);,1
21696_UberDDR3_rtl_ddr3_controller.v,3588,assert(instruction_address >= 19);,1
21696_UberDDR3_rtl_ddr3_controller.v,3592,assert(!stage1_pending && !stage2_pending);,1
21696_UberDDR3_rtl_ddr3_controller.v,3593,assert(o_wb_stall);,1
21696_UberDDR3_rtl_ddr3_controller.v,3594,assert(o_wb_stall_calib);,1
21696_UberDDR3_rtl_ddr3_controller.v,3597,assert(instruction_address >= 19 && instruction_address <= 22);,1
21696_UberDDR3_rtl_ddr3_controller.v,3601,assert(o_wb_stall);,1
21696_UberDDR3_rtl_ddr3_controller.v,3602,assert(o_wb_stall_calib);,1
21696_UberDDR3_rtl_ddr3_controller.v,3606,assert(delay_counter == PRE_REFRESH_DELAY);,1
21696_UberDDR3_rtl_ddr3_controller.v,3625,assert(!wb2_stb && !o_wb2_ack);,1
21696_UberDDR3_rtl_ddr3_controller.v,3628,assert(f_empty_2);,1
21696_UberDDR3_rtl_ddr3_controller.v,3635,assume(i_wb2_data[5 +: lanes_clog2] < LANES);,1
21696_UberDDR3_rtl_ddr3_controller.v,3639,assume(i_wb2_addr[4 +: lanes_clog2] < LANES);,1
21696_UberDDR3_rtl_ddr3_controller.v,3646,assume(i_wb2_addr[3:0] > 3);,1
21696_UberDDR3_rtl_ddr3_controller.v,3667,assert(wb2_stb && o_wb2_ack);,1
21696_UberDDR3_rtl_ddr3_controller.v,3680,assert(f_outstanding_2 <= 2);,1
21696_UberDDR3_rtl_ddr3_controller.v,3728,assert(o_wb2_data == odelay_data_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 1: begin assert(o_wb2_data == odelay_dqs_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 2: begin assert(o_wb2_data == idelay_data_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 3: begin assert(o_wb2_data == idelay_dqs_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 4: begin assert(o_wb2_data[0] == $past(i_phy_idelayctrl_rdy));,14
21696_UberDDR3_rtl_ddr3_controller.v,3807,assume(!i_wb_stb);,1
21696_UberDDR3_rtl_ddr3_controller.v,3960,assert(!empty);,1
21696_UberDDR3_rtl_ddr3_controller.v,3987,assert(write_pointer == read_pointer);,1
21696_UberDDR3_rtl_ddr3_controller.v,3990,assert(empty || full);,1
25626_c128-verilog_MMU_hdl_mmu8722_tb.v,51,assert(dut.cr_r == 8'h55);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,258,assert(STAGE2_DATA_DEPTH-2 >= 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2249,"assert(0); //force FORMAL to fail if this is ever reached `endif end endcase end endfunction //find the delay to be used by delay_before_xxxx_counter. // - delay_nCK = delay required between the two commands in DDR3 clock cycles // - start_slot = slot number of the first command // - end_slot = slot number of the second command // returns the number of controller clock cycles to satisfy the delay required between the two commands function [3:0] find_delay(input integer delay_nCK, input reg[1:0] start_slot, input reg[1:0] end_slot);",13
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2462,assume(i_wb_cyc == 1);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2463,assume(i_wb_stb == 1);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2465,assume(i_rst_n);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2467,assume(i_wb_we == f_wb_inputs[f_index][24]);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2468,assume(i_wb_addr == f_wb_inputs[f_index][23:0]);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2469,cover(f_index == 10);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2471,assume(i_rst_n); //dont reset just to skip a request forcefully end end `endif //endif for FORMAL_COVER `ifdef TEST_CONTROLLER_PIPELINE // wires and registers used in this formal section `ifdef TEST_DATA localparam F_TEST_CMD_DATA_WIDTH = $bits(i_wb_data) + $bits(i_wb_sel) + $bits(i_aux) + $bits(i_wb_addr) + $bits(i_wb_we);,10
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2526,"assert(MR0[18] != 1'b1); //last Mode Register bit should never be zero assert(MR1_WL_EN[18] != 1'b1); //(as this is used for A10-AP control for non-MRS assert(MR1_WL_DIS[18] != 1'b1); //(as this is used for A10-AP control for non-MRS assert(MR2[18] != 1'b1); //commands in the reset sequence) assert(MR3_MPR_EN[18] != 1'b1); assert(MR3_MPR_DIS[18] != 1'b1); assert(DELAY_COUNTER_WIDTH <= $bits(MR0)); //bitwidth of mode register should be enough for the delay counter //sanity checking to ensure 5 bits is allotted for extra instruction {reset_finished, use_timer , stay_command , cke , reset_n } assert(($bits(instruction) - $bits(CMD_MRS) - $bits(MR0)) == 5 ); assert(DELAY_SLOT_WIDTH >= DELAY_COUNTER_WIDTH); //width occupied by delay timer slot on the reset rom must be able to occupy the maximum possible delay value on the reset sequence end always @(posedge i_controller_clk) f_past_valid <= 1; //The idea below is sourced from https://zipcpu.com/formal/2019/11/18/genuctrlr.html //We will form a packet of information describing each instruction as it goes through the pipeline and make assertions along the way. //2-stage Pipeline: f_addr (update address) -> f_read (read instruction from rom) //pipeline stage logic: f_addr (update address) -> f_read (read instruction from rom) always @(posedge i_controller_clk) begin",21
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2560,assert(f_addr == instruction_address); //f_addr is the shadow of instruction_address (thus f_addr is the address of NEXT instruction) f_read_inst = read_rom_instruction(f_read); //f_read is the address of CURRENT instruction assert(f_read_inst == read_rom_instruction(f_read)); // needed for induction to make sure the engine will not create his own instruction if(f_addr == 0) begin f_read_inst = INITIAL_RESET_INSTRUCTION; //will only happen at the very start: f_addr (0) -> f_read (0) where we are reading the initial reset instruction and not the rom end assert(f_read_inst == instruction); // f_read_inst is the shadow of current instruction end // main assertions for the reset sequence always @(posedge i_controller_clk) begin if(past_sync_rst_controller) begin assert(f_addr == 0);,13
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2573,assert(f_read == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2574,assert(instruction_address == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2581,assert(delay_counter == f_read_inst[DELAY_COUNTER_WIDTH - 1:0]);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2589,assert(delay_counter_is_zero);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2607,assert(delay_counter == 0 && delay_counter_is_zero);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2612,"assert(f_read == 0); //will only happen at the very start: f_addr (0) -> f_read (0) end else if(f_read == 0) begin assert(f_addr <= 1); //will only happen at the very first two cycles: f_addr (1) -> f_read (0) or f_addr (0) -> f_read (0) end //else if($past(reset_done)) assert(f_read == $past(f_read)); //reset instruction does not repeat after reaching end address thus it must saturate when pipeline reaches end else begin assert(f_read + 1 == f_addr); //address increments continuously end assert($past(f_read) < 21); //only instruction address 0-to-13 is for reset sequence (reset_done is asserted at address 14) end //assert the relationship between the stages FOR REFRESH SEQUENCE else begin if(f_read == 22) begin assert(f_addr == 19); //if current instruction is 22, then next instruction must be at 19 (instruction address wraps from 15 to 12) end else if(f_addr == 19) begin assert(f_read == 22); //if next instruction is at 12, then current instruction must be at 15 (instruction address wraps from 15 to 12) end else begin",21
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2633,"assert(f_read + 1 == f_addr); //if there is no need to wrap around, then instruction address must increment end assert((f_read >= 19 && f_read <= 22) ); //refresh sequence is only on instruction address 19,20,21,22 end // reset_done must retain high when it was already asserted once if($past(reset_done)) begin assert(reset_done);",8
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2645,assert(reset_done);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2650,assert(f_read == 21);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2662,assert( a[DELAY_COUNTER_WIDTH - 1:0] > 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2669,assert(state_calibrate == IDLE);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2673,assert(instruction_address == 13);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2674,assert(pause_counter);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2679,assert(instruction_address == 17);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2680,assert(pause_counter);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2684,assert(delay_counter != 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2688,"assume(instruction_address == 22); //write-then-read calibration will not take more than tREFI (7.8us, delay a address 22) assert(reset_done);",2
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2693,assert(reset_done);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2697,assert(reset_done);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2698,assert(instruction_address >= 19);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2702,assert(instruction_address >= 19);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2705,assume(repeat_test == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2711,assert(WRITE_SLOT != ACTIVATE_SLOT);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2712,assert(WRITE_SLOT != PRECHARGE_SLOT);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2713,assert(READ_SLOT != ACTIVATE_SLOT);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2714,assert(READ_SLOT != PRECHARGE_SLOT);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2739,assert(stage1_pending && stage2_pending);//there are 2 contents end if(stage1_pending && stage2_pending) begin assert(f_full);,4
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2746,assert(stage1_pending ^ stage2_pending);//there is 1 content end if(stage1_pending ^ stage2_pending) begin assert(!f_empty && !f_full);,4
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2753,assert(stage1_pending == 0 && stage2_pending==0); //there is 0 content end if(stage1_pending == 0 && stage2_pending == 0) begin assert(f_empty);,4
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2761,assert(!stage1_pending && !stage2_pending);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2764,assert(stage1_we);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2767,assert(stage2_we);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2770,assert(!stage1_pending && !stage2_pending);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2774,assert(stage1_we);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2777,assert(stage2_we);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2779,assert(f_sum_of_pending_acks <= 2);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2783,assert(!stage1_we);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2786,assert(!stage2_we);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2789,assert(!stage1_we);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2790,assert(stage2_we);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2794,assume(state_calibrate != CHECK_STARTING_DATA && state_calibrate != BITSLIP_DQS_TRAIN_3); //this state should not be used (only for ddr3 with problems on DQ-DQS alignment) end always @(posedge i_controller_clk) begin if(f_past_valid) begin //switch from calibrate to done if(state_calibrate == DONE_CALIBRATE && $past(state_calibrate) != DONE_CALIBRATE) begin //assert($past(state_calibrate) == FINISH_READ);,8
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2803,assert(f_empty);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2804,assert(!stage1_pending);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2805,assert(!stage2_pending);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2810,assert(!stage1_we);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2817,assert(f_bank_status == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2818,assert(bank_status_q == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2821,assert(f_bank_status == 0 || f_bank_status == 1); //only first bank is activated assert(bank_status_q == 0 || f_bank_status == 1);,2
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2854,"assert(f_bank_status[cmd_d[WRITE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]] == 1'b1); //the bank that will be written must initially be active f_read_data_col = {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}; //column address must match assert(cmd_d[WRITE_SLOT][CMD_ADDRESS_START:0] == f_read_data_col);",3
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2859,assert(cmd_d[WRITE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1] == f_read_data_bank);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2863,assert(stage2_aux == f_read_data_aux);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2866,assert(stage2_dm_unaligned == ~f_read_data_wb_sel); //data mask mst match inverse of wb sel assert(stage2_data_unaligned == f_read_data[$bits(i_wb_sel) + $bits(i_wb_addr) + AUX_WIDTH + 1 +: $bits(i_wb_data)]); //actual data must match `endif assert(f_read_data[0]); //i_wb_we must be high f_read_fifo = 1; //advance read pointer to prepare for next read end else if(state_calibrate > ISSUE_WRITE_1 && state_calibrate <= ANALYZE_DATA) begin assert(stage2_aux == 0);,9
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2881,"assert(f_bank_status[cmd_d[READ_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]] == 1'b1); //the bank that will be read must initially be active f_read_data_col = {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}; //column address must match assert(cmd_d[READ_SLOT][CMD_ADDRESS_START:0] == f_read_data_col);",3
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2886,assert(cmd_d[READ_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1] == f_read_data_bank);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2890,assert(stage2_aux == f_read_data_aux);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2893,assert(!f_read_data[0]); //i_wb_we must be low f_read_fifo = 1; //advance read pointer to prepare for next read end else if(state_calibrate > ISSUE_WRITE_1 && state_calibrate <= ANALYZE_DATA) begin assert(stage2_aux == 1);,5
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2904,assert(f_bank_status[cmd_d[PRECHARGE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]] == 1'b1); //the bank that should be precharged must initially be active end end if(cmd_d[ACTIVATE_SLOT][CMD_CS_N:CMD_WE_N] == 4'b0011) begin //ACTIVATE if(state_calibrate == DONE_CALIBRATE) begin assert(f_bank_status[cmd_d[ACTIVATE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]] == 1'b0); //the bank that should be activated must initially be precharged end end if(reset_done) begin assert(cmd_d[PRECHARGE_SLOT][CMD_CKE] && cmd_d[PRECHARGE_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done assert(cmd_d[ACTIVATE_SLOT][CMD_CKE] && cmd_d[ACTIVATE_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done assert(cmd_d[READ_SLOT][CMD_CKE] && cmd_d[READ_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done assert(cmd_d[WRITE_SLOT][CMD_CKE] && cmd_d[WRITE_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done end end if(state_calibrate == DONE_CALIBRATE) begin assert(reset_done);,19
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2925,"assert(o_wb_stall); //if not yet finished calibrating, stall should never go low end if(state_calibrate != DONE_CALIBRATE) begin assert(f_empty); //if not yet finished calibrating, stall should never go low end if(!f_empty) begin assert(state_calibrate == DONE_CALIBRATE);",7
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2934,assume(f_sum_of_pending_acks == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2945,"assert(stage1_we == f_read_data[0]); //i_wb_we must be high end if(stage2_pending) begin //request is now on stage2 assert(stage2_bank == f_read_data[(COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]); //bank must match assert(stage2_col == {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match assert(stage2_we == f_read_data[0]); //i_wb_we must be high end end if(f_full) begin //both stages have request //stage2 is the request on the tip of the fifo assert(stage2_bank == f_read_data[(COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]); //bank must match assert(stage2_col == {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match assert(stage2_we == f_read_data[0]); //i_wb_we must be high //stage1 is the request on the other element of the fifo //(since the fifo only has 2 elements, the other element that //is not the tip will surely be the 2nd request that is being //handles by stage1) assert(stage1_bank == f_read_data_next[(COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]); //bank must match assert(stage1_col == {f_read_data_next[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match assert(stage1_we == f_read_data_next[0]); //i_wb_we must be high end",21
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2971,assert(f_bank_status == bank_status_q);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,2998,assert(bank <= 7);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3005,assert(bank <= 7);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3021,assert(stage1_pending || stage2_pending);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3024,assert(!f_empty || f_write_fifo);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3030,assert(!f_write_fifo); //must have no new request when not inside tREFI end if(instruction_address != 22 && $past(instruction_address) != 22) begin assert(o_wb_stall);,4
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3034,assert(o_wb_stall_calib);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3038,assert(o_wb_stall);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3039,assert(o_wb_stall_calib);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3042,assert(!stage1_pending);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3043,assert(!stage2_pending);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3058,assert(!stage1_pending && !stage2_pending); //must be pending except in tREFI and in prestall delay end if(!reset_done) begin assert(stage1_pending == 0 && stage2_pending == 0);,5
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3067,assert(o_wb_ack_read_q[f_index_1] == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3070,assert(shift_reg_read_pipe_q[f_index_1] == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3075,assert(bank_status_q == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3079,"assert(o_wb_ack == 0); //o_wb_ack must not go high before done calibration end if(state_calibrate > ISSUE_WRITE_1 && state_calibrate <= ANALYZE_DATA) begin if(stage1_pending) begin assert(!stage1_we == stage1_aux); //if write, then aux id must be 1 else 0 end if(stage2_pending) begin assert(!stage2_we == stage2_aux); //if write, then aux id must be 1 else 0 end end assert(state_calibrate <= DONE_CALIBRATE);",13
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3104,assume(f_nreqs == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3105,assume(f_nacks == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3120,assert(o_wb_ack_read_q[f_index_1] == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3143,assert(f_outstanding == f_sum_of_pending_acks || !i_wb_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3146,assert(f_sum_of_pending_acks == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3149,assert(f_outstanding == 0 || !i_wb_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3153,assert(f_outstanding == 0 || !i_wb_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3154,assert(f_sum_of_pending_acks == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3157,assert(f_outstanding == 0 || !i_wb_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3158,assert(f_sum_of_pending_acks <= 3);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3161,"assert(o_wb_ack_read_q[0] == {0, 1'b1}); //if sum of pending acks > 1 then the first two will be write and have aux of 0, while the last will have aux of 1 (read) end f_ack_pipe_marker = 0;",4
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3168,assert(f_ack_pipe_marker == 0); //read ack must be the last ack on the pipe(f_pipe_marker must still be zero) f_ack_pipe_marker = f_ack_pipe_marker + 1;,2
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3170,assert(!stage1_pending && !stage2_pending); //a single read request must be the last request on this calibration end else begin //ack for write assert(f_aux_ack_pipe_after_stage2[f_index_1][AUX_WIDTH:1] == 0);,4
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3178,assert(f_ack_pipe_marker <= 3);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3182,assert(f_outstanding == 0 || !i_wb_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3183,assert(f_sum_of_pending_acks == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3186,assert(f_nreqs == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3187,assert(f_nacks == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3188,assert(f_outstanding == 0 || !i_wb_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3193,assert(calib_aux == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3194,assert(calib_we == 1);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3199,assert(calib_aux == 1);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3200,assert(calib_we == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3204,assert(calib_stb == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3207,assert(!stage1_stall);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3211,assert(!stage2_stall);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3220,assert(f_nreqs == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3221,assert(f_nacks == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3222,assert(f_outstanding == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3223,assert(f_sum_of_pending_acks == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3227,"assert(!o_wb_stall);//if even 1 of the stage is empty, o_wb_stall must be low end end end //test the delay_before* always @* begin for(f_index_1=0; f_index_1< (1<<BA_BITS); f_index_1=f_index_1+1) begin assert(delay_before_precharge_counter_q[f_index_1] <= max(ACTIVATE_TO_PRECHARGE_DELAY, max(WRITE_TO_PRECHARGE_DELAY,READ_TO_PRECHARGE_DELAY)));",9
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3236,assert(delay_before_activate_counter_q[f_index_1] <= PRECHARGE_TO_ACTIVATE_DELAY);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3242,assert(f_stall_count == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3255,assert(f_ackwait_count <= F_MAX_STALL);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3258,assert(f_ackwait_count == 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3335,assert(f_precharge_time_stamp[bank_const] <= f_timer);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3336,assert(f_activate_time_stamp[bank_const] <= f_timer);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3337,assert(f_read_time_stamp[bank_const] <= f_timer);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3338,assert(f_write_time_stamp[bank_const] <= f_timer);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3385,assert(instruction_address <= 22);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3386,assert(state_calibrate <= DONE_CALIBRATE);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3389,assert(state_calibrate == DONE_CALIBRATE);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3395,assert(pause_counter);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3400,assert(state_calibrate > ISSUE_WRITE_1);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3401,assert(instruction_address == 22 || instruction_address == 19);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3405,assert(state_calibrate == IDLE);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3409,assert(instruction_address == 13);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3410,assert(pause_counter);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3415,assert(instruction_address == 17);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3416,assert(pause_counter);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3420,assert(delay_counter != 0);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3424,"assume(instruction_address == 22); //write-then-read calibration will not take more than tREFI (7.8us, delay a address 22) assert(reset_done);",2
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3429,assert(reset_done);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3430,assert(instruction_address >= 19);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3434,assert(instruction_address >= 19);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3438,assert(!stage1_pending && !stage2_pending);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3439,assert(o_wb_stall);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3440,assert(o_wb_stall_calib);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3443,assert(instruction_address >= 19 && instruction_address <= 22);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3447,assert(o_wb_stall);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3448,assert(o_wb_stall_calib);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3452,assert(delay_counter == PRE_REFRESH_DELAY);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3471,assert(!wb2_stb && !o_wb2_ack);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3474,assert(f_empty_2);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3481,assume(i_wb2_data[5 +: lanes_clog2] < LANES);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3485,assume(i_wb2_addr[4 +: lanes_clog2] < LANES);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3492,assume(i_wb2_addr[3:0] > 3);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3510,assert(f_full_2 || !i_wb2_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3513,assert(wb2_stb && o_wb2_ack);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3514,assert(f_outstanding_2 == 2 || !i_wb2_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3517,assert(f_full_2 || !i_wb2_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3520,assert(f_outstanding_2 == 0 || !i_wb2_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3523,assert(f_empty_2 || !i_wb2_cyc);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3526,assert(f_outstanding_2 <= 2);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3574,assert(o_wb2_data == odelay_data_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 1: begin assert(o_wb2_data == odelay_dqs_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 2: begin assert(o_wb2_data == idelay_data_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 3: begin assert(o_wb2_data == idelay_dqs_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 4: begin assert(o_wb2_data[0] == $past(i_phy_idelayctrl_rdy));,14
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3653,assume(!i_wb_stb);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3806,assert(!empty);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3833,assert(write_pointer == read_pointer);,1
27171_demo-projects_ddr3-test-arty-s7_ddr3_controller.v,3836,assert(empty || full);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,470,assume(!i_axi_reset_n);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,519,assert(f_axi_rd_outstanding == f_rd_fifo_axi_used);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,527,assert(f_axi_awr_outstanding == 0);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,528,assert(f_axi_wr_outstanding == 0);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,534,assert(f_axi_rd_outstanding == 0);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,543,assume(i_axi_awvalid == 0);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,544,assume(i_axi_wvalid == 0);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,546,assert(o_axi_bvalid == 0);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,552,assume(i_axi_arvalid == 0);,1
26694_conspiracion_rtl_wb2axip_axlite2wbsp.v,553,assert(o_axi_rvalid == 0);,1
26664_conspiracion_rtl_wb2axip_axiempty.v,288,assume(!S_AXI_ARESETN);,1
26664_conspiracion_rtl_wb2axip_axiempty.v,388,assert(S_AXI_ARREADY);,1
26664_conspiracion_rtl_wb2axip_axiempty.v,432,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
26686_conspiracion_rtl_wb2axip_axisrandom.v,111,assume(!S_AXI_ARESETN);,1
26686_conspiracion_rtl_wb2axip_axisrandom.v,125,assert(!M_AXIS_TVALID);,1
26686_conspiracion_rtl_wb2axip_axisrandom.v,127,assert(M_AXIS_TVALID);,1
49096_wbuart32_rtl_txuart.v,490,assert(r_setup == fsv_setup);,1
49096_wbuart32_rtl_txuart.v,498,assert(zero_baud_counter);,1
49096_wbuart32_rtl_txuart.v,508,"assert(baud_counter <= { fsv_setup[23:0], 4'h0 });",1
49096_wbuart32_rtl_txuart.v,552,assert(fsv_setup[29:28] == data_bits);,1
49096_wbuart32_rtl_txuart.v,553,assert(data_bits == 2'b11);,1
49096_wbuart32_rtl_txuart.v,554,assert(baud_counter < fsv_setup[23:0]);,1
49096_wbuart32_rtl_txuart.v,556,assert(1'b0 == |f_six_seq);,1
49096_wbuart32_rtl_txuart.v,557,assert(1'b0 == |f_seven_seq);,1
49096_wbuart32_rtl_txuart.v,558,assert(1'b0 == |f_eight_seq);,1
49096_wbuart32_rtl_txuart.v,559,assert(r_busy);,1
49096_wbuart32_rtl_txuart.v,560,assert(state > 4'h2);,1
49096_wbuart32_rtl_txuart.v,567,assert(state == 4'h3);,1
49096_wbuart32_rtl_txuart.v,568,assert(o_uart_tx == 1'b0);,1
49096_wbuart32_rtl_txuart.v,569,assert(lcl_data[4:0] == fsv_data[4:0]);,1
49096_wbuart32_rtl_txuart.v,571,assert(calc_parity == parity_odd);,1
49096_wbuart32_rtl_txuart.v,574,assert(state == 4'h4);,1
49096_wbuart32_rtl_txuart.v,575,assert(o_uart_tx == fsv_data[0]);,1
49096_wbuart32_rtl_txuart.v,576,assert(lcl_data[3:0] == fsv_data[4:1]);,1
49096_wbuart32_rtl_txuart.v,578,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
49096_wbuart32_rtl_txuart.v,581,assert(state == 4'h5);,1
49096_wbuart32_rtl_txuart.v,582,assert(o_uart_tx == fsv_data[1]);,1
49096_wbuart32_rtl_txuart.v,583,assert(lcl_data[2:0] == fsv_data[4:2]);,1
49096_wbuart32_rtl_txuart.v,588,assert(state == 4'h6);,1
49096_wbuart32_rtl_txuart.v,589,assert(o_uart_tx == fsv_data[2]);,1
49096_wbuart32_rtl_txuart.v,590,assert(lcl_data[1:0] == fsv_data[4:3]);,1
49096_wbuart32_rtl_txuart.v,595,assert(state == 4'h7);,1
49096_wbuart32_rtl_txuart.v,596,assert(o_uart_tx == fsv_data[3]);,1
49096_wbuart32_rtl_txuart.v,597,assert(lcl_data[0] == fsv_data[4]);,1
49096_wbuart32_rtl_txuart.v,603,assert(state == 4'h8);,1
49096_wbuart32_rtl_txuart.v,605,assert(state == 4'h9);,1
49096_wbuart32_rtl_txuart.v,606,assert(o_uart_tx == fsv_data[4]);,1
49096_wbuart32_rtl_txuart.v,634,assert(fsv_setup[29:28] == 2'b10);,1
49096_wbuart32_rtl_txuart.v,635,assert(fsv_setup[29:28] == data_bits);,1
49096_wbuart32_rtl_txuart.v,636,assert(baud_counter < fsv_setup[23:0]);,1
49096_wbuart32_rtl_txuart.v,638,assert(1'b0 == |f_five_seq);,1
49096_wbuart32_rtl_txuart.v,639,assert(1'b0 == |f_seven_seq);,1
49096_wbuart32_rtl_txuart.v,640,assert(1'b0 == |f_eight_seq);,1
49096_wbuart32_rtl_txuart.v,641,assert(r_busy);,1
49096_wbuart32_rtl_txuart.v,642,assert(state > 4'h1);,1
49096_wbuart32_rtl_txuart.v,649,assert(state == 4'h2);,1
49096_wbuart32_rtl_txuart.v,650,assert(o_uart_tx == 1'b0);,1
49096_wbuart32_rtl_txuart.v,651,assert(lcl_data[5:0] == fsv_data[5:0]);,1
49096_wbuart32_rtl_txuart.v,653,assert(calc_parity == parity_odd);,1
49096_wbuart32_rtl_txuart.v,656,assert(state == 4'h3);,1
49096_wbuart32_rtl_txuart.v,657,assert(o_uart_tx == fsv_data[0]);,1
49096_wbuart32_rtl_txuart.v,658,assert(lcl_data[4:0] == fsv_data[5:1]);,1
49096_wbuart32_rtl_txuart.v,660,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
49096_wbuart32_rtl_txuart.v,663,assert(state == 4'h4);,1
49096_wbuart32_rtl_txuart.v,664,assert(o_uart_tx == fsv_data[1]);,1
49096_wbuart32_rtl_txuart.v,665,assert(lcl_data[3:0] == fsv_data[5:2]);,1
49096_wbuart32_rtl_txuart.v,670,assert(state == 4'h5);,1
49096_wbuart32_rtl_txuart.v,671,assert(o_uart_tx == fsv_data[2]);,1
49096_wbuart32_rtl_txuart.v,672,assert(lcl_data[2:0] == fsv_data[5:3]);,1
49096_wbuart32_rtl_txuart.v,677,assert(state == 4'h6);,1
49096_wbuart32_rtl_txuart.v,678,assert(o_uart_tx == fsv_data[3]);,1
49096_wbuart32_rtl_txuart.v,679,assert(lcl_data[1:0] == fsv_data[5:4]);,1
49096_wbuart32_rtl_txuart.v,684,assert(state == 4'h7);,1
49096_wbuart32_rtl_txuart.v,685,assert(lcl_data[0] == fsv_data[5]);,1
49096_wbuart32_rtl_txuart.v,686,assert(o_uart_tx == fsv_data[4]);,1
49096_wbuart32_rtl_txuart.v,692,assert(state == 4'h8);,1
49096_wbuart32_rtl_txuart.v,694,assert(state == 4'h9);,1
49096_wbuart32_rtl_txuart.v,695,assert(o_uart_tx == fsv_data[5]);,1
49096_wbuart32_rtl_txuart.v,723,assert(fsv_setup[29:28] == 2'b01);,1
49096_wbuart32_rtl_txuart.v,724,assert(fsv_setup[29:28] == data_bits);,1
49096_wbuart32_rtl_txuart.v,725,assert(baud_counter < fsv_setup[23:0]);,1
49096_wbuart32_rtl_txuart.v,727,assert(1'b0 == |f_five_seq);,1
49096_wbuart32_rtl_txuart.v,728,assert(1'b0 == |f_six_seq);,1
49096_wbuart32_rtl_txuart.v,729,assert(1'b0 == |f_eight_seq);,1
49096_wbuart32_rtl_txuart.v,730,assert(r_busy);,1
49096_wbuart32_rtl_txuart.v,731,assert(state != 4'h0);,1
49096_wbuart32_rtl_txuart.v,738,assert(state == 4'h1);,1
49096_wbuart32_rtl_txuart.v,739,assert(o_uart_tx == 1'b0);,1
49096_wbuart32_rtl_txuart.v,740,assert(lcl_data[6:0] == fsv_data[6:0]);,1
49096_wbuart32_rtl_txuart.v,742,assert(calc_parity == parity_odd);,1
49096_wbuart32_rtl_txuart.v,745,assert(state == 4'h2);,1
49096_wbuart32_rtl_txuart.v,746,assert(o_uart_tx == fsv_data[0]);,1
49096_wbuart32_rtl_txuart.v,747,assert(lcl_data[5:0] == fsv_data[6:1]);,1
49096_wbuart32_rtl_txuart.v,749,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
49096_wbuart32_rtl_txuart.v,752,assert(state == 4'h3);,1
49096_wbuart32_rtl_txuart.v,753,assert(o_uart_tx == fsv_data[1]);,1
49096_wbuart32_rtl_txuart.v,754,assert(lcl_data[4:0] == fsv_data[6:2]);,1
49096_wbuart32_rtl_txuart.v,759,assert(state == 4'h4);,1
49096_wbuart32_rtl_txuart.v,760,assert(o_uart_tx == fsv_data[2]);,1
49096_wbuart32_rtl_txuart.v,761,assert(lcl_data[3:0] == fsv_data[6:3]);,1
49096_wbuart32_rtl_txuart.v,766,assert(state == 4'h5);,1
49096_wbuart32_rtl_txuart.v,767,assert(o_uart_tx == fsv_data[3]);,1
49096_wbuart32_rtl_txuart.v,768,assert(lcl_data[2:0] == fsv_data[6:4]);,1
49096_wbuart32_rtl_txuart.v,773,assert(state == 4'h6);,1
49096_wbuart32_rtl_txuart.v,774,assert(o_uart_tx == fsv_data[4]);,1
49096_wbuart32_rtl_txuart.v,775,assert(lcl_data[1:0] == fsv_data[6:5]);,1
49096_wbuart32_rtl_txuart.v,780,assert(state == 4'h7);,1
49096_wbuart32_rtl_txuart.v,781,assert(lcl_data[0] == fsv_data[6]);,1
49096_wbuart32_rtl_txuart.v,782,assert(o_uart_tx == fsv_data[5]);,1
49096_wbuart32_rtl_txuart.v,788,assert(state == 4'h8);,1
49096_wbuart32_rtl_txuart.v,790,assert(state == 4'h9);,1
49096_wbuart32_rtl_txuart.v,791,assert(o_uart_tx == fsv_data[6]);,1
49096_wbuart32_rtl_txuart.v,816,assert(fsv_setup[29:28] == 2'b00);,1
49096_wbuart32_rtl_txuart.v,817,assert(fsv_setup[29:28] == data_bits);,1
49096_wbuart32_rtl_txuart.v,818,"assert(baud_counter < { 6'h0, fsv_setup[23:0]});",1
49096_wbuart32_rtl_txuart.v,820,assert(1'b0 == |f_five_seq);,1
49096_wbuart32_rtl_txuart.v,821,assert(1'b0 == |f_six_seq);,1
49096_wbuart32_rtl_txuart.v,822,assert(1'b0 == |f_seven_seq);,1
49096_wbuart32_rtl_txuart.v,823,assert(r_busy);,1
49096_wbuart32_rtl_txuart.v,830,assert(state == 4'h0);,1
49096_wbuart32_rtl_txuart.v,831,assert(o_uart_tx == 1'b0);,1
49096_wbuart32_rtl_txuart.v,832,assert(lcl_data[7:0] == fsv_data[7:0]);,1
49096_wbuart32_rtl_txuart.v,834,assert(calc_parity == parity_odd);,1
49096_wbuart32_rtl_txuart.v,837,assert(state == 4'h1);,1
49096_wbuart32_rtl_txuart.v,838,assert(o_uart_tx == fsv_data[0]);,1
49096_wbuart32_rtl_txuart.v,839,assert(lcl_data[6:0] == fsv_data[7:1]);,1
49096_wbuart32_rtl_txuart.v,841,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
49096_wbuart32_rtl_txuart.v,844,assert(state == 4'h2);,1
49096_wbuart32_rtl_txuart.v,845,assert(o_uart_tx == fsv_data[1]);,1
49096_wbuart32_rtl_txuart.v,846,assert(lcl_data[5:0] == fsv_data[7:2]);,1
49096_wbuart32_rtl_txuart.v,851,assert(state == 4'h3);,1
49096_wbuart32_rtl_txuart.v,852,assert(o_uart_tx == fsv_data[2]);,1
49096_wbuart32_rtl_txuart.v,853,assert(lcl_data[4:0] == fsv_data[7:3]);,1
49096_wbuart32_rtl_txuart.v,858,assert(state == 4'h4);,1
49096_wbuart32_rtl_txuart.v,859,assert(o_uart_tx == fsv_data[3]);,1
49096_wbuart32_rtl_txuart.v,860,assert(lcl_data[3:0] == fsv_data[7:4]);,1
49096_wbuart32_rtl_txuart.v,865,assert(state == 4'h5);,1
49096_wbuart32_rtl_txuart.v,866,assert(o_uart_tx == fsv_data[4]);,1
49096_wbuart32_rtl_txuart.v,867,assert(lcl_data[2:0] == fsv_data[7:5]);,1
49096_wbuart32_rtl_txuart.v,872,assert(state == 4'h6);,1
49096_wbuart32_rtl_txuart.v,873,assert(o_uart_tx == fsv_data[5]);,1
49096_wbuart32_rtl_txuart.v,874,assert(lcl_data[1:0] == fsv_data[7:6]);,1
49096_wbuart32_rtl_txuart.v,879,assert(state == 4'h7);,1
49096_wbuart32_rtl_txuart.v,880,assert(o_uart_tx == fsv_data[6]);,1
49096_wbuart32_rtl_txuart.v,881,assert(lcl_data[0] == fsv_data[7]);,1
49096_wbuart32_rtl_txuart.v,887,assert(state == 4'h8);,1
49096_wbuart32_rtl_txuart.v,889,assert(state == 4'h9);,1
49096_wbuart32_rtl_txuart.v,890,assert(o_uart_tx == fsv_data[7]);,1
49096_wbuart32_rtl_txuart.v,907,"assert(baud_counter == { 4'h0, fsv_setup[23:0] }-1);",1
49096_wbuart32_rtl_txuart.v,951,assert(1'b0 == |f_five_seq[4:0]);,1
49096_wbuart32_rtl_txuart.v,952,assert(1'b0 == |f_six_seq[5:0]);,1
49096_wbuart32_rtl_txuart.v,953,assert(1'b0 == |f_seven_seq[6:0]);,1
49096_wbuart32_rtl_txuart.v,954,assert(1'b0 == |f_eight_seq[7:0]);,1
49096_wbuart32_rtl_txuart.v,956,assert(r_busy);,1
49096_wbuart32_rtl_txuart.v,964,assert(state == TXU_STOP);,1
49096_wbuart32_rtl_txuart.v,966,assert(state == TXU_STOP);,1
49096_wbuart32_rtl_txuart.v,967,assert(use_parity);,1
49096_wbuart32_rtl_txuart.v,968,assert(o_uart_tx == fsv_parity);,1
49096_wbuart32_rtl_txuart.v,975,assert(state == TXU_SECOND_STOP);,1
49096_wbuart32_rtl_txuart.v,976,assert(dblstop);,1
49096_wbuart32_rtl_txuart.v,977,assert(o_uart_tx);,1
49096_wbuart32_rtl_txuart.v,983,assert(state == 4'hf);,1
49096_wbuart32_rtl_txuart.v,984,assert(o_uart_tx);,1
49096_wbuart32_rtl_txuart.v,985,assert(baud_counter < fsv_setup[23:0]-1'b1);,1
49096_wbuart32_rtl_txuart.v,1024,assert(state == TXU_IDLE);,1
49096_wbuart32_rtl_txuart.v,1025,assert(o_uart_tx == 1'b1);,1
49096_wbuart32_rtl_txuart.v,1031,assert(state == TXU_BREAK);,1
49096_wbuart32_rtl_txuart.v,1032,assert(r_busy);,1
49096_wbuart32_rtl_txuart.v,1033,assert(o_uart_tx == 1'b0);,1
49096_wbuart32_rtl_txuart.v,1149,assert(dblstop && use_parity);,1
49096_wbuart32_rtl_txuart.v,1188,assert(dblstop);,1
49096_wbuart32_rtl_txuart.v,1189,assert(use_parity);,1
49096_wbuart32_rtl_txuart.v,1223,assume(i_setup[23:0] > 2);,1
49096_wbuart32_rtl_txuart.v,1225,assert(fsv_setup[23:0] > 2);,1
30236_hdl_rosetta_stone_verilog_formal_formal_bram_axistream_fifo.v,79,assume(rst);,1
30236_hdl_rosetta_stone_verilog_formal_formal_bram_axistream_fifo.v,114,assert(index >= 0);,1
30236_hdl_rosetta_stone_verilog_formal_formal_bram_axistream_fifo.v,115,assert(index <= 2**ADDR_WIDTH + 1);,1
3324_DDR_async_fifo.v,372,assert(read_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER);,1
3324_DDR_async_fifo.v,374,assert(read_ptr == 0);,1
3324_DDR_async_fifo.v,377,assert(read_ptr_gray == 0);,1
3324_DDR_async_fifo.v,397,assert(read_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER); // needs manual rollover end else assert(read_ptr == $past(read_ptr) + 1); // no need manual rollover `else `ifdef REGISTER_RETIMING_FOR_READ_DATA assert(previous_read_data == `else assert(read_data == `endif fifo_data[$past(read_ptr[ADDR_WIDTH-1:0]])); // passed verilator Warning-WIDTH assert(read_ptr == $past(read_ptr) + 1); // no need manual rollover `endif end end end `endif,20
3324_DDR_async_fifo.v,524,assert(write_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER);,1
3324_DDR_async_fifo.v,526,assert(write_ptr == 0);,1
3324_DDR_async_fifo.v,529,assert(write_ptr_gray == 0);,1
3324_DDR_async_fifo.v,551,assert(write_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER); // needs manual rollover end else assert(write_ptr == $past(write_ptr) + 1); // no need manual rollover `else assert(write_ptr == $past(write_ptr) + 1); // no need manual rollover `endif end end end `endif /*See https://zipcpu.com/blog/2018/07/06/afifo.html for a formal proof of afifo in general*/ `ifdef FORMAL reg first_clock_had_passed;,20
3324_DDR_async_fifo.v,603,assert(first_write_clock_had_passed == 0);,1
3324_DDR_async_fifo.v,604,assert(first_read_clock_had_passed == 0);,1
3324_DDR_async_fifo.v,614,assert(~empty || ~full); // ensures that only one condition is satisfied end */ initial assume(write_reset);,4
3324_DDR_async_fifo.v,683,assert(write_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER);,1
3324_DDR_async_fifo.v,684,assert(write_ptr_gray == 0);,1
3324_DDR_async_fifo.v,696,assert(read_ptr == LOWER_BINARY_LIMIT_FOR_GRAY_POINTER_ROLLOVER);,1
3324_DDR_async_fifo.v,697,assert(read_ptr_gray == 0);,1
3324_DDR_async_fifo.v,698,assert(read_data == 0);,1
3324_DDR_async_fifo.v,699,assert(empty);,1
3324_DDR_async_fifo.v,745,assume(f_wclk_step != 0);,1
3324_DDR_async_fifo.v,747,assume(f_rclk_step != 0);,1
3324_DDR_async_fifo.v,749,"assume(f_rclk_step != f_wclk_step); // so that we have two different clock speed reg [F_CLKBITS-1:0] f_wclk_count, f_rclk_count;",3
3324_DDR_async_fifo.v,760,assume(write_clk == gclk_w);,1
3324_DDR_async_fifo.v,761,assume(read_clk == gclk_r);,1
3324_DDR_async_fifo.v,762,cover(write_clk);,1
3324_DDR_async_fifo.v,763,cover(read_clk);,1
3324_DDR_async_fifo.v,827,assume(write_data == first_data);,1
3324_DDR_async_fifo.v,840,assume(write_data == second_data);,1
3324_DDR_async_fifo.v,856,assert(first_data_is_written == 0);,1
3324_DDR_async_fifo.v,857,assert(second_data_is_written == 0);,1
3324_DDR_async_fifo.v,862,assert(first_data_is_read == 0);,1
3324_DDR_async_fifo.v,863,assert(second_data_is_read == 0);,1
3324_DDR_async_fifo.v,873,assert(first_data_is_written == 0);,1
3324_DDR_async_fifo.v,874,assert(second_data_is_written == 0);,1
3324_DDR_async_fifo.v,881,assert(first_data_is_written == 1);,1
3324_DDR_async_fifo.v,882,assert(second_data_is_written == 0);,1
3324_DDR_async_fifo.v,883,assert(first_data_is_read == 0);,1
3324_DDR_async_fifo.v,884,assert(second_data_is_read == 0);,1
3324_DDR_async_fifo.v,898,assert(first_data_is_written == 1);,1
3324_DDR_async_fifo.v,899,assert(second_data_is_written == 1);,1
3324_DDR_async_fifo.v,915,assert(~second_data_is_written);,1
3324_DDR_async_fifo.v,922,assert(first_data_is_written);,1
3324_DDR_async_fifo.v,930,assert(first_data_is_written == 0);,1
3324_DDR_async_fifo.v,931,assert(second_data_is_written == 0);,1
3324_DDR_async_fifo.v,982,assert(first_data_is_read == 0);,1
3324_DDR_async_fifo.v,983,assert(second_data_is_read == 0);,1
3324_DDR_async_fifo.v,991,assert(first_data_is_read == 1);,1
3324_DDR_async_fifo.v,992,assert(second_data_is_read == 0);,1
3324_DDR_async_fifo.v,998,assert(second_data_is_read == 1);,1
3324_DDR_async_fifo.v,999,assert(first_data_is_read == 1);,1
3324_DDR_async_fifo.v,1011,assert(~second_data_is_read);,1
3324_DDR_async_fifo.v,1018,assert(first_data_is_read);,1
3324_DDR_async_fifo.v,1026,assert(first_data_is_read == 1);,1
3324_DDR_async_fifo.v,1028,assert(second_data_is_read == 1);,1
3324_DDR_async_fifo.v,1037,assert(first_data_is_read == 0);,1
3324_DDR_async_fifo.v,1038,assert(second_data_is_read == 0);,1
3324_DDR_async_fifo.v,1194,assume(write_en);,1
3324_DDR_async_fifo.v,1195,assume(write_data == test_write_data);,1
3324_DDR_async_fifo.v,1200,assume(!write_en);,1
3324_DDR_async_fifo.v,1214,assume(!write_reset);,1
3324_DDR_async_fifo.v,1215,assume(!read_reset);,1
3324_DDR_async_fifo.v,1235,assert(fifo_data[fifo_check_index] == {WIDTH{1'b0}});,1
3324_DDR_async_fifo.v,1271,"assert(read_data <= {WIDTH{1'b1}}); // don't care end end end end `endif `ifdef FORMAL //////////////////////////////////////////////////// // // Some cover statements, to make sure valuable states // are even reachable // //////////////////////////////////////////////////// // // Make sure a reset is possible in either domain always @(posedge write_clk)",21
3324_DDR_async_fifo.v,1292,cover(first_write_clock_had_passed && write_reset);,1
3324_DDR_async_fifo.v,1295,cover(first_read_clock_had_passed && read_reset);,1
3324_DDR_async_fifo.v,1304,cover(full);,1
3324_DDR_async_fifo.v,1318,cover(write_en);,1
26668_conspiracion_rtl_wb2axip_axilempty.v,128,assert(awskd_unused == 0);,1
26668_conspiracion_rtl_wb2axip_axilempty.v,142,assert(wskd_unused == 0);,1
26668_conspiracion_rtl_wb2axip_axilempty.v,211,assert(arskd_unused == 0);,1
26668_conspiracion_rtl_wb2axip_axilempty.v,342,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
26668_conspiracion_rtl_wb2axip_axilempty.v,352,assert(S_AXI_RDATA == 0);,1
26668_conspiracion_rtl_wb2axip_axilempty.v,354,assert(S_AXI_RRESP == 2'b11);,1
26668_conspiracion_rtl_wb2axip_axilempty.v,356,assert(S_AXI_BRESP == 2'b11);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,456,assert(f_axi_rd_outstanding == 0);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,460,assert(f_axi_rd_outstanding == 1);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,634,cover(fw_wrdemo_pipe[0]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,635,cover(fw_wrdemo_pipe[1]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,636,cover(fw_wrdemo_pipe[2]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,637,cover(fw_wrdemo_pipe[3]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,638,cover(fw_wrdemo_pipe[4]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,639,cover(fw_wrdemo_pipe[5]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,640,cover(fw_wrdemo_pipe[6]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,641,cover(fw_wrdemo_pipe[7]); // cover(fw_wrdemo_pipe[8]);,2
26695_conspiracion_rtl_wb2axip_demoaxi.v,643,cover(fw_wrdemo_pipe[9]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,644,cover(fw_wrdemo_pipe[10]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,645,cover(fw_wrdemo_pipe[11]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,646,cover(fw_wrdemo_pipe[12]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,647,cover(fw_wrdemo_pipe[13]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,648,cover(fw_wrdemo_pipe[14]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,649,cover(fw_wrdemo_pipe[15]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,650,cover(fw_wrdemo_pipe[16]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,651,cover(fw_wrdemo_pipe[17]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,652,cover(fw_wrdemo_pipe[18]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,653,cover(fw_wrdemo_pipe[19]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,654,cover(fw_wrdemo_pipe[20]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,655,cover(fw_wrdemo_pipe[21]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,656,cover(fw_wrdemo_pipe[22]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,707,cover(fw_rddemo_pipe[0]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,708,cover(fw_rddemo_pipe[1]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,709,cover(fw_rddemo_pipe[2]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,710,cover(fw_rddemo_pipe[3]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,711,cover(fw_rddemo_pipe[4]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,712,cover(fw_rddemo_pipe[5]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,713,cover(fw_rddemo_pipe[6]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,714,cover(fw_rddemo_pipe[7]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,715,cover(fw_rddemo_pipe[8]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,716,cover(fw_rddemo_pipe[9]);,1
26695_conspiracion_rtl_wb2axip_demoaxi.v,717,cover(fw_rddemo_pipe[10]);,1
30235_hdl_rosetta_stone_verilog_formal_formal_axistream_unpack.v,118,assume(init_1z || rst);,1
30235_hdl_rosetta_stone_verilog_formal_formal_axistream_unpack.v,121,cover(!rst && dest_tvalid && dest_tready);,1
30235_hdl_rosetta_stone_verilog_formal_formal_axistream_unpack.v,124,assert(inv_index >= 0 && inv_index < NUM_PACK);,1
30235_hdl_rosetta_stone_verilog_formal_formal_axistream_unpack.v,126,assert(index >= 0 && index < NUM_PACK);,1
37171_micro_benchmark_dsp_dspfilters_rtl_shalfband.v,63,assert(NTAPS[2:0] == 3'h7);,1
37171_micro_benchmark_dsp_dspfilters_rtl_shalfband.v,65,assert(NTAPS[2:0] == 3'h7);,1
49095_wbuart32_rtl_skidbuffer.v,227,assume property (IDATA_HELD_WHEN_NOT_READY);,1
49095_wbuart32_rtl_skidbuffer.v,231,assume property (IDATA_HELD_WHEN_NOT_READY);,1
49095_wbuart32_rtl_skidbuffer.v,237,assume property (IDATA_HELD_WHEN_NOT_READY);,1
49095_wbuart32_rtl_skidbuffer.v,239,assert property (IDATA_HELD_WHEN_NOT_READY);,1
22840_aes_src_encryption_top.v,283,assert(state_out_byte == 8'd0);,1
22840_aes_src_encryption_top.v,284,assert(load == 1'b0);,1
22840_aes_src_encryption_top.v,285,assert(ready == 1'b0);,1
22840_aes_src_encryption_top.v,293,assume(enable);,1
22840_aes_src_encryption_top.v,303,assert(!shiftRowsEn);,1
22840_aes_src_encryption_top.v,304,assert(!mixColumnsEn);,1
22840_aes_src_encryption_top.v,310,assert(!roundKeyEn);,1
22840_aes_src_encryption_top.v,311,assert(!shiftRowsEn);,1
22840_aes_src_encryption_top.v,317,assert(!roundKeyEn);,1
22840_aes_src_encryption_top.v,318,assert(!mixColumnsEn);,1
22840_aes_src_encryption_top.v,324,assert(ready);,1
22840_aes_src_encryption_top.v,338,assume(key == keyInt);,1
22840_aes_src_encryption_top.v,339,assume(state == stateInt);,1
22840_aes_src_encryption_top.v,345,assume(loadFinish == 1'b1);,1
22840_aes_src_encryption_top.v,346,assume(dataioFSM == 2'd2);,1
22840_aes_src_encryption_top.v,352,assert(keyNum <= 12);,1
3329_DDR_sync_fifo.v,244,assert(!full);,1
3329_DDR_sync_fifo.v,245,assert(empty);,1
3329_DDR_sync_fifo.v,246,assert(count == 0);,1
3329_DDR_sync_fifo.v,256,assert(rd_addr == 0);,1
3329_DDR_sync_fifo.v,257,assert(!full);,1
3329_DDR_sync_fifo.v,259,assert(wr_addr == 0);,1
3329_DDR_sync_fifo.v,260,assert(empty);,1
3329_DDR_sync_fifo.v,265,assert(wr_addr[ADDR_WIDTH-1:0] < SIZE);,1
3329_DDR_sync_fifo.v,266,assert(rd_addr[ADDR_WIDTH-1:0] < SIZE);,1
3329_DDR_sync_fifo.v,267,assert(count <= SIZE);,1
3329_DDR_sync_fifo.v,279,assert(count == 0);,1
3329_DDR_sync_fifo.v,280,assert(!full);,1
3329_DDR_sync_fifo.v,281,assert(empty);,1
3329_DDR_sync_fifo.v,282,assert(dequeue_value == 0);,1
3329_DDR_sync_fifo.v,293,assert(wr_addr == 0);,1
3329_DDR_sync_fifo.v,294,assert(rd_addr == 0);,1
3329_DDR_sync_fifo.v,295,assert(count == 0);,1
3329_DDR_sync_fifo.v,297,assert(wr_addr_flip == 0);,1
3329_DDR_sync_fifo.v,298,assert(rd_addr_flip == 0);,1
3329_DDR_sync_fifo.v,315,assert(data[rd_addr[ADDR_WIDTH-1:0]] == dequeue_value);,1
3329_DDR_sync_fifo.v,326,assert(wr_addr[ADDR_WIDTH-1:0] == 0);,1
3329_DDR_sync_fifo.v,329,assert(wr_addr_flip == 0);,1
3329_DDR_sync_fifo.v,350,assert(rd_addr[ADDR_WIDTH-1:0] == 0);,1
3329_DDR_sync_fifo.v,353,assert(rd_addr_flip == 0);,1
3329_DDR_sync_fifo.v,367,assert(data[rd_addr[ADDR_WIDTH-1:0]] == dequeue_value);,1
3329_DDR_sync_fifo.v,375,assert(wr_addr[ADDR_WIDTH-1:0] == 0);,1
3329_DDR_sync_fifo.v,378,assert(wr_addr_flip == 0);,1
3329_DDR_sync_fifo.v,392,assert(rd_addr[ADDR_WIDTH-1:0] == 0);,1
3329_DDR_sync_fifo.v,395,assert(rd_addr_flip == 0);,1
3329_DDR_sync_fifo.v,410,assert(wr_addr == 0);,1
3329_DDR_sync_fifo.v,411,assert(rd_addr == 0);,1
3329_DDR_sync_fifo.v,412,assert(wr_addr_flip == 0);,1
3329_DDR_sync_fifo.v,413,assert(rd_addr_flip == 0);,1
3329_DDR_sync_fifo.v,415,assert(count == 0);,1
3329_DDR_sync_fifo.v,422,assert(wr_addr >= rd_addr); // read pointer is always lagging behind write pointer else assert(wr_addr < rd_addr);,3
3329_DDR_sync_fifo.v,442,cover(reset);,1
3329_DDR_sync_fifo.v,450,cover(full);,1
3329_DDR_sync_fifo.v,464,cover(enqueue_en);,1
3329_DDR_sync_fifo.v,654,assert(this_data_location_had_been_written_once == 0);,1
3329_DDR_sync_fifo.v,658,assert(&this_data_location_had_been_written_once); // all fifo locations had been traversed else assert(this_data_location_had_been_written_once == ((1 << wr_addr[ADDR_WIDTH-1:0]) - 1)); // same as {{wr_addr[ADDR_WIDTH-1:0]}1'b1} end end // for address rollover always @(posedge clk) begin if(wr_addr[ADDR_WIDTH-1:0] == rd_addr[ADDR_WIDTH-1:0]) begin if((wr_addr[ADDR_WIDTH:0] == rd_addr[ADDR_WIDTH:0])) assert(empty);,13
3329_DDR_sync_fifo.v,701,assert(wr_addr[ADDR_WIDTH] != rd_addr[ADDR_WIDTH]);,1
3329_DDR_sync_fifo.v,713,"assert(data[data_block_index] >= 0); // != {WIDTH{1'bx}}); , use >= 0 since 'data' is unsigned end endgenerate always @(posedge clk) begin case(f_state) IDLE: begin end FIRST_DATA_IS_WRITTEN: begin if($past(f_state) == IDLE) assert($past(wr) && ($past(wr_addr) == f_first_addr) && ($past(enqueue_value) == first_data)); //assert(f_first_addr_in_fifo); assume(!dequeue_en); // do not read until the two pieces of data is written",21
3329_DDR_sync_fifo.v,736,assume(!enqueue_en);,1
3329_DDR_sync_fifo.v,738,assert(data[f_first_addr] == first_data);,1
3329_DDR_sync_fifo.v,740,assert(!empty);,1
3329_DDR_sync_fifo.v,748,assert(count >= 2);,1
3329_DDR_sync_fifo.v,749,assert(!empty);,1
3329_DDR_sync_fifo.v,752,assume(!enqueue_en); // do not write anymore since this is only a twin-write test assert(data[f_first_addr] == first_data);,2
3329_DDR_sync_fifo.v,756,assert(data[f_second_addr] == second_data);,1
3329_DDR_sync_fifo.v,759,assert(dequeue_value == first_data);,1
3329_DDR_sync_fifo.v,766,"assert(!empty); // we have only read out one data, there is still one more data in the fifo assume(!enqueue_en); // do not write anymore since this is only a twin-write test if(rd_addr != f_first_addr) assume(!dequeue_en);",5
3329_DDR_sync_fifo.v,773,assert(data[f_second_addr] == second_data);,1
3329_DDR_sync_fifo.v,775,assert(dequeue_value == second_data);,1
3329_DDR_sync_fifo.v,823,assume(!reset);,1
3329_DDR_sync_fifo.v,824,assume(enqueue_en);,1
3329_DDR_sync_fifo.v,825,assume(dequeue_en);,1
3329_DDR_sync_fifo.v,834,assume(enqueue_en);,1
3329_DDR_sync_fifo.v,835,assume(!dequeue_en); // do not read yet when the desired data had not been written assume(enqueue_value == 1); // Wrote first value end end always @(posedge clk) // test for reliability if(first_clock_had_passed) cover((f_running_state == FOREVER_RUNNING) && ($past(f_running_state) == FOREVER_RUNNING) && ($past(count) == 1) && ($past(enqueue_value) == SIZE-1));,9
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,653,assume(formal_product == 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,656,assume(formal_product == delayed_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,659,assume(formal_product == new_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,662,assume(formal_product == -delayed_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,665,assume(formal_product == -new_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,680,assume(f_avdata == 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,719,assert(f_write_diff <= f_phase);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,723,assert(f_delayed_addr == av_read_addr[LGLAGS-1:0]);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,727,assert(data_write_address != f_new_data_addr);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,731,assert(data_mem[f_new_data_addr] == new_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,735,assert(delayed_data == new_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,755,"assert(f_phase-1 == { 1'b0, av_read_addr[LGLAGS-1:0] });",1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,765,assert(!product[2*IW-1]);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,770,assert(!new_average[AB-1]);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,774,assert(!f_avdata[AB-1]);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,814,assert(avcounts == 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,815,assert(start_request);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,820,assert(avcounts == 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,822,assert(avcounts > 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,826,assert(start_request);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,837,cover(!running && i_data_ce && check_this);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,845,cover(&avcounts);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,848,cover(o_int);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,859,assume(&f_avdata[AB-1:AB-2]);,1
22839_aes_src_ShiftRows.v,102,assert(Shifted_Data == 128'd0);,1
22839_aes_src_ShiftRows.v,103,assert(done == 1'b0);,1
22839_aes_src_ShiftRows.v,172,assert(Shifted_Data == f_shifted_Data);,1
19010_Silixel_designs_silice_vga_test.v,135,assume(reset);,1
19010_Silixel_designs_silice_vga_test.v,237,assume(reset);,1
19010_Silixel_designs_silice_vga_test.v,305,assume(0);,1
19010_Silixel_designs_silice_vga_test.v,397,assume(reset);,1
19010_Silixel_designs_silice_vga_test.v,466,assume(0);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,139,assert(PREADY);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,157,assume(mem[f_addr[AW-1:APBLSB]] == f_data);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,170,assert(PRDATA == f_data);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,173,assert(f_data == mem[f_addr[AW-1:APBLSB]]);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,200,cover(cvr_writes[2]);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,203,cover(cvr_reads[2]);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,222,cover(cvr_seq[0]);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,223,cover(cvr_seq[1]);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,224,cover(cvr_seq[2]);,1
26654_conspiracion_rtl_wb2axip_apbslave.v,228,cover(PRESETn && !PSEL && !PENABLE && cvr_seq[2]);,1
26679_conspiracion_rtl_wb2axip_axiperf.v,1549,assert(S_AXIL_RDATA == 0);,1
26679_conspiracion_rtl_wb2axip_axiperf.v,1562,assert(!start_request || !stop_request);,1
26679_conspiracion_rtl_wb2axip_axiperf.v,1566,assert(clear_request);,1
26679_conspiracion_rtl_wb2axip_axiperf.v,1573,assert(start_request);,1
26679_conspiracion_rtl_wb2axip_axiperf.v,1599,assume(wr_aw_outstanding < 8'hff);,1
26679_conspiracion_rtl_wb2axip_axiperf.v,1602,assume(wr_w_outstanding < 8'hff);,1
30239_hdl_rosetta_stone_verilog_hdl_axistream_improve_timepath.v,81,assert(cnt > 0);,1
32865_ivtest_ivltests_sv_immediate_assume.v,9,assume(i == 1);,1
32865_ivtest_ivltests_sv_immediate_assume.v,10,assume(i == 0);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,363,assume(!S_PRESETn);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,474,assert(S_APB_PSEL && S_APB_PENABLE);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,479,assert(S_APB_PSEL && S_APB_PENABLE);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,483,assert(!M_APB_PSEL);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,487,assert(m_request && !m_ack);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,491,assert(!M_APB_PSEL);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,510,"assume({ S_APB_PPROT, S_APB_PWSTRB, S_APB_PWDATA } != fnvr_write);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,511,assume(S_APB_PADDR != fnvr_addr);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,517,"assert({ M_APB_PPROT, M_APB_PWSTRB, M_APB_PWDATA } != fnvr_write);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,518,assert(M_APB_PADDR != fnvr_addr);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,524,assert(M_APB_PADDR == S_APB_PADDR);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,525,assert(M_APB_PWRITE == S_APB_PWRITE);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,526,assert(M_APB_PWDATA == S_APB_PWDATA);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,527,assert(M_APB_PWSTRB == S_APB_PWSTRB);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,532,"assume({ M_APB_PSLVERR, M_APB_PRDATA } != fnvr_return);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,536,"assert({ m_pslverr, m_prdata } != fnvr_return);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,540,"assert({ S_APB_PSLVERR, S_APB_PRDATA } != fnvr_return);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,573,cover(cvr_writes >= 2);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,574,cover(cvr_reads >= 2);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,576,cover(cvr_writes >= 3);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,577,cover(cvr_reads >= 3);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,599,assume(S_APB_PCLK);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,601,assume(!S_APB_PCLK);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,605,assume(M_APB_PCLK);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,607,assume(!M_APB_PCLK);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,480,assert(sr_write == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,495,cover(cvr_sreg_full && sr_valid == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,631,assume(!S_AXI_ARESETN);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,636,assume(!S_AXI3_AWVALID);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,637,assume(!S_AXI3_WVALID);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,639,assume(!M_AXI_WVALID);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,643,assume(S_AXI3_AWVALID);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,649,assume(S_AXI3_WVALID);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,658,assert(M_AXI_WVALID);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,695,assert(!f_ckfifo_empty);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,696,assert(f_ckfifo_id == M_AXI_WID);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,697,assert(f_ckfifo_data == M_AXI_WDATA);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,698,assert(f_ckfifo_strb == M_AXI_WSTRB);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,699,assert(f_ckfifo_last == M_AXI_WLAST);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,716,assert(f_awid_count > 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,722,assume(S_AXI3_AWID == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,727,assume(S_AXI3_WID == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,728,assume(S_AXI3_WDATA == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,729,assume(S_AXI3_WSTRB == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,730,assume(S_AXI3_WLAST == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,736,assert(M_AXI_WID == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,737,assert(M_AXI_WDATA == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,738,assert(M_AXI_WSTRB == 0);,1
26660_conspiracion_rtl_wb2axip_axi3reorder.v,739,assert(M_AXI_WLAST == 0);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,135,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,221,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,261,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,301,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,341,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,381,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,421,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,461,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,501,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,541,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,581,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,621,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,661,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,701,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,741,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,781,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,929,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,1143,assume(0);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,1227,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,1426,assume(0);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,1525,assume(reset);,1
19009_Silixel_designs_silice_vga_demo_flyover.v,1594,assume(0);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,332,assert(starting_coefficient_index < NUP);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,363,assert(coefficient_index < NCOEFFS + NUP);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,366,assert(coefficient_index < NCOEFFS);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,368,assert(read_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,370,assert(!read_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,373,assert(p_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,375,assert(acc_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,426,assert(!read_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,427,assert(!idx_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,428,assert(!idx_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,478,assert(!mem_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,479,assert(!mem_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,480,assert(!read_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,526,assume(informal_product == 0);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,528,assume(informal_product == 0);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,543,assert(!product_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,544,assert(!product_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,545,assert(!p_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,614,assert(!output_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,615,assert(!acc_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,713,assume(!S_AXI_ARESETN);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,743,assert(f_icount[0] == 1'b0);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,751,assert(f_icount[0] == 1'b0);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,753,assert(f_icount[0] == f_istream[0]);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,761,assert(f_istream < NS);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,765,assume(!S_AXI_TVALID);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,768,assume(S_AXI_TVALID);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,775,assert(!M_AXI_TVALID);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,778,assert(M_AXI_TVALID);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,812,assert(acc_last == f_ostream[0]);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,829,assert(M_AXI_TLAST);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,831,assert(!M_AXI_TLAST);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,836,assert(f_ostream < NS);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,841,assert(data_write_address[0] == f_istream);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,865,assert(read_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,867,assert(p_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,869,assert(acc_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,873,assert(!product_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,874,assert(!mem_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,875,assert(!idx_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,878,assert(!mem_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,879,assert(!idx_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,880,assert(acc_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,883,assert(!idx_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,884,assert(product_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,885,assert(acc_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,888,assert(mem_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,889,assert(product_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,890,assert(acc_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,895,assert(idx_last == mem_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,896,assert(idx_last == product_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,897,assert(idx_last == acc_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,911,assert(!product_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,915,assert(!product_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,918,assert(!idx_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,920,assert(idx_last != f_icount[0]);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,922,assert(f_sumlast <= 1);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,923,assert(f_sumactive <= 2);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,925,assert(!idx_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,930,assert(read_enable);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,933,assert(!M_AXI_TLAST);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,940,assert(!product_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,941,assert(!acc_last || !product_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,942,assert(!mem_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,943,assert(!acc_last || !mem_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,944,assert(!idx_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,949,assert(!mem_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,950,assert(!product_last || !mem_last);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,951,assert(!idx_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,956,assert(!idx_load);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,971,assert(f_icount == f_countchk);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,981,assert(f_sumstream == f_istream);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,982,assert(f_sumstream <= 1);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,1006,cover(M_AXI_TVALID && M_AXI_TLAST);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,1010,cover(cvr_results[1]);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,1014,cover(cvr_results == 3'd3);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,1015,cover(cvr_results == 3'd4);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,1016,cover(cvr_results == 3'd5);,1
37170_micro_benchmark_dsp_dspfilters_rtl_ratfil.v,1031,assume(!i_tap_wr);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,496,assume(!S_AXI_ARESETN);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,509,assume(!S_AXIS_TVALID);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,512,assume(S_AXIS_TVALID);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,527,assume(S_AXIS_TKEEP != 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,541,assert(!M_AXIS_TVALID);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,544,assert(M_AXIS_TVALID);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,560,assert(&M_AXIS_TKEEP);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,565,assert(M_AXIS_TDATA == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,566,assert(M_AXIS_TSTRB == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,567,assert(M_AXIS_TKEEP == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,568,assert(M_AXIS_TLAST == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,574,assert(M_AXIS_TKEEP != 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,592,assert(mid_fill > 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,603,assert(mid_strb == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,613,assert(&mid_keep[gk-1:0]);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,619,assert(M_AXIS_TDATA == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,620,assert(M_AXIS_TSTRB == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,621,assert(M_AXIS_TKEEP == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,622,assert(M_AXIS_TLAST == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,653,assume(fc_data == S_AXIS_TDATA[7:0]);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,654,assume(fc_strb == S_AXIS_TSTRB[0]);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,657,assume(S_AXIS_TKEEP[DW/8-1:1] == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,658,assume(S_AXIS_TLAST);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,660,assume(S_AXIS_TKEEP[DW/8-1:1] != 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,670,assume(S_AXIS_TDATA[gk*8 +: 8] == fc_data);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,671,assume(S_AXIS_TSTRB[gk] == fc_strb);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,675,assume(S_AXIS_TKEEP[DW/8-1:gk+1] == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,676,assume(S_AXIS_TLAST);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,680,assume(S_AXIS_TKEEP[DW/8-1:gk+1] != 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,682,assume(!S_AXIS_TLAST);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,698,assert(M_AXIS_TDATA[7:0] == fc_data);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,699,assert(M_AXIS_TSTRB[0] == fc_strb);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,702,assert(M_AXIS_TKEEP[DW/8-1:1] == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,703,assert(M_AXIS_TLAST);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,705,assert(M_AXIS_TKEEP[DW/8-1:1] != 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,716,assert(M_AXIS_TDATA[gk*8 +: 8] == fc_data);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,717,assert(M_AXIS_TSTRB[gk] == fc_strb);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,721,assert(M_AXIS_TKEEP[DW/8-1:gk+1] == 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,722,assert(M_AXIS_TLAST);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,726,assert(M_AXIS_TKEEP[DW/8-1:gk+1] != 0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,728,assert(!M_AXIS_TLAST);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,771,assert(mid_data[7:0] == fc_data);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,772,assert(mid_strb[0] == fc_strb);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,773,assert(mid_keep[0]);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,776,assert(mid_fill == 1);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,777,assert(mid_last);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,779,assert(mid_fill > 1);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,782,assert(mid_data[7:0] == 8'h00);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,783,assert(!mid_strb[0]);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,784,assert(!mid_keep[0]);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,792,assert(mid_data[gk*8 +: 8] == fc_data);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,793,assert(mid_strb[gk] == fc_strb);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,794,assert(mid_keep[gk]);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,797,assert(mid_fill == gk + 1);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,798,assert(mid_last);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,802,assert(mid_fill > gk + 1);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,804,assert(!mid_last);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,807,assert(mid_data[gk*8 +: 8] == 8'h00);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,808,assert(!mid_strb[gk]);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,809,assert(!mid_keep[gk]);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,824,assume(f_chk_count[F_COUNT] == 1'b0);,1
26685_conspiracion_rtl_wb2axip_axispacker.v,825,assert(f_icount == f_chk_count[F_COUNT-1:0]);,1
26701_conspiracion_rtl_wb2axip_wbc2pipeline.v,159,assume(i_reset);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1135,assume(i_reset);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1155,assert(grant[N][M-1:0] == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1161,assert(o_merr[N] || m_stall[N]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1173,assert(checkgrant == mgrant[N]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1187,assert(mgrant[N]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1188,assert(mindex[N] == M);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1189,assert(sgrant[M]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1190,assert(sindex[M] == N);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1203,assert(grant[sindex[M]][M]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1214,assert(sgrant[M] == f_sgrant);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1239,assume(sgrant == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1246,assume(o_scyc[M] == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1247,assume(o_sstb[M] == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1248,assume(sgrant[M] == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1257,assume(grant[N] == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1258,assume(mgrant[N] == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1291,assert(f_moutstanding[N] <= 1);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1295,assert(m_stall[N] || o_merr[N]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1332,assert(m_stall[N]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1370,assert(i_mwe[N] == o_swe[iM]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1372,assert(i_mwe[N] == o_swe[iM]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1374,assert(i_mwe[N] == o_swe[iM]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1376,assert(i_mwe[N] == o_swe[iM]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1378,assert(i_mwe[N] == o_swe[iM]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1380,assert(i_mwe[N] == o_swe[iM]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1388,assert(i_mwe[N] == m_we[N]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1398,assert(!o_scyc[M]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1443,assume(special_master == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1446,assume(special_slave == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1479,assert(address_found == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1498,assume(special_value == 0);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1508,assume(i_sack[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1515,assume(!i_sack[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1516,assume(!i_serr[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1564,assert(grant[special_master][special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1565,assert(mgrant[special_master]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1566,assert(sgrant[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1567,assert(mindex[special_master] == special_slave);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1568,assert(sindex[special_slave] == special_master);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1569,assert(!o_merr[special_master]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1574,assert(o_scyc[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1575,assert(o_sstb[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1576,assert(!o_swe[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1577,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1584,assert(!m_we[special_master]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1585,assert(m_addr[special_master] == special_address);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1592,assert(o_scyc[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1593,assert(o_sstb[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1594,assert(!o_swe[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1595,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1599,assert(i_sack[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1607,assert(o_mack[special_master]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1615,cover(i_mcyc[special_master] && f_read_ack);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1652,assert(grant[special_master][special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1653,assert(mgrant[special_master]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1654,assert(sgrant[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1655,assert(mindex[special_master] == special_slave);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1656,assert(sindex[special_slave] == special_master);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1657,assert(!o_merr[special_master]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1662,assert(o_scyc[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1663,assert(o_sstb[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1664,assert(o_swe[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1665,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1676,assert(m_we[special_master]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1677,assert(m_addr[special_master] == special_address);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1686,assert(o_scyc[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1687,assert(o_sstb[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1688,assert(o_swe[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1689,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1702,assert(i_sack[special_slave]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1709,assert(o_mack[special_master]);,1
26705_conspiracion_rtl_wb2axip_wbxbar.v,1714,cover(i_mcyc[special_master] && f_write_ack);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,275,assert(o_fill == f_fill);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,282,assert(o_full == r_full);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,289,assert(o_empty == r_empty);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,300,assert(r_empty);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,304,assert(!r_empty);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,306,assert(!r_empty);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,313,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,315,assert(o_data == i_data);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,371,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,377,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,384,assert(o_data == f_first_data);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,388,assert(o_data == f_second_data);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,398,assert(f_first_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,400,assert(!f_first_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,409,assert(!f_first_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,414,assert(f_second_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,421,assert(f_second_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,423,assert(!f_second_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,426,assert(f_first_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,429,assert(f_second_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,432,assert(f_first_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,434,assert(o_data == f_first_data);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,436,assert(!f_first_in_fifo);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,437,assert(o_data == f_second_data);,1
26699_conspiracion_rtl_wb2axip_sfifo.v,464,cover(f_was_full && f_empty);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,356,assume(f_abstract_product == 0);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,496,assume(!i_ce || !first_sample);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,509,assert(countdown <= NDOWN-1);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,548,assert(f_written <= NDOWN);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,552,assert(f_written <= tidx);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,562,assert(tidx == f_dindex);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,566,assert(didx == wraddr);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,573,assert(tidx <= NCOEFFS);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,583,assert(tidx == f_expected_tidx);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,588,assert(!d_last);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,592,assert(!p_run || d_last || p_last);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,596,assert(!d_ce);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,600,assert(!p_last);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,604,assert(!p_last);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,608,assert(!p_ce);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,612,assert(!p_run);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,616,assert(!o_ce);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,619,assert(!p_ce || !p_run);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,634,cover(o_ce);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,653,cover(cvr_seq[1]);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,656,cover(cvr_seq[2]);,1
37176_micro_benchmark_dsp_dspfilters_rtl_subfildown.v,659,cover(cvr_seq[3]);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,540,assume(i_ce);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,552,assume(!i_ce);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,559,assume(!i_ce);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,602,assert(left_sr == f_sumrx);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,603,assert(left_si == f_sumix);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,604,assert(aux_s == f_dlyaux[F_D]);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,608,assert(mpy_r == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,609,assert(mpy_i == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,613,assert(mpy_r == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,614,assert(mpy_i == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,619,assert(mpy_r == f_difrx);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,620,assert(mpy_i == f_difix);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,625,assert(mpy_r == -f_difix);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,626,assert(mpy_i == f_difrx);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,631,assert(mpy_r == f_widecoeff_r);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,632,assert(mpy_i == f_widecoeff_i);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,637,assert(mpy_r == -f_widecoeff_i);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,638,assert(mpy_i == f_widecoeff_r);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,672,assert(p_one == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,674,assert(p_two == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,677,assert(p_one == f_predifrx);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,679,assert(p_two == f_predifix);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,682,assert(p_one == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,684,assert(p_two == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,688,assert(p_one == f_dlycoeff_r[F_D-1]);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,690,assert(p_two == f_dlycoeff_i[F_D-1]);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,694,assert(p_three == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,696,assert(p_three == 0);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,699,assert(p_three == f_sumdiff);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,701,assert(p_three == f_sumcoef);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,704,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,705,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
41819_openwifi-hw_ip_openofdm_tx_src_hwbfly.v,706,assert(p_three == f_sumdiff * f_sumcoef);,1
19008_Silixel_designs_silice_vga_demo.v,135,assume(reset);,1
19008_Silixel_designs_silice_vga_demo.v,1590,assume(reset);,1
19008_Silixel_designs_silice_vga_demo.v,1730,assume(0);,1
19008_Silixel_designs_silice_vga_demo.v,1836,assume(reset);,1
19008_Silixel_designs_silice_vga_demo.v,1905,assume(0);,1
26670_conspiracion_rtl_wb2axip_axilgpio.v,615,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
26670_conspiracion_rtl_wb2axip_axilgpio.v,626,assert(S_AXI_RDATA == 0);,1
26670_conspiracion_rtl_wb2axip_axilgpio.v,640,assume(f_obit < NOUT);,1
26670_conspiracion_rtl_wb2axip_axilgpio.v,648,assert(o_gpio[f_obit] == DEFAULT_OUTPUT[f_obit]);,1
26670_conspiracion_rtl_wb2axip_axilgpio.v,691,assume(f_ibit < NIN);,1
26670_conspiracion_rtl_wb2axip_axilgpio.v,697,assert(!ck_gpio[f_ibit]);,1
26670_conspiracion_rtl_wb2axip_axilgpio.v,701,assert(ck_toggled[f_ibit]);,1
26670_conspiracion_rtl_wb2axip_axilgpio.v,706,assert(!ck_toggled[f_ibit]);,1
26670_conspiracion_rtl_wb2axip_axilgpio.v,802,cover(o_int);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,294,assume(f_mpydelay > 1);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,304,assert(iaddr == 0);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,305,assert(wait_for_sync);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,306,assert(o_sync == 0);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,307,assert(oaddr == 0);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,308,assert(!b_started);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,309,assert(!o_sync);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,326,assume(!i_ce);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,329,assume(f_addr[LGSPAN]==1'b0);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,339,assert(iaddr == 0);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,345,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,354,assert(ib_a == f_left);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,355,assert(ib_b == f_right);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,356,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,383,assert(f_output_active == b_started);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,387,assert(!f_output_active);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,391,assert(oaddr == f_oaddr);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,393,assert(oaddr == 0);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,397,assume(!ob_sync);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,420,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,424,assert(o_sync);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,426,assert(!o_sync);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,430,assert(o_data == f_oleft);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,434,assert(pre_ovalue == f_oright);,1
41821_openwifi-hw_ip_openofdm_tx_src_ifftstage.v,438,assert(o_data == f_oright);,1
30312_hrm-cpu_verilog_ControlUnit.v,336,assume(i_rst);,1
30312_hrm-cpu_verilog_ControlUnit.v,357,assume(!debug);,1
30312_hrm-cpu_verilog_ControlUnit.v,358,assume(!nxtInstr);,1
30312_hrm-cpu_verilog_ControlUnit.v,359,cover( state == S_ADD );,1
30312_hrm-cpu_verilog_ControlUnit.v,360,cover( state == S_BUMPN );,1
30312_hrm-cpu_verilog_ControlUnit.v,361,cover( halt );,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,332,assume(i_reset);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,337,assume(i_ce);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,341,assume(i_navg > 3);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,345,assert(f_sum == acc);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,348,assert(f_navg > 3);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,364,assert(f_rdaddr == rdaddr);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,382,assert(full);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,394,assert(f_sum == acc);,1
37160_micro_benchmark_dsp_dspfilters_rtl_boxcar.v,396,assert(f_sum == acc);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,300,assert(faxi_awr_nbursts == faxil_awr_outstanding);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,320,assert(faxil_wr_outstanding == 0);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,355,assume(S_AXI_AWVALID || !S_AXI_WVALID);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,357,assume(!S_AXI_AWVALID);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,367,assume(!S_AXI_ARVALID);,1
26671_conspiracion_rtl_wb2axip_axilite2axi.v,371,assume(!S_AXI_AWVALID);,1
49429_xcrypto_rtl_xc_aesmix_xc_aesmix_ftb.v,50,assert(grm_result == dut_result);,1
49429_xcrypto_rtl_xc_aesmix_xc_aesmix_ftb.v,51,cover (grm_result == dut_result);,1
49429_xcrypto_rtl_xc_aesmix_xc_aesmix_ftb.v,55,assert(grm_result == dut_result);,1
49429_xcrypto_rtl_xc_aesmix_xc_aesmix_ftb.v,56,cover (grm_result == dut_result);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,39,assume(!mem_ready_0 == 0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,41,assume(mem_ready_1 == 0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,46,assume(last_mem_rdata == mem_rdata);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,55,assert(mem_addr_0 == mem_addr_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,56,assert(mem_wstrb_0 == mem_wstrb_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,77,assume(!mem_xfer_0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,80,assert(cmp_mem_addr == mem_addr_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,81,assert(cmp_mem_wstrb == mem_wstrb_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,89,assume(!mem_xfer_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,92,assert(cmp_mem_addr == mem_addr_0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,93,assert(cmp_mem_wstrb == mem_wstrb_0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,112,assert(trace_data_0 == trace_data_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,125,assume(!trace_valid_0);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,128,assert(cmp_trace_data == trace_data_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,132,assume(!trace_valid_1);,1
41952_picorv32_scripts_smtbmc_tracecmp2.v,135,assert(cmp_trace_data == trace_data_0);,1
8115_Hazard3_test_formal_common_ahbl_slave_assumptions.v,58,assume(dst_hready_resp);,1
8115_Hazard3_test_formal_common_ahbl_slave_assumptions.v,59,assume(!dst_hresp);,1
8115_Hazard3_test_formal_common_ahbl_slave_assumptions.v,67,assume(dst_hresp);,1
8115_Hazard3_test_formal_common_ahbl_slave_assumptions.v,83,assume(bus_stall_ctr <= MAX_BUS_STALL);,1
26697_conspiracion_rtl_wb2axip_easyaxil.v,397,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
26697_conspiracion_rtl_wb2axip_easyaxil.v,408,assert(S_AXI_RDATA == 0);,1
22837_aes_src_AddRoundKey.v,68,assert(state_out == 128'd0);,1
22837_aes_src_AddRoundKey.v,69,assert(done == 1'b0);,1
22837_aes_src_AddRoundKey.v,86,assert(state_out == key^state);,1
30234_hdl_rosetta_stone_verilog_formal_formal_axistream_improve_timepath.v,75,assume(rst);,1
30234_hdl_rosetta_stone_verilog_formal_formal_axistream_improve_timepath.v,110,assert(index >= 0);,1
30234_hdl_rosetta_stone_verilog_formal_formal_axistream_improve_timepath.v,111,assert(index <= 2**ADDR_WIDTH + 1);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,67,assume(rst);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,77,cover(was_full && empty);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,81,assume(!full || !wr_en);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,83,assume(!empty || !rd_en);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,88,assert(empty || !rst_1z);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,90,assert(rst || rst_1z || !rd_en_1z || data0_1z == dest_data);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,124,assert(index >= 0);,1
30237_hdl_rosetta_stone_verilog_formal_formal_bram_std_fifo.v,125,assert(index <= 2**ADDR_WIDTH);,1
41953_picorv32_scripts_smtbmc_tracecmp3.v,76,assert(cpu0_mem_addr == cpu1_mem_addr);,1
41953_picorv32_scripts_smtbmc_tracecmp3.v,77,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
41953_picorv32_scripts_smtbmc_tracecmp3.v,84,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,429,assume(i_reset);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,458,assert(expected_returns == fwbs_outstanding);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,494,assert(!o_fault);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,507,assert(!timeout);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,511,assert(!o_wb_cyc);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,518,assert(sacks == fwbm_nacks);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,522,assert(o_wb_cyc || o_wb_err);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,529,assert(fwbs_nreqs == mreqs);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,533,assert(i_wb_we == o_wb_we);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,537,assert(o_wb_cyc || o_wb_err);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,548,cover(o_fault);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,552,cover(o_fault);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,556,cover(o_fault);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,579,cover(faulted && !o_reset && o_wb_ack);,1
26704_conspiracion_rtl_wb2axip_wbsafety.v,586,cover(!i_reset && fwbs_nacks > 4);,1
41949_picorv32_scripts_smtbmc_axicheck2.v,119,assert(trap_0 == trap_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,120,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
41949_picorv32_scripts_smtbmc_axicheck2.v,121,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,122,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,123,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,124,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,125,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,126,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,127,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
41949_picorv32_scripts_smtbmc_axicheck2.v,128,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,129,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
41949_picorv32_scripts_smtbmc_axicheck2.v,130,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
26700_conspiracion_rtl_wb2axip_sfifothresh.v,99,assert(!o_int);,1
22838_aes_src_MixColumns.v,101,assert(state_out == 128'd0);,1
22838_aes_src_MixColumns.v,102,assert(done == 1'b0);,1
22838_aes_src_MixColumns.v,236,assert(state_out == f_state_out);,1
39113_open-fpga-verilog-tutorial_tutorial_ICE40-HX8K_Breakout_Board_T04-counter_counter.v,35,assert property (data[3:0] == counter[25:22]);,1
26664_conspiracion_rtl_wb2axip_axiempty.v,288,assume(!S_AXI_ARESETN);,1
26664_conspiracion_rtl_wb2axip_axiempty.v,388,assert(S_AXI_ARREADY);,1
26664_conspiracion_rtl_wb2axip_axiempty.v,432,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
30236_hdl_rosetta_stone_verilog_formal_formal_bram_axistream_fifo.v,79,assume(rst);,1
30236_hdl_rosetta_stone_verilog_formal_formal_bram_axistream_fifo.v,114,assert(index >= 0);,1
30236_hdl_rosetta_stone_verilog_formal_formal_bram_axistream_fifo.v,115,assert(index <= 2**ADDR_WIDTH + 1);,1
37171_micro_benchmark_dsp_dspfilters_rtl_shalfband.v,63,assert(NTAPS[2:0] == 3'h7);,1
37171_micro_benchmark_dsp_dspfilters_rtl_shalfband.v,65,assert(NTAPS[2:0] == 3'h7);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,653,assume(formal_product == 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,656,assume(formal_product == delayed_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,659,assume(formal_product == new_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,662,assume(formal_product == -delayed_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,665,assume(formal_product == -new_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,680,assume(f_avdata == 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,719,assert(f_write_diff <= f_phase);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,723,assert(f_delayed_addr == av_read_addr[LGLAGS-1:0]);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,727,assert(data_write_address != f_new_data_addr);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,731,assert(data_mem[f_new_data_addr] == new_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,735,assert(delayed_data == new_data);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,755,"assert(f_phase-1 == { 1'b0, av_read_addr[LGLAGS-1:0] });",1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,765,assert(!product[2*IW-1]);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,770,assert(!new_average[AB-1]);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,774,assert(!f_avdata[AB-1]);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,814,assert(avcounts == 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,815,assert(start_request);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,820,assert(avcounts == 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,822,assert(avcounts > 0);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,826,assert(start_request);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,837,cover(!running && i_data_ce && check_this);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,845,cover(&avcounts);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,848,cover(o_int);,1
37161_micro_benchmark_dsp_dspfilters_rtl_cheapspectral.v,859,assume(&f_avdata[AB-1:AB-2]);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,363,assume(!S_PRESETn);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,474,assert(S_APB_PSEL && S_APB_PENABLE);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,479,assert(S_APB_PSEL && S_APB_PENABLE);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,483,assert(!M_APB_PSEL);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,487,assert(m_request && !m_ack);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,491,assert(!M_APB_PSEL);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,510,"assume({ S_APB_PPROT, S_APB_PWSTRB, S_APB_PWDATA } != fnvr_write);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,511,assume(S_APB_PADDR != fnvr_addr);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,517,"assert({ M_APB_PPROT, M_APB_PWSTRB, M_APB_PWDATA } != fnvr_write);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,518,assert(M_APB_PADDR != fnvr_addr);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,524,assert(M_APB_PADDR == S_APB_PADDR);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,525,assert(M_APB_PWRITE == S_APB_PWRITE);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,526,assert(M_APB_PWDATA == S_APB_PWDATA);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,527,assert(M_APB_PWSTRB == S_APB_PWSTRB);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,532,"assume({ M_APB_PSLVERR, M_APB_PRDATA } != fnvr_return);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,536,"assert({ m_pslverr, m_prdata } != fnvr_return);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,540,"assert({ S_APB_PSLVERR, S_APB_PRDATA } != fnvr_return);",1
26655_conspiracion_rtl_wb2axip_apbxclk.v,573,cover(cvr_writes >= 2);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,574,cover(cvr_reads >= 2);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,576,cover(cvr_writes >= 3);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,577,cover(cvr_reads >= 3);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,599,assume(S_APB_PCLK);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,601,assume(!S_APB_PCLK);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,605,assume(M_APB_PCLK);,1
26655_conspiracion_rtl_wb2axip_apbxclk.v,607,assume(!M_APB_PCLK);,1
4_gram_verilog_file_194.v,12,cover property (-1);,1
4_gram_verilog_file_519.v,64,assert property (id_7);,1
4_gram_verilog_file_502.v,84,assert property (id_5);,1
4_gram_verilog_file_889.v,54,assert property (-1'b0);,1
4_gram_verilog_file_279.v,80,assert property (1'b0 ? id_16 : 1'd0);,1
4_gram_verilog_file_204.v,17,assert property (id_2);,1
4_gram_verilog_file_624.v,74,assert property (1'b0 |-> id_4);,1
4_gram_verilog_file_297.v,114,cover property (1 |-> -1);,1
4_gram_verilog_file_418.v,16,assert property (id_6);,1
4_gram_verilog_file_747.v,124,assume property (-1);,1
6_gram_verilog_file_40.v,18,cover (id_5);,1
22837_aes_src_AddRoundKey.v,68,assert(state_out == 128'd0);,1
22837_aes_src_AddRoundKey.v,69,assert(done == 1'b0);,1
22837_aes_src_AddRoundKey.v,86,assert(state_out == key^state);,1
22838_aes_src_MixColumns.v,101,assert(state_out == 128'd0);,1
22838_aes_src_MixColumns.v,102,assert(done == 1'b0);,1
22838_aes_src_MixColumns.v,236,assert(state_out == f_state_out);,1
6_gram_verilog_file_1342.v,50,cover (1);,1
6_gram_verilog_file_1413.v,18,assert (1);,1
4_gram_verilog_file_10.v,13,assume ("");,1
6_gram_verilog_file_1227.v,7,assume (1);,1
6_gram_verilog_file_1135.v,42,cover (1);,1
6_gram_verilog_file_1423.v,36,"assert ({id_11, 1'd0, id_1, id_8 - 1});",1
6_gram_verilog_file_1046.v,40,assert (id_2);,1
4_gram_verilog_file_1236.v,6,assert (id_2);,1
6_gram_verilog_file_1366.v,17,assert (1);,1
6_gram_verilog_file_1220.v,41,assert (1);,1
6_gram_verilog_file_1280.v,18,assert (id_0);,1
6_gram_verilog_file_1158.v,40,assume (1);,1
2_gram_verilog_file_116.v,6,assume (1);,1
5_gram_verilog_file_1140.v,20,assert (1);,1
6_gram_verilog_file_1144.v,24,assert (1);,1
6_gram_verilog_file_1412.v,24,assert (1);,1
6_gram_verilog_file_1197.v,63,assert (id_28);,1
3_gram_verilog_file_1423.v,58,assume (1);,1
6_gram_verilog_file_1196.v,21,assert (id_0);,1
2_gram_verilog_file_1182.v,55,assert (1);,1
4_gram_verilog_file_1192.v,11,assert (1 + id_4);,1
3_gram_verilog_file_1283.v,64,assert (id_7);,1
6_gram_verilog_file_1330.v,23,cover (id_2);,1
6_gram_verilog_file_1434.v,26,assume (id_7);,1
6_gram_verilog_file_129.v,22,assert (1);,1
5_gram_verilog_file_1308.v,19,assert (id_8 || id_5);,1
6_gram_verilog_file_1258.v,29,assert (id_1);,1
4_gram_verilog_file_119.v,47,assume (id_14);,1
4_gram_verilog_file_11.v,6,assume ("");,1
4_gram_verilog_file_1390.v,4,assume (1 && id_1);,1
6_gram_verilog_file_1233.v,25,assume (id_14);,1
1_gram_verilog_file_9369.v,22,assert property (@* 1);,1
5_gram_verilog_file_1962.v,48,assert (1);,1
5_gram_verilog_file_3501.v,34,cover (1);,1
5_gram_verilog_file_3798.v,50,assert (1);,1
5_gram_verilog_file_2782.v,9,assert (1);,1
5_gram_verilog_file_9208.v,42,assert (1 == 1);,1
5_gram_verilog_file_2156.v,15,assert (id_1 == id_1 || 1'h0);,1
5_gram_verilog_file_7639.v,85,assert (1);,1
5_gram_verilog_file_7977.v,11,assert (1);,1
5_gram_verilog_file_7500.v,73,assert (id_5);,1
5_gram_verilog_file_2030.v,20,assert (1 !=? id_0);,1
5_gram_verilog_file_2245.v,35,assert (1);,1
5_gram_verilog_file_2992.v,27,assume (1);,1
5_gram_verilog_file_9451.v,28,assume (1);,1
5_gram_verilog_file_8529.v,32,assert (1);,1
5_gram_verilog_file_5149.v,34,assert (1 - id_0);,1
5_gram_verilog_file_5383.v,11,assert (id_2);,1
5_gram_verilog_file_8804.v,60,assert (1'b0);,1
5_gram_verilog_file_1924.v,21,assert (1'b0 == 1'h0);,1
5_gram_verilog_file_9516.v,40,assume (1);,1
5_gram_verilog_file_4063.v,46,assert (id_20 && 1 && id_15);,1
5_gram_verilog_file_1863.v,49,assume (1'b0);,1
5_gram_verilog_file_9133.v,5,assert (id_1);,1
5_gram_verilog_file_8822.v,41,assert (1);,1
5_gram_verilog_file_105.v,30,assert (id_10);,1
5_gram_verilog_file_7203.v,51,cover (1);,1
5_gram_verilog_file_4231.v,69,assume (id_20);,1
5_gram_verilog_file_5955.v,31,assert ('d0 == id_4);,1
5_gram_verilog_file_1740.v,95,assert (1);,1
5_gram_verilog_file_3163.v,51,assert (id_9);,1
5_gram_verilog_file_282.v,71,assert (1);,1
5_gram_verilog_file_1589.v,20,cover (id_1);,1
5_gram_verilog_file_2727.v,18,assert (1 ^ 1);,1
5_gram_verilog_file_8817.v,49,cover (id_4 - "");,1
5_gram_verilog_file_9936.v,33,assume (1 * 1);,1
5_gram_verilog_file_828.v,26,assume (1'b0);,1
5_gram_verilog_file_5544.v,21,assume (id_8);,1
5_gram_verilog_file_6467.v,23,cover (1'h0);,1
5_gram_verilog_file_8103.v,91,assert (1);,1
5_gram_verilog_file_8674.v,39,assert (1);,1
5_gram_verilog_file_8748.v,52,assert (id_1);,1
5_gram_verilog_file_1450.v,48,assume (1);,1
5_gram_verilog_file_5511.v,6,cover (1);,1
5_gram_verilog_file_8252.v,64,assert (1);,1
5_gram_verilog_file_1653.v,4,assert (1);,1
5_gram_verilog_file_8511.v,29,assert (1);,1
5_gram_verilog_file_2282.v,89,cover (1);,1
5_gram_verilog_file_9088.v,7,assert (1);,1
5_gram_verilog_file_4088.v,23,assert (1);,1
5_gram_verilog_file_571.v,43,cover (1 == 1);,1
5_gram_verilog_file_6958.v,38,assert (1);,1
5_gram_verilog_file_7061.v,18,assert (id_3);,1
5_gram_verilog_file_6871.v,20,assert (id_6);,1
5_gram_verilog_file_8033.v,21,assert (id_4);,1
5_gram_verilog_file_14.v,33,assume (id_4);,1
5_gram_verilog_file_9848.v,9,assume ("");,1
5_gram_verilog_file_9744.v,9,assume (id_5);,1
5_gram_verilog_file_9606.v,15,assert (1);,1
5_gram_verilog_file_5440.v,21,assume (1);,1
5_gram_verilog_file_4765.v,34,assert (1);,1
5_gram_verilog_file_5531.v,101,assume (1);,1
5_gram_verilog_file_4323.v,21,assert (1);,1
5_gram_verilog_file_7667.v,80,assert (1'd0);,1
5_gram_verilog_file_1866.v,36,cover (1);,1
5_gram_verilog_file_6768.v,34,assume (id_7);,1
5_gram_verilog_file_9290.v,36,assert (1'h0);,1
5_gram_verilog_file_925.v,22,cover (id_8);,1
5_gram_verilog_file_4307.v,36,assume (id_4);,1
5_gram_verilog_file_2513.v,43,cover (id_1);,1
5_gram_verilog_file_2813.v,5,assert (id_1);,1
5_gram_verilog_file_7785.v,51,assert (id_1);,1
5_gram_verilog_file_5083.v,27,cover (1'h0 * id_7 != 1);,1
5_gram_verilog_file_1877.v,37,assume (id_2);,1
5_gram_verilog_file_201.v,37,assume (id_13 == id_13);,1
5_gram_verilog_file_2563.v,101,assume (id_34 || id_27);,1
5_gram_verilog_file_9359.v,45,assert (id_3);,1
5_gram_verilog_file_5503.v,57,assert (id_22);,1
5_gram_verilog_file_3825.v,34,assume (id_6);,1
5_gram_verilog_file_1780.v,9,assert (1 | 1'b0 == id_1);,1
5_gram_verilog_file_4584.v,99,assume (id_2 == 1'b0);,1
5_gram_verilog_file_4691.v,7,assert (1);,1
5_gram_verilog_file_1917.v,32,cover (1);,1
5_gram_verilog_file_8900.v,55,cover (1);,1
5_gram_verilog_file_7380.v,26,assume (id_7);,1
5_gram_verilog_file_1351.v,61,assume (1);,1
5_gram_verilog_file_3707.v,136,assume (id_12);,1
5_gram_verilog_file_9709.v,61,assert (1 || id_16);,1
5_gram_verilog_file_5359.v,35,assume (1);,1
5_gram_verilog_file_6091.v,26,assert (id_1 && id_3);,1
5_gram_verilog_file_7876.v,4,assert (1 || id_1);,1
5_gram_verilog_file_4097.v,18,assert (1);,1
5_gram_verilog_file_4731.v,78,cover (id_1);,1
5_gram_verilog_file_5112.v,23,assume (1);,1
5_gram_verilog_file_7784.v,5,assert (1);,1
5_gram_verilog_file_9917.v,51,assert (id_10);,1
5_gram_verilog_file_1847.v,22,cover (1);,1
5_gram_verilog_file_346.v,42,assume (1'h0);,1
5_gram_verilog_file_33.v,26,assert (1);,1
3_gram_verilog_file_9833.v,37,assert (1);,1
3_gram_verilog_file_9028.v,43,assume (id_13);,1
3_gram_verilog_file_3400.v,48,assert (1);,1
3_gram_verilog_file_1067.v,19,assert (id_2);,1
3_gram_verilog_file_15.v,5,assert (id_1);,1
3_gram_verilog_file_1936.v,8,assume (1);,1
3_gram_verilog_file_3566.v,46,assume ({id_3{1}});,1
3_gram_verilog_file_1632.v,23,cover (id_6);,1
3_gram_verilog_file_1966.v,88,assert (1);,1
3_gram_verilog_file_1606.v,98,assume (1'b0 - id_4);,1
3_gram_verilog_file_4027.v,7,assume (1);,1
3_gram_verilog_file_6668.v,12,assume (1);,1
3_gram_verilog_file_1324.v,38,assume (1);,1
3_gram_verilog_file_9336.v,35,assert (1);,1
3_gram_verilog_file_6346.v,59,assert (1'd0);,1
3_gram_verilog_file_5788.v,62,assert (1);,1
3_gram_verilog_file_840.v,58,assume (id_2);,1
3_gram_verilog_file_7651.v,28,assume (1);,1
3_gram_verilog_file_7945.v,53,cover (1);,1
3_gram_verilog_file_289.v,40,assert (id_2);,1
3_gram_verilog_file_2480.v,38,cover (1 || 1);,1
3_gram_verilog_file_1886.v,44,assume (1);,1
3_gram_verilog_file_3850.v,44,assert (1 + id_3);,1
3_gram_verilog_file_273.v,42,assume (id_2);,1
3_gram_verilog_file_7.v,32,assert ("");,1
2_gram_verilog_file_9016.v,33,assume (1'h0);,1
2_gram_verilog_file_4527.v,72,"assert ({id_2, id_2, 1} && id_2 && 1'h0);",1
2_gram_verilog_file_6452.v,48,assert (id_14);,1
2_gram_verilog_file_2284.v,61,assert (id_7);,1
2_gram_verilog_file_2256.v,102,assert (1);,1
2_gram_verilog_file_1650.v,36,cover (1'h0);,1
2_gram_verilog_file_9628.v,29,assume (1);,1
2_gram_verilog_file_7304.v,47,assume (id_8);,1
2_gram_verilog_file_6611.v,43,assume ("");,1
2_gram_verilog_file_3070.v,8,assert (id_3 ^ id_0 <-> id_0);,1
2_gram_verilog_file_9098.v,20,assert (1);,1
2_gram_verilog_file_2962.v,8,assert (1);,1
2_gram_verilog_file_3115.v,47,assert (id_1[1 : 1]);,1
2_gram_verilog_file_8766.v,11,assert (1);,1
2_gram_verilog_file_7465.v,51,assume (id_11);,1
2_gram_verilog_file_2538.v,20,assume (1);,1
2_gram_verilog_file_3409.v,24,assert (1);,1
2_gram_verilog_file_4490.v,53,assume (id_8);,1
2_gram_verilog_file_4716.v,44,assert (id_2);,1
2_gram_verilog_file_5730.v,39,assert (id_4);,1
2_gram_verilog_file_7657.v,42,assume (1'b0 == 1);,1
2_gram_verilog_file_4337.v,16,assume (1);,1
2_gram_verilog_file_81.v,41,cover (id_9);,1
2_gram_verilog_file_1278.v,8,assert (!1);,1
2_gram_verilog_file_6025.v,36,assume (id_3[1]);,1
2_gram_verilog_file_3365.v,38,cover (1'b0);,1
2_gram_verilog_file_5941.v,57,assert (id_33);,1
2_gram_verilog_file_9451.v,32,assume (1'd0);,1
2_gram_verilog_file_3062.v,42,assert (1 ? id_1 : id_1++ ? 1'b0 : 1);,1
2_gram_verilog_file_7266.v,37,assert (1);,1
2_gram_verilog_file_9024.v,8,assume (id_1);,1
2_gram_verilog_file_8190.v,21,assert (1);,1
2_gram_verilog_file_4725.v,43,assume (1);,1
2_gram_verilog_file_1977.v,32,assume (1);,1
2_gram_verilog_file_9191.v,29,assert (id_8);,1
2_gram_verilog_file_8724.v,40,assert (1);,1
2_gram_verilog_file_1553.v,12,assert (1);,1
2_gram_verilog_file_5932.v,60,cover (id_4);,1
2_gram_verilog_file_3688.v,12,cover (id_2);,1
2_gram_verilog_file_2662.v,33,assert (1'b0);,1
2_gram_verilog_file_7288.v,5,cover (id_1);,1
2_gram_verilog_file_6138.v,12,assert (1);,1
2_gram_verilog_file_604.v,48,assume (1);,1
4_gram_verilog_file_3240.v,34,cover (1);,1
4_gram_verilog_file_2311.v,16,assert (1);,1
4_gram_verilog_file_6972.v,10,assume (1);,1
4_gram_verilog_file_4290.v,36,assume (1 / id_0);,1
4_gram_verilog_file_2197.v,13,assume (id_1);,1
4_gram_verilog_file_9974.v,4,assert (id_1);,1
4_gram_verilog_file_637.v,22,cover (id_0);,1
4_gram_verilog_file_10.v,4,assert (id_1 & id_1);,1
4_gram_verilog_file_9519.v,32,assert (1);,1
4_gram_verilog_file_115.v,41,assert (id_7);,1
4_gram_verilog_file_8378.v,17,cover (1);,1
4_gram_verilog_file_7064.v,14,assert (id_2);,1
4_gram_verilog_file_1759.v,97,assume (1);,1
4_gram_verilog_file_6050.v,37,assume (id_8);,1
4_gram_verilog_file_2199.v,41,assume (1);,1
4_gram_verilog_file_8864.v,34,assert (id_12);,1
4_gram_verilog_file_4669.v,4,assert (id_1);,1
4_gram_verilog_file_4727.v,57,assume (id_0);,1
4_gram_verilog_file_2449.v,28,cover (id_10);,1
4_gram_verilog_file_8429.v,50,assert (id_9);,1
4_gram_verilog_file_6384.v,57,cover (id_8);,1
4_gram_verilog_file_1332.v,35,assume (id_6);,1
4_gram_verilog_file_3498.v,42,assert (id_5);,1
4_gram_verilog_file_4010.v,9,assume (1);,1
4_gram_verilog_file_649.v,18,assert (id_7 ^ 1);,1
4_gram_verilog_file_3794.v,34,assert (1);,1
4_gram_verilog_file_7398.v,32,assert (id_1);,1
4_gram_verilog_file_7626.v,54,assert (id_8);,1
4_gram_verilog_file_586.v,23,cover (id_8);,1
4_gram_verilog_file_9989.v,17,assert (id_4);,1
4_gram_verilog_file_8892.v,43,assert (1);,1
4_gram_verilog_file_7930.v,34,cover (1'b0 && id_5);,1
4_gram_verilog_file_1309.v,24,assert (id_2);,1
4_gram_verilog_file_2463.v,4,assert (1);,1
4_gram_verilog_file_5573.v,32,assume (id_6 >= 1);,1
4_gram_verilog_file_2672.v,13,assume (id_2);,1
4_gram_verilog_file_9273.v,6,assert (id_1);,1
4_gram_verilog_file_4243.v,41,cover (1);,1
4_gram_verilog_file_9305.v,64,cover (1);,1
4_gram_verilog_file_8398.v,42,assume (id_2);,1
4_gram_verilog_file_4486.v,31,assert (1'b0 - 1);,1
4_gram_verilog_file_9660.v,59,assume (id_3);,1
4_gram_verilog_file_5004.v,15,assert (1);,1
4_gram_verilog_file_4253.v,54,assert (1);,1
4_gram_verilog_file_5979.v,49,assume (id_0);,1
4_gram_verilog_file_3355.v,34,assert (1);,1
4_gram_verilog_file_980.v,55,assume (1);,1
4_gram_verilog_file_7688.v,49,cover (id_9);,1
4_gram_verilog_file_4341.v,25,assert (id_3 == 1);,1
4_gram_verilog_file_7104.v,23,assume (1);,1
4_gram_verilog_file_3144.v,7,assume (1);,1
4_gram_verilog_file_9220.v,15,assume (id_13);,1
4_gram_verilog_file_7418.v,48,assume (~id_6);,1
4_gram_verilog_file_6405.v,9,cover (id_1);,1
4_gram_verilog_file_8949.v,16,assert (id_3);,1
4_gram_verilog_file_7286.v,26,assert (id_10);,1
4_gram_verilog_file_7136.v,24,assert (1);,1
4_gram_verilog_file_347.v,92,assert (id_16);,1
4_gram_verilog_file_7004.v,20,assume (id_1);,1
4_gram_verilog_file_7779.v,23,assert ("");,1
4_gram_verilog_file_2194.v,24,assume (id_3);,1
4_gram_verilog_file_540.v,31,assume (1);,1
4_gram_verilog_file_6417.v,5,assert (id_1);,1
4_gram_verilog_file_5628.v,10,cover (1);,1
4_gram_verilog_file_5628.v,12,assume (id_2);,1
4_gram_verilog_file_5628.v,21,assert (id_3);,1
4_gram_verilog_file_189.v,55,cover (id_20);,1
4_gram_verilog_file_8723.v,6,cover (1);,1
4_gram_verilog_file_8973.v,49,cover (id_17);,1
4_gram_verilog_file_1823.v,102,assert (1);,1
4_gram_verilog_file_5676.v,7,assume (1'd0);,1
4_gram_verilog_file_7738.v,60,assert (1);,1
4_gram_verilog_file_6961.v,24,assume (1);,1
4_gram_verilog_file_2291.v,4,assert (1'h0);,1
4_gram_verilog_file_5097.v,4,cover (1);,1
4_gram_verilog_file_2751.v,5,assert (id_1);,1
4_gram_verilog_file_2064.v,33,assume (id_8);,1
4_gram_verilog_file_8517.v,36,assume (1);,1
4_gram_verilog_file_8471.v,63,assume (id_4);,1
4_gram_verilog_file_8122.v,12,cover (id_4);,1
4_gram_verilog_file_1536.v,18,cover (1);,1
4_gram_verilog_file_7881.v,25,assert (1);,1
4_gram_verilog_file_3580.v,31,assume (id_6);,1
4_gram_verilog_file_8255.v,21,assert (id_2);,1
4_gram_verilog_file_4411.v,15,cover (id_0);,1
4_gram_verilog_file_3245.v,14,assume (id_1 + id_2);,1
4_gram_verilog_file_8054.v,23,assume (1'd0);,1
4_gram_verilog_file_1457.v,44,assume (1);,1
4_gram_verilog_file_4883.v,4,assert (id_1);,1
4_gram_verilog_file_9820.v,29,cover (1);,1
4_gram_verilog_file_2356.v,30,assert (id_2);,1
4_gram_verilog_file_7374.v,5,cover (id_1);,1
4_gram_verilog_file_8639.v,28,assert (id_3);,1
4_gram_verilog_file_3225.v,37,cover (1 && 1);,1
4_gram_verilog_file_385.v,20,assert (1);,1
4_gram_verilog_file_8972.v,39,assume (1);,1
4_gram_verilog_file_9233.v,20,cover (id_3);,1
4_gram_verilog_file_6822.v,82,assume (1);,1
6_gram_verilog_file_586.v,39,assert (id_4);,1
6_gram_verilog_file_133.v,20,assert (id_4);,1
6_gram_verilog_file_6539.v,55,cover (1);,1
6_gram_verilog_file_8081.v,72,assert (1);,1
6_gram_verilog_file_9970.v,61,assume (1);,1
6_gram_verilog_file_1342.v,144,assert (1);,1
6_gram_verilog_file_6822.v,25,cover (1'd0);,1
6_gram_verilog_file_645.v,28,cover (1);,1
6_gram_verilog_file_9346.v,37,assume (id_1);,1
6_gram_verilog_file_4333.v,42,assume (1);,1
6_gram_verilog_file_315.v,41,assume (id_15);,1
6_gram_verilog_file_3867.v,60,assume (id_9);,1
6_gram_verilog_file_3186.v,9,assume (1 + 1);,1
6_gram_verilog_file_4170.v,76,assume (1);,1
6_gram_verilog_file_5317.v,154,assume (id_60 - id_6);,1
6_gram_verilog_file_4227.v,31,assert (id_4);,1
6_gram_verilog_file_9747.v,28,assume (1);,1
6_gram_verilog_file_3058.v,9,assert (1);,1
6_gram_verilog_file_9682.v,40,assume (1'b0);,1
6_gram_verilog_file_5662.v,48,cover (1);,1
6_gram_verilog_file_9867.v,13,assume (1 == id_7);,1
6_gram_verilog_file_8144.v,54,assert (1);,1
6_gram_verilog_file_8407.v,24,assert (1);,1
6_gram_verilog_file_7851.v,60,assume (id_17);,1
6_gram_verilog_file_1380.v,11,cover (id_3);,1
6_gram_verilog_file_31.v,66,cover (id_3);,1
6_gram_verilog_file_3597.v,18,assert (id_3);,1
6_gram_verilog_file_2143.v,32,assume (id_4);,1
6_gram_verilog_file_2143.v,33,cover (id_6);,1
6_gram_verilog_file_2001.v,39,assert (1'd0);,1
6_gram_verilog_file_3529.v,29,assume (id_1);,1
6_gram_verilog_file_7071.v,5,assert (id_1 - 1);,1
6_gram_verilog_file_3862.v,48,assert (1);,1
6_gram_verilog_file_916.v,39,assert (id_2);,1
6_gram_verilog_file_4094.v,54,assert (1'h0);,1
6_gram_verilog_file_1383.v,59,assert (id_6);,1
6_gram_verilog_file_9414.v,52,assert (id_1 || id_9);,1
6_gram_verilog_file_3546.v,43,assume (1);,1
6_gram_verilog_file_1078.v,18,cover (id_2);,1
6_gram_verilog_file_1476.v,27,assume (1 || 1 || id_1);,1
6_gram_verilog_file_7674.v,49,assert (1);,1
6_gram_verilog_file_6209.v,17,assert (1'b0);,1
6_gram_verilog_file_9998.v,32,assert (1'b0);,1
6_gram_verilog_file_1448.v,40,assert (id_2 - 1);,1
6_gram_verilog_file_7059.v,29,assume (1);,1
6_gram_verilog_file_4808.v,39,assume (id_1 == "");,1
6_gram_verilog_file_8267.v,11,cover (1);,1
6_gram_verilog_file_5206.v,45,cover (id_5);,1
6_gram_verilog_file_5495.v,14,assert (1);,1
6_gram_verilog_file_3465.v,11,cover (1'b0);,1
6_gram_verilog_file_8643.v,37,assert (1);,1
6_gram_verilog_file_3507.v,11,assert (id_3);,1
6_gram_verilog_file_7737.v,104,assert (id_25[1]);,1
6_gram_verilog_file_7885.v,24,assume (id_7);,1
6_gram_verilog_file_9054.v,12,assume (id_3);,1
6_gram_verilog_file_327.v,27,assert (~id_5);,1
6_gram_verilog_file_2563.v,45,assert (id_12);,1
6_gram_verilog_file_1900.v,8,"cover ({id_3, id_3});",1
6_gram_verilog_file_7286.v,26,assert (1);,1
6_gram_verilog_file_4872.v,11,assume (id_3);,1
6_gram_verilog_file_6654.v,44,assume (id_5);,1
6_gram_verilog_file_8862.v,49,assume (1);,1
6_gram_verilog_file_6312.v,11,assert (id_5);,1
6_gram_verilog_file_8331.v,40,assume (id_4);,1
6_gram_verilog_file_1183.v,8,assert (id_1);,1
6_gram_verilog_file_8438.v,44,assert (1'b0);,1
6_gram_verilog_file_3175.v,48,assert (id_16);,1
6_gram_verilog_file_3196.v,19,assert (1);,1
6_gram_verilog_file_8096.v,31,assume (id_7);,1
6_gram_verilog_file_611.v,31,assert (id_5);,1
6_gram_verilog_file_8342.v,8,cover (1'b0);,1
6_gram_verilog_file_1951.v,25,assert (id_1);,1
6_gram_verilog_file_840.v,21,assert (id_5);,1
6_gram_verilog_file_7279.v,42,assume (1'b0 && id_4);,1
6_gram_verilog_file_3757.v,37,assert (1);,1
6_gram_verilog_file_5094.v,45,assert (id_0#1);,1
6_gram_verilog_file_712.v,51,cover (1 + 1);,1
6_gram_verilog_file_3755.v,54,assume (id_3);,1
6_gram_verilog_file_8061.v,14,assume (id_1 || 1'h0);,1
6_gram_verilog_file_346.v,19,assert (1'd0);,1
6_gram_verilog_file_4882.v,12,assert (id_0);,1
6_gram_verilog_file_1529.v,67,assume (1);,1
6_gram_verilog_file_4092.v,6,assert (id_15);,1
6_gram_verilog_file_1287.v,15,cover (1);,1
6_gram_verilog_file_3076.v,44,assume (id_8);,1
6_gram_verilog_file_6367.v,25,assume (1'b0);,1
6_gram_verilog_file_6367.v,26,assert (1 & id_2);,1
6_gram_verilog_file_1669.v,43,assert (id_16);,1
6_gram_verilog_file_7655.v,44,assert (1);,1
6_gram_verilog_file_9899.v,31,assume (id_9);,1
6_gram_verilog_file_1472.v,23,assume (`pp_9);,1
6_gram_verilog_file_8909.v,48,assume (1);,1
6_gram_verilog_file_5543.v,6,assume (id_1);,1
6_gram_verilog_file_7088.v,51,assume (id_14 || 1);,1
6_gram_verilog_file_9555.v,16,assert (1);,1
6_gram_verilog_file_4602.v,5,assume (1);,1
6_gram_verilog_file_2860.v,38,cover (1 == 1);,1
6_gram_verilog_file_9997.v,6,assert (1 || 1);,1
6_gram_verilog_file_5610.v,42,assert (id_8);,1
6_gram_verilog_file_378.v,24,cover (1 || 1);,1
6_gram_verilog_file_8278.v,55,assert (1);,1
6_gram_verilog_file_5650.v,44,assert (id_4);,1
6_gram_verilog_file_7030.v,85,assume (id_4);,1
6_gram_verilog_file_1971.v,6,assert (id_1);,1
6_gram_verilog_file_4942.v,76,assume (1);,1
6_gram_verilog_file_6577.v,34,cover (1'b0 ==? id_7);,1
6_gram_verilog_file_7141.v,48,assert (id_6);,1
6_gram_verilog_file_2439.v,10,cover ("");,1
6_gram_verilog_file_3711.v,66,assert (1);,1
6_gram_verilog_file_1524.v,15,assume (id_9);,1
6_gram_verilog_file_3037.v,16,assert (~1);,1
6_gram_verilog_file_2573.v,95,assume (id_21 - 1);,1
6_gram_verilog_file_153.v,20,assert (1);,1
6_gram_verilog_file_8476.v,41,assert (id_2);,1
6_gram_verilog_file_4779.v,36,assert (1);,1
6_gram_verilog_file_2607.v,13,cover (1);,1
6_gram_verilog_file_5007.v,31,assert (1);,1
6_gram_verilog_file_8517.v,21,assume (1 && id_1 == 1);,1
6_gram_verilog_file_536.v,38,assert (1'b0);,1
6_gram_verilog_file_8786.v,22,cover (id_3);,1
6_gram_verilog_file_2229.v,66,assert (id_2);,1
6_gram_verilog_file_7159.v,27,assume (1 & id_3 & 1);,1
6_gram_verilog_file_6324.v,7,assert (id_1 || 1'd0);,1
6_gram_verilog_file_1815.v,67,assume (1);,1
6_gram_verilog_file_6305.v,32,assume (1'b0);,1
6_gram_verilog_file_8843.v,40,assert (id_6);,1
6_gram_verilog_file_9635.v,47,cover (id_6 || 1 || id_9 || id_9);,1
6_gram_verilog_file_1481.v,53,assert (1);,1
6_gram_verilog_file_1481.v,54,cover (1);,1
6_gram_verilog_file_7988.v,42,assume (id_7 || id_12 && 1 || id_12);,1
6_gram_verilog_file_7853.v,72,assume (id_10 - 1'b0);,1
6_gram_verilog_file_642.v,29,assume (id_8);,1
6_gram_verilog_file_5576.v,42,assert (!id_6);,1
6_gram_verilog_file_2490.v,119,assume (1 != id_7);,1
6_gram_verilog_file_5235.v,92,assert (1 == 1'b0);,1
6_gram_verilog_file_2265.v,70,cover ({1{id_5 - id_6}} || id_3);,1
6_gram_verilog_file_6672.v,23,assert (1);,1
6_gram_verilog_file_9325.v,17,assert (id_3);,1
6_gram_verilog_file_6163.v,48,assert (1'b0);,1
6_gram_verilog_file_1387.v,34,assume (1'h0 !=? ~id_3);,1
6_gram_verilog_file_4135.v,36,assert (1);,1
6_gram_verilog_file_6876.v,64,assert (1);,1
6_gram_verilog_file_9667.v,30,assert (id_1);,1
6_gram_verilog_file_266.v,13,assume (1'b0);,1
6_gram_verilog_file_4115.v,18,assert (id_5);,1
6_gram_verilog_file_1846.v,22,assume (1);,1
6_gram_verilog_file_9422.v,31,assume (1);,1
6_gram_verilog_file_1273.v,28,assert (id_1);,1
6_gram_verilog_file_7581.v,85,assert (1 - id_3);,1
6_gram_verilog_file_8076.v,37,assume (1);,1
6_gram_verilog_file_5115.v,23,assert (id_10);,1
6_gram_verilog_file_5566.v,20,assert (1);,1
6_gram_verilog_file_690.v,9,assert (1);,1
6_gram_verilog_file_6900.v,30,cover (id_6[1] || id_1);,1
6_gram_verilog_file_9134.v,19,cover (id_1 == 1);,1
6_gram_verilog_file_3100.v,56,assert (id_6);,1
6_gram_verilog_file_8345.v,53,assert (1'd0 || 1);,1
6_gram_verilog_file_419.v,35,assert (id_2);,1
6_gram_verilog_file_5802.v,23,assume (id_9 == 1);,1
6_gram_verilog_file_4392.v,34,assert (1);,1
6_gram_verilog_file_4392.v,35,assert (1);,1
6_gram_verilog_file_1136.v,13,assume (1'h0 * 1);,1
6_gram_verilog_file_8898.v,6,cover (id_2);,1
6_gram_verilog_file_6129.v,23,assert (1'b0);,1
6_gram_verilog_file_2244.v,9,assert (id_0);,1
6_gram_verilog_file_7221.v,65,assert (id_14 + id_13 || 1);,1
6_gram_verilog_file_1352.v,32,assume (1'b0);,1
6_gram_verilog_file_3115.v,38,assert (id_2);,1
6_gram_verilog_file_6870.v,61,assume (id_2.id_9);,1
6_gram_verilog_file_407.v,41,assume (id_4);,1
6_gram_verilog_file_219.v,68,assert (1'b0);,1
6_gram_verilog_file_5063.v,28,assert (1);,1
6_gram_verilog_file_2502.v,38,cover (1);,1
6_gram_verilog_file_9942.v,18,assert (id_10);,1
6_gram_verilog_file_702.v,11,assert (id_3);,1
6_gram_verilog_file_3519.v,40,assert (id_3);,1
6_gram_verilog_file_7113.v,5,assert (id_1);,1
6_gram_verilog_file_3374.v,56,assume (1 - id_2);,1
6_gram_verilog_file_6700.v,38,assert (id_17);,1
6_gram_verilog_file_6103.v,22,assume (1);,1
2805_icestation-32_hardware_ics_adpcm.v,999,assume(reset);,1
2805_icestation-32_hardware_ics_adpcm.v,1011,assume(!reset);,1
2805_icestation-32_hardware_ics_adpcm.v,1014,assume(pcm_data_ready);,1
2805_icestation-32_hardware_ics_adpcm.v,1015,assume(pcm_read_data == 0);,1
2805_icestation-32_hardware_ics_adpcm.v,1023,assert(output_counter <= OUTPUT_INTERVAL);,1
2805_icestation-32_hardware_ics_adpcm.v,1038,assert(gb_write_busy);,1
2805_icestation-32_hardware_ics_adpcm.v,1044,assert(gb_write_busy);,1
2805_icestation-32_hardware_ics_adpcm.v,1054,assert(!ch_write_ready);,1
2805_icestation-32_hardware_ics_adpcm.v,1060,assert(ch_write_ready);,1
2805_icestation-32_hardware_ics_adpcm.v,1086,assert(!ch_write_ready);,1
2805_icestation-32_hardware_ics_adpcm.v,1092,assert(!status_read_ready);,1
2805_icestation-32_hardware_ics_adpcm.v,1098,assert(status_read_ready);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,159,restrict(restart);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,164,assume(!restart);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,171,assert(!output_valid);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,189,assert(sprite_test_id == 8'h00);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,190,assert(!finished);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,191,assert(!output_valid);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,192,assert(!hit_list_write_en);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,202,assert(output_valid);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,203,assert(hit_list_write_en);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,213,assert(hit_list_index == 8'h00);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,214,assert(hit_list_write_en);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,217,assert(hit_list_index == 8'hff);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,218,assert(!hit_list_write_en);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,258,assert(flipped_y_intersect < input_sprite_height);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,264,assert(sprite_pos > raster_pos);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,266,assert(width_select_out == input_width_select_in);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,268,assert(hit_list_write_en);,1
2818_icestation-32_hardware_vdp_vdp_sprite_raster_collision.v,276,assert(!hit_list_write_en);,1
652_Hazard3_test_formal_bus_compliance_1port_tb.v,135,assume(pwrup_ack_nxt);,1
652_Hazard3_test_formal_bus_compliance_1port_tb.v,138,assume(!pwrup_ack_nxt);,1
652_Hazard3_test_formal_bus_compliance_1port_tb.v,143,assume(!dbg_sbus_vld);,1
652_Hazard3_test_formal_bus_compliance_1port_tb.v,152,assert(htrans == 2'h0);,1
2747_hrm-cpu_verilog_PC.v,44,assume(rst);,1
2701_hdl_rosetta_stone_verilog_formal_formal_axistream_pack.v,73,assume(init_1z || rst);,1
2701_hdl_rosetta_stone_verilog_formal_formal_axistream_pack.v,75,cover(dest_tvalid && dest_tready);,1
353_Digital-IDE_resources_netlist_resources_kernel_share_ecp5_cells_sim.v,548,assert(A0m==A1m);,1
353_Digital-IDE_resources_netlist_resources_kernel_share_ecp5_cells_sim.v,549,assert(B0m==B1m);,1
353_Digital-IDE_resources_netlist_resources_kernel_share_ecp5_cells_sim.v,550,assert(C0m==C1m);,1
353_Digital-IDE_resources_netlist_resources_kernel_share_ecp5_cells_sim.v,551,assert(D0m==D1m);,1
3576_picorv32_scripts_smtbmc_mulcmp.v,63,assert(pcpi_wr_0 == pcpi_wr_1);,1
3576_picorv32_scripts_smtbmc_mulcmp.v,64,assert(pcpi_rd_0 == pcpi_rd_1);,1
3576_picorv32_scripts_smtbmc_mulcmp.v,73,assert(pcpi_wr_0 == pcpi_wr_ref);,1
3576_picorv32_scripts_smtbmc_mulcmp.v,74,assert(pcpi_rd_0 == pcpi_rd_ref);,1
3576_picorv32_scripts_smtbmc_mulcmp.v,84,assert(pcpi_wr_1 == pcpi_wr_ref);,1
3576_picorv32_scripts_smtbmc_mulcmp.v,85,assert(pcpi_rd_1 == pcpi_rd_ref);,1
646_Hazard3_hdl_arith_hazard3_shift_barrel.v,58,assert(dout == din >> shamt);,1
646_Hazard3_hdl_arith_hazard3_shift_barrel.v,60,assert(dout == din << shamt);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,6,assert(outputs[0] == scan_clk_in);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,7,assert(outputs[1] == scan_data_in);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,8,assert(scan_clk_out == inputs[0]);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,9,assert(scan_data_out == inputs[1]);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,10,assert(scan_select == inputs[2]);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,11,assert(scan_latch_en == inputs[3]);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,14,assert(la_scan_data_out == scan_data_in);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,15,assert(scan_clk_out == la_scan_clk_in);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,16,assert(scan_data_out == la_scan_data_in);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,17,assert(scan_select == la_scan_select);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,18,assert(scan_latch_en == la_scan_latch_en);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,21,assert(int_scan_data_out == scan_data_out);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,22,assert(scan_clk_out == int_scan_clk_out);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,23,assert(scan_data_in == int_scan_data_in);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,24,assert(scan_clk_in == int_scan_clk_in);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,25,assert(scan_select == int_scan_select);,1
3878_tinytapeout-mpw7_verilog_rtl_scan_controller_properties.v,26,assert(scan_latch_en == int_scan_latch_en);,1
645_Hazard3_hdl_arith_hazard3_muldiv_seq.v,277,assert(op_rdy);,1
645_Hazard3_hdl_arith_hazard3_muldiv_seq.v,293,assert(alive);,1
647_Hazard3_hdl_hazard3_csr.v,1389,assume(except == EXCEPT_NONE || except == EXCEPT_MRET);,1
647_Hazard3_hdl_hazard3_csr.v,1416,assert(!wen);,1
647_Hazard3_hdl_hazard3_csr.v,1420,assert(except != EXCEPT_MRET);,1
647_Hazard3_hdl_hazard3_csr.v,1424,assert(except != EXCEPT_MRET);,1
647_Hazard3_hdl_hazard3_csr.v,1446,assert(trap_enter_vld);,1
647_Hazard3_hdl_hazard3_csr.v,1448,assert(!trap_is_irq);,1
647_Hazard3_hdl_hazard3_csr.v,1453,assert(except == EXCEPT_EBREAK);,1
647_Hazard3_hdl_hazard3_csr.v,1458,assert(!loadstore_dphase_pending);,1
647_Hazard3_hdl_hazard3_csr.v,1466,assert(trap_enter_vld);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,6,assert(outputs[0] == scan_clk_in);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,7,assert(outputs[1] == scan_data_in);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,8,assert(scan_clk_out == inputs[0]);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,9,assert(scan_data_out == inputs[1]);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,10,assert(scan_select == inputs[2]);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,11,assert(scan_latch_en == inputs[3]);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,14,assert(la_scan_data_out == scan_data_in);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,15,assert(scan_clk_out == la_scan_clk_in);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,16,assert(scan_data_out == la_scan_data_in);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,17,assert(scan_select == la_scan_select);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,18,assert(scan_latch_en == la_scan_latch_en);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,21,assert(int_scan_data_out == scan_data_out);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,22,assert(scan_clk_out == int_scan_clk_out);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,23,assert(scan_data_in == int_scan_data_in);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,24,assert(scan_clk_in == int_scan_clk_in);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,25,assert(scan_select == int_scan_select);,1
1529_Sarfraz_TinyTapeout_verilog_rtl_scan_controller_properties.v,26,assert(scan_latch_en == int_scan_latch_en);,1
4066_tt06_usb_cdc_devices_src_device0_arcade_io_device.v,116,cover(test_counter==20);,1
4066_tt06_usb_cdc_devices_src_device0_arcade_io_device.v,126,cover(test_counter==20);,1
653_Hazard3_test_formal_bus_compliance_2port_tb.v,161,assume(pwrup_ack_nxt);,1
653_Hazard3_test_formal_bus_compliance_2port_tb.v,164,assume(!pwrup_ack_nxt);,1
653_Hazard3_test_formal_bus_compliance_2port_tb.v,169,assume(!dbg_sbus_vld);,1
653_Hazard3_test_formal_bus_compliance_2port_tb.v,178,assert(i_htrans == 2'h0);,1
653_Hazard3_test_formal_bus_compliance_2port_tb.v,179,assert(d_htrans == 2'h0);,1
654_Hazard3_test_formal_frontend_fetch_match_tb.v,163,assume(jump_target == jump_target_prev);,1
654_Hazard3_test_formal_frontend_fetch_match_tb.v,164,assume(!jump_target_vld);,1
654_Hazard3_test_formal_frontend_fetch_match_tb.v,200,assert(cir_vld < 2'd3);,1
654_Hazard3_test_formal_frontend_fetch_match_tb.v,204,assert(cir[15:0] == pc[16:1]);,1
654_Hazard3_test_formal_frontend_fetch_match_tb.v,210,assert(cir[31:16] == pc[16:1] + 16'd1);,1
327_Digital-IDE_resources_kernel_share_ecp5_cells_sim.v,548,assert(A0m==A1m);,1
327_Digital-IDE_resources_kernel_share_ecp5_cells_sim.v,549,assert(B0m==B1m);,1
327_Digital-IDE_resources_kernel_share_ecp5_cells_sim.v,550,assert(C0m==C1m);,1
327_Digital-IDE_resources_kernel_share_ecp5_cells_sim.v,551,assert(D0m==D1m);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,984,assert(reset_counter < OPT_MIN_RESET);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1065,assume(!S_AXI_ARESETN);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1066,assert(!M_AXI_ARESETN);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1122,assume(!S_AXI_AWVALID);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1123,assume(!S_AXI_WVALID);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1124,assert(aw_count == 0);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1125,assert(w_count == 0);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1126,assert(!M_AXI_AWVALID);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1127,assert(!M_AXI_WVALID);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1135,assume(!S_AXI_ARVALID);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1136,assert(r_count == 0);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1137,assert(!S_AXI_RVALID);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1138,assert(!M_AXI_ARVALID);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1178,assert(aw_count == faxils_awr_outstanding);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1179,assert(w_count == faxils_wr_outstanding);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1180,assert(r_count == faxils_rd_outstanding);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1250,assert(!o_write_fault);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1252,assert(!o_read_fault);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1264,assert(!aw_stall_limit);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1265,assert(!w_stall_limit);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1266,assert(!w_ack_limit);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1268,assert(!r_stall_limit);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1269,assert(!r_ack_limit);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1273,assert(downstream_aw_count == faxilm_awr_outstanding);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1274,assert(downstream_w_count == faxilm_wr_outstanding);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1275,assert(downstream_r_count == faxilm_rd_outstanding);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1297,assert(f_axi_awstall == aw_stall_counter);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1301,assert(f_axi_wstall == w_stall_counter);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1305,assert(f_axi_arstall == r_stall_counter);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1356,cover(faulted && M_AXI_ARESETN && S_AXI_BVALID);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1359,cover(faulted && M_AXI_ARESETN && S_AXI_RVALID);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1372,cover(cvr_writes > 5);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1384,cover(cvr_reads > 5);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1408,assume(S_AXI_AWADDR != fc_never_write_addr);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1412,assert(M_AXI_AWADDR != fc_never_write_addr);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1419,"assume({ S_AXI_WDATA, S_AXI_WSTRB } != fc_never_write_data);",1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1423,"assert({ M_AXI_WDATA, M_AXI_WSTRB } != fc_never_write_data);",1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1430,assume(S_AXI_ARADDR != fc_never_read_addr);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1434,assert(M_AXI_ARADDR != fc_never_read_addr);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1441,assume(M_AXI_RDATA != fc_never_read_data);,1
2537_conspiracion_rtl_wb2axip_axilsafety.v,1445,assert(S_AXI_RDATA != fc_never_read_data);,1
650_Hazard3_hdl_hazard3_power_ctrl.v,140,assert(past_sleeping);,1
650_Hazard3_hdl_hazard3_power_ctrl.v,142,assert(sleeping_on_wfi|| sleeping_on_block);,1
650_Hazard3_hdl_hazard3_power_ctrl.v,145,assert(!past_stall_release);,1
650_Hazard3_hdl_hazard3_power_ctrl.v,148,assert(allow_power_down || allow_clkgate);,1
3274_micro_benchmark_dsp_dspfilters_rtl_delayw.v,201,assume(i_reset);,1
3274_micro_benchmark_dsp_dspfilters_rtl_delayw.v,205,assume(i_ce);,1
3274_micro_benchmark_dsp_dspfilters_rtl_delayw.v,210,assert(w_delay == FIXED_DELAY);,1
3274_micro_benchmark_dsp_dspfilters_rtl_delayw.v,244,assert(shiftreg[DW-1:0] == o_delayed);,1
298_Digital-IDE_node_modules_HDLkernel_resources_kernel_share_ecp5_cells_sim.v,548,assert(A0m==A1m);,1
298_Digital-IDE_node_modules_HDLkernel_resources_kernel_share_ecp5_cells_sim.v,549,assert(B0m==B1m);,1
298_Digital-IDE_node_modules_HDLkernel_resources_kernel_share_ecp5_cells_sim.v,550,assert(C0m==C1m);,1
298_Digital-IDE_node_modules_HDLkernel_resources_kernel_share_ecp5_cells_sim.v,551,assert(D0m==D1m);,1
2820_icestation-32_hardware_vdp_vdp_vga_timing.v,147,restrict(reset);,1
2820_icestation-32_hardware_vdp_vdp_vga_timing.v,158,assume(!reset);,1
assertions_sequences.v,6,assert property(s_a) $display("Assertion Passed");,2
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
axis_fifo_trd.v,79,assert(used != 3);,1
axis_fifo_trd.v,81,cover(used == 0);,1
axis_fifo_trd.v,82,cover(used == 1);,1
axis_fifo_trd.v,83,cover(used == 2);,1
picorv32.v,2204,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2207,restrict property (resetn != $initstate);,1
picorv32.v,2217,assert (mem_wstrb == 0);,1
picorv32.v,2229,assert (ok);,1
picorv32.v,2247,assert(mem_valid);,1
picorv32.v,2248,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2249,assert(mem_wstrb == 0);,1
picorv32.v,2252,assert(mem_valid);,1
picorv32.v,2253,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2254,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2255,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2258,assert(!mem_valid || mem_ready);,1
shifter.v,80,assume (!i_start);,1
shifter.v,91,assume (!i_start);,1
discrete.v,450,assert (!o_alu_sub);,1
discrete.v,515,assert (o_rs1_rdata == 32'h0);,1
discrete.v,517,assert (o_rs2_rdata == 32'h0);,1
discrete.v,569,assume (!i_sub);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
picorv32.v,2155,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2158,restrict property (resetn != $initstate);,1
picorv32.v,2168,assert (mem_wstrb == 0);,1
picorv32.v,2180,assert (ok);,1
picorv32.v,2198,assert(mem_valid);,1
picorv32.v,2199,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2200,assert(mem_wstrb == 0);,1
picorv32.v,2203,assert(mem_valid);,1
picorv32.v,2204,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2205,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2206,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2209,assert(!mem_valid || mem_ready);,1
picorv32.v,2039,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2042,restrict property (resetn != $initstate);,1
picorv32.v,2052,assert (mem_wstrb == 0);,1
picorv32.v,2064,assert (ok);,1
picorv32.v,2082,assert(mem_valid);,1
picorv32.v,2083,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2084,assert(mem_wstrb == 0);,1
picorv32.v,2087,assert(mem_valid);,1
picorv32.v,2088,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2089,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2090,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2093,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
DW_lp_fifoctl_1c_df.v,1147,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
DW_lp_fifoctl_1c_df.v,1152,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
picorv32.v,2098,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2101,restrict property (resetn != $initstate);,1
picorv32.v,2111,assert (mem_wstrb == 0);,1
picorv32.v,2123,assert (ok);,1
picorv32.v,2141,assert(mem_valid);,1
picorv32.v,2142,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2143,assert(mem_wstrb == 0);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2149,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2152,assert(!mem_valid || mem_ready);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
test_cache.v,244,assert(access_tag_hit == 'h1);,1
test_cache.v,248,assert(access_data == DATA1);,1
test_cache.v,265,assert(access_tag_hit == 'h1);,1
test_cache.v,269,assert(access_data == DATA2);,1
test_cache.v,286,assert(access_tag_hit == 'h1);,1
test_cache.v,290,assert(access_data == DATA3);,1
test_cache.v,307,assert(access_tag_hit == 'h1);,1
test_cache.v,311,assert(access_data == DATA4);,1
test_cache.v,325,assert(access_tag_hit == 'h0);,1
test_ifetch_tag_stage.v,108,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,109,assert(pc_to_fetch_icache == 'h0);,1
test_ifetch_tag_stage.v,110,assert(selected_warp_idx == 'b0);,1
test_ifetch_tag_stage.v,112,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,113,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,117,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,118,assert(pc_to_fetch_icache == 'h4);,1
test_ifetch_tag_stage.v,119,assert(selected_warp_idx == 'b0);,1
test_ifetch_tag_stage.v,121,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,122,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,129,assert(ift_to_ifd_valid == 1'b0);,1
test_ifetch_tag_stage.v,130,assert(ift_to_icache_fetch_en == 1'b0);,1
test_ifetch_tag_stage.v,134,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,135,assert(pc_to_fetch_icache == 'h8);,1
test_ifetch_tag_stage.v,136,assert(selected_warp_idx == 'b0);,1
test_ifetch_tag_stage.v,138,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,139,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,147,assert(ift_to_ifd_valid == 1'b0);,1
test_ifetch_tag_stage.v,148,assert(ift_to_icache_fetch_en == 1'b0);,1
test_ifetch_tag_stage.v,158,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,159,assert(pc_to_fetch_icache == 'h8);,1
test_ifetch_tag_stage.v,160,assert(selected_warp_idx == 'b0);,1
test_ifetch_tag_stage.v,162,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,163,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,167,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,168,assert(pc_to_fetch_icache == 'hc);,1
test_ifetch_tag_stage.v,169,assert(selected_warp_idx == 'b0);,1
test_ifetch_tag_stage.v,171,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,172,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,179,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,180,assert(pc_to_fetch_icache == 'h0);,1
test_ifetch_tag_stage.v,181,assert(selected_warp_idx == 'h1);,1
test_ifetch_tag_stage.v,183,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,184,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,188,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,189,assert(pc_to_fetch_icache == 'h10);,1
test_ifetch_tag_stage.v,190,assert(selected_warp_idx == 'h0);,1
test_ifetch_tag_stage.v,192,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,193,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,200,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,201,assert(pc_to_fetch_icache == 'h4);,1
test_ifetch_tag_stage.v,202,assert(selected_warp_idx == 'h1);,1
test_ifetch_tag_stage.v,204,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,205,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,212,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,213,assert(pc_to_fetch_icache == 'h0);,1
test_ifetch_tag_stage.v,214,assert(selected_warp_idx == 'h2);,1
test_ifetch_tag_stage.v,216,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,217,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,224,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,225,assert(pc_to_fetch_icache == 'h0);,1
test_ifetch_tag_stage.v,226,assert(selected_warp_idx == 'h3);,1
test_ifetch_tag_stage.v,228,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,229,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_ifetch_tag_stage.v,236,assert(ift_to_ifd_valid == 1'b1);,1
test_ifetch_tag_stage.v,237,assert(pc_to_fetch_icache == 'h14);,1
test_ifetch_tag_stage.v,238,assert(selected_warp_idx == 'h0);,1
test_ifetch_tag_stage.v,240,assert(ift_to_icache_fetch_en == 1'b1);,1
test_ifetch_tag_stage.v,241,assert(ift_to_icache_fetch_set_idx == 'b0);,1
test_rr_arbiter.v,38,assert(grant_oh == 4'b0001); // priority: 0001 update_en <= 1'b0;,2
test_rr_arbiter.v,40,assert(grant_oh == 4'b0001); // priority: 0001 update_en <= 1'b0;,2
test_rr_arbiter.v,45,assert(grant_oh == 4'b0001); // priority: 0001 update_en <= 1'b0;,2
test_rr_arbiter.v,49,assert(grant_oh == 4'b0010); // priority: 0010 update_en: 0 update_en <= 1'b1;,2
test_rr_arbiter.v,51,assert(grant_oh == 4'b0010); // priority: 0010 update_en: 0 update_en <= 1'b1;,2
test_rr_arbiter.v,55,assert(grant_oh == 4'b0010); // priority: 0010 update_en: 0 update_en <= 1'b1;,2
test_rr_arbiter.v,60,assert(grant_oh == 4'b0001); // priority: 1000 update_en: 1 req_bitmap <= 4'b1010;,2
test_rr_arbiter.v,62,assert(grant_oh == 4'b0001); // priority: 1000 update_en: 1 req_bitmap <= 4'b1010;,2
test_rr_arbiter.v,65,assert(grant_oh == 4'b0001); // priority: 1000 update_en: 1 req_bitmap <= 4'b1010;,2
test_rr_arbiter.v,69,assert(grant_oh == 4'b0010); // priority: 0001 update_en: 1 req_bitmap <= 4'b0100;,2
test_rr_arbiter.v,74,assert(grant_oh == 4'b0010); // priority: 0001 update_en: 1 req_bitmap <= 4'b0100;,2
test_rr_arbiter.v,78,assert(grant_oh == 4'b0100); // priority: 1000 update_en: 1 req_bitmap <= 4'b0000;,2
test_rr_arbiter.v,83,assert(grant_oh == 4'b0100); // priority: 1000 update_en: 1 req_bitmap <= 4'b0000;,2
test_cache_lru.v,75,assert(fill_way_idx == 'h0);,1
test_cache_lru.v,83,assert(fill_way_idx == 'h2);,1
test_cache_lru.v,91,assert(fill_way_idx == 'h1);,1
test_cache_lru.v,99,assert(fill_way_idx == 'h3);,1
test_cache_lru.v,107,assert(fill_way_idx == 'h0);,1
test_cache_lru.v,115,assert(fill_way_idx == 'h2);,1
test_cache_lru.v,120,assert(fill_way_idx == 'h0);,1
test_cache_lru.v,143,assert(fill_way_idx == 'h3);,1
test_sram_1r1w.v,91,assert(read_data1 == DATA1);,1
test_sram_1r1w.v,92,assert(read_data2 == DATA1);,1
test_sram_1r1w.v,106,assert(read_data1 == DATA2);,1
test_sram_1r1w.v,107,assert(read_data2 == DATA2);,1
test_sram_1r1w.v,115,assert(read_data1 == DATA3);,1
test_sram_1r1w.v,116,assert(read_data2 == DATA3);,1
test_sram_1r1w.v,130,assert(read_data1 == DATA4);,1
test_sram_1r1w.v,131,assert(read_data2 != DATA4);,1
test_sram_1r1w.v,141,assert(read_data1 == DATA4);,1
test_sram_1r1w.v,142,assert(read_data2 == DATA4);,1
picorv32.v,2038,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2041,restrict property (resetn != $initstate);,1
picorv32.v,2051,assert (mem_wstrb == 0);,1
picorv32.v,2063,assert (ok);,1
picorv32.v,2081,assert(mem_valid);,1
picorv32.v,2082,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2083,assert(mem_wstrb == 0);,1
picorv32.v,2086,assert(mem_valid);,1
picorv32.v,2087,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2088,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2089,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2092,assert(!mem_valid || mem_ready);,1
picorv32.v,2041,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2044,restrict property (resetn != $initstate);,1
picorv32.v,2054,assert (mem_wstrb == 0);,1
picorv32.v,2066,assert (ok);,1
picorv32.v,2084,assert(mem_valid);,1
picorv32.v,2085,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2086,assert(mem_wstrb == 0);,1
picorv32.v,2089,assert(mem_valid);,1
picorv32.v,2090,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2091,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2092,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2095,assert(!mem_valid || mem_ready);,1
picorv32.v,2041,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2044,restrict property (resetn != $initstate);,1
picorv32.v,2054,assert (mem_wstrb == 0);,1
picorv32.v,2066,assert (ok);,1
picorv32.v,2084,assert(mem_valid);,1
picorv32.v,2085,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2086,assert(mem_wstrb == 0);,1
picorv32.v,2089,assert(mem_valid);,1
picorv32.v,2090,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2091,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2092,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2095,assert(!mem_valid || mem_ready);,1
video_format_encoder.v,134,assert (hcnt >= 0 && hcnt < HORIZONTAL_BLANKING + HORIZONTAL_ACTIVE);,1
video_format_encoder.v,135,assert (vcnt >= 0 && vcnt < VERTICAL_BLANKING + VERTICAL_ACTIVE);,1
video_format_encoder.v,141,assert (hcnt == 0);,1
video_format_encoder.v,150,assert (SYNC_EN_POLARITY ? hsync : !hsync);,1
video_format_encoder.v,154,assert (SYNC_EN_POLARITY ? vsync : !vsync);,1
video_format_encoder.v,159,assert (de);,1
video_format_encoder.v,164,"assert ({vsync, hsync} == 2'b11);",1
video_format_encoder.v,165,"assert ({ctl[1], ctl[0]} == 2'b10);",1
video_format_encoder.v,166,"assert ({ctl[3], ctl[2]} == 2'b11);",1
picorv32.v,2113,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2116,restrict property (resetn != $initstate);,1
picorv32.v,2126,assert (mem_wstrb == 0);,1
picorv32.v,2138,assert (ok);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wstrb == 0);,1
picorv32.v,2161,assert(mem_valid);,1
picorv32.v,2162,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2163,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2164,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2167,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
qoi_encoder.v,517,assume(i_reset);,1
qoi_encoder.v,524,assume(!s_valid);,1
qoi_encoder.v,527,assume(s_valid);,1
qoi_encoder.v,535,assume(!enc_valid);,1
qoi_encoder.v,538,assume(enc_valid);,1
qoi_encoder.v,566,assume(fs_xpos < f_width);,1
qoi_encoder.v,567,assume(fs_ypos < f_height);,1
qoi_encoder.v,575,assume( s_last == fs_hlast);,1
qoi_encoder.v,576,assume( s_user == fs_sof);,1
qoi_encoder.v,579,assume( s_user == fs_hlast);,1
qoi_encoder.v,586,assert(h_state != 2'b11);,1
qoi_encoder.v,588,assert(h_count == fs_xpos);,1
qoi_encoder.v,590,assert(h_width == f_width);,1
qoi_encoder.v,591,assert(h_count <= fs_xpos);,1
qoi_encoder.v,597,assert(v_state != 2'b11);,1
qoi_encoder.v,605,assert(v_count == fs_ypos);,1
qoi_encoder.v,607,assert(v_count == f_height);,1
qoi_encoder.v,610,assert(v_height == f_height);,1
qoi_encoder.v,614,assert(h_state != S_NO_SYNC);,1
qoi_encoder.v,616,assert(h_state != S_NO_SYNC);,1
qoi_encoder.v,618,assert(v_count == fs_ypos);,1
qoi_encoder.v,621,assert(v_count == fs_ypos);,1
qoi_encoder.v,623,assert(v_height == f_height);,1
qoi_encoder.v,630,assert(s_hlast == fs_hlast);,1
qoi_encoder.v,631,assert(!s_hlast || s_vlast == fs_vlast);,1
qoi_encoder.v,640,assert(!s_vlast);,1
qoi_encoder.v,647,assert(v_height == f_height);,1
qoi_encoder.v,648,assert(v_count == fs_ypos);,1
qoi_encoder.v,673,assert(frm_state == FRM_DATA);,1
qoi_encoder.v,710,assert(enc_count == 0);,1
qoi_encoder.v,729,assert(!frm_last);,1
qoi_encoder.v,734,assert(sr_fill > 0);,1
qoi_encoder.v,735,assert(!o_qvalid || !o_qlast);,1
qoi_encoder.v,741,assert(!sr_last);,1
qoi_encoder.v,742,assert(sr_fill == 0);,1
qoi_encoder.v,743,assert(!frm_valid);,1
qoi_encoder.v,744,assert(frm_state < FRM_HDRWIDTH);,1
qoi_encoder.v,751,assert(!frm_valid);,1
qoi_encoder.v,752,assert(!frm_valid);,1
qoi_encoder.v,753,assert(!frm_valid);,1
qoi_encoder.v,755,assert(!frm_valid);,1
qoi_encoder.v,756,assert(!frm_valid);,1
qoi_encoder.v,758,assert(!frm_valid);,1
qoi_encoder.v,759,assert(frm_count == 0);,1
qoi_encoder.v,765,assert(!o_qvalid);,1
qoi_encoder.v,766,assert(!o_qvalid);,1
qoi_encoder.v,767,assert(!o_qvalid);,1
qoi_encoder.v,768,assert(!o_qvalid);,1
qoi_encoder.v,770,assert(!o_qvalid);,1
qoi_encoder.v,771,assert(!o_qvalid);,1
qoi_encoder.v,772,assert(!o_qvalid);,1
qoi_encoder.v,773,assert(!o_qvalid);,1
qoi_encoder.v,785,assert(!o_qvalid);,1
qoi_encoder.v,788,assert(o_qvalid);,1
qoi_encoder.v,796,assert(o_qlast || o_qbytes == 0);,1
qoi_encoder.v,811,assume(fq_count < 32'hef00_0000);,1
qoi_encoder.v,828,assume(fc_index >= 12+2);,1
qoi_encoder.v,847,assume(!enc_last);,1
qoi_encoder.v,851,assume(!enc_last);,1
qoi_encoder.v,858,assume(fenc_byte == fc_byte);,1
qoi_encoder.v,859,assume(!enc_last);,1
qoi_encoder.v,865,assert(frm_count >= 12);,1
qoi_encoder.v,868,assert(frm_valid);,1
qoi_encoder.v,869,assert(frm_count == 12);,1
qoi_encoder.v,870,assert(frm_bytes == 2);,1
qoi_encoder.v,871,assert(enc_count == 0);,1
qoi_encoder.v,877,assert(frm_count > fc_index);,1
qoi_encoder.v,884,assert(frm_wide[31:24] == fc_byte);,1
qoi_encoder.v,891,assert(fsr_wide[DW+32-1:DW+24] == fc_byte);,1
qoi_encoder.v,899,assert(fq_wide[DW-1:DW-8] == fc_byte);,1
qoi_encoder.v,909,assert(fsr_empty == 0);,1
qoi_encoder.v,920,cover(fq_count > 0);,1
qoi_encoder.v,921,cover(fq_count > 8);,1
qoi_encoder.v,922,cover(fq_count > 40 && o_qvalid && o_qlast);,1
qoi_compress.v,521,assume(i_reset);,1
qoi_compress.v,531,assert(f1_pcount == 1);,1
qoi_compress.v,532,assert(!m_valid);,1
qoi_compress.v,533,assert(!m_last);,1
qoi_compress.v,534,assert(!s1_last);,1
qoi_compress.v,537,assert(f1_pcount == 2);,1
qoi_compress.v,538,assert(f2_pcount == 1);,1
qoi_compress.v,539,assert(!m_valid && !m_last && !s2_last && !s1_last);,1
qoi_compress.v,540,assert(!m_last);,1
qoi_compress.v,541,assert(!s2_last);,1
qoi_compress.v,542,assert(!s1_last);,1
qoi_compress.v,545,assert(f1_pcount >= 3);,1
qoi_compress.v,547,assert(!m_last);,1
qoi_compress.v,548,assert(!s4_last);,1
qoi_compress.v,549,assert(!s3_last);,1
qoi_compress.v,550,assert(!s2_last);,1
qoi_compress.v,551,assert(s1_last == gbl_last);,1
qoi_compress.v,554,assert(f1_pcount >= 4);,1
qoi_compress.v,555,assert(!s3_rptvalid || s3_repeats == 0);,1
qoi_compress.v,556,assert(!m_last);,1
qoi_compress.v,557,assert(!s4_last);,1
qoi_compress.v,558,assert(!s3_last);,1
qoi_compress.v,559,assert(!s2_last);,1
qoi_compress.v,560,assert(s1_last == gbl_last);,1
qoi_compress.v,563,assert(f1_pcount == 0);,1
qoi_compress.v,564,assert(f2_pcount >= 3);,1
qoi_compress.v,565,assert(gbl_last);,1
qoi_compress.v,566,assert(s2_last);,1
qoi_compress.v,567,assert(!s3_last);,1
qoi_compress.v,568,assert(s3_rptvalid);,1
qoi_compress.v,569,assert(!m_last);,1
qoi_compress.v,573,assert(f1_pcount == 0);,1
qoi_compress.v,574,assert(f2_pcount >= 3);,1
qoi_compress.v,575,assert(gbl_last);,1
qoi_compress.v,576,assert(s2_last);,1
qoi_compress.v,577,assert(!s3_last);,1
qoi_compress.v,578,assert(!s4_last);,1
qoi_compress.v,579,assert(!s3_rptvalid || s3_repeats == 0);,1
qoi_compress.v,580,assert(!m_last);,1
qoi_compress.v,583,assert(f1_pcount == 0);,1
qoi_compress.v,584,assert(f3_pcount >= 3);,1
qoi_compress.v,585,assert(gbl_last);,1
qoi_compress.v,586,assert(s3_last);,1
qoi_compress.v,587,assert(!m_last);,1
qoi_compress.v,590,assert(f1_pcount == 0);,1
qoi_compress.v,591,assert(f3_pcount >= 3);,1
qoi_compress.v,592,assert(gbl_last);,1
qoi_compress.v,593,assert(s3_last);,1
qoi_compress.v,594,assert(!s4_last);,1
qoi_compress.v,595,assert(!s3_rptvalid || s3_repeats == 0);,1
qoi_compress.v,596,assert(!m_last);,1
qoi_compress.v,599,assert(gbl_last);,1
qoi_compress.v,600,assert(s4_last);,1
qoi_compress.v,601,assert(!s3_rptvalid && s3_repeats == 0);,1
qoi_compress.v,602,assert(!m_last);,1
qoi_compress.v,604,assert(!gbl_last);,1
qoi_compress.v,610,assert(!gbl_last);,1
qoi_compress.v,614,assert(gbl_last);,1
qoi_compress.v,635,assume(!s_vid_valid);,1
qoi_compress.v,638,assume(s_vid_valid);,1
qoi_compress.v,646,assume(s_vid_data != fnvr_pixel);,1
qoi_compress.v,655,assert(!s1_valid);,1
qoi_compress.v,658,assert(s1_valid);,1
qoi_compress.v,668,assert(s1_pixel != fnvr_pixel);,1
qoi_compress.v,680,assert(f1_rhash == s1_rhash);,1
qoi_compress.v,681,assert(f1_ghash == s1_ghash);,1
qoi_compress.v,682,assert(f1_bhash == s1_bhash);,1
qoi_compress.v,696,assert(s1_pixel == 0);,1
qoi_compress.v,700,assume(s1_valid && s1_last);,1
qoi_compress.v,709,assert(!s2_valid);,1
qoi_compress.v,710,assert(s2_pixel == 0);,1
qoi_compress.v,713,assert(s2_valid);,1
qoi_compress.v,722,assert(s2_pixel != fnvr_pixel);,1
qoi_compress.v,738,assert(f2_index == s2_tbl_index);,1
qoi_compress.v,739,assert(f2_gdiff == s2_gdiff);,1
qoi_compress.v,753,assert(f2_pcount < 32'hffff_ffff);,1
qoi_compress.v,758,assert(s2_pixel == 0);,1
qoi_compress.v,762,assert(f1_pcount == 0);,1
qoi_compress.v,776,assert(!s3_valid);,1
qoi_compress.v,777,assert(s3_pixel == 0);,1
qoi_compress.v,780,assert(s3_valid);,1
qoi_compress.v,801,assert(s3_pixel != fnvr_pixel);,1
qoi_compress.v,805,assert(s3_repeats == 0);,1
qoi_compress.v,807,assert(s3_repeats <= 6'h3d);,1
qoi_compress.v,828,assert(s3_tblidx == f3_index);,1
qoi_compress.v,831,assert(s3_rdiff == f3_rdiff);,1
qoi_compress.v,832,assert(s3_gdiff == f3_gdiff);,1
qoi_compress.v,833,assert(s3_bdiff == f3_bdiff);,1
qoi_compress.v,835,assert(s3_rgdiff == f3_rgdiff);,1
qoi_compress.v,836,assert(s3_bgdiff == f3_bgdiff);,1
qoi_compress.v,838,assert(s3_pixel != s4_pixel);,1
qoi_compress.v,840,assert(s3_pixel == s4_pixel);,1
qoi_compress.v,842,assert(s3_pixel == 0);,1
qoi_compress.v,844,assert(s3_pixel == s4_pixel);,1
qoi_compress.v,857,assert(f3_pcount < 32'hffff_ffff);,1
qoi_compress.v,861,assert(s3_pixel == 0);,1
qoi_compress.v,865,assert(f2_pcount == 0);,1
qoi_compress.v,873,assert(s3_pixel == s4_pixel);,1
qoi_compress.v,883,assert(!s4_valid);,1
qoi_compress.v,884,assert(s4_pixel == 0);,1
qoi_compress.v,887,assert(s4_valid);,1
qoi_compress.v,905,assert(s4_pixel != fnvr_pixel);,1
qoi_compress.v,910,assert(s4_repeats <= 6'h3d);,1
qoi_compress.v,912,assert(s4_pixel == fm_pixel);,1
qoi_compress.v,914,assert(s4_pixel != fm_pixel);,1
qoi_compress.v,961,assert(s4_pixel == fm_pixel);,1
qoi_compress.v,965,assert(f4_pcount >= s4_repeats+1);,1
qoi_compress.v,969,assert(f4_pcount < 32'hffff_ffff);,1
qoi_compress.v,973,assert(s4_pixel == 0);,1
qoi_compress.v,978,assert(f3_pcount == 0);,1
qoi_compress.v,980,assert(f4_pcount <= f3_pcount);,1
qoi_compress.v,1013,assert(!m_valid);,1
qoi_compress.v,1016,assert(m_valid);,1
qoi_compress.v,1037,assert(m_data[31:24] != 8'hff);,1
qoi_compress.v,1040,assert(m_bytes == 2'd0);,1
qoi_compress.v,1041,assert(m_data[23:0] != fnvr_pixel);,1
qoi_compress.v,1042,assert(m_data[23:0] == fm_pixel);,1
qoi_compress.v,1043,assert(m_data[23:0] != flst_pixel);,1
qoi_compress.v,1046,assert(m_bytes == 2'd1);,1
qoi_compress.v,1047,assert(fm_pixel == flst_pixel);,1
qoi_compress.v,1050,assert(m_bytes == 2'd1);,1
qoi_compress.v,1054,assert(m_bytes == 2'd1);,1
qoi_compress.v,1055,assert(fm_delta == fm_pixel);,1
qoi_compress.v,1058,assert(m_bytes == 2'd2);,1
qoi_compress.v,1059,assert(fm_luna == fm_pixel);,1
qoi_compress.v,1065,assert(fm_pixel != fnvr_pixel);,1
qoi_compress.v,1104,assert(flst_pixel == fm_pixel);,1
qoi_compress.v,1121,assert(fm_pixel == 0);,1
qoi_compress.v,1122,assert(flst_pixel == 0);,1
qoi_compress.v,1127,assert(fm_pcount < 32'hffff_ffff);,1
qoi_compress.v,1131,assume(!s_vid_valid || !s_vid_hlast || !s_vid_vlast);,1
qoi_compress.v,1136,assert(!gbl_last);,1
qoi_compress.v,1137,assert(!s1_last);,1
qoi_compress.v,1138,assert(!s2_last);,1
qoi_compress.v,1139,assert(!s3_last);,1
qoi_compress.v,1140,assert(!s4_last);,1
qoi_compress.v,1141,assert(!m_last);,1
qoi_compress.v,1163,assert(tbl_valid[fc_index] == fc_valid);,1
qoi_compress.v,1172,assert(tbl_pixel[fc_index] == fc_pixel);,1
qoi_compress.v,1185,assert(fc_valid);,1
qoi_compress.v,1186,assert(fc_pixel == s3_pixel);,1
qoi_compress.v,1187,assert(f3_tbl_valid == s3_tbl_valid);,1
qoi_compress.v,1188,assert(!s3_tbl_valid || f3_tbl_pixel == s3_tbl_pixel);,1
qoi_compress.v,1197,assert(fc_pixel == s3_pixel);,1
qoi_compress.v,1200,assert(fc_valid);,1
qoi_compress.v,1201,assert(fc_pixel == s4_pixel);,1
qoi_compress.v,1220,assert(fc_valid);,1
qoi_compress.v,1221,assert(fc_pixel == fm_pixel);,1
qoi_compress.v,1227,assert(tbl_valid == 0);,1
qoi_compress.v,1231,assert(tbl_valid == 0);,1
qoi_compress.v,1235,assert(tbl_valid == 0);,1
qoi_skid.v,263,assume(i_reset);,1
qoi_skid.v,281,assume property (IDATA_HELD_WHEN_NOT_READY);,1
qoi_skid.v,285,assume property (IDATA_HELD_WHEN_NOT_READY);,1
qoi_skid.v,291,assume property (IDATA_HELD_WHEN_NOT_READY);,1
qoi_skid.v,293,assert property (IDATA_HELD_WHEN_NOT_READY);,1
qoi_skid.v,311,assert(!o_valid || !OPT_INITIAL);,1
qoi_skid.v,334,assert(o_ready);,1
qoi_skid.v,365,assert(o_valid == i_valid);,1
qoi_skid.v,375,assert(o_valid);,1
qoi_skid.v,378,assert(!o_valid);,1
qoi_skid.v,389,assert(o_ready);,1
qoi_skid.v,399,assert(o_data == 0);,1
qoi_skid.v,403,assert(w_data == 0);,1
qoi_skid.v,471,cover(!o_valid && !i_valid && f_changed_data);,1
qoi_skid.v,477,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
qoi_decompress.v,486,assume(i_reset);,1
qoi_decompress.v,494,assume(!s_valid);,1
qoi_decompress.v,497,assume(s_valid);,1
qoi_decompress.v,513,assert(!s1_valid);,1
qoi_decompress.v,516,assert(s1_valid);,1
qoi_decompress.v,540,assert(!s2_valid);,1
qoi_decompress.v,543,assert(s2_valid);,1
qoi_decompress.v,566,assert(!s3_valid);,1
qoi_decompress.v,569,assert(s3_valid);,1
qoi_decompress.v,609,assert(f2_index == s3_write_index);,1
qoi_decompress.v,615,assume(f3_index == s3_index);,1
qoi_decompress.v,625,assume(fnvr_alpha);,1
qoi_decompress.v,629,assume(s_data[39:32] != 8'hff);,1
qoi_decompress.v,633,assert(s1_code != C_RGBA);,1
qoi_decompress.v,637,assert(s2_code != C_RGBA);,1
qoi_decompress.v,642,assert(s3_write_value[7:0] == 8'hff);,1
qoi_decompress.v,648,assert(s3_code != C_RGBA);,1
qoi_decompress.v,649,assume(s3_lookup[7:0] == 8'hff);,1
qoi_decompress.v,659,assume(s_data[39:38] != 2'b10);,1
qoi_decompress.v,665,assert(f1_raw[39:38] != 2'b10);,1
qoi_decompress.v,668,assert(f2_raw[39:38] != 2'b10);,1
qoi_decompress.v,671,assert(f3_raw[39:38] != 2'b10);,1
qoi_decompress.v,674,assume(m_ready);,1
qoi_decompress.v,678,assume(s_valid);,1
faxivideo.v,71,assume(!i_reset_n);,1
faxivideo.v,79,assert(!S_VID_TVALID);,1
faxivideo.v,82,assert(S_VID_TVALID);,1
faxivideo.v,133,assume(i_width > 2);,1
faxivideo.v,134,assume(i_height > 2);,1
faxivideo.v,142,assert(o_xpos < i_width);,1
faxivideo.v,143,assert(o_ypos < i_height);,1
faxivideo.v,151,assert(S_VID_TLAST == o_hlast);,1
faxivideo.v,152,assert(!f_known_height || S_VID_TUSER == o_sof);,1
faxivideo.v,155,assert(S_VID_TUSER == o_hlast);,1
gm64_tb.v,31,assert(reset==0);,1
gm64_tb.v,34,assert(reset==1);,1
counter_tb.v,47,assert(irq==0);,1
counter_tb.v,53,assert(U100.state==csIdle);,1
counter_tb.v,62,assert(U100.currentValue==STARTVALUE);,1
counter_tb.v,66,assert(irq==1);,1
counter_tb.v,67,assert(U100.currentValue==STARTVALUE);,1
counter_tb.v,77,assert(U100.state==csIdle);,1
counter_tb.v,78,assert(irq==0);,1
counter_tb.v,79,assert(U100.currentValue==1);,1
counter_tb.v,82,assert(irq==1);,1
counter_tb.v,83,assert(U100.state==csAlarm);,1
counter_tb.v,85,assert(U100.currentValue==0);,1
counter_tb.v,86,assert(U100.state==csIdle);,1
memCtrl_tb.v,75,assert(U13_U25.delayCounter==U13_U25.initDelayInClkCyles);,1
memCtrl_tb.v,78,assert(U13_U25.isInitialized==0);,1
memCtrl_tb.v,80,assert(U13_U25.psram_cs==0);,1
memCtrl_tb.v,81,assert(io_psram_data0==U13_U25.qpiCommand[7]); // SI U7 assert(io_psram_data1==='z); // SO U7 assert(io_psram_data2==='z); // SO U7 assert(io_psram_data3==='z); // SO U7 #2 assert(io_psram_data0==U13_U25.qpiCommand[6]); // SI U7 assert(io_psram_data1==='z); // SO U7 assert(io_psram_data2==='z); // SO U7 assert(io_psram_data3==='z); // SO U7 #2 assert(io_psram_data0==U13_U25.qpiCommand[5]); // SI U7 assert(io_psram_data1==='z); // SO U7 assert(io_psram_data2==='z); // SO U7 assert(io_psram_data3==='z); // SO U7 #2 assert(io_psram_data0==U13_U25.qpiCommand[4]); // SI U7 assert(io_psram_data1==='z); // SO U7 assert(io_psram_data2==='z); // SO U7 assert(io_psram_data3==='z); // SO U7 #2 assert(io_psram_data0==U13_U25.qpiCommand[3]); // SI U7 assert(io_psram_data1==='z); // SO U7 assert(io_psram_data2==='z); // SO U7 assert(io_psram_data3==='z); // SO U7 #2 assert(io_psram_data0==U13_U25.qpiCommand[2]); // SI U7,21
memCtrl_tb.v,102,assert(io_psram_data1==='z); // SO U7 assert(io_psram_data2==='z); // SO U7 assert(io_psram_data3==='z); // SO U7 #2 assert(io_psram_data0==U13_U25.qpiCommand[1]); // SI U7 assert(io_psram_data1==='z); // SO U7 assert(io_psram_data2==='z); // SO U7 assert(io_psram_data3==='z); // SO U7 #2 assert(io_psram_data0==U13_U25.qpiCommand[0]); // SI U7 assert(io_psram_data1==='z); // SO U7 assert(io_psram_data2==='z); // SO U7 assert(io_psram_data3==='z); // SO U7 #2 assert(U13_U25.isInitialized==1);,12
memCtrl_tb.v,114,assert(U13_U25.state==stateIdle);,1
memCtrl_tb.v,115,assert(o_busy==0);,1
memCtrl_tb.v,122,assert(o_busy==1);,1
memCtrl_tb.v,124,assert(U13_U25.state==sendQPIWriteCmd);,1
memCtrl_tb.v,125,assert(io_psram_data3==U13_U25.qpiCommand[7]);,1
memCtrl_tb.v,126,assert(io_psram_data2==U13_U25.qpiCommand[6]);,1
memCtrl_tb.v,127,assert(io_psram_data1==U13_U25.qpiCommand[5]);,1
memCtrl_tb.v,128,assert(io_psram_data0==U13_U25.qpiCommand[4]);,1
memCtrl_tb.v,129,assert(o_busy==1);,1
memCtrl_tb.v,131,assert(io_psram_data3==U13_U25.qpiCommand[3]);,1
memCtrl_tb.v,132,assert(io_psram_data2==U13_U25.qpiCommand[2]);,1
memCtrl_tb.v,133,assert(io_psram_data1==U13_U25.qpiCommand[1]);,1
memCtrl_tb.v,134,assert(io_psram_data0==U13_U25.qpiCommand[0]);,1
memCtrl_tb.v,136,assert(o_busy==1);,1
memCtrl_tb.v,137,assert(o_psram_cs==0);,1
memCtrl_tb.v,139,assert(io_psram_data4===1'bZ);,1
memCtrl_tb.v,140,assert(io_psram_data5===1'bZ);,1
memCtrl_tb.v,141,assert(io_psram_data6===1'bZ);,1
memCtrl_tb.v,142,assert(io_psram_data7===1'bZ);,1
memCtrl_tb.v,144,assert(io_psram_data0==0);,1
memCtrl_tb.v,145,assert(io_psram_data1==0);,1
memCtrl_tb.v,146,assert(io_psram_data2==0);,1
memCtrl_tb.v,147,assert(io_psram_data3==0);,1
memCtrl_tb.v,149,assert(io_psram_data1==0);,1
memCtrl_tb.v,150,assert(io_psram_data2==0);,1
memCtrl_tb.v,151,assert(io_psram_data3==0);,1
memCtrl_tb.v,153,assert(io_psram_data1==1);,1
memCtrl_tb.v,154,assert(io_psram_data2==0);,1
memCtrl_tb.v,155,assert(io_psram_data3==1);,1
memCtrl_tb.v,157,assert(io_psram_data1==1);,1
memCtrl_tb.v,158,assert(io_psram_data2==0);,1
memCtrl_tb.v,159,assert(io_psram_data3==1);,1
memCtrl_tb.v,161,assert(io_psram_data1==1);,1
memCtrl_tb.v,162,assert(io_psram_data2==0);,1
memCtrl_tb.v,163,assert(io_psram_data3==1);,1
memCtrl_tb.v,165,assert(io_psram_data1==1);,1
memCtrl_tb.v,166,assert(io_psram_data2==0);,1
memCtrl_tb.v,167,assert(io_psram_data3==1);,1
memCtrl_tb.v,170,assert(io_psram_data1==1);,1
memCtrl_tb.v,171,assert(io_psram_data2==1);,1
memCtrl_tb.v,172,assert(io_psram_data3==1);,1
memCtrl_tb.v,174,assert(io_psram_data1==0);,1
memCtrl_tb.v,175,assert(io_psram_data2==0);,1
memCtrl_tb.v,176,assert(io_psram_data3==0);,1
memCtrl_tb.v,178,assert(io_psram_data4===1'bZ);,1
memCtrl_tb.v,179,assert(io_psram_data5===1'bZ);,1
memCtrl_tb.v,180,assert(io_psram_data6===1'bZ);,1
memCtrl_tb.v,181,assert(io_psram_data7===1'bZ);,1
memCtrl_tb.v,185,assert(o_busy==0);,1
memCtrl_tb.v,187,assert(U13_U25.state==stateIdle);,1
memCtrl_tb.v,195,assert(io_psram_data3==U13_U25.qpiCommand[7]);,1
memCtrl_tb.v,196,assert(io_psram_data2==U13_U25.qpiCommand[6]);,1
memCtrl_tb.v,197,assert(io_psram_data1==U13_U25.qpiCommand[5]);,1
memCtrl_tb.v,198,assert(io_psram_data0==U13_U25.qpiCommand[4]);,1
memCtrl_tb.v,199,assert(o_dataReady==0);,1
memCtrl_tb.v,201,assert(io_psram_data3==U13_U25.qpiCommand[3]);,1
memCtrl_tb.v,202,assert(io_psram_data2==U13_U25.qpiCommand[2]);,1
memCtrl_tb.v,203,assert(io_psram_data1==U13_U25.qpiCommand[1]);,1
memCtrl_tb.v,204,assert(io_psram_data0==U13_U25.qpiCommand[0]);,1
memCtrl_tb.v,206,assert(o_busy==1);,1
memCtrl_tb.v,207,assert(o_psram_cs==0);,1
memCtrl_tb.v,208,assert(io_psram_data0==0);,1
memCtrl_tb.v,209,assert(io_psram_data1==0);,1
memCtrl_tb.v,210,assert(io_psram_data2==0);,1
memCtrl_tb.v,211,assert(io_psram_data3==0);,1
memCtrl_tb.v,213,assert(io_psram_data1==0);,1
memCtrl_tb.v,214,assert(io_psram_data2==0);,1
memCtrl_tb.v,215,assert(io_psram_data3==0);,1
memCtrl_tb.v,217,assert(io_psram_data1==1);,1
memCtrl_tb.v,218,assert(io_psram_data2==0);,1
memCtrl_tb.v,219,assert(io_psram_data3==1);,1
memCtrl_tb.v,221,assert(io_psram_data1==1);,1
memCtrl_tb.v,222,assert(io_psram_data2==0);,1
memCtrl_tb.v,223,assert(io_psram_data3==1);,1
memCtrl_tb.v,225,assert(io_psram_data1==1);,1
memCtrl_tb.v,226,assert(io_psram_data2==0);,1
memCtrl_tb.v,227,assert(io_psram_data3==1);,1
memCtrl_tb.v,228,assert(o_busy==1);,1
memCtrl_tb.v,229,assert(o_dataReady==0);,1
memCtrl_tb.v,231,assert(io_psram_data1==1);,1
memCtrl_tb.v,232,assert(io_psram_data2==0);,1
memCtrl_tb.v,233,assert(io_psram_data3==1);,1
memCtrl_tb.v,235,assert(io_psram_data1===1'bZ);,1
memCtrl_tb.v,236,assert(io_psram_data2===1'bZ);,1
memCtrl_tb.v,237,assert(io_psram_data3===1'bZ);,1
memCtrl_tb.v,242,assert(o_busy==0);,1
memCtrl_tb.v,243,assert(o_dataReady==1);,1
memCtrl_tb.v,244,assert(U13_U25.state==stateIdle);,1
memCtrl_tb.v,247,assert(o_dataReady==1);,1
memCtrl_tb.v,251,assert(U13_U25.isInitialized==1);,1
memCtrl_tb.v,258,assert(o_busy==1);,1
memCtrl_tb.v,260,assert(U13_U25.state==sendQPIWriteCmd);,1
memCtrl_tb.v,261,assert(io_psram_data7==U13_U25.qpiCommand[7]);,1
memCtrl_tb.v,262,assert(io_psram_data6==U13_U25.qpiCommand[6]);,1
memCtrl_tb.v,263,assert(io_psram_data5==U13_U25.qpiCommand[5]);,1
memCtrl_tb.v,264,assert(io_psram_data4==U13_U25.qpiCommand[4]);,1
memCtrl_tb.v,265,assert(o_busy==1);,1
memCtrl_tb.v,267,assert(io_psram_data7==U13_U25.qpiCommand[3]);,1
memCtrl_tb.v,268,assert(io_psram_data6==U13_U25.qpiCommand[2]);,1
memCtrl_tb.v,269,assert(io_psram_data5==U13_U25.qpiCommand[1]);,1
memCtrl_tb.v,270,assert(io_psram_data4==U13_U25.qpiCommand[0]);,1
memCtrl_tb.v,272,assert(o_busy==1);,1
memCtrl_tb.v,273,assert(o_psram_cs==0);,1
memCtrl_tb.v,275,assert(io_psram_data0===1'bZ);,1
memCtrl_tb.v,276,assert(io_psram_data1===1'bZ);,1
memCtrl_tb.v,277,assert(io_psram_data2===1'bZ);,1
memCtrl_tb.v,278,assert(io_psram_data3===1'bZ);,1
memCtrl_tb.v,280,assert(io_psram_data4==0);,1
memCtrl_tb.v,281,assert(io_psram_data5==0);,1
memCtrl_tb.v,282,assert(io_psram_data6==0);,1
memCtrl_tb.v,283,assert(io_psram_data7==0);,1
memCtrl_tb.v,285,assert(io_psram_data5==0);,1
memCtrl_tb.v,286,assert(io_psram_data6==0);,1
memCtrl_tb.v,287,assert(io_psram_data7==0);,1
memCtrl_tb.v,289,assert(io_psram_data5==1);,1
memCtrl_tb.v,290,assert(io_psram_data6==0);,1
memCtrl_tb.v,291,assert(io_psram_data7==1);,1
memCtrl_tb.v,293,assert(io_psram_data5==1);,1
memCtrl_tb.v,294,assert(io_psram_data6==0);,1
memCtrl_tb.v,295,assert(io_psram_data7==1);,1
memCtrl_tb.v,297,assert(io_psram_data5==1);,1
memCtrl_tb.v,298,assert(io_psram_data6==0);,1
memCtrl_tb.v,299,assert(io_psram_data7==1);,1
memCtrl_tb.v,301,assert(io_psram_data5==1);,1
memCtrl_tb.v,302,assert(io_psram_data6==0);,1
memCtrl_tb.v,303,assert(io_psram_data7==1);,1
memCtrl_tb.v,306,assert(io_psram_data5==1);,1
memCtrl_tb.v,307,assert(io_psram_data6==1);,1
memCtrl_tb.v,308,assert(io_psram_data7==1);,1
memCtrl_tb.v,310,assert(io_psram_data5==0);,1
memCtrl_tb.v,311,assert(io_psram_data6==0);,1
memCtrl_tb.v,312,assert(io_psram_data7==0);,1
memCtrl_tb.v,313,assert(io_psram_data0===1'bZ);,1
memCtrl_tb.v,314,assert(io_psram_data1===1'bZ);,1
memCtrl_tb.v,315,assert(io_psram_data2===1'bZ);,1
memCtrl_tb.v,316,assert(io_psram_data3===1'bZ);,1
memCtrl_tb.v,318,assert(o_busy==0);,1
memCtrl_tb.v,320,assert(U13_U25.state==stateIdle);,1
memCtrl_tb.v,328,assert(io_psram_data7==U13_U25.qpiCommand[7]);,1
memCtrl_tb.v,329,assert(io_psram_data6==U13_U25.qpiCommand[6]);,1
memCtrl_tb.v,330,assert(io_psram_data5==U13_U25.qpiCommand[5]);,1
memCtrl_tb.v,331,assert(io_psram_data4==U13_U25.qpiCommand[4]);,1
memCtrl_tb.v,332,assert(o_dataReady==0);,1
memCtrl_tb.v,334,assert(io_psram_data7==U13_U25.qpiCommand[3]);,1
memCtrl_tb.v,335,assert(io_psram_data6==U13_U25.qpiCommand[2]);,1
memCtrl_tb.v,336,assert(io_psram_data5==U13_U25.qpiCommand[1]);,1
memCtrl_tb.v,337,assert(io_psram_data4==U13_U25.qpiCommand[0]);,1
memCtrl_tb.v,339,assert(o_busy==1);,1
memCtrl_tb.v,340,assert(o_psram_cs==0);,1
memCtrl_tb.v,341,assert(io_psram_data4==0);,1
memCtrl_tb.v,342,assert(io_psram_data5==0);,1
memCtrl_tb.v,343,assert(io_psram_data6==0);,1
memCtrl_tb.v,344,assert(io_psram_data7==0);,1
memCtrl_tb.v,346,assert(io_psram_data5==0);,1
memCtrl_tb.v,347,assert(io_psram_data6==0);,1
memCtrl_tb.v,348,assert(io_psram_data7==0);,1
memCtrl_tb.v,350,assert(io_psram_data5==1);,1
memCtrl_tb.v,351,assert(io_psram_data6==0);,1
memCtrl_tb.v,352,assert(io_psram_data7==1);,1
memCtrl_tb.v,354,assert(io_psram_data5==1);,1
memCtrl_tb.v,355,assert(io_psram_data6==0);,1
memCtrl_tb.v,356,assert(io_psram_data7==1);,1
memCtrl_tb.v,358,assert(io_psram_data5==1);,1
memCtrl_tb.v,359,assert(io_psram_data6==0);,1
memCtrl_tb.v,360,assert(io_psram_data7==1);,1
memCtrl_tb.v,361,assert(o_busy==1);,1
memCtrl_tb.v,362,assert(o_dataReady==0);,1
memCtrl_tb.v,364,assert(io_psram_data5==1);,1
memCtrl_tb.v,365,assert(io_psram_data6==0);,1
memCtrl_tb.v,366,assert(io_psram_data7==1);,1
memCtrl_tb.v,368,assert(io_psram_data5===1'bZ);,1
memCtrl_tb.v,369,assert(io_psram_data6===1'bZ);,1
memCtrl_tb.v,370,assert(io_psram_data7===1'bZ);,1
memCtrl_tb.v,374,assert(o_busy==0);,1
memCtrl_tb.v,375,assert(o_dataReady==1);,1
memCtrl_tb.v,376,assert(U13_U25.state==stateIdle);,1
memCtrl_tb.v,379,assert(o_dataReady==1);,1
reset_tb.v,31,assert(reset==0);,1
reset_tb.v,34,assert(reset==1);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
vga_humanshader.si.v,636,assume(reset);,1
vga_humanshader.si.v,998,assume(0);,1
vga_humanshader.si.v,1024,assume(0);,1
vga_humanshader.si.v,1061,assume(0);,1
vga_humanshader.si.v,1106,assume(0);,1
vga_humanshader.si.v,1149,assume(0);,1
vga_humanshader.si.v,1180,assume(0);,1
vga_humanshader.si.v,1217,assume(0);,1
vga_humanshader.si.v,1242,assume(0);,1
vga_humanshader.si.v,1284,assume(0);,1
vga_humanshader.si.v,1321,assume(0);,1
vga_humanshader.si.v,1362,assume(0);,1
vga_humanshader.si.v,1383,assume(0);,1
vga_humanshader.si.v,1409,assume(0);,1
vga_humanshader.si.v,1435,assume(0);,1
vga_humanshader.si.v,1461,assume(0);,1
vga_humanshader.si.v,1504,assume(0);,1
vga_humanshader.si.v,1532,assume(0);,1
vga_humanshader.si.v,1573,assume(0);,1
vga_humanshader.si.v,1603,assume(0);,1
vga_humanshader.si.v,1670,assume(0);,1
vga_humanshader.si.v,1697,assume(0);,1
vga_humanshader.si.v,1746,assume(0);,1
vga_copperbars.si.v,122,assume(reset);,1
vga_copperbars.si.v,275,assume(0);,1
vga_msponge.si.v,11588,assume(reset);,1
vga_msponge.si.v,15548,assume(0);,1
vga_msponge.si.v,15586,assume(0);,1
vga_msponge.si.v,15668,assume(0);,1
vga_msponge.si.v,15701,assume(0);,1
vga_msponge.si.v,15740,assume(0);,1
vga_msponge.si.v,15805,assume(0);,1
vga_msponge.si.v,15890,assume(0);,1
vga_msponge.si.v,15951,assume(0);,1
vga_msponge.si.v,16082,assume(0);,1
vga_msponge.si.v,16183,assume(0);,1
vga_msponge.si.v,16284,assume(0);,1
vga_msponge.si.v,16385,assume(0);,1
vga_msponge.si.v,16486,assume(0);,1
vga_msponge.si.v,16587,assume(0);,1
vga_msponge.si.v,16688,assume(0);,1
vga_msponge.si.v,16789,assume(0);,1
vga_msponge.si.v,16890,assume(0);,1
vga_msponge.si.v,16991,assume(0);,1
vga_msponge.si.v,17092,assume(0);,1
vga_msponge.si.v,17193,assume(0);,1
vga_msponge.si.v,17294,assume(0);,1
vga_msponge.si.v,17395,assume(0);,1
vga_msponge.si.v,17496,assume(0);,1
vga_msponge.si.v,17597,assume(0);,1
vga_msponge.si.v,17698,assume(0);,1
vga_msponge.si.v,17799,assume(0);,1
vga_msponge.si.v,17900,assume(0);,1
vga_msponge.si.v,18001,assume(0);,1
vga_msponge.si.v,18102,assume(0);,1
vga_msponge.si.v,18203,assume(0);,1
vga_msponge.si.v,18304,assume(0);,1
vga_msponge.si.v,18405,assume(0);,1
vga_msponge.si.v,18506,assume(0);,1
vga_msponge.si.v,18607,assume(0);,1
vga_msponge.si.v,18708,assume(0);,1
vga_msponge.si.v,18809,assume(0);,1
vga_msponge.si.v,18910,assume(0);,1
vga_msponge.si.v,19011,assume(0);,1
vga_msponge.si.v,19112,assume(0);,1
vga_msponge.si.v,19213,assume(0);,1
vga_msponge.si.v,19314,assume(0);,1
vga_msponge.si.v,19415,assume(0);,1
vga_msponge.si.v,19516,assume(0);,1
vga_msponge.si.v,19617,assume(0);,1
vga_msponge.si.v,19718,assume(0);,1
vga_msponge.si.v,19819,assume(0);,1
vga_msponge.si.v,19920,assume(0);,1
vga_msponge.si.v,20021,assume(0);,1
vga_msponge.si.v,20122,assume(0);,1
vga_msponge.si.v,20223,assume(0);,1
vga_msponge.si.v,20324,assume(0);,1
vga_msponge.si.v,20425,assume(0);,1
vga_msponge.si.v,20526,assume(0);,1
vga_msponge.si.v,20627,assume(0);,1
vga_msponge.si.v,20728,assume(0);,1
vga_msponge.si.v,20829,assume(0);,1
vga_msponge.si.v,20930,assume(0);,1
vga_msponge.si.v,21031,assume(0);,1
vga_msponge.si.v,21132,assume(0);,1
vga_msponge.si.v,21233,assume(0);,1
vga_msponge.si.v,21334,assume(0);,1
vga_msponge.si.v,21435,assume(0);,1
vga_msponge.si.v,21536,assume(0);,1
vga_msponge.si.v,21637,assume(0);,1
vga_msponge.si.v,21738,assume(0);,1
vga_msponge.si.v,21839,assume(0);,1
vga_msponge.si.v,21940,assume(0);,1
vga_msponge.si.v,22041,assume(0);,1
vga_msponge.si.v,22142,assume(0);,1
vga_msponge.si.v,22243,assume(0);,1
vga_msponge.si.v,22344,assume(0);,1
vga_msponge.si.v,22445,assume(0);,1
vga_msponge.si.v,22546,assume(0);,1
vga_msponge.si.v,22647,assume(0);,1
vga_msponge.si.v,22748,assume(0);,1
vga_msponge.si.v,22849,assume(0);,1
vga_msponge.si.v,22950,assume(0);,1
vga_msponge.si.v,23051,assume(0);,1
vga_msponge.si.v,23152,assume(0);,1
vga_msponge.si.v,23253,assume(0);,1
vga_msponge.si.v,23354,assume(0);,1
vga_msponge.si.v,23455,assume(0);,1
vga_msponge.si.v,23556,assume(0);,1
vga_msponge.si.v,23657,assume(0);,1
vga_msponge.si.v,23758,assume(0);,1
vga_msponge.si.v,23859,assume(0);,1
vga_msponge.si.v,23960,assume(0);,1
vga_msponge.si.v,24061,assume(0);,1
vga_msponge.si.v,24162,assume(0);,1
vga_msponge.si.v,24263,assume(0);,1
vga_msponge.si.v,24364,assume(0);,1
vga_msponge.si.v,24465,assume(0);,1
vga_msponge.si.v,24566,assume(0);,1
vga_msponge.si.v,24667,assume(0);,1
vga_msponge.si.v,24768,assume(0);,1
vga_msponge.si.v,24869,assume(0);,1
vga_msponge.si.v,24970,assume(0);,1
vga_msponge.si.v,25071,assume(0);,1
vga_msponge.si.v,25172,assume(0);,1
vga_msponge.si.v,25273,assume(0);,1
vga_msponge.si.v,25374,assume(0);,1
vga_msponge.si.v,25475,assume(0);,1
vga_msponge.si.v,25576,assume(0);,1
vga_msponge.si.v,25677,assume(0);,1
vga_msponge.si.v,25778,assume(0);,1
vga_msponge.si.v,25879,assume(0);,1
vga_msponge.si.v,25980,assume(0);,1
vga_msponge.si.v,26081,assume(0);,1
vga_msponge.si.v,26182,assume(0);,1
vga_msponge.si.v,26283,assume(0);,1
vga_msponge.si.v,26384,assume(0);,1
vga_msponge.si.v,26485,assume(0);,1
vga_msponge.si.v,26586,assume(0);,1
vga_msponge.si.v,26687,assume(0);,1
vga_msponge.si.v,26788,assume(0);,1
vga_msponge.si.v,26889,assume(0);,1
vga_msponge.si.v,26990,assume(0);,1
vga_msponge.si.v,27091,assume(0);,1
vga_msponge.si.v,27192,assume(0);,1
vga_msponge.si.v,27293,assume(0);,1
vga_msponge.si.v,27394,assume(0);,1
vga_msponge.si.v,27495,assume(0);,1
vga_msponge.si.v,27596,assume(0);,1
vga_msponge.si.v,27697,assume(0);,1
vga_msponge.si.v,27798,assume(0);,1
vga_msponge.si.v,27899,assume(0);,1
vga_msponge.si.v,28000,assume(0);,1
vga_msponge.si.v,28101,assume(0);,1
vga_msponge.si.v,28202,assume(0);,1
vga_msponge.si.v,28303,assume(0);,1
vga_msponge.si.v,28404,assume(0);,1
vga_msponge.si.v,28505,assume(0);,1
vga_msponge.si.v,28606,assume(0);,1
vga_msponge.si.v,28707,assume(0);,1
vga_msponge.si.v,28808,assume(0);,1
vga_msponge.si.v,28909,assume(0);,1
vga_msponge.si.v,28942,assume(0);,1
vga_msponge.si.v,28993,assume(0);,1
video_sdram_test.si.v,379,assume(reset);,1
video_sdram_test.si.v,534,assume(0);,1
vga_rototexture.si.v,1405,assume(reset);,1
vga_rototexture.si.v,1572,assume(0);,1
vga_flyover3d.si.v,27,assume(reset);,1
vga_flyover3d.si.v,70,assume(reset);,1
vga_flyover3d.si.v,113,assume(reset);,1
vga_flyover3d.si.v,156,assume(reset);,1
vga_flyover3d.si.v,199,assume(reset);,1
vga_flyover3d.si.v,242,assume(reset);,1
vga_flyover3d.si.v,285,assume(reset);,1
vga_flyover3d.si.v,328,assume(reset);,1
vga_flyover3d.si.v,371,assume(reset);,1
vga_flyover3d.si.v,414,assume(reset);,1
vga_flyover3d.si.v,457,assume(reset);,1
vga_flyover3d.si.v,500,assume(reset);,1
vga_flyover3d.si.v,543,assume(reset);,1
vga_flyover3d.si.v,586,assume(reset);,1
vga_flyover3d.si.v,629,assume(reset);,1
vga_flyover3d.si.v,781,assume(reset);,1
vga_flyover3d.si.v,1028,assume(0);,1
vga_flyover3d.si.v,1122,assume(reset);,1
vga_flyover3d.si.v,1354,assume(0);,1
vga_circles.si.v,222,assume(reset);,1
vga_circles.si.v,369,assume(0);,1
vga_circles.si.v,395,assume(0);,1
vga_circles.si.v,487,assume(0);,1
vga_circles.si.v,529,assume(0);,1
vga_circles.si.v,565,assume(0);,1
vga_circles.si.v,591,assume(0);,1
vga_circles.si.v,612,assume(0);,1
vga_circles.si.v,633,assume(0);,1
vga_circles.si.v,654,assume(0);,1
vga_circles.si.v,680,assume(0);,1
vga_circles.si.v,732,assume(0);,1
vga_mc.si.v,3441,assume(reset);,1
vga_mc.si.v,4578,assume(0);,1
vga_mc.si.v,4610,assume(0);,1
vga_mc.si.v,4760,assume(0);,1
vga_mc.si.v,4870,assume(0);,1
vga_mc.si.v,4980,assume(0);,1
vga_mc.si.v,5090,assume(0);,1
vga_mc.si.v,5200,assume(0);,1
vga_mc.si.v,5310,assume(0);,1
vga_mc.si.v,5420,assume(0);,1
vga_mc.si.v,5530,assume(0);,1
vga_mc.si.v,5640,assume(0);,1
vga_mc.si.v,5750,assume(0);,1
vga_mc.si.v,5860,assume(0);,1
vga_mc.si.v,5970,assume(0);,1
vga_mc.si.v,6080,assume(0);,1
vga_mc.si.v,6190,assume(0);,1
vga_mc.si.v,6300,assume(0);,1
vga_mc.si.v,6410,assume(0);,1
vga_mc.si.v,6520,assume(0);,1
vga_mc.si.v,6630,assume(0);,1
vga_mc.si.v,6740,assume(0);,1
vga_mc.si.v,6850,assume(0);,1
vga_mc.si.v,6960,assume(0);,1
vga_mc.si.v,7070,assume(0);,1
vga_mc.si.v,7180,assume(0);,1
vga_mc.si.v,7290,assume(0);,1
vga_mc.si.v,7400,assume(0);,1
vga_mc.si.v,7510,assume(0);,1
vga_mc.si.v,7620,assume(0);,1
vga_mc.si.v,7730,assume(0);,1
vga_mc.si.v,7840,assume(0);,1
vga_mc.si.v,7950,assume(0);,1
vga_mc.si.v,8060,assume(0);,1
vga_mc.si.v,8170,assume(0);,1
vga_mc.si.v,8280,assume(0);,1
vga_mc.si.v,8390,assume(0);,1
vga_mc.si.v,8500,assume(0);,1
vga_mc.si.v,8610,assume(0);,1
vga_mc.si.v,8720,assume(0);,1
vga_mc.si.v,8830,assume(0);,1
vga_mc.si.v,8940,assume(0);,1
vga_mc.si.v,9050,assume(0);,1
vga_mc.si.v,9160,assume(0);,1
vga_mc.si.v,9270,assume(0);,1
vga_mc.si.v,9380,assume(0);,1
vga_mc.si.v,9490,assume(0);,1
vga_mc.si.v,9600,assume(0);,1
vga_mc.si.v,9710,assume(0);,1
vga_mc.si.v,9731,assume(0);,1
vga_mc.si.v,9775,assume(0);,1
rv32i_alu.v,218,assume(f_alu <= 1);,1
rv32i_alu.v,219,assume(f_opcode <= 1);,1
rv32i_memoryaccess.v,191,assert(pending_request);,1
fwb_master.v,433,assert(f_outstanding < MAX_OUTSTANDING);,1
fwb_master.v,435,assume(f_outstanding < MAX_OUTSTANDING);,1
fwb_master.v,528,assume(!i_wb_stall);,1
rv32i_core.v,389,assume(i_rst_n == 0);,1
rv32i_core.v,396,assume(f_alu <= 1);,1
rv32i_core.v,397,assume(f_opcode <= 1);,1
rv32i_core.v,457,assert(f_outstanding <= 1);,1
rv32i_core.v,459,assert(!o_wb_stb_data);,1
rv32i_core.v,485,assert(f_memoryaccess_rs1 == m0.base_regfile[f_memoryaccess_rs1_addr]); //verify that the rs1 value used from the ALU stage is the MOST updated value end else assert(f_memoryaccess_rs1 == 0);,3
rv32i_core.v,490,assert(f_memoryaccess_rs2 == m0.base_regfile[f_memoryaccess_rs2_addr]); //verify that the rs2 value used from the ALU stage is the MOST updated value end else assert(f_memoryaccess_rs2 == 0);,3
rv32i_core.v,504,"assert({writeback_ce,memoryaccess_ce,alu_ce,decoder_ce} == 0);",1
rv32i_core.v,512,"assert({alu_ce,decoder_ce} == 0);",1
rv32i_core.v,585,assert(memoryaccess_ce && !writeback_ce);,1
rv32i_core.v,589,assert(alu_ce && !memoryaccess_ce);,1
rv32i_core.v,617,cover(zicsr.m6.minstret == 10);,1
picorv32.v,2204,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2207,restrict property (resetn != $initstate);,1
picorv32.v,2217,assert (mem_wstrb == 0);,1
picorv32.v,2229,assert (ok);,1
picorv32.v,2247,assert(mem_valid);,1
picorv32.v,2248,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2249,assert(mem_wstrb == 0);,1
picorv32.v,2252,assert(mem_valid);,1
picorv32.v,2253,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2254,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2255,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2258,assert(!mem_valid || mem_ready);,1
picorv32.v,2204,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2207,restrict property (resetn != $initstate);,1
picorv32.v,2217,assert (mem_wstrb == 0);,1
picorv32.v,2229,assert (ok);,1
picorv32.v,2247,assert(mem_valid);,1
picorv32.v,2248,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2249,assert(mem_wstrb == 0);,1
picorv32.v,2252,assert(mem_valid);,1
picorv32.v,2253,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2254,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2255,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2258,assert(!mem_valid || mem_ready);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
spicmd.v,258,assert(!o_rxvalid);,1
spicmd.v,259,assert(!rxvalid || !o_busy);,1
spicmd.v,261,assert(&shift_data);,1
spicmd.v,265,assert(!o_rxvalid);,1
spicmd.v,284,assert(f_send_seq == 0);,1
spicmd.v,287,"assert(shift_data == { 2'b01, f_cmd, f_data });",1
spicmd.v,288,assert(o_busy);,1
spicmd.v,289,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,290,assert(crc_valid_sreg == 5'b1_0000);,1
spicmd.v,293,"assert(shift_data == { f_data, 8'hff });",1
spicmd.v,294,assert(o_busy);,1
spicmd.v,295,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,296,assert(crc_valid_sreg == 5'b1000);,1
spicmd.v,299,"assert(shift_data == { f_data[23:0], 16'hffff });",1
spicmd.v,300,assert(o_busy);,1
spicmd.v,301,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,302,assert(crc_valid_sreg == 5'b100);,1
spicmd.v,305,"assert(shift_data == { f_data[15:0], 24'hffffff });",1
spicmd.v,306,assert(o_busy);,1
spicmd.v,307,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,308,assert(crc_valid_sreg == 5'b10);,1
spicmd.v,311,"assert(shift_data == { f_data[7:0], 32'hffffffff });",1
spicmd.v,312,assert(o_busy);,1
spicmd.v,313,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,314,assert(crc_valid_sreg == 5'b1);,1
spicmd.v,317,"assert(shift_data == { crc_byte, 32'hffffffff });",1
spicmd.v,318,assert(o_busy);,1
spicmd.v,319,"assert({ o_cmd_sent, almost_sent } == 2'b01);",1
spicmd.v,320,assert(crc_valid_sreg == 5'b0);,1
spicmd.v,323,assert(shift_data == 40'hff_ffff_ffff);,1
spicmd.v,324,assert(crc_valid_sreg == 5'b0);,1
spicmd.v,325,assert(o_cmd_sent);,1
spicmd.v,332,assert(f_send_seq != 0);,1
spicmd.v,333,assert(f_rcv_seq != 0);,1
spicmd.v,337,assert(crc_bit_counter <= 20);,1
spicmd.v,357,assume(i_ll_byte == 8'hff);,1
spicmd.v,365,assert(f_rcv_seq == 1);,1
spicmd.v,366,assert(&o_response);,1
spicmd.v,377,assert(f_rcv_seq != 0);,1
spicmd.v,413,assert(!rx_r1_byte);,1
spicmd.v,416,assert(!rxvalid);,1
spicmd.v,417,assert(f_send_seq != 0);,1
spicmd.v,418,assert(&o_response[31:0]);,1
spicmd.v,421,assert(o_cmd_sent);,1
spicmd.v,422,assert(rx_r1_byte);,1
spicmd.v,423,assert(rx_counter == 0);,1
spicmd.v,424,assert(rx_check_busy);,1
spicmd.v,425,assert(rxvalid);,1
spicmd.v,426,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,430,assert(o_cmd_sent);,1
spicmd.v,431,assert(rx_r1_byte);,1
spicmd.v,432,assert(rx_counter == 0);,1
spicmd.v,433,assert(!rx_check_busy);,1
spicmd.v,434,assert(rxvalid);,1
spicmd.v,435,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,439,assert(rx_r1_byte);,1
spicmd.v,440,assert(rx_counter == 4);,1
spicmd.v,441,assert(!rx_check_busy);,1
spicmd.v,442,assert(!rxvalid);,1
spicmd.v,443,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,444,assert(&o_response[31:0]);,1
spicmd.v,447,assert(rx_r1_byte);,1
spicmd.v,448,assert(rx_counter == 3);,1
spicmd.v,449,assert(!rx_check_busy);,1
spicmd.v,450,assert(!rxvalid);,1
spicmd.v,451,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,452,assert(o_response[7:0] == f_rcv_data[7:0]);,1
spicmd.v,453,assert(&o_response[31:8]);,1
spicmd.v,456,assert(rx_r1_byte);,1
spicmd.v,457,assert(rx_counter == 2);,1
spicmd.v,458,assert(!rx_check_busy);,1
spicmd.v,459,assert(!rxvalid);,1
spicmd.v,460,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,461,assert(o_response[15:0] == f_rcv_data[15:0]);,1
spicmd.v,462,assert(&o_response[31:16]);,1
spicmd.v,465,assert(rx_r1_byte);,1
spicmd.v,466,assert(rx_counter == 1);,1
spicmd.v,467,assert(!rx_check_busy);,1
spicmd.v,468,assert(!rxvalid);,1
spicmd.v,469,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,470,assert(o_response[23:0] == f_rcv_data[23:0]);,1
spicmd.v,471,assert(&o_response[31:24]);,1
spicmd.v,474,assert(rx_r1_byte);,1
spicmd.v,475,assert(rx_counter == 0);,1
spicmd.v,476,assert(!rx_check_busy);,1
spicmd.v,477,assert(rxvalid);,1
spicmd.v,478,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,480,assert(rxvalid == (rx_counter == 0));,1
spicmd.v,494,cover(o_cmd_sent);,1
spicmd.v,495,cover(f_rcv_seq == 1);,1
spicmd.v,496,cover(f_rcv_seq == 2);,1
spicmd.v,497,cover(f_rcv_seq == 3);,1
spicmd.v,498,cover(f_rcv_seq == 4);,1
spicmd.v,499,cover(f_rcv_seq == 5);,1
spicmd.v,500,cover(f_rcv_seq == 6);,1
spicmd.v,501,cover(f_rcv_seq == 7);,1
spicmd.v,502,cover(f_rcv_seq == 8);,1
spicmd.v,506,cover(o_rxvalid && f_cmd == 0 && f_data == 0);,1
sdckgen.v,203,assume(i_reset);,1
sdckgen.v,207,assume(i_cfg_clk90);,1
sdckgen.v,214,assert(o_ckstb);,1
sdckgen.v,241,assert(counter[NCTR-1] == 1'b0);,1
spitxdata.v,410,assert(!o_ll_stb);,1
spitxdata.v,411,assert(!o_busy);,1
spitxdata.v,412,assert(rdvalid == 0);,1
spitxdata.v,413,assert(!o_rxvalid);,1
spitxdata.v,419,assert(rdvalid == 0);,1
spitxdata.v,420,assert(!o_rxvalid);,1
spitxdata.v,422,assert(fill == 0);,1
spitxdata.v,424,assert(fill == 5'h10);,1
spitxdata.v,426,assert(fill == 0);,1
spitxdata.v,427,assert(crc_fill == 0);,1
spitxdata.v,474,assert(o_ll_stb);,1
spitxdata.v,475,assert(!crc_stb);,1
spitxdata.v,480,assert(!o_ll_stb || i_ll_busy);,1
spitxdata.v,489,assert(crc_fill <= 1);,1
spitxdata.v,497,assert(rdvalid == 0);,1
spitxdata.v,512,assert(received_token);,1
spitxdata.v,516,assert(data_sent);,1
spitxdata.v,521,assert(data_read);,1
spitxdata.v,522,assert(!crc_stb);,1
spitxdata.v,523,assert(!crc_active);,1
spitxdata.v,528,assert(&fill[4:1]);,1
spitxdata.v,530,assert(&fill[4:2]);,1
spitxdata.v,532,assert(&fill[4:3]);,1
spitxdata.v,535,assert(crc_fill <= 5'h10);,1
spitxdata.v,539,assert(crc_flag);,1
spitxdata.v,540,assert(!crc_stb);,1
spitxdata.v,541,assert(!crc_active);,1
spitxdata.v,547,assert(!crc_stb);,1
spitxdata.v,548,assert(all_mem_read);,1
spitxdata.v,549,assert(!crc_active);,1
spitxdata.v,558,assert(lastaddr);,1
spitxdata.v,562,assert(!all_mem_read);,1
spitxdata.v,572,assert(f_lgblksz >= 3);,1
spitxdata.v,576,assert(f_lgblksz_m3[2:0] == r_lgblksz_m3);,1
spitxdata.v,592,assert(fill[4]);,1
spitxdata.v,596,assert(fill[DW/8]);,1
spitxdata.v,604,assert(fill[k-1:0]==0);,1
spitxdata.v,609,assert(!crc_stb);,1
spitxdata.v,631,assume(!f_read_check);,1
spitxdata.v,651,assert(rdvalid != 0);,1
spitxdata.v,652,assert(fill == 5'h10);,1
spitxdata.v,655,assert(o_ll_stb);,1
spitxdata.v,656,assert(rdvalid == 0);,1
spitxdata.v,657,assert(fill == 5'h1f);,1
spitxdata.v,659,assert(gearbox[DW+8-1:8] == f_read_data);,1
spitxdata.v,661,assert(gearbox[DW-1:0] == f_read_data);,1
spitxdata.v,664,assert(o_ll_stb);,1
spitxdata.v,665,assert(rdvalid == 0);,1
spitxdata.v,666,assert(fill == 5'h1e);,1
spitxdata.v,668,assert(gearbox[DW-1:0] == f_read_data);,1
spitxdata.v,670,assert(gearbox[8+DW-1:8] == f_read_data);,1
spitxdata.v,673,assert(o_ll_stb);,1
spitxdata.v,674,assert(rdvalid == 0);,1
spitxdata.v,675,assert(fill == 5'h1c);,1
spitxdata.v,677,assert(gearbox[DW-8-1:0] == f_read_data[31:8]);,1
spitxdata.v,679,assert(gearbox[8+DW-1:16] == f_read_data[23:0]);,1
spitxdata.v,682,assert(o_ll_stb);,1
spitxdata.v,683,assert(rdvalid == 0);,1
spitxdata.v,684,assert(fill == 5'h18);,1
spitxdata.v,686,assert(gearbox[DW-16-1:0] == f_read_data[31:16]);,1
spitxdata.v,688,assert(gearbox[8+DW-1:24] == f_read_data[15:0]);,1
spitxdata.v,691,assert(o_ll_stb);,1
spitxdata.v,692,assert(fill[4]);,1
spitxdata.v,694,assert(gearbox[DW-24-1:0] == f_read_data[31:24]);,1
spitxdata.v,696,assert(gearbox[8+DW-1:DW] == f_read_data[7:0]);,1
spitxdata.v,703,assert(0);,1
spitxdata.v,713,cover(f_lgblksz == 4 && o_rxvalid);,1
spitxdata.v,714,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h00);,1
spitxdata.v,715,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h01);,1
spitxdata.v,716,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h02);,1
spitxdata.v,717,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h03);,1
spitxdata.v,718,cover(o_busy && f_lgblksz == 4 && lastaddr);,1
spitxdata.v,719,cover(o_busy && f_lgblksz == 4 && crc_stb);,1
spitxdata.v,720,cover(o_busy && f_lgblksz == 4 && all_mem_read);,1
spitxdata.v,721,cover(o_busy && f_lgblksz == 4 && crc_flag);,1
spitxdata.v,722,cover(o_busy && f_lgblksz == 4 && data_read);,1
spitxdata.v,723,cover(o_busy && f_lgblksz == 4 && data_sent);,1
spitxdata.v,724,cover(o_busy && f_lgblksz == 4 && received_token);,1
spitxdata.v,725,cover(o_busy && f_lgblksz == 4 && all_idle);,1
spitxdata.v,726,cover(!o_busy && f_lgblksz == 4 && all_idle);,1
sdspi.v,876,assert(!tx_busy || !rx_busy);,1
sdspi.v,879,assert(!tx_start || !rx_start);,1
sdspi.v,884,assert(!tx_start && !rx_start);,1
sdspi.v,885,assert(!tx_busy && !rx_busy);,1
sdspi.v,887,assert(!rx_start && !rx_busy);,1
sdspi.v,889,assert(!tx_start && !tx_busy);,1
sdspi.v,894,assert(r_cmd_busy);,1
sdspi.v,898,assert(r_lgblklen >= 3);,1
sdspi.v,899,assert(r_lgblklen <= 9);,1
sdspi.v,905,assert(spi_read_addr[LGFIFOLN-1:0] <= 1);,1
sdspi.v,906,assert(spi_write_addr[LGFIFOLN-1:0] <= 1);,1
sdspi.v,932,assert(ll_cmd_stb);,1
sdspi.v,933,assert(ll_cmd_dat == f_cmd_byte);,1
sdspi.v,1000,assert(!cmd_busy && !tx_busy && !rx_busy);,1
sdspi.v,1011,cover(cmd_sent && !r_cmd_busy);,1
sdspi.v,1012,cover(tx_busy && tx_start);,1
sdspi.v,1013,cover(rx_busy && rx_start);,1
sdtxframe.v,487,assert(ck_valid);,1
sdtxframe.v,864,assume(i_reset);,1
sdtxframe.v,873,assume(!i_cfg_ddr || i_cfg_spd > 1);,1
sdtxframe.v,874,assume(i_cfg_spd > 0);,1
sdtxframe.v,879,assume(i_cfg_width != 2'b11);,1
sdtxframe.v,885,assert(cfg_period <= P_4D);,1
sdtxframe.v,889,assume(i_en);,1
sdtxframe.v,902,assert(i_cfg_ddr == cfg_ddr);,1
sdtxframe.v,903,assert(i_cfg_width == cfg_width);,1
sdtxframe.v,908,assert(cfg_width != 2'b11);,1
sdtxframe.v,915,assert(cfg_ddr);,1
sdtxframe.v,923,assert(cfg_period == 2'b10);,1
sdtxframe.v,927,assert(cfg_period == 2'b01);,1
sdtxframe.v,929,assert(cfg_period == 2'b00);,1
sdtxframe.v,941,assume(!i_ckstb || !i_hlfck);,1
sdtxframe.v,954,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
sdtxframe.v,955,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
sdtxframe.v,956,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
sdtxframe.v,957,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
sdtxframe.v,966,assume(!i_ckstb);,1
sdtxframe.v,968,assume(i_ckstb);,1
sdtxframe.v,977,assume(i_ckstb && i_hlfck); // On every clock period end // }}} //////////////////////////////////////////////////////////////////////// // // IO properties // {{{ // Only change on a clock // {{{ always @(posedge i_clk) if (!f_past_valid || $past(i_reset)) assert(!tx_valid); else if (!$past(i_ckstb) && !$past(i_hlfck && cfg_ddr)) begin assert($stable(tx_valid)); assert($stable(tx_data)); end // }}},20
sdtxframe.v,1004,assert(&tx_data);,1
sdtxframe.v,1007,assert(tx_data[31:25] == 7'h7f);,1
sdtxframe.v,1008,assert(tx_data[23:17] == 7'h7f);,1
sdtxframe.v,1009,assert(tx_data[15: 9] == 7'h7f);,1
sdtxframe.v,1010,assert(tx_data[ 7: 1] == 7'h7f);,1
sdtxframe.v,1013,assert(tx_data[31:28] == 4'hf);,1
sdtxframe.v,1014,assert(tx_data[23:20] == 4'hf);,1
sdtxframe.v,1015,assert(tx_data[15:12] == 4'hf);,1
sdtxframe.v,1016,assert(tx_data[ 7: 4] == 4'hf);,1
sdtxframe.v,1029,assert(tx_data[31:24] == tx_data[ 7: 0]);,1
sdtxframe.v,1030,assert(tx_data[23:16] == tx_data[ 7: 0]);,1
sdtxframe.v,1031,assert(tx_data[15: 8] == tx_data[ 7: 0]);,1
sdtxframe.v,1034,assert(tx_data[31:24] == tx_data[23:16]);,1
sdtxframe.v,1035,assert(tx_data[15: 8] == tx_data[ 7: 0]);,1
sdtxframe.v,1043,assert(tx_valid && pre_valid);,1
sdtxframe.v,1047,assert(!tx_valid);,1
sdtxframe.v,1058,assume(i_en);,1
sdtxframe.v,1062,assume(!S_VALID);,1
sdtxframe.v,1070,assert(fs_count == 0);,1
sdtxframe.v,1077,assert(fcrc_count == fs_count);,1
sdtxframe.v,1079,assert(fcrc_count >= fs_count);,1
sdtxframe.v,1086,assume(!S_VALID);,1
sdtxframe.v,1087,assume(!i_en);,1
sdtxframe.v,1090,assume(S_VALID);,1
sdtxframe.v,1094,assume(S_VALID);,1
sdtxframe.v,1098,assume(!S_VALID);,1
sdtxframe.v,1102,assume(!S_VALID || S_LAST);,1
sdtxframe.v,1106,assert(fs_last);,1
sdtxframe.v,1110,assert(!fs_last);,1
sdtxframe.v,1114,assert(fs_last);,1
sdtxframe.v,1118,assert(!fs_last && S_VALID && fs_count > 0);,1
sdtxframe.v,1128,assume(fc_data == S_DATA);,1
sdtxframe.v,1144,assert(ck_counts == ((cfg_ddr && f_pending_half) ? 1:0));,1
sdtxframe.v,1148,assert(fs_count <= 1);,1
sdtxframe.v,1149,assert(fd_count == 0);,1
sdtxframe.v,1172,assert(pstate != P_IDLE);,1
sdtxframe.v,1175,assert(pstate != P_IDLE);,1
sdtxframe.v,1188,assert(pstate != P_IDLE);,1
sdtxframe.v,1190,assert(pre_data == fc_data);,1
sdtxframe.v,1192,assert(pstate == P_IDLE || pstate == P_LAST);,1
sdtxframe.v,1199,assert(pre_count <= 7);,1
sdtxframe.v,1203,assert(pre_valid);,1
sdtxframe.v,1209,assert(pre_count == (cfg_ddr) ? 7 : 3);,1
sdtxframe.v,1216,assert(pre_valid);,1
sdtxframe.v,1218,assert(pre_count <= (cfg_ddr) ? 7 : 3);,1
sdtxframe.v,1225,assert(pre_count == 0);,1
sdtxframe.v,1234,assert(fd_count == 0);,1
sdtxframe.v,1243,assert(pre_valid);,1
sdtxframe.v,1244,assert(fcrc_count == 1 + f_loaded_count[14:5]);,1
sdtxframe.v,1247,assert(ck_counts == 0);,1
sdtxframe.v,1267,assert(ck_counts == 0);,1
sdtxframe.v,1276,assert(ck_counts <= 7);,1
sdtxframe.v,1279,assert(ck_counts <= 3);,1
sdtxframe.v,1286,assert(ck_counts <= 15);,1
sdtxframe.v,1289,assert(ck_counts <= 3);,1
sdtxframe.v,1292,assert(ck_counts <= 1);,1
sdtxframe.v,1299,assert(ck_counts <= 7);,1
sdtxframe.v,1302,assert(ck_counts <= 1);,1
sdtxframe.v,1305,assert(ck_counts == 0);,1
sdtxframe.v,1307,"assert(fd_count + 32 == { fp_count, 5'h0 });",1
sdtxframe.v,1309,assert(ck_data == fc_data);,1
sdtxframe.v,1362,assert(ck_counts[0] == f_pending_half || (!pre_valid && pstate == P_LAST && ck_counts==0));,2
sdtxframe.v,1368,assert(ck_counts[0] == f_pending_half || (!pre_valid && pstate == P_LAST && ck_counts==0));,2
sdtxframe.v,1410,cover(1);,1
sdtxframe.v,1411,cover(1);,1
sdtxframe.v,1412,cover(1);,1
sdtxframe.v,1417,cover(1);,1
sdtxframe.v,1418,cover(1);,1
sdtxframe.v,1419,cover(1);,1
sdtxframe.v,1426,cover(1);,1
sdtxframe.v,1428,cover(1);,1
sdtxframe.v,1429,cover(fs_count == 1);,1
sdtxframe.v,1430,cover(fs_count == 2);,1
sdtxframe.v,1431,cover(fs_count == 3); // !!! cover(fs_count == 4); // !!! cover(S_VALID && S_LAST);,3
sdtxframe.v,1434,cover(!S_VALID);,1
sdtxframe.v,1436,cover(pstate == P_CRC);,1
sdtxframe.v,1437,cover(pstate == P_LAST); // !!! cover(!pre_valid); // !!! end WIDTH_8W: cover(1);,4
sdrxframe.v,370,assert(rnxt_strb == 0);,1
sdrxframe.v,371,assert(rnxt_data == 0);,1
sdrxframe.v,374,assert(next_subaddr == 1);,1
sdrxframe.v,376,assert(rnxt_data == 0);,1
sdrxframe.v,700,assume(i_reset);,1
sdrxframe.v,709,assume(!i_cfg_ds);,1
sdrxframe.v,713,assume(!i_rx_en);,1
sdrxframe.v,715,assume(!i_rx_en);,1
sdrxframe.v,717,assume(i_rx_en);,1
sdrxframe.v,728,assume(i_length > 0);,1
sdrxframe.v,731,assume(i_length[1:0] == 2'b00);,1
sdrxframe.v,733,assume(i_length[0] == 1'b0);,1
sdrxframe.v,742,assume(i_cfg_width != 2'b11);,1
sdrxframe.v,743,assume(i_length <= 16'h8000);,1
sdrxframe.v,760,assert(f_state);,1
sdrxframe.v,766,assert(busy || r_watchdog);,1
sdrxframe.v,776,assume(!r_watchdog);,1
sdrxframe.v,780,assume(o_ercode);,1
sdrxframe.v,793,assume(i_rx_strb == 0);,1
sdrxframe.v,794,assume(S_ASYNC_VALID == 0);,1
sdrxframe.v,799,assume(!i_rx_strb[0]);,1
sdrxframe.v,803,assume(!S_ASYNC_VALID);,1
sdrxframe.v,840,assert(f_count[4:0] == 0);,1
sdrxframe.v,843,assert(f_count[2:0] == sync_fill[2:0]);,1
sdrxframe.v,844,assert(f_count[2:0] == sync_fill[2:0]);,1
sdrxframe.v,848,assert(f_count[2:0] == sync_fill[2:0]);,1
sdrxframe.v,867,assert(!s2_valid);,1
sdrxframe.v,873,assert(sync_fill == 0);,1
sdrxframe.v,908,assert(f_count[LGLEN+3:3] == f_recount);,1
sdrxframe.v,921,assert(rail_count <= (i_length*8));,1
sdrxframe.v,949,assert(rail_count <= i_length);,1
sdrxframe.v,955,assert(!load_crc);,1
sdrxframe.v,960,assert(!load_crc);,1
sdrxframe.v,961,assert(!pending_crc);,1
sdrxframe.v,973,assert(pending_crc);,1
sdrxframe.v,982,assert(rail_count + f_count == i_length*8);,1
sdrxframe.v,983,assert(f_count <= i_length*8);,1
sdrxframe.v,984,assert(rail_count <= i_length*8);,1
sdrxframe.v,987,assert(rail_count + f_count == i_length*8+16);,1
sdrxframe.v,988,assert(f_count <= i_length*8+16);,1
sdrxframe.v,989,assert(rail_count <= i_length*8+16);,1
sdrxframe.v,992,assert(rail_count + f_count == i_length*8+32);,1
sdrxframe.v,993,assert(f_count <= i_length*8+32);,1
sdrxframe.v,994,assert(rail_count <= i_length*8+32);,1
sdrxframe.v,999,assert(rail_count <= i_length*2);,1
sdrxframe.v,1004,assert(rail_count <= i_length*2+16);,1
sdrxframe.v,1009,assert(rail_count <= i_length*2+32);,1
sdrxframe.v,1014,assert(rail_count <= i_length);,1
sdrxframe.v,1019,assert(rail_count <= i_length+16);,1
sdrxframe.v,1024,assert(rail_count <= i_length+32);,1
sdrxframe.v,1026,assert(!mem_full);,1
sdrxframe.v,1039,assert(!mem_full);,1
sdrxframe.v,1051,assert(f_next_subaddr == next_subaddr);,1
sdrxframe.v,1055,assert(o_mem_valid);,1
sdrxframe.v,1059,"assert({ mem_addr, subaddr } == 0);",1
sdrxframe.v,1063,"assert({ mem_full, o_mem_addr, subaddr } == fmem_count);",1
sdrxframe.v,1067,assert(!o_mem_valid);,1
sdrxframe.v,1069,assert(o_mem_strb != 0);,1
sdrxframe.v,1096,assume(i_rx_data[8] == fc_data[7]);,1
sdrxframe.v,1098,assume(i_rx_data[8] == fc_data[6]);,1
sdrxframe.v,1100,assume(i_rx_data[8] == fc_data[5]);,1
sdrxframe.v,1102,assume(i_rx_data[8] == fc_data[4]);,1
sdrxframe.v,1104,assume(i_rx_data[8] == fc_data[3]);,1
sdrxframe.v,1106,assume(i_rx_data[8] == fc_data[2]);,1
sdrxframe.v,1108,assume(i_rx_data[8] == fc_data[1]);,1
sdrxframe.v,1110,assume(i_rx_data[8] == fc_data[0]);,1
sdrxframe.v,1113,assume(i_rx_data[0] == fc_data[7]);,1
sdrxframe.v,1115,assume(i_rx_data[0] == fc_data[6]);,1
sdrxframe.v,1117,assume(i_rx_data[0] == fc_data[5]);,1
sdrxframe.v,1119,assume(i_rx_data[0] == fc_data[4]);,1
sdrxframe.v,1121,assume(i_rx_data[0] == fc_data[3]);,1
sdrxframe.v,1123,assume(i_rx_data[0] == fc_data[2]);,1
sdrxframe.v,1125,assume(i_rx_data[0] == fc_data[1]);,1
sdrxframe.v,1127,assume(i_rx_data[0] == fc_data[0]);,1
sdrxframe.v,1136,assume(i_rx_data[11:8] == fc_data[7:4]);,1
sdrxframe.v,1138,assume(i_rx_data[11:8] == fc_data[3:0]);,1
sdrxframe.v,1141,assume(i_rx_data[ 3: 0] == fc_data[7:4]);,1
sdrxframe.v,1143,assume(i_rx_data[ 3: 0] == fc_data[3:0]);,1
sdrxframe.v,1151,assume(i_rx_data[15:8] == fc_data);,1
sdrxframe.v,1153,assume(i_rx_data[ 7:0] == fc_data);,1
sdrxframe.v,1179,assert(sync_sreg[3:0] == fc_data[7:4]);,1
sdrxframe.v,1198,assert(fmem_data[MW-1:MW-8] == fc_data);,1
sdrxframe.v,1199,assert(fmem_strb);,1
sdrxframe.v,1213,cover(!i_crc_en);,1
sdrxframe.v,1214,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1218,cover(!i_crc_en);,1
sdrxframe.v,1219,cover(fc_posn == 0 && fc_data == 8'hff);,1
sdrxframe.v,1220,cover(fc_posn == 0 && fc_data == 8'ha5);,1
sdrxframe.v,1221,cover(fc_posn == 0 && fc_data == 8'h5a);,1
sdrxframe.v,1222,cover(fc_posn == 0 && fc_data == 8'h7e);,1
sdrxframe.v,1223,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1227,cover(!i_crc_en);,1
sdrxframe.v,1228,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1232,cover(!i_crc_en);,1
sdrxframe.v,1233,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1237,cover(!i_crc_en);,1
sdrxframe.v,1238,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1242,cover(!i_crc_en);,1
sdrxframe.v,1243,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1264,cover(!i_crc_en);,1
sdrxframe.v,1265,cover(o_err);,1
sdrxframe.v,1266,cover(i_crc_en && !o_err);,1
sdcmd.v,499,assert(!r_self_request);,1
sdcmd.v,703,assume(i_reset);,1
sdcmd.v,708,assume(!i_cmd_request);,1
sdcmd.v,709,assert(!active);,1
sdcmd.v,717,assume(!i_cmd_request);,1
sdcmd.v,720,assume(i_cmd_request);,1
sdcmd.v,740,assume(i_cmd_request);,1
sdcmd.v,741,assume(i_cmd_type == R_NONE);,1
sdcmd.v,754,assert(!f_busy);,1
sdcmd.v,755,assert(!r_busy);,1
sdcmd.v,756,assert(!o_done);,1
sdcmd.v,759,assert(!r_busy);,1
sdcmd.v,761,assert(!active);,1
sdcmd.v,764,assert(!r_busy);,1
sdcmd.v,765,assert(!f_busy);,1
sdcmd.v,771,assert(!o_err && o_ercode == 2'b00);,1
sdcmd.v,775,assert(o_done);,1
sdcmd.v,779,assert(o_ercode == ECODE_TIMEOUT);,1
sdcmd.v,783,assert(!o_cmd_response);,1
sdcmd.v,803,assume(!S_ASYNC_VALID && i_cmd_strb == 0);,1
sdcmd.v,807,assume(!i_cmd_strb[0]);,1
sdcmd.v,811,assert(!cfg_ds);,1
sdcmd.v,815,assume(!S_ASYNC_VALID);,1
sdcmd.v,845,assert(&tx_sreg);,1
sdcmd.v,846,assert(!o_cmd_en);,1
sdcmd.v,847,assert(o_cmd_data == 2'b11);,1
sdcmd.v,849,assert(o_cmd_en);,1
sdcmd.v,850,assert(tx_sreg == f_tx_now);,1
sdcmd.v,861,assert(!resp_count[0]);,1
sdcmd.v,865,assume(i_cmd_strb != 2'b11);,1
sdcmd.v,873,assert(r_busy);,1
sdcmd.v,879,assert(!o_mem_valid);,1
sdcmd.v,882,assert(resp_count == 0);,1
sdcmd.v,886,assert(mem_addr == 0);,1
sdcmd.v,889,assert(mem_addr == 4);,1
sdcmd.v,897,assert(resp_count == 0);,1
sdcmd.v,902,assert(w_done || r_done);,1
sdcmd.v,907,assert(w_done || r_done);,1
sdcmd.v,912,assert(cmd_type == R_R2);,1
sdcmd.v,916,assert(!waiting_on_response);,1
sdcmd.v,918,assert(waiting_on_response);,1
sdcmd.v,922,assert(w_done || r_done);,1
sdcmd.v,927,assert(o_mem_addr <= 3);,1
sdcmd.v,933,assert(srcount <= 48);,1
sdcmd.v,938,assert(srcount[0] == 1'b0);,1
sdcmd.v,942,assert(!waiting_on_response);,1
sdcmd.v,949,assert(!rx_timeout);,1
sdcmd.v,953,assert(!o_err && o_ercode == 2'b00);,1
sdcmd.v,960,assert(!r_done);,1
sdcmd.v,964,assert(!r_done);,1
sdcmd.v,971,assert(!r_done);,1
sdcmd.v,976,assert(!r_done);,1
sdcmd.v,981,assert(!waiting_on_response);,1
sdcmd.v,990,assert(r_busy);,1
sdcmd.v,995,assert(!o_done);,1
sdcmd.v,1001,assert(f_busy == r_busy);,1
sdcmd.v,1005,assert(o_ercode != ECODE_OKAY);,1
sdcmd.v,1017,cover(i_cmd_type == R_NONE);,1
sdcmd.v,1022,cover(i_cmd_type == R_R1 && !o_err);,1
sdcmd.v,1023,cover(i_cmd_type == R_R1 && o_err && o_ercode == ECODE_BADCRC);,1
sdcmd.v,1024,cover(i_cmd_type == R_R1 && o_err && o_ercode== ECODE_FRAMEERR);,1
sdcmd.v,1027,cover(i_cmd_type == R_R2 && !o_err);,1
sdcmd.v,1028,cover(i_cmd_type == R_R2 && o_err && o_ercode == ECODE_BADCRC);,1
sdcmd.v,1029,cover(i_cmd_type == R_R2 && o_err && o_ercode== ECODE_FRAMEERR);,1
sdcmd.v,1034,cover(!o_busy);,1
exportspi.v,876,assert(!tx_busy || !rx_busy);,1
exportspi.v,879,assert(!tx_start || !rx_start);,1
exportspi.v,884,assert(!tx_start && !rx_start);,1
exportspi.v,885,assert(!tx_busy && !rx_busy);,1
exportspi.v,887,assert(!rx_start && !rx_busy);,1
exportspi.v,889,assert(!tx_start && !tx_busy);,1
exportspi.v,894,assert(r_cmd_busy);,1
exportspi.v,898,assert(r_lgblklen >= 3);,1
exportspi.v,899,assert(r_lgblklen <= 9);,1
exportspi.v,905,assert(spi_read_addr[LGFIFOLN-1:0] <= 1);,1
exportspi.v,906,assert(spi_write_addr[LGFIFOLN-1:0] <= 1);,1
exportspi.v,932,assert(ll_cmd_stb);,1
exportspi.v,933,assert(ll_cmd_dat == f_cmd_byte);,1
exportspi.v,1000,assert(!cmd_busy && !tx_busy && !rx_busy);,1
exportspi.v,1011,cover(cmd_sent && !r_cmd_busy);,1
exportspi.v,1012,cover(tx_busy && tx_start);,1
exportspi.v,1013,cover(rx_busy && rx_start);,1
exportspi.v,1294,assert(!o_rxvalid);,1
exportspi.v,1295,assert(!rxvalid || !o_busy);,1
exportspi.v,1297,assert(&shift_data);,1
exportspi.v,1301,assert(!o_rxvalid);,1
exportspi.v,1320,assert(f_send_seq == 0);,1
exportspi.v,1323,"assert(shift_data == { 2'b01, f_cmd, f_data });",1
exportspi.v,1324,assert(o_busy);,1
exportspi.v,1325,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1326,assert(crc_valid_sreg == 5'b1_0000);,1
exportspi.v,1329,"assert(shift_data == { f_data, 8'hff });",1
exportspi.v,1330,assert(o_busy);,1
exportspi.v,1331,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1332,assert(crc_valid_sreg == 5'b1000);,1
exportspi.v,1335,"assert(shift_data == { f_data[23:0], 16'hffff });",1
exportspi.v,1336,assert(o_busy);,1
exportspi.v,1337,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1338,assert(crc_valid_sreg == 5'b100);,1
exportspi.v,1341,"assert(shift_data == { f_data[15:0], 24'hffffff });",1
exportspi.v,1342,assert(o_busy);,1
exportspi.v,1343,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1344,assert(crc_valid_sreg == 5'b10);,1
exportspi.v,1347,"assert(shift_data == { f_data[7:0], 32'hffffffff });",1
exportspi.v,1348,assert(o_busy);,1
exportspi.v,1349,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1350,assert(crc_valid_sreg == 5'b1);,1
exportspi.v,1353,"assert(shift_data == { crc_byte, 32'hffffffff });",1
exportspi.v,1354,assert(o_busy);,1
exportspi.v,1355,"assert({ o_cmd_sent, almost_sent } == 2'b01);",1
exportspi.v,1356,assert(crc_valid_sreg == 5'b0);,1
exportspi.v,1359,assert(shift_data == 40'hff_ffff_ffff);,1
exportspi.v,1360,assert(crc_valid_sreg == 5'b0);,1
exportspi.v,1361,assert(o_cmd_sent);,1
exportspi.v,1368,assert(f_send_seq != 0);,1
exportspi.v,1369,assert(f_rcv_seq != 0);,1
exportspi.v,1373,assert(crc_bit_counter <= 20);,1
exportspi.v,1393,assume(i_ll_byte == 8'hff);,1
exportspi.v,1401,assert(f_rcv_seq == 1);,1
exportspi.v,1402,assert(&o_response);,1
exportspi.v,1413,assert(f_rcv_seq != 0);,1
exportspi.v,1449,assert(!rx_r1_byte);,1
exportspi.v,1452,assert(!rxvalid);,1
exportspi.v,1453,assert(f_send_seq != 0);,1
exportspi.v,1454,assert(&o_response[31:0]);,1
exportspi.v,1457,assert(o_cmd_sent);,1
exportspi.v,1458,assert(rx_r1_byte);,1
exportspi.v,1459,assert(rx_counter == 0);,1
exportspi.v,1460,assert(rx_check_busy);,1
exportspi.v,1461,assert(rxvalid);,1
exportspi.v,1462,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1466,assert(o_cmd_sent);,1
exportspi.v,1467,assert(rx_r1_byte);,1
exportspi.v,1468,assert(rx_counter == 0);,1
exportspi.v,1469,assert(!rx_check_busy);,1
exportspi.v,1470,assert(rxvalid);,1
exportspi.v,1471,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1475,assert(rx_r1_byte);,1
exportspi.v,1476,assert(rx_counter == 4);,1
exportspi.v,1477,assert(!rx_check_busy);,1
exportspi.v,1478,assert(!rxvalid);,1
exportspi.v,1479,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1480,assert(&o_response[31:0]);,1
exportspi.v,1483,assert(rx_r1_byte);,1
exportspi.v,1484,assert(rx_counter == 3);,1
exportspi.v,1485,assert(!rx_check_busy);,1
exportspi.v,1486,assert(!rxvalid);,1
exportspi.v,1487,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1488,assert(o_response[7:0] == f_rcv_data[7:0]);,1
exportspi.v,1489,assert(&o_response[31:8]);,1
exportspi.v,1492,assert(rx_r1_byte);,1
exportspi.v,1493,assert(rx_counter == 2);,1
exportspi.v,1494,assert(!rx_check_busy);,1
exportspi.v,1495,assert(!rxvalid);,1
exportspi.v,1496,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1497,assert(o_response[15:0] == f_rcv_data[15:0]);,1
exportspi.v,1498,assert(&o_response[31:16]);,1
exportspi.v,1501,assert(rx_r1_byte);,1
exportspi.v,1502,assert(rx_counter == 1);,1
exportspi.v,1503,assert(!rx_check_busy);,1
exportspi.v,1504,assert(!rxvalid);,1
exportspi.v,1505,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1506,assert(o_response[23:0] == f_rcv_data[23:0]);,1
exportspi.v,1507,assert(&o_response[31:24]);,1
exportspi.v,1510,assert(rx_r1_byte);,1
exportspi.v,1511,assert(rx_counter == 0);,1
exportspi.v,1512,assert(!rx_check_busy);,1
exportspi.v,1513,assert(rxvalid);,1
exportspi.v,1514,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1516,assert(rxvalid == (rx_counter == 0));,1
exportspi.v,1530,cover(o_cmd_sent);,1
exportspi.v,1531,cover(f_rcv_seq == 1);,1
exportspi.v,1532,cover(f_rcv_seq == 2);,1
exportspi.v,1533,cover(f_rcv_seq == 3);,1
exportspi.v,1534,cover(f_rcv_seq == 4);,1
exportspi.v,1535,cover(f_rcv_seq == 5);,1
exportspi.v,1536,cover(f_rcv_seq == 6);,1
exportspi.v,1537,cover(f_rcv_seq == 7);,1
exportspi.v,1538,cover(f_rcv_seq == 8);,1
exportspi.v,1542,cover(o_rxvalid && f_cmd == 0 && f_data == 0);,1
exportspi.v,1959,assert(!o_ll_stb);,1
exportspi.v,1960,assert(!o_busy);,1
exportspi.v,1961,assert(rdvalid == 0);,1
exportspi.v,1962,assert(!o_rxvalid);,1
exportspi.v,1968,assert(rdvalid == 0);,1
exportspi.v,1969,assert(!o_rxvalid);,1
exportspi.v,1971,assert(fill == 0);,1
exportspi.v,1973,assert(fill == 5'h10);,1
exportspi.v,1975,assert(fill == 0);,1
exportspi.v,1976,assert(crc_fill == 0);,1
exportspi.v,2023,assert(o_ll_stb);,1
exportspi.v,2024,assert(!crc_stb);,1
exportspi.v,2029,assert(!o_ll_stb || i_ll_busy);,1
exportspi.v,2038,assert(crc_fill <= 1);,1
exportspi.v,2046,assert(rdvalid == 0);,1
exportspi.v,2061,assert(received_token);,1
exportspi.v,2065,assert(data_sent);,1
exportspi.v,2070,assert(data_read);,1
exportspi.v,2071,assert(!crc_stb);,1
exportspi.v,2072,assert(!crc_active);,1
exportspi.v,2077,assert(&fill[4:1]);,1
exportspi.v,2079,assert(&fill[4:2]);,1
exportspi.v,2081,assert(&fill[4:3]);,1
exportspi.v,2084,assert(crc_fill <= 5'h10);,1
exportspi.v,2088,assert(crc_flag);,1
exportspi.v,2089,assert(!crc_stb);,1
exportspi.v,2090,assert(!crc_active);,1
exportspi.v,2096,assert(!crc_stb);,1
exportspi.v,2097,assert(all_mem_read);,1
exportspi.v,2098,assert(!crc_active);,1
exportspi.v,2107,assert(lastaddr);,1
exportspi.v,2111,assert(!all_mem_read);,1
exportspi.v,2121,assert(f_lgblksz >= 3);,1
exportspi.v,2125,assert(f_lgblksz_m3[2:0] == r_lgblksz_m3);,1
exportspi.v,2141,assert(fill[4]);,1
exportspi.v,2145,assert(fill[DW/8]);,1
exportspi.v,2153,assert(fill[k-1:0]==0);,1
exportspi.v,2158,assert(!crc_stb);,1
exportspi.v,2180,assume(!f_read_check);,1
exportspi.v,2200,assert(rdvalid != 0);,1
exportspi.v,2201,assert(fill == 5'h10);,1
exportspi.v,2204,assert(o_ll_stb);,1
exportspi.v,2205,assert(rdvalid == 0);,1
exportspi.v,2206,assert(fill == 5'h1f);,1
exportspi.v,2208,assert(gearbox[DW+8-1:8] == f_read_data);,1
exportspi.v,2210,assert(gearbox[DW-1:0] == f_read_data);,1
exportspi.v,2213,assert(o_ll_stb);,1
exportspi.v,2214,assert(rdvalid == 0);,1
exportspi.v,2215,assert(fill == 5'h1e);,1
exportspi.v,2217,assert(gearbox[DW-1:0] == f_read_data);,1
exportspi.v,2219,assert(gearbox[8+DW-1:8] == f_read_data);,1
exportspi.v,2222,assert(o_ll_stb);,1
exportspi.v,2223,assert(rdvalid == 0);,1
exportspi.v,2224,assert(fill == 5'h1c);,1
exportspi.v,2226,assert(gearbox[DW-8-1:0] == f_read_data[31:8]);,1
exportspi.v,2228,assert(gearbox[8+DW-1:16] == f_read_data[23:0]);,1
exportspi.v,2231,assert(o_ll_stb);,1
exportspi.v,2232,assert(rdvalid == 0);,1
exportspi.v,2233,assert(fill == 5'h18);,1
exportspi.v,2235,assert(gearbox[DW-16-1:0] == f_read_data[31:16]);,1
exportspi.v,2237,assert(gearbox[8+DW-1:24] == f_read_data[15:0]);,1
exportspi.v,2240,assert(o_ll_stb);,1
exportspi.v,2241,assert(fill[4]);,1
exportspi.v,2243,assert(gearbox[DW-24-1:0] == f_read_data[31:24]);,1
exportspi.v,2245,assert(gearbox[8+DW-1:DW] == f_read_data[7:0]);,1
exportspi.v,2252,assert(0);,1
exportspi.v,2262,cover(f_lgblksz == 4 && o_rxvalid);,1
exportspi.v,2263,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h00);,1
exportspi.v,2264,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h01);,1
exportspi.v,2265,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h02);,1
exportspi.v,2266,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h03);,1
exportspi.v,2267,cover(o_busy && f_lgblksz == 4 && lastaddr);,1
exportspi.v,2268,cover(o_busy && f_lgblksz == 4 && crc_stb);,1
exportspi.v,2269,cover(o_busy && f_lgblksz == 4 && all_mem_read);,1
exportspi.v,2270,cover(o_busy && f_lgblksz == 4 && crc_flag);,1
exportspi.v,2271,cover(o_busy && f_lgblksz == 4 && data_read);,1
exportspi.v,2272,cover(o_busy && f_lgblksz == 4 && data_sent);,1
exportspi.v,2273,cover(o_busy && f_lgblksz == 4 && received_token);,1
exportspi.v,2274,cover(o_busy && f_lgblksz == 4 && all_idle);,1
exportspi.v,2275,cover(!o_busy && f_lgblksz == 4 && all_idle);,1
exportspi.v,2674,assert(!o_busy);,1
exportspi.v,2675,assert(o_write == 0);,1
exportspi.v,2681,assert(!o_rxvalid);,1
exportspi.v,2682,assert(crc_fill == 0);,1
exportspi.v,2687,assert(!o_write);,1
exportspi.v,2746,assert(fill == 0);,1
exportspi.v,2751,assert(lastaddr);,1
exportspi.v,2752,assert(all_mem_written || o_write);,1
exportspi.v,2753,assert(lastdata);,1
exportspi.v,2759,assert(lastaddr);,1
exportspi.v,2760,assert(lastdata);,1
exportspi.v,2766,assert(lastaddr);,1
exportspi.v,2782,assert(f_lgblksz >= 3);,1
exportspi.v,2783,assert(f_lgblksz <= 9);,1
exportspi.v,2785,assert(o_addr[AW-1] == f_fifo);,1
exportspi.v,2790,assert(o_addr[AW-2:0] == 0);,1
exportspi.v,2791,assert(fill == 0);,1
exportspi.v,2797,assert(f_lgblksz_m3[2:0] == r_lgblksz_m3);,1
exportspi.v,2826,assert(fill[0]);,1
exportspi.v,2828,assert(fill[2] == 0);,1
exportspi.v,2839,assert(crc_fill <= 4);,1
exportspi.v,2844,assert(!crc_active);,1
exportspi.v,2845,assert(crc_fill == 0);,1
exportspi.v,2846,assert(crc_data == 0);,1
exportspi.v,2853,assert(next_crc_data == 0);,1
exportspi.v,2876,assume(!f_read_check);,1
exportspi.v,2896,assert(rdvalid != 0);,1
exportspi.v,2897,assert(fill == 5'h10);,1
exportspi.v,2900,assert(rdvalid == 0);,1
exportspi.v,2901,assert(fill == 5'h1f);,1
exportspi.v,2902,assert(gearbox[DW-1:0] == f_read_data);,1
exportspi.v,2905,assert(rdvalid == 0);,1
exportspi.v,2906,assert(fill == 5'h1e);,1
exportspi.v,2907,assert(gearbox[8+DW-1:8] == f_read_data);,1
exportspi.v,2910,assert(rdvalid == 0);,1
exportspi.v,2911,assert(fill == 5'h1c);,1
exportspi.v,2912,assert(gearbox[8+DW-1:16] == f_read_data[23:0]);,1
exportspi.v,2915,assert(rdvalid == 0);,1
exportspi.v,2916,assert(fill == 5'h18);,1
exportspi.v,2917,assert(gearbox[8+DW-1:24] == f_read_data[15:0]);,1
exportspi.v,2920,assert(fill[4]);,1
exportspi.v,2921,assert(gearbox[8+DW-1:DW] == f_read_data[7:0]);,1
exportspi.v,2941,cover(error_token);,1
exportspi.v,2942,cover(start_token);,1
exportspi.v,2954,cover(o_rxvalid);,1
exportspi.v,2955,cover(o_rxvalid && all_mem_written);,1
exportspi.v,2956,cover(o_rxvalid && f_lgblksz == 4 && all_mem_written);,1
exportspi.v,2957,cover(o_rxvalid && f_lgblksz == 4 && o_response == 0);,1
exportspi.v,2958,cover(o_rxvalid && f_lgblksz == 4 && o_response == 0 && all_mem_written);,1
exportspi.v,2960,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h01);,1
exportspi.v,2961,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h02);,1
exportspi.v,2962,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h03);,1
exportspi.v,2963,cover(o_busy && crc_byte == 0);,1
exportspi.v,2964,cover(o_busy && crc_byte == 1);,1
exportspi.v,2965,cover(o_busy && crc_byte == 2);,1
exportspi.v,2966,cover(o_busy && crc_byte == 1 && i_ll_stb);,1
exportspi.v,2967,cover(o_busy && crc_byte == 2 && i_ll_stb);,1
exportspi.v,2969,cover(cvr_packet_received && !o_busy);,1
exportspi.v,3168,assume(powerup_counter > 2);,1
exportspi.v,3171,assert(powerup_hold);,1
exportspi.v,3207,assume(startup_counter > 1);,1
exportspi.v,3210,assert(startup_hold);,1
exportspi.v,3226,assert(startup_hold);,1
exportspi.v,3472,assert(r_clk_counter <= i_speed);,1
exportspi.v,3511,assert(o_cs_n == CSN_ON_STARTUP);,1
exportspi.v,3519,assert(!CSN_ON_STARTUP || o_cs_n);,1
exportspi.v,3521,assert(!o_cs_n);,1
exportspi.v,3528,assert(o_cs_n);,1
exportspi.v,3532,assert(!o_cs_n && o_sclk);,1
exportspi.v,3534,assert(o_cs_n || bus_grant);,1
exportspi.v,3538,assert(!o_cs_n && o_sclk);,1
exportspi.v,3566,assert(startup_hold);,1
exportspi.v,3567,assert(o_cs_n == CSN_ON_STARTUP);,1
exportspi.v,3568,assert(o_sclk);,1
exportspi.v,3589,assert(r_state <= LLSDSPI_END);,1
exportspi.v,3626,assert(r_state != LLSDSPI_WAIT);,1
exportspi.v,3632,assert(r_byte == fv_byte[7:0]);,1
exportspi.v,3633,assert(o_sclk);,1
exportspi.v,3634,assert(!o_stb);,1
exportspi.v,3635,assert(f_start_seq == 0);,1
exportspi.v,3636,assert(f_next_seq == 0);,1
exportspi.v,3637,assert(!r_idle);,1
exportspi.v,3638,assert(r_z_counter);,1
exportspi.v,3643,assert(o_sclk);,1
exportspi.v,3645,assert(!o_sclk);,1
exportspi.v,3651,cover(r_state == LLSDSPI_START);,1
exportspi.v,3657,assert(o_sclk);,1
exportspi.v,3658,assert(r_byte == fv_byte[7:0] );,1
exportspi.v,3659,assert(r_state == LLSDSPI_START);,1
exportspi.v,3661,assert(!OPT_CONTINUOUS_CLOCK);,1
exportspi.v,3662,assert(!o_cs_n);,1
exportspi.v,3663,assert(!r_idle);,1
exportspi.v,3666,assert(!o_sclk);,1
exportspi.v,3668,assert(r_state == LLSDSPI_START+1);,1
exportspi.v,3669,assert(o_mosi == fv_byte[7]);,1
exportspi.v,3670,assert(!o_cs_n);,1
exportspi.v,3671,assert(!r_idle);,1
exportspi.v,3674,assert(o_sclk);,1
exportspi.v,3676,assert(r_state == LLSDSPI_START+1);,1
exportspi.v,3677,assert(o_mosi == fv_byte[7]);,1
exportspi.v,3678,assert(!o_cs_n);,1
exportspi.v,3679,assert(!r_idle);,1
exportspi.v,3682,assert(!o_sclk);,1
exportspi.v,3684,assert(r_state == LLSDSPI_START+2);,1
exportspi.v,3685,assert(o_mosi == fv_byte[6]);,1
exportspi.v,3686,assert(!o_cs_n);,1
exportspi.v,3687,assert(!r_idle);,1
exportspi.v,3690,assert(o_sclk);,1
exportspi.v,3692,assert(r_state == LLSDSPI_START+2);,1
exportspi.v,3693,assert(o_mosi == fv_byte[6]);,1
exportspi.v,3694,assert(!o_cs_n);,1
exportspi.v,3695,assert(!r_idle);,1
exportspi.v,3698,assert(!o_sclk);,1
exportspi.v,3700,assert(r_state == LLSDSPI_START+3);,1
exportspi.v,3701,assert(o_mosi == fv_byte[5]);,1
exportspi.v,3702,assert(!o_cs_n);,1
exportspi.v,3703,assert(!r_idle);,1
exportspi.v,3706,assert(o_sclk);,1
exportspi.v,3708,assert(r_state == LLSDSPI_START+3);,1
exportspi.v,3709,assert(o_mosi == fv_byte[5]);,1
exportspi.v,3710,assert(!o_cs_n);,1
exportspi.v,3711,assert(!r_idle);,1
exportspi.v,3714,assert(!o_sclk);,1
exportspi.v,3716,assert(r_state == LLSDSPI_START+4);,1
exportspi.v,3717,assert(o_mosi == fv_byte[4]);,1
exportspi.v,3718,assert(!o_cs_n);,1
exportspi.v,3719,assert(!r_idle);,1
exportspi.v,3722,assert(o_sclk);,1
exportspi.v,3724,assert(r_state == LLSDSPI_START+4);,1
exportspi.v,3725,assert(o_mosi == fv_byte[4]);,1
exportspi.v,3726,assert(!o_cs_n);,1
exportspi.v,3727,assert(!r_idle);,1
exportspi.v,3730,assert(!o_sclk);,1
exportspi.v,3732,assert(r_state == LLSDSPI_START+5);,1
exportspi.v,3733,assert(o_mosi == fv_byte[3]);,1
exportspi.v,3734,assert(!o_cs_n);,1
exportspi.v,3735,assert(!r_idle);,1
exportspi.v,3738,assert(o_sclk);,1
exportspi.v,3740,assert(r_state == LLSDSPI_START+5);,1
exportspi.v,3741,assert(o_mosi == fv_byte[3]);,1
exportspi.v,3742,assert(!o_cs_n);,1
exportspi.v,3743,assert(!r_idle);,1
exportspi.v,3746,assert(!o_sclk);,1
exportspi.v,3748,assert(r_state == LLSDSPI_START+6);,1
exportspi.v,3749,assert(o_mosi == fv_byte[2]);,1
exportspi.v,3750,assert(!o_cs_n);,1
exportspi.v,3751,assert(!r_idle);,1
exportspi.v,3754,assert(o_sclk);,1
exportspi.v,3756,assert(r_state == LLSDSPI_START+6);,1
exportspi.v,3757,assert(o_mosi == fv_byte[2]);,1
exportspi.v,3758,assert(!o_cs_n);,1
exportspi.v,3759,assert(!r_idle);,1
exportspi.v,3762,assert(!o_sclk);,1
exportspi.v,3764,assert(r_state == LLSDSPI_START+7);,1
exportspi.v,3765,assert(o_mosi == fv_byte[1]);,1
exportspi.v,3766,assert(!o_cs_n);,1
exportspi.v,3767,assert(!r_idle);,1
exportspi.v,3770,assert(o_sclk);,1
exportspi.v,3772,assert(r_state == LLSDSPI_START+7);,1
exportspi.v,3773,assert(o_mosi == fv_byte[1]);,1
exportspi.v,3774,assert(!o_cs_n);,1
exportspi.v,3775,assert(!r_idle);,1
exportspi.v,3778,assert(!o_sclk);,1
exportspi.v,3780,assert(r_state == LLSDSPI_END);,1
exportspi.v,3781,assert(o_mosi == fv_byte[0]);,1
exportspi.v,3782,assert(!o_cs_n);,1
exportspi.v,3783,assert(!r_idle);,1
exportspi.v,3786,assert(o_sclk);,1
exportspi.v,3788,assert(r_state == LLSDSPI_END);,1
exportspi.v,3789,assert(o_mosi == fv_byte[0]);,1
exportspi.v,3790,assert(!o_cs_n);,1
exportspi.v,3791,assert(r_idle);,1
exportspi.v,3794,assert(o_sclk);,1
exportspi.v,3795,assert(r_state == LLSDSPI_HOTIDLE);,1
exportspi.v,3796,assert(r_idle);,1
exportspi.v,3798,assert(!o_cs_n);,1
exportspi.v,3804,assert(!o_cs_n);,1
exportspi.v,3805,assert(bus_grant);,1
exportspi.v,3832,assert(o_sclk);,1
exportspi.v,3834,assert(!o_sclk);,1
exportspi.v,3839,assert(!o_sclk);,1
exportspi.v,3841,assert(r_state == LLSDSPI_START+1);,1
exportspi.v,3842,assert(o_mosi == fv_byte[7]);,1
exportspi.v,3843,assert(!o_cs_n);,1
exportspi.v,3844,assert(!r_idle);,1
exportspi.v,3847,assert(o_sclk);,1
exportspi.v,3849,assert(r_state == LLSDSPI_START+1);,1
exportspi.v,3850,assert(o_mosi == fv_byte[7]);,1
exportspi.v,3851,assert(!o_cs_n);,1
exportspi.v,3852,assert(!r_idle);,1
exportspi.v,3855,assert(!o_sclk);,1
exportspi.v,3857,assert(r_state == LLSDSPI_START+2);,1
exportspi.v,3858,assert(o_mosi == fv_byte[6]);,1
exportspi.v,3859,assert(!o_cs_n);,1
exportspi.v,3860,assert(!r_idle);,1
exportspi.v,3863,assert(o_sclk);,1
exportspi.v,3865,assert(r_state == LLSDSPI_START+2);,1
exportspi.v,3866,assert(o_mosi == fv_byte[6]);,1
exportspi.v,3867,assert(!o_cs_n);,1
exportspi.v,3868,assert(!r_idle);,1
exportspi.v,3871,assert(!o_sclk);,1
exportspi.v,3873,assert(r_state == LLSDSPI_START+3);,1
exportspi.v,3874,assert(o_mosi == fv_byte[5]);,1
exportspi.v,3875,assert(!o_cs_n);,1
exportspi.v,3876,assert(!r_idle);,1
exportspi.v,3879,assert(o_sclk);,1
exportspi.v,3881,assert(r_state == LLSDSPI_START+3);,1
exportspi.v,3882,assert(o_mosi == fv_byte[5]);,1
exportspi.v,3883,assert(!o_cs_n);,1
exportspi.v,3884,assert(!r_idle);,1
exportspi.v,3887,assert(!o_sclk);,1
exportspi.v,3889,assert(r_state == LLSDSPI_START+4);,1
exportspi.v,3890,assert(o_mosi == fv_byte[4]);,1
exportspi.v,3891,assert(!o_cs_n);,1
exportspi.v,3892,assert(!r_idle);,1
exportspi.v,3895,assert(o_sclk);,1
exportspi.v,3897,assert(r_state == LLSDSPI_START+4);,1
exportspi.v,3898,assert(o_mosi == fv_byte[4]);,1
exportspi.v,3899,assert(!o_cs_n);,1
exportspi.v,3900,assert(!r_idle);,1
exportspi.v,3903,assert(!o_sclk);,1
exportspi.v,3905,assert(r_state == LLSDSPI_START+5);,1
exportspi.v,3906,assert(o_mosi == fv_byte[3]);,1
exportspi.v,3907,assert(!o_cs_n);,1
exportspi.v,3908,assert(!r_idle);,1
exportspi.v,3911,assert(o_sclk);,1
exportspi.v,3913,assert(r_state == LLSDSPI_START+5);,1
exportspi.v,3914,assert(o_mosi == fv_byte[3]);,1
exportspi.v,3915,assert(!o_cs_n);,1
exportspi.v,3916,assert(!r_idle);,1
exportspi.v,3919,assert(!o_sclk);,1
exportspi.v,3921,assert(r_state == LLSDSPI_START+6);,1
exportspi.v,3922,assert(o_mosi == fv_byte[2]);,1
exportspi.v,3923,assert(!o_cs_n);,1
exportspi.v,3924,assert(!r_idle);,1
exportspi.v,3927,assert(o_sclk);,1
exportspi.v,3929,assert(r_state == LLSDSPI_START+6);,1
exportspi.v,3930,assert(o_mosi == fv_byte[2]);,1
exportspi.v,3931,assert(!o_cs_n);,1
exportspi.v,3932,assert(!r_idle);,1
exportspi.v,3935,assert(!o_sclk);,1
exportspi.v,3937,assert(r_state == LLSDSPI_START+7);,1
exportspi.v,3938,assert(o_mosi == fv_byte[1]);,1
exportspi.v,3939,assert(!o_cs_n);,1
exportspi.v,3940,assert(!r_idle);,1
exportspi.v,3943,assert(o_sclk);,1
exportspi.v,3945,assert(r_state == LLSDSPI_START+7);,1
exportspi.v,3946,assert(o_mosi == fv_byte[1]);,1
exportspi.v,3947,assert(!o_cs_n);,1
exportspi.v,3948,assert(!r_idle);,1
exportspi.v,3951,assert(!o_sclk);,1
exportspi.v,3953,assert(r_state == LLSDSPI_END);,1
exportspi.v,3954,assert(o_mosi == fv_byte[0]);,1
exportspi.v,3955,assert(!o_cs_n);,1
exportspi.v,3956,assert(!r_idle);,1
exportspi.v,3959,assert(o_sclk);,1
exportspi.v,3961,assert(r_state == LLSDSPI_END);,1
exportspi.v,3962,assert(o_mosi == fv_byte[0]);,1
exportspi.v,3963,assert(!o_cs_n);,1
exportspi.v,3964,assert(r_idle);,1
exportspi.v,3967,assert(o_sclk);,1
exportspi.v,3968,assert(!o_cs_n);,1
exportspi.v,3969,assert(r_state == LLSDSPI_HOTIDLE);,1
exportspi.v,3970,assert(r_idle);,1
exportspi.v,3972,assert(f_start_seq == 0);,1
exportspi.v,3977,assert(f_start_seq == 0);,1
exportspi.v,4022,assume(i_miso == f_rxdata[7]);,1
exportspi.v,4026,assert(r_ireg[0] == f_rxdata[7]);,1
exportspi.v,4030,assert(r_ireg[0] == f_rxdata[7]);,1
exportspi.v,4033,assume(i_miso == f_rxdata[6]);,1
exportspi.v,4034,assert(r_ireg[1:0] == f_rxdata[7:6]);,1
exportspi.v,4037,assume(i_miso == f_rxdata[5]);,1
exportspi.v,4038,assert(r_ireg[1:0] == f_rxdata[7:6]);,1
exportspi.v,4041,assume(i_miso == f_rxdata[5]);,1
exportspi.v,4042,assert(r_ireg[2:0] == f_rxdata[7:5]);,1
exportspi.v,4045,assume(i_miso == f_rxdata[4]);,1
exportspi.v,4046,assert(r_ireg[2:0] == f_rxdata[7:5]);,1
exportspi.v,4049,assume(i_miso == f_rxdata[4]);,1
exportspi.v,4050,assert(r_ireg[3:0] == f_rxdata[7:4]);,1
exportspi.v,4053,assume(i_miso == f_rxdata[3]);,1
exportspi.v,4054,assert(r_ireg[3:0] == f_rxdata[7:4]);,1
exportspi.v,4057,assume(i_miso == f_rxdata[3]);,1
exportspi.v,4058,assert(r_ireg[4:0] == f_rxdata[7:3]);,1
exportspi.v,4061,assume(i_miso == f_rxdata[2]);,1
exportspi.v,4062,assert(r_ireg[4:0] == f_rxdata[7:3]);,1
exportspi.v,4065,assume(i_miso == f_rxdata[2]);,1
exportspi.v,4066,assert(r_ireg[5:0] == f_rxdata[7:2]);,1
exportspi.v,4069,assume(i_miso == f_rxdata[1]);,1
exportspi.v,4070,assert(r_ireg[5:0] == f_rxdata[7:2]);,1
exportspi.v,4073,assume(i_miso == f_rxdata[1]);,1
exportspi.v,4074,assert(r_ireg[6:0] == f_rxdata[7:1]);,1
exportspi.v,4077,assume(i_miso == f_rxdata[0]);,1
exportspi.v,4078,assert(r_ireg[6:0] == f_rxdata[7:1]);,1
exportspi.v,4081,assume(i_miso == f_rxdata[0]);,1
exportspi.v,4082,assert(r_ireg == f_rxdata);,1
exportspi.v,4085,assume(i_miso == f_rxdata[0]);,1
exportspi.v,4086,assert(r_ireg == f_rxdata);,1
exportspi.v,4087,assert(o_byte == f_rxdata);,1
exportspi.v,4093,assert(!o_stb);,1
exportspi.v,4097,assert(o_stb);,1
exportspi.v,4099,assert(o_stb);,1
exportspi.v,4101,assert(!o_stb);,1
exportspi.v,4103,assert(!o_stb);,1
exportspi.v,4107,assert(o_mosi == MOSI_INACTIVE_VALUE);,1
exportspi.v,4114,assert(r_z_counter);,1
exportspi.v,4115,assert(!r_idle);,1
exportspi.v,4116,assert(o_cs_n == CSN_ON_STARTUP);,1
exportspi.v,4117,assert(o_sclk);,1
exportspi.v,4122,assert(o_sclk && !o_cs_n);,1
exportspi.v,4126,assert(o_sclk);,1
exportspi.v,4130,assert(o_cs_n == CSN_ON_STARTUP);,1
exportspi.v,4132,assert(o_sclk);,1
exportspi.v,4159,cover(byte_count == 2 && !o_cs_n && nonzero_speed);,1
exportspi.v,4160,cover(byte_count == 2 && !o_cs_n && !nonzero_speed);,1
exportspi.v,4165,assume(i_speed > 0);,1
exportspi.v,4186,cover(f_next_seq == 2);,1
exportspi.v,4187,cover(f_start_seq[3]);,1
exportspi.v,4188,cover(f_next_seq[15]);,1
exportspi.v,4193,cover(f_next_seq == 1);,1
exportspi.v,4209,assume(!i_cs);,1
exportspi.v,4216,assume(i_stb == i_cs);,1
exportspi.v,4219,assume(!i_stb);,1
afifo.v,587,assume(i_wclk == now_wclk);,1
afifo.v,588,assume(i_rclk == now_rclk);,1
afifo.v,599,assume(!pre_wclk && !wclk);,1
afifo.v,600,assume(!pre_rclk && !i_rclk);,1
afifo.v,744,cover(o_rd_empty);,1
afifo.v,745,cover(!o_rd_empty);,1
afifo.v,746,cover(f_state == 2'b01);,1
afifo.v,747,cover(f_state == 2'b10);,1
afifo.v,748,cover(f_state == 2'b11);,1
afifo.v,749,cover(&f_fill[MSB-1:0]);,1
afifo.v,751,cover(i_rd);,1
afifo.v,752,cover(i_rd && !o_rd_empty);,1
afifo.v,773,cover(o_wr_full);,1
afifo.v,774,cover(o_rd_empty && cvr_full);,1
afifo.v,775,cover(o_rd_empty && f_fill == 0 && cvr_full);,1
afifo.v,794,cover(cvr_nearly_full && i_wr_reset_n);,1
afifo.v,795,cover(o_rd_empty && cvr_nearly_full);,1
afifo.v,796,cover(o_rd_empty && f_fill == 0 && cvr_nearly_full);,1
llsdspi.v,193,assume(powerup_counter > 2);,1
llsdspi.v,196,assert(powerup_hold);,1
llsdspi.v,232,assume(startup_counter > 1);,1
llsdspi.v,235,assert(startup_hold);,1
llsdspi.v,251,assert(startup_hold);,1
llsdspi.v,497,assert(r_clk_counter <= i_speed);,1
llsdspi.v,536,assert(o_cs_n == CSN_ON_STARTUP);,1
llsdspi.v,544,assert(!CSN_ON_STARTUP || o_cs_n);,1
llsdspi.v,546,assert(!o_cs_n);,1
llsdspi.v,553,assert(o_cs_n);,1
llsdspi.v,557,assert(!o_cs_n && o_sclk);,1
llsdspi.v,559,assert(o_cs_n || bus_grant);,1
llsdspi.v,563,assert(!o_cs_n && o_sclk);,1
llsdspi.v,591,assert(startup_hold);,1
llsdspi.v,592,assert(o_cs_n == CSN_ON_STARTUP);,1
llsdspi.v,593,assert(o_sclk);,1
llsdspi.v,614,assert(r_state <= LLSDSPI_END);,1
llsdspi.v,651,assert(r_state != LLSDSPI_WAIT);,1
llsdspi.v,657,assert(r_byte == fv_byte[7:0]);,1
llsdspi.v,658,assert(o_sclk);,1
llsdspi.v,659,assert(!o_stb);,1
llsdspi.v,660,assert(f_start_seq == 0);,1
llsdspi.v,661,assert(f_next_seq == 0);,1
llsdspi.v,662,assert(!r_idle);,1
llsdspi.v,663,assert(r_z_counter);,1
llsdspi.v,668,assert(o_sclk);,1
llsdspi.v,670,assert(!o_sclk);,1
llsdspi.v,676,cover(r_state == LLSDSPI_START);,1
llsdspi.v,682,assert(o_sclk);,1
llsdspi.v,683,assert(r_byte == fv_byte[7:0] );,1
llsdspi.v,684,assert(r_state == LLSDSPI_START);,1
llsdspi.v,686,assert(!OPT_CONTINUOUS_CLOCK);,1
llsdspi.v,687,assert(!o_cs_n);,1
llsdspi.v,688,assert(!r_idle);,1
llsdspi.v,691,assert(!o_sclk);,1
llsdspi.v,693,assert(r_state == LLSDSPI_START+1);,1
llsdspi.v,694,assert(o_mosi == fv_byte[7]);,1
llsdspi.v,695,assert(!o_cs_n);,1
llsdspi.v,696,assert(!r_idle);,1
llsdspi.v,699,assert(o_sclk);,1
llsdspi.v,701,assert(r_state == LLSDSPI_START+1);,1
llsdspi.v,702,assert(o_mosi == fv_byte[7]);,1
llsdspi.v,703,assert(!o_cs_n);,1
llsdspi.v,704,assert(!r_idle);,1
llsdspi.v,707,assert(!o_sclk);,1
llsdspi.v,709,assert(r_state == LLSDSPI_START+2);,1
llsdspi.v,710,assert(o_mosi == fv_byte[6]);,1
llsdspi.v,711,assert(!o_cs_n);,1
llsdspi.v,712,assert(!r_idle);,1
llsdspi.v,715,assert(o_sclk);,1
llsdspi.v,717,assert(r_state == LLSDSPI_START+2);,1
llsdspi.v,718,assert(o_mosi == fv_byte[6]);,1
llsdspi.v,719,assert(!o_cs_n);,1
llsdspi.v,720,assert(!r_idle);,1
llsdspi.v,723,assert(!o_sclk);,1
llsdspi.v,725,assert(r_state == LLSDSPI_START+3);,1
llsdspi.v,726,assert(o_mosi == fv_byte[5]);,1
llsdspi.v,727,assert(!o_cs_n);,1
llsdspi.v,728,assert(!r_idle);,1
llsdspi.v,731,assert(o_sclk);,1
llsdspi.v,733,assert(r_state == LLSDSPI_START+3);,1
llsdspi.v,734,assert(o_mosi == fv_byte[5]);,1
llsdspi.v,735,assert(!o_cs_n);,1
llsdspi.v,736,assert(!r_idle);,1
llsdspi.v,739,assert(!o_sclk);,1
llsdspi.v,741,assert(r_state == LLSDSPI_START+4);,1
llsdspi.v,742,assert(o_mosi == fv_byte[4]);,1
llsdspi.v,743,assert(!o_cs_n);,1
llsdspi.v,744,assert(!r_idle);,1
llsdspi.v,747,assert(o_sclk);,1
llsdspi.v,749,assert(r_state == LLSDSPI_START+4);,1
llsdspi.v,750,assert(o_mosi == fv_byte[4]);,1
llsdspi.v,751,assert(!o_cs_n);,1
llsdspi.v,752,assert(!r_idle);,1
llsdspi.v,755,assert(!o_sclk);,1
llsdspi.v,757,assert(r_state == LLSDSPI_START+5);,1
llsdspi.v,758,assert(o_mosi == fv_byte[3]);,1
llsdspi.v,759,assert(!o_cs_n);,1
llsdspi.v,760,assert(!r_idle);,1
llsdspi.v,763,assert(o_sclk);,1
llsdspi.v,765,assert(r_state == LLSDSPI_START+5);,1
llsdspi.v,766,assert(o_mosi == fv_byte[3]);,1
llsdspi.v,767,assert(!o_cs_n);,1
llsdspi.v,768,assert(!r_idle);,1
llsdspi.v,771,assert(!o_sclk);,1
llsdspi.v,773,assert(r_state == LLSDSPI_START+6);,1
llsdspi.v,774,assert(o_mosi == fv_byte[2]);,1
llsdspi.v,775,assert(!o_cs_n);,1
llsdspi.v,776,assert(!r_idle);,1
llsdspi.v,779,assert(o_sclk);,1
llsdspi.v,781,assert(r_state == LLSDSPI_START+6);,1
llsdspi.v,782,assert(o_mosi == fv_byte[2]);,1
llsdspi.v,783,assert(!o_cs_n);,1
llsdspi.v,784,assert(!r_idle);,1
llsdspi.v,787,assert(!o_sclk);,1
llsdspi.v,789,assert(r_state == LLSDSPI_START+7);,1
llsdspi.v,790,assert(o_mosi == fv_byte[1]);,1
llsdspi.v,791,assert(!o_cs_n);,1
llsdspi.v,792,assert(!r_idle);,1
llsdspi.v,795,assert(o_sclk);,1
llsdspi.v,797,assert(r_state == LLSDSPI_START+7);,1
llsdspi.v,798,assert(o_mosi == fv_byte[1]);,1
llsdspi.v,799,assert(!o_cs_n);,1
llsdspi.v,800,assert(!r_idle);,1
llsdspi.v,803,assert(!o_sclk);,1
llsdspi.v,805,assert(r_state == LLSDSPI_END);,1
llsdspi.v,806,assert(o_mosi == fv_byte[0]);,1
llsdspi.v,807,assert(!o_cs_n);,1
llsdspi.v,808,assert(!r_idle);,1
llsdspi.v,811,assert(o_sclk);,1
llsdspi.v,813,assert(r_state == LLSDSPI_END);,1
llsdspi.v,814,assert(o_mosi == fv_byte[0]);,1
llsdspi.v,815,assert(!o_cs_n);,1
llsdspi.v,816,assert(r_idle);,1
llsdspi.v,819,assert(o_sclk);,1
llsdspi.v,820,assert(r_state == LLSDSPI_HOTIDLE);,1
llsdspi.v,821,assert(r_idle);,1
llsdspi.v,823,assert(!o_cs_n);,1
llsdspi.v,829,assert(!o_cs_n);,1
llsdspi.v,830,assert(bus_grant);,1
llsdspi.v,857,assert(o_sclk);,1
llsdspi.v,859,assert(!o_sclk);,1
llsdspi.v,864,assert(!o_sclk);,1
llsdspi.v,866,assert(r_state == LLSDSPI_START+1);,1
llsdspi.v,867,assert(o_mosi == fv_byte[7]);,1
llsdspi.v,868,assert(!o_cs_n);,1
llsdspi.v,869,assert(!r_idle);,1
llsdspi.v,872,assert(o_sclk);,1
llsdspi.v,874,assert(r_state == LLSDSPI_START+1);,1
llsdspi.v,875,assert(o_mosi == fv_byte[7]);,1
llsdspi.v,876,assert(!o_cs_n);,1
llsdspi.v,877,assert(!r_idle);,1
llsdspi.v,880,assert(!o_sclk);,1
llsdspi.v,882,assert(r_state == LLSDSPI_START+2);,1
llsdspi.v,883,assert(o_mosi == fv_byte[6]);,1
llsdspi.v,884,assert(!o_cs_n);,1
llsdspi.v,885,assert(!r_idle);,1
llsdspi.v,888,assert(o_sclk);,1
llsdspi.v,890,assert(r_state == LLSDSPI_START+2);,1
llsdspi.v,891,assert(o_mosi == fv_byte[6]);,1
llsdspi.v,892,assert(!o_cs_n);,1
llsdspi.v,893,assert(!r_idle);,1
llsdspi.v,896,assert(!o_sclk);,1
llsdspi.v,898,assert(r_state == LLSDSPI_START+3);,1
llsdspi.v,899,assert(o_mosi == fv_byte[5]);,1
llsdspi.v,900,assert(!o_cs_n);,1
llsdspi.v,901,assert(!r_idle);,1
llsdspi.v,904,assert(o_sclk);,1
llsdspi.v,906,assert(r_state == LLSDSPI_START+3);,1
llsdspi.v,907,assert(o_mosi == fv_byte[5]);,1
llsdspi.v,908,assert(!o_cs_n);,1
llsdspi.v,909,assert(!r_idle);,1
llsdspi.v,912,assert(!o_sclk);,1
llsdspi.v,914,assert(r_state == LLSDSPI_START+4);,1
llsdspi.v,915,assert(o_mosi == fv_byte[4]);,1
llsdspi.v,916,assert(!o_cs_n);,1
llsdspi.v,917,assert(!r_idle);,1
llsdspi.v,920,assert(o_sclk);,1
llsdspi.v,922,assert(r_state == LLSDSPI_START+4);,1
llsdspi.v,923,assert(o_mosi == fv_byte[4]);,1
llsdspi.v,924,assert(!o_cs_n);,1
llsdspi.v,925,assert(!r_idle);,1
llsdspi.v,928,assert(!o_sclk);,1
llsdspi.v,930,assert(r_state == LLSDSPI_START+5);,1
llsdspi.v,931,assert(o_mosi == fv_byte[3]);,1
llsdspi.v,932,assert(!o_cs_n);,1
llsdspi.v,933,assert(!r_idle);,1
llsdspi.v,936,assert(o_sclk);,1
llsdspi.v,938,assert(r_state == LLSDSPI_START+5);,1
llsdspi.v,939,assert(o_mosi == fv_byte[3]);,1
llsdspi.v,940,assert(!o_cs_n);,1
llsdspi.v,941,assert(!r_idle);,1
llsdspi.v,944,assert(!o_sclk);,1
llsdspi.v,946,assert(r_state == LLSDSPI_START+6);,1
llsdspi.v,947,assert(o_mosi == fv_byte[2]);,1
llsdspi.v,948,assert(!o_cs_n);,1
llsdspi.v,949,assert(!r_idle);,1
llsdspi.v,952,assert(o_sclk);,1
llsdspi.v,954,assert(r_state == LLSDSPI_START+6);,1
llsdspi.v,955,assert(o_mosi == fv_byte[2]);,1
llsdspi.v,956,assert(!o_cs_n);,1
llsdspi.v,957,assert(!r_idle);,1
llsdspi.v,960,assert(!o_sclk);,1
llsdspi.v,962,assert(r_state == LLSDSPI_START+7);,1
llsdspi.v,963,assert(o_mosi == fv_byte[1]);,1
llsdspi.v,964,assert(!o_cs_n);,1
llsdspi.v,965,assert(!r_idle);,1
llsdspi.v,968,assert(o_sclk);,1
llsdspi.v,970,assert(r_state == LLSDSPI_START+7);,1
llsdspi.v,971,assert(o_mosi == fv_byte[1]);,1
llsdspi.v,972,assert(!o_cs_n);,1
llsdspi.v,973,assert(!r_idle);,1
llsdspi.v,976,assert(!o_sclk);,1
llsdspi.v,978,assert(r_state == LLSDSPI_END);,1
llsdspi.v,979,assert(o_mosi == fv_byte[0]);,1
llsdspi.v,980,assert(!o_cs_n);,1
llsdspi.v,981,assert(!r_idle);,1
llsdspi.v,984,assert(o_sclk);,1
llsdspi.v,986,assert(r_state == LLSDSPI_END);,1
llsdspi.v,987,assert(o_mosi == fv_byte[0]);,1
llsdspi.v,988,assert(!o_cs_n);,1
llsdspi.v,989,assert(r_idle);,1
llsdspi.v,992,assert(o_sclk);,1
llsdspi.v,993,assert(!o_cs_n);,1
llsdspi.v,994,assert(r_state == LLSDSPI_HOTIDLE);,1
llsdspi.v,995,assert(r_idle);,1
llsdspi.v,997,assert(f_start_seq == 0);,1
llsdspi.v,1002,assert(f_start_seq == 0);,1
llsdspi.v,1047,assume(i_miso == f_rxdata[7]);,1
llsdspi.v,1051,assert(r_ireg[0] == f_rxdata[7]);,1
llsdspi.v,1055,assert(r_ireg[0] == f_rxdata[7]);,1
llsdspi.v,1058,assume(i_miso == f_rxdata[6]);,1
llsdspi.v,1059,assert(r_ireg[1:0] == f_rxdata[7:6]);,1
llsdspi.v,1062,assume(i_miso == f_rxdata[5]);,1
llsdspi.v,1063,assert(r_ireg[1:0] == f_rxdata[7:6]);,1
llsdspi.v,1066,assume(i_miso == f_rxdata[5]);,1
llsdspi.v,1067,assert(r_ireg[2:0] == f_rxdata[7:5]);,1
llsdspi.v,1070,assume(i_miso == f_rxdata[4]);,1
llsdspi.v,1071,assert(r_ireg[2:0] == f_rxdata[7:5]);,1
llsdspi.v,1074,assume(i_miso == f_rxdata[4]);,1
llsdspi.v,1075,assert(r_ireg[3:0] == f_rxdata[7:4]);,1
llsdspi.v,1078,assume(i_miso == f_rxdata[3]);,1
llsdspi.v,1079,assert(r_ireg[3:0] == f_rxdata[7:4]);,1
llsdspi.v,1082,assume(i_miso == f_rxdata[3]);,1
llsdspi.v,1083,assert(r_ireg[4:0] == f_rxdata[7:3]);,1
llsdspi.v,1086,assume(i_miso == f_rxdata[2]);,1
llsdspi.v,1087,assert(r_ireg[4:0] == f_rxdata[7:3]);,1
llsdspi.v,1090,assume(i_miso == f_rxdata[2]);,1
llsdspi.v,1091,assert(r_ireg[5:0] == f_rxdata[7:2]);,1
llsdspi.v,1094,assume(i_miso == f_rxdata[1]);,1
llsdspi.v,1095,assert(r_ireg[5:0] == f_rxdata[7:2]);,1
llsdspi.v,1098,assume(i_miso == f_rxdata[1]);,1
llsdspi.v,1099,assert(r_ireg[6:0] == f_rxdata[7:1]);,1
llsdspi.v,1102,assume(i_miso == f_rxdata[0]);,1
llsdspi.v,1103,assert(r_ireg[6:0] == f_rxdata[7:1]);,1
llsdspi.v,1106,assume(i_miso == f_rxdata[0]);,1
llsdspi.v,1107,assert(r_ireg == f_rxdata);,1
llsdspi.v,1110,assume(i_miso == f_rxdata[0]);,1
llsdspi.v,1111,assert(r_ireg == f_rxdata);,1
llsdspi.v,1112,assert(o_byte == f_rxdata);,1
llsdspi.v,1118,assert(!o_stb);,1
llsdspi.v,1122,assert(o_stb);,1
llsdspi.v,1124,assert(o_stb);,1
llsdspi.v,1126,assert(!o_stb);,1
llsdspi.v,1128,assert(!o_stb);,1
llsdspi.v,1132,assert(o_mosi == MOSI_INACTIVE_VALUE);,1
llsdspi.v,1139,assert(r_z_counter);,1
llsdspi.v,1140,assert(!r_idle);,1
llsdspi.v,1141,assert(o_cs_n == CSN_ON_STARTUP);,1
llsdspi.v,1142,assert(o_sclk);,1
llsdspi.v,1147,assert(o_sclk && !o_cs_n);,1
llsdspi.v,1151,assert(o_sclk);,1
llsdspi.v,1155,assert(o_cs_n == CSN_ON_STARTUP);,1
llsdspi.v,1157,assert(o_sclk);,1
llsdspi.v,1184,cover(byte_count == 2 && !o_cs_n && nonzero_speed);,1
llsdspi.v,1185,cover(byte_count == 2 && !o_cs_n && !nonzero_speed);,1
llsdspi.v,1190,assume(i_speed > 0);,1
llsdspi.v,1211,cover(f_next_seq == 2);,1
llsdspi.v,1212,cover(f_start_seq[3]);,1
llsdspi.v,1213,cover(f_next_seq[15]);,1
llsdspi.v,1218,cover(f_next_seq == 1);,1
llsdspi.v,1234,assume(!i_cs);,1
llsdspi.v,1241,assume(i_stb == i_cs);,1
llsdspi.v,1244,assume(!i_stb);,1
exportsd.v,2158,assert(cmd_busy);,1
exportsd.v,2249,assert(r_card_busy);,1
exportsd.v,2255,assert(r_busy_counter == 0);,1
exportsd.v,2312,assert(!r_tx_request || !o_tx_en);,1
exportsd.v,2317,assert(r_tx_request || o_tx_en);,1
exportsd.v,2350,assert(!r_rx_request || !o_rx_en);,1
exportsd.v,2353,assert(r_rx_request || o_rx_en);,1
exportsd.v,2584,assert(!o_cfg_shutdown);,1
exportsd.v,2587,assert(!o_cfg_shutdown);,1
exportsd.v,2634,assert(!o_cfg_ddr);,1
exportsd.v,2637,assert(!o_cfg_ds);,1
exportsd.v,2640,assert(!o_cfg_dscmd);,1
exportsd.v,2699,assert(o_cfg_ckspeed >= 2);,1
exportsd.v,2703,assert(o_cfg_ckspeed >= 1);,1
exportsd.v,3054,assert(!i_cmd_mem_valid || !i_rx_mem_valid);,1
exportsd.v,3151,assume(i_reset);,1
exportsd.v,3190,assert(cmd_busy);,1
exportsd.v,3194,assert(!cmd_busy);,1
exportsd.v,3198,assume(i_cmd_busy);,1
exportsd.v,3207,assume(!i_cmd_mem_valid);,1
exportsd.v,3213,assume(i_cmd_ercode == 2'b00);,1
exportsd.v,3215,assert(!o_cmd_request);,1
exportsd.v,3220,assert(!o_cmd_request);,1
exportsd.v,3223,assert(o_cmd_request);,1
exportsd.v,3236,assert(o_cmd_request && o_cmd_type == RNO_REPLY);,1
exportsd.v,3246,assert(!o_rx_en && !r_rx_request);,1
exportsd.v,3247,assert(!cmd_busy || o_cmd_type != R2_REPLY);,1
exportsd.v,3250,assert(!cmd_busy || o_cmd_type != R2_REPLY);,1
exportsd.v,3277,assert(!o_cmd_request);,1
exportsd.v,3282,assert(!o_cmd_request);,1
exportsd.v,3286,assert(!o_cmd_request);,1
exportsd.v,3289,assert(o_cmd_request);,1
exportsd.v,3295,assert(o_cmd_request && o_cmd_selfreply);,1
exportsd.v,3297,assert(!o_cmd_request);,1
exportsd.v,3305,assert(cmd_busy);,1
exportsd.v,3317,assert(o_cmd_request);,1
exportsd.v,3318,assert(mem_busy);,1
exportsd.v,3323,assert(o_cmd_request);,1
exportsd.v,3324,assert(r_rx_request);,1
exportsd.v,3329,assert(o_cmd_request);,1
exportsd.v,3330,assert(r_tx_request);,1
exportsd.v,3335,assert(!o_cmd_request);,1
exportsd.v,3336,assert(r_rx_request);,1
exportsd.v,3341,assert(!o_cmd_request);,1
exportsd.v,3342,assert(r_tx_request);,1
exportsd.v,3355,assert(fif_wraddr == 0);,1
exportsd.v,3356,assert(fif_rdaddr == 0);,1
exportsd.v,3372,assert(o_cmd_request);,1
exportsd.v,3373,assert(o_cmd_selfreply);,1
exportsd.v,3374,assert(o_cmd_type == RNO_REPLY);,1
exportsd.v,3386,assert(!o_tx_mem_valid);,1
exportsd.v,3390,assert(!o_tx_en);,1
exportsd.v,3393,assert(o_tx_mem_valid);,1
exportsd.v,3400,assert(!r_tx_request);,1
exportsd.v,3416,assume(!i_rx_mem_valid);,1
exportsd.v,3420,assert(!r_rx_request || !o_rx_en);,1
exportsd.v,3461,assume(f_mem == 0);,1
exportsd.v,3462,assume(f_word == 0);,1
exportsd.v,3464,assert(f_word == f_mem);,1
exportsd.v,3493,assert(o_tx_mem_data == f_word);,1
exportsd.v,3507,assert(r_fifo == f_txaddr[LGFIFO32]);,1
exportsd.v,3512,assert(tx_pipe_valid);,1
exportsd.v,3518,assert(next_tx_mem == f_word);,1
exportsd.v,3528,assert(tx_mem_addr == 0);,1
exportsd.v,3530,assert(tx_mem_addr == 1);,1
exportsd.v,3535,assert(!tx_pipe_valid && !o_tx_mem_valid);,1
exportsd.v,3575,assert(r_width != 2'b11);,1
exportsd.v,3577,assert(r_width == WIDTH_1W);,1
exportsd.v,3579,assert(r_width == WIDTH_1W || r_width == WIDTH_4W);,1
exportsd.v,3584,assert(o_cfg_ddr);,1
exportsd.v,3589,assert(lgblk <= LGFIFO);,1
exportsd.v,3590,assert(lgblk >= 2);,1
exportsd.v,3603,"assume(lgblk < 15); // Assume no overflow ... for now // Assume the user won't do something dumb, like write to the same FIFO // we're reading from, or either read or write from the same FIFO we // are writing to // {{{ always @(*) if (o_tx_en || r_tx_request) assume(!i_wb_stb || !i_wb_we || i_wb_addr != ADDR_FIFOA + r_fifo); always @(*) if (cmd_busy && o_cmd_type == R2_REPLY) assume(!i_wb_stb || i_wb_addr != ADDR_FIFOA + r_fifo); always @(*) if (o_rx_en || r_rx_request) assume(!i_wb_stb || i_wb_addr != ADDR_FIFOA + r_fifo); // }}} // }}} `endif // FORMAL",21
exportsd.v,3829,assume(i_reset);,1
exportsd.v,3833,assume(i_cfg_clk90);,1
exportsd.v,3840,assert(o_ckstb);,1
exportsd.v,3867,assert(counter[NCTR-1] == 1'b0);,1
exportsd.v,4387,assert(!r_self_request);,1
exportsd.v,4591,assume(i_reset);,1
exportsd.v,4596,assume(!i_cmd_request);,1
exportsd.v,4597,assert(!active);,1
exportsd.v,4605,assume(!i_cmd_request);,1
exportsd.v,4608,assume(i_cmd_request);,1
exportsd.v,4628,assume(i_cmd_request);,1
exportsd.v,4629,assume(i_cmd_type == R_NONE);,1
exportsd.v,4642,assert(!f_busy);,1
exportsd.v,4643,assert(!r_busy);,1
exportsd.v,4644,assert(!o_done);,1
exportsd.v,4647,assert(!r_busy);,1
exportsd.v,4649,assert(!active);,1
exportsd.v,4652,assert(!r_busy);,1
exportsd.v,4653,assert(!f_busy);,1
exportsd.v,4659,assert(!o_err && o_ercode == 2'b00);,1
exportsd.v,4663,assert(o_done);,1
exportsd.v,4667,assert(o_ercode == ECODE_TIMEOUT);,1
exportsd.v,4671,assert(!o_cmd_response);,1
exportsd.v,4691,assume(!S_ASYNC_VALID && i_cmd_strb == 0);,1
exportsd.v,4695,assume(!i_cmd_strb[0]);,1
exportsd.v,4699,assert(!cfg_ds);,1
exportsd.v,4703,assume(!S_ASYNC_VALID);,1
exportsd.v,4733,assert(&tx_sreg);,1
exportsd.v,4734,assert(!o_cmd_en);,1
exportsd.v,4735,assert(o_cmd_data == 2'b11);,1
exportsd.v,4737,assert(o_cmd_en);,1
exportsd.v,4738,assert(tx_sreg == f_tx_now);,1
exportsd.v,4749,assert(!resp_count[0]);,1
exportsd.v,4753,assume(i_cmd_strb != 2'b11);,1
exportsd.v,4761,assert(r_busy);,1
exportsd.v,4767,assert(!o_mem_valid);,1
exportsd.v,4770,assert(resp_count == 0);,1
exportsd.v,4774,assert(mem_addr == 0);,1
exportsd.v,4777,assert(mem_addr == 4);,1
exportsd.v,4785,assert(resp_count == 0);,1
exportsd.v,4790,assert(w_done || r_done);,1
exportsd.v,4795,assert(w_done || r_done);,1
exportsd.v,4800,assert(cmd_type == R_R2);,1
exportsd.v,4804,assert(!waiting_on_response);,1
exportsd.v,4806,assert(waiting_on_response);,1
exportsd.v,4810,assert(w_done || r_done);,1
exportsd.v,4815,assert(o_mem_addr <= 3);,1
exportsd.v,4821,assert(srcount <= 48);,1
exportsd.v,4826,assert(srcount[0] == 1'b0);,1
exportsd.v,4830,assert(!waiting_on_response);,1
exportsd.v,4837,assert(!rx_timeout);,1
exportsd.v,4841,assert(!o_err && o_ercode == 2'b00);,1
exportsd.v,4848,assert(!r_done);,1
exportsd.v,4852,assert(!r_done);,1
exportsd.v,4859,assert(!r_done);,1
exportsd.v,4864,assert(!r_done);,1
exportsd.v,4869,assert(!waiting_on_response);,1
exportsd.v,4878,assert(r_busy);,1
exportsd.v,4883,assert(!o_done);,1
exportsd.v,4889,assert(f_busy == r_busy);,1
exportsd.v,4893,assert(o_ercode != ECODE_OKAY);,1
exportsd.v,4905,cover(i_cmd_type == R_NONE);,1
exportsd.v,4910,cover(i_cmd_type == R_R1 && !o_err);,1
exportsd.v,4911,cover(i_cmd_type == R_R1 && o_err && o_ercode == ECODE_BADCRC);,1
exportsd.v,4912,cover(i_cmd_type == R_R1 && o_err && o_ercode== ECODE_FRAMEERR);,1
exportsd.v,4915,cover(i_cmd_type == R_R2 && !o_err);,1
exportsd.v,4916,cover(i_cmd_type == R_R2 && o_err && o_ercode == ECODE_BADCRC);,1
exportsd.v,4917,cover(i_cmd_type == R_R2 && o_err && o_ercode== ECODE_FRAMEERR);,1
exportsd.v,4922,cover(!o_busy);,1
exportsd.v,5311,assert(rnxt_strb == 0);,1
exportsd.v,5312,assert(rnxt_data == 0);,1
exportsd.v,5315,assert(next_subaddr == 1);,1
exportsd.v,5317,assert(rnxt_data == 0);,1
exportsd.v,5641,assume(i_reset);,1
exportsd.v,5650,assume(!i_cfg_ds);,1
exportsd.v,5654,assume(!i_rx_en);,1
exportsd.v,5656,assume(!i_rx_en);,1
exportsd.v,5658,assume(i_rx_en);,1
exportsd.v,5669,assume(i_length > 0);,1
exportsd.v,5672,assume(i_length[1:0] == 2'b00);,1
exportsd.v,5674,assume(i_length[0] == 1'b0);,1
exportsd.v,5683,assume(i_cfg_width != 2'b11);,1
exportsd.v,5684,assume(i_length <= 16'h8000);,1
exportsd.v,5701,assert(f_state);,1
exportsd.v,5707,assert(busy || r_watchdog);,1
exportsd.v,5717,assume(!r_watchdog);,1
exportsd.v,5721,assume(o_ercode);,1
exportsd.v,5734,assume(i_rx_strb == 0);,1
exportsd.v,5735,assume(S_ASYNC_VALID == 0);,1
exportsd.v,5740,assume(!i_rx_strb[0]);,1
exportsd.v,5744,assume(!S_ASYNC_VALID);,1
exportsd.v,5781,assert(f_count[4:0] == 0);,1
exportsd.v,5784,assert(f_count[2:0] == sync_fill[2:0]);,1
exportsd.v,5785,assert(f_count[2:0] == sync_fill[2:0]);,1
exportsd.v,5789,assert(f_count[2:0] == sync_fill[2:0]);,1
exportsd.v,5808,assert(!s2_valid);,1
exportsd.v,5814,assert(sync_fill == 0);,1
exportsd.v,5849,assert(f_count[LGLEN+3:3] == f_recount);,1
exportsd.v,5862,assert(rail_count <= (i_length*8));,1
exportsd.v,5890,assert(rail_count <= i_length);,1
exportsd.v,5896,assert(!load_crc);,1
exportsd.v,5901,assert(!load_crc);,1
exportsd.v,5902,assert(!pending_crc);,1
exportsd.v,5914,assert(pending_crc);,1
exportsd.v,5923,assert(rail_count + f_count == i_length*8);,1
exportsd.v,5924,assert(f_count <= i_length*8);,1
exportsd.v,5925,assert(rail_count <= i_length*8);,1
exportsd.v,5928,assert(rail_count + f_count == i_length*8+16);,1
exportsd.v,5929,assert(f_count <= i_length*8+16);,1
exportsd.v,5930,assert(rail_count <= i_length*8+16);,1
exportsd.v,5933,assert(rail_count + f_count == i_length*8+32);,1
exportsd.v,5934,assert(f_count <= i_length*8+32);,1
exportsd.v,5935,assert(rail_count <= i_length*8+32);,1
exportsd.v,5940,assert(rail_count <= i_length*2);,1
exportsd.v,5945,assert(rail_count <= i_length*2+16);,1
exportsd.v,5950,assert(rail_count <= i_length*2+32);,1
exportsd.v,5955,assert(rail_count <= i_length);,1
exportsd.v,5960,assert(rail_count <= i_length+16);,1
exportsd.v,5965,assert(rail_count <= i_length+32);,1
exportsd.v,5967,assert(!mem_full);,1
exportsd.v,5980,assert(!mem_full);,1
exportsd.v,5992,assert(f_next_subaddr == next_subaddr);,1
exportsd.v,5996,assert(o_mem_valid);,1
exportsd.v,6000,"assert({ mem_addr, subaddr } == 0);",1
exportsd.v,6004,"assert({ mem_full, o_mem_addr, subaddr } == fmem_count);",1
exportsd.v,6008,assert(!o_mem_valid);,1
exportsd.v,6010,assert(o_mem_strb != 0);,1
exportsd.v,6037,assume(i_rx_data[8] == fc_data[7]);,1
exportsd.v,6039,assume(i_rx_data[8] == fc_data[6]);,1
exportsd.v,6041,assume(i_rx_data[8] == fc_data[5]);,1
exportsd.v,6043,assume(i_rx_data[8] == fc_data[4]);,1
exportsd.v,6045,assume(i_rx_data[8] == fc_data[3]);,1
exportsd.v,6047,assume(i_rx_data[8] == fc_data[2]);,1
exportsd.v,6049,assume(i_rx_data[8] == fc_data[1]);,1
exportsd.v,6051,assume(i_rx_data[8] == fc_data[0]);,1
exportsd.v,6054,assume(i_rx_data[0] == fc_data[7]);,1
exportsd.v,6056,assume(i_rx_data[0] == fc_data[6]);,1
exportsd.v,6058,assume(i_rx_data[0] == fc_data[5]);,1
exportsd.v,6060,assume(i_rx_data[0] == fc_data[4]);,1
exportsd.v,6062,assume(i_rx_data[0] == fc_data[3]);,1
exportsd.v,6064,assume(i_rx_data[0] == fc_data[2]);,1
exportsd.v,6066,assume(i_rx_data[0] == fc_data[1]);,1
exportsd.v,6068,assume(i_rx_data[0] == fc_data[0]);,1
exportsd.v,6077,assume(i_rx_data[11:8] == fc_data[7:4]);,1
exportsd.v,6079,assume(i_rx_data[11:8] == fc_data[3:0]);,1
exportsd.v,6082,assume(i_rx_data[ 3: 0] == fc_data[7:4]);,1
exportsd.v,6084,assume(i_rx_data[ 3: 0] == fc_data[3:0]);,1
exportsd.v,6092,assume(i_rx_data[15:8] == fc_data);,1
exportsd.v,6094,assume(i_rx_data[ 7:0] == fc_data);,1
exportsd.v,6120,assert(sync_sreg[3:0] == fc_data[7:4]);,1
exportsd.v,6139,assert(fmem_data[MW-1:MW-8] == fc_data);,1
exportsd.v,6140,assert(fmem_strb);,1
exportsd.v,6154,cover(!i_crc_en);,1
exportsd.v,6155,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6159,cover(!i_crc_en);,1
exportsd.v,6160,cover(fc_posn == 0 && fc_data == 8'hff);,1
exportsd.v,6161,cover(fc_posn == 0 && fc_data == 8'ha5);,1
exportsd.v,6162,cover(fc_posn == 0 && fc_data == 8'h5a);,1
exportsd.v,6163,cover(fc_posn == 0 && fc_data == 8'h7e);,1
exportsd.v,6164,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6168,cover(!i_crc_en);,1
exportsd.v,6169,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6173,cover(!i_crc_en);,1
exportsd.v,6174,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6178,cover(!i_crc_en);,1
exportsd.v,6179,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6183,cover(!i_crc_en);,1
exportsd.v,6184,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6205,cover(!i_crc_en);,1
exportsd.v,6206,cover(o_err);,1
exportsd.v,6207,cover(i_crc_en && !o_err);,1
exportsd.v,6712,assert(ck_valid);,1
exportsd.v,7089,assume(i_reset);,1
exportsd.v,7098,assume(!i_cfg_ddr || i_cfg_spd > 1);,1
exportsd.v,7099,assume(i_cfg_spd > 0);,1
exportsd.v,7104,assume(i_cfg_width != 2'b11);,1
exportsd.v,7110,assert(cfg_period <= P_4D);,1
exportsd.v,7114,assume(i_en);,1
exportsd.v,7127,assert(i_cfg_ddr == cfg_ddr);,1
exportsd.v,7128,assert(i_cfg_width == cfg_width);,1
exportsd.v,7133,assert(cfg_width != 2'b11);,1
exportsd.v,7140,assert(cfg_ddr);,1
exportsd.v,7148,assert(cfg_period == 2'b10);,1
exportsd.v,7152,assert(cfg_period == 2'b01);,1
exportsd.v,7154,assert(cfg_period == 2'b00);,1
exportsd.v,7166,assume(!i_ckstb || !i_hlfck);,1
exportsd.v,7179,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
exportsd.v,7180,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
exportsd.v,7181,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
exportsd.v,7182,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
exportsd.v,7191,assume(!i_ckstb);,1
exportsd.v,7193,assume(i_ckstb);,1
exportsd.v,7202,assume(i_ckstb && i_hlfck); // On every clock period end // }}} //////////////////////////////////////////////////////////////////////// // // IO properties // {{{ // Only change on a clock // {{{ always @(posedge i_clk) if (!f_past_valid || $past(i_reset)) assert(!tx_valid); else if (!$past(i_ckstb) && !$past(i_hlfck && cfg_ddr)) begin assert($stable(tx_valid)); assert($stable(tx_data)); end // }}},20
exportsd.v,7229,assert(&tx_data);,1
exportsd.v,7232,assert(tx_data[31:25] == 7'h7f);,1
exportsd.v,7233,assert(tx_data[23:17] == 7'h7f);,1
exportsd.v,7234,assert(tx_data[15: 9] == 7'h7f);,1
exportsd.v,7235,assert(tx_data[ 7: 1] == 7'h7f);,1
exportsd.v,7238,assert(tx_data[31:28] == 4'hf);,1
exportsd.v,7239,assert(tx_data[23:20] == 4'hf);,1
exportsd.v,7240,assert(tx_data[15:12] == 4'hf);,1
exportsd.v,7241,assert(tx_data[ 7: 4] == 4'hf);,1
exportsd.v,7254,assert(tx_data[31:24] == tx_data[ 7: 0]);,1
exportsd.v,7255,assert(tx_data[23:16] == tx_data[ 7: 0]);,1
exportsd.v,7256,assert(tx_data[15: 8] == tx_data[ 7: 0]);,1
exportsd.v,7259,assert(tx_data[31:24] == tx_data[23:16]);,1
exportsd.v,7260,assert(tx_data[15: 8] == tx_data[ 7: 0]);,1
exportsd.v,7268,assert(tx_valid && pre_valid);,1
exportsd.v,7272,assert(!tx_valid);,1
exportsd.v,7283,assume(i_en);,1
exportsd.v,7287,assume(!S_VALID);,1
exportsd.v,7295,assert(fs_count == 0);,1
exportsd.v,7302,assert(fcrc_count == fs_count);,1
exportsd.v,7304,assert(fcrc_count >= fs_count);,1
exportsd.v,7311,assume(!S_VALID);,1
exportsd.v,7312,assume(!i_en);,1
exportsd.v,7315,assume(S_VALID);,1
exportsd.v,7319,assume(S_VALID);,1
exportsd.v,7323,assume(!S_VALID);,1
exportsd.v,7327,assume(!S_VALID || S_LAST);,1
exportsd.v,7331,assert(fs_last);,1
exportsd.v,7335,assert(!fs_last);,1
exportsd.v,7339,assert(fs_last);,1
exportsd.v,7343,assert(!fs_last && S_VALID && fs_count > 0);,1
exportsd.v,7353,assume(fc_data == S_DATA);,1
exportsd.v,7369,assert(ck_counts == ((cfg_ddr && f_pending_half) ? 1:0));,1
exportsd.v,7373,assert(fs_count <= 1);,1
exportsd.v,7374,assert(fd_count == 0);,1
exportsd.v,7397,assert(pstate != P_IDLE);,1
exportsd.v,7400,assert(pstate != P_IDLE);,1
exportsd.v,7413,assert(pstate != P_IDLE);,1
exportsd.v,7415,assert(pre_data == fc_data);,1
exportsd.v,7417,assert(pstate == P_IDLE || pstate == P_LAST);,1
exportsd.v,7424,assert(pre_count <= 7);,1
exportsd.v,7428,assert(pre_valid);,1
exportsd.v,7434,assert(pre_count == (cfg_ddr) ? 7 : 3);,1
exportsd.v,7441,assert(pre_valid);,1
exportsd.v,7443,assert(pre_count <= (cfg_ddr) ? 7 : 3);,1
exportsd.v,7450,assert(pre_count == 0);,1
exportsd.v,7459,assert(fd_count == 0);,1
exportsd.v,7468,assert(pre_valid);,1
exportsd.v,7469,assert(fcrc_count == 1 + f_loaded_count[14:5]);,1
exportsd.v,7472,assert(ck_counts == 0);,1
exportsd.v,7492,assert(ck_counts == 0);,1
exportsd.v,7501,assert(ck_counts <= 7);,1
exportsd.v,7504,assert(ck_counts <= 3);,1
exportsd.v,7511,assert(ck_counts <= 15);,1
exportsd.v,7514,assert(ck_counts <= 3);,1
exportsd.v,7517,assert(ck_counts <= 1);,1
exportsd.v,7524,assert(ck_counts <= 7);,1
exportsd.v,7527,assert(ck_counts <= 1);,1
exportsd.v,7530,assert(ck_counts == 0);,1
exportsd.v,7532,"assert(fd_count + 32 == { fp_count, 5'h0 });",1
exportsd.v,7534,assert(ck_data == fc_data);,1
exportsd.v,7587,assert(ck_counts[0] == f_pending_half || (!pre_valid && pstate == P_LAST && ck_counts==0));,2
exportsd.v,7593,assert(ck_counts[0] == f_pending_half || (!pre_valid && pstate == P_LAST && ck_counts==0));,2
exportsd.v,7635,cover(1);,1
exportsd.v,7636,cover(1);,1
exportsd.v,7637,cover(1);,1
exportsd.v,7642,cover(1);,1
exportsd.v,7643,cover(1);,1
exportsd.v,7644,cover(1);,1
exportsd.v,7651,cover(1);,1
exportsd.v,7653,cover(1);,1
exportsd.v,7654,cover(fs_count == 1);,1
exportsd.v,7655,cover(fs_count == 2);,1
exportsd.v,7656,cover(fs_count == 3); // !!! cover(fs_count == 4); // !!! cover(S_VALID && S_LAST);,3
exportsd.v,7659,cover(!S_VALID);,1
exportsd.v,7661,cover(pstate == P_CRC);,1
exportsd.v,7662,cover(pstate == P_LAST); // !!! cover(!pre_valid); // !!! end WIDTH_8W: cover(1);,4
sdwb.v,369,assert(cmd_busy);,1
sdwb.v,460,assert(r_card_busy);,1
sdwb.v,466,assert(r_busy_counter == 0);,1
sdwb.v,523,assert(!r_tx_request || !o_tx_en);,1
sdwb.v,528,assert(r_tx_request || o_tx_en);,1
sdwb.v,561,assert(!r_rx_request || !o_rx_en);,1
sdwb.v,564,assert(r_rx_request || o_rx_en);,1
sdwb.v,795,assert(!o_cfg_shutdown);,1
sdwb.v,798,assert(!o_cfg_shutdown);,1
sdwb.v,845,assert(!o_cfg_ddr);,1
sdwb.v,848,assert(!o_cfg_ds);,1
sdwb.v,851,assert(!o_cfg_dscmd);,1
sdwb.v,910,assert(o_cfg_ckspeed >= 2);,1
sdwb.v,914,assert(o_cfg_ckspeed >= 1);,1
sdwb.v,1265,assert(!i_cmd_mem_valid || !i_rx_mem_valid);,1
sdwb.v,1362,assume(i_reset);,1
sdwb.v,1401,assert(cmd_busy);,1
sdwb.v,1405,assert(!cmd_busy);,1
sdwb.v,1409,assume(i_cmd_busy);,1
sdwb.v,1418,assume(!i_cmd_mem_valid);,1
sdwb.v,1424,assume(i_cmd_ercode == 2'b00);,1
sdwb.v,1426,assert(!o_cmd_request);,1
sdwb.v,1431,assert(!o_cmd_request);,1
sdwb.v,1434,assert(o_cmd_request);,1
sdwb.v,1447,assert(o_cmd_request && o_cmd_type == RNO_REPLY);,1
sdwb.v,1457,assert(!o_rx_en && !r_rx_request);,1
sdwb.v,1458,assert(!cmd_busy || o_cmd_type != R2_REPLY);,1
sdwb.v,1461,assert(!cmd_busy || o_cmd_type != R2_REPLY);,1
sdwb.v,1488,assert(!o_cmd_request);,1
sdwb.v,1493,assert(!o_cmd_request);,1
sdwb.v,1497,assert(!o_cmd_request);,1
sdwb.v,1500,assert(o_cmd_request);,1
sdwb.v,1506,assert(o_cmd_request && o_cmd_selfreply);,1
sdwb.v,1508,assert(!o_cmd_request);,1
sdwb.v,1516,assert(cmd_busy);,1
sdwb.v,1528,assert(o_cmd_request);,1
sdwb.v,1529,assert(mem_busy);,1
sdwb.v,1534,assert(o_cmd_request);,1
sdwb.v,1535,assert(r_rx_request);,1
sdwb.v,1540,assert(o_cmd_request);,1
sdwb.v,1541,assert(r_tx_request);,1
sdwb.v,1546,assert(!o_cmd_request);,1
sdwb.v,1547,assert(r_rx_request);,1
sdwb.v,1552,assert(!o_cmd_request);,1
sdwb.v,1553,assert(r_tx_request);,1
sdwb.v,1566,assert(fif_wraddr == 0);,1
sdwb.v,1567,assert(fif_rdaddr == 0);,1
sdwb.v,1583,assert(o_cmd_request);,1
sdwb.v,1584,assert(o_cmd_selfreply);,1
sdwb.v,1585,assert(o_cmd_type == RNO_REPLY);,1
sdwb.v,1597,assert(!o_tx_mem_valid);,1
sdwb.v,1601,assert(!o_tx_en);,1
sdwb.v,1604,assert(o_tx_mem_valid);,1
sdwb.v,1611,assert(!r_tx_request);,1
sdwb.v,1627,assume(!i_rx_mem_valid);,1
sdwb.v,1631,assert(!r_rx_request || !o_rx_en);,1
sdwb.v,1672,assume(f_mem == 0);,1
sdwb.v,1673,assume(f_word == 0);,1
sdwb.v,1675,assert(f_word == f_mem);,1
sdwb.v,1704,assert(o_tx_mem_data == f_word);,1
sdwb.v,1718,assert(r_fifo == f_txaddr[LGFIFO32]);,1
sdwb.v,1723,assert(tx_pipe_valid);,1
sdwb.v,1729,assert(next_tx_mem == f_word);,1
sdwb.v,1739,assert(tx_mem_addr == 0);,1
sdwb.v,1741,assert(tx_mem_addr == 1);,1
sdwb.v,1746,assert(!tx_pipe_valid && !o_tx_mem_valid);,1
sdwb.v,1786,assert(r_width != 2'b11);,1
sdwb.v,1788,assert(r_width == WIDTH_1W);,1
sdwb.v,1790,assert(r_width == WIDTH_1W || r_width == WIDTH_4W);,1
sdwb.v,1795,assert(o_cfg_ddr);,1
sdwb.v,1800,assert(lgblk <= LGFIFO);,1
sdwb.v,1801,assert(lgblk >= 2);,1
sdwb.v,1814,"assume(lgblk < 15); // Assume no overflow ... for now // Assume the user won't do something dumb, like write to the same FIFO // we're reading from, or either read or write from the same FIFO we // are writing to // {{{ always @(*) if (o_tx_en || r_tx_request) assume(!i_wb_stb || !i_wb_we || i_wb_addr != ADDR_FIFOA + r_fifo); always @(*) if (cmd_busy && o_cmd_type == R2_REPLY) assume(!i_wb_stb || i_wb_addr != ADDR_FIFOA + r_fifo); always @(*) if (o_rx_en || r_rx_request) assume(!i_wb_stb || i_wb_addr != ADDR_FIFOA + r_fifo); // }}} // }}} `endif // FORMAL",21
spirxdata.v,395,assert(!o_busy);,1
spirxdata.v,396,assert(o_write == 0);,1
spirxdata.v,402,assert(!o_rxvalid);,1
spirxdata.v,403,assert(crc_fill == 0);,1
spirxdata.v,408,assert(!o_write);,1
spirxdata.v,467,assert(fill == 0);,1
spirxdata.v,472,assert(lastaddr);,1
spirxdata.v,473,assert(all_mem_written || o_write);,1
spirxdata.v,474,assert(lastdata);,1
spirxdata.v,480,assert(lastaddr);,1
spirxdata.v,481,assert(lastdata);,1
spirxdata.v,487,assert(lastaddr);,1
spirxdata.v,503,assert(f_lgblksz >= 3);,1
spirxdata.v,504,assert(f_lgblksz <= 9);,1
spirxdata.v,506,assert(o_addr[AW-1] == f_fifo);,1
spirxdata.v,511,assert(o_addr[AW-2:0] == 0);,1
spirxdata.v,512,assert(fill == 0);,1
spirxdata.v,518,assert(f_lgblksz_m3[2:0] == r_lgblksz_m3);,1
spirxdata.v,547,assert(fill[0]);,1
spirxdata.v,549,assert(fill[2] == 0);,1
spirxdata.v,560,assert(crc_fill <= 4);,1
spirxdata.v,565,assert(!crc_active);,1
spirxdata.v,566,assert(crc_fill == 0);,1
spirxdata.v,567,assert(crc_data == 0);,1
spirxdata.v,574,assert(next_crc_data == 0);,1
spirxdata.v,597,assume(!f_read_check);,1
spirxdata.v,617,assert(rdvalid != 0);,1
spirxdata.v,618,assert(fill == 5'h10);,1
spirxdata.v,621,assert(rdvalid == 0);,1
spirxdata.v,622,assert(fill == 5'h1f);,1
spirxdata.v,623,assert(gearbox[DW-1:0] == f_read_data);,1
spirxdata.v,626,assert(rdvalid == 0);,1
spirxdata.v,627,assert(fill == 5'h1e);,1
spirxdata.v,628,assert(gearbox[8+DW-1:8] == f_read_data);,1
spirxdata.v,631,assert(rdvalid == 0);,1
spirxdata.v,632,assert(fill == 5'h1c);,1
spirxdata.v,633,assert(gearbox[8+DW-1:16] == f_read_data[23:0]);,1
spirxdata.v,636,assert(rdvalid == 0);,1
spirxdata.v,637,assert(fill == 5'h18);,1
spirxdata.v,638,assert(gearbox[8+DW-1:24] == f_read_data[15:0]);,1
spirxdata.v,641,assert(fill[4]);,1
spirxdata.v,642,assert(gearbox[8+DW-1:DW] == f_read_data[7:0]);,1
spirxdata.v,662,cover(error_token);,1
spirxdata.v,663,cover(start_token);,1
spirxdata.v,675,cover(o_rxvalid);,1
spirxdata.v,676,cover(o_rxvalid && all_mem_written);,1
spirxdata.v,677,cover(o_rxvalid && f_lgblksz == 4 && all_mem_written);,1
spirxdata.v,678,cover(o_rxvalid && f_lgblksz == 4 && o_response == 0);,1
spirxdata.v,679,cover(o_rxvalid && f_lgblksz == 4 && o_response == 0 && all_mem_written);,1
spirxdata.v,681,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h01);,1
spirxdata.v,682,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h02);,1
spirxdata.v,683,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h03);,1
spirxdata.v,684,cover(o_busy && crc_byte == 0);,1
spirxdata.v,685,cover(o_busy && crc_byte == 1);,1
spirxdata.v,686,cover(o_busy && crc_byte == 2);,1
spirxdata.v,687,cover(o_busy && crc_byte == 1 && i_ll_stb);,1
spirxdata.v,688,cover(o_busy && crc_byte == 2 && i_ll_stb);,1
spirxdata.v,690,cover(cvr_packet_received && !o_busy);,1
mdl_sdio.v,301,assert(cmd_arg[31:12]==20'h0);,1
mdl_sdio.v,302,assert(cmd_arg[11:8]==4'h1);,1
mdl_sdrx.v,140,assert(crcfill == 0);,1
mdl_sdrx.v,158,assert(halffill == 0);,1
mdl_sdrx.v,265,assert(!o_err);,1
mdl_sdcmd.v,120,assert(ireg[47:46] == 2'b01);,1
mdl_sdcmd.v,121,assert(ireg[0]);,1
tb_txframe.v,517,assert(crcfill == 0);,1
sdiolib.v,121,assert(r_interrupted);,1
sdiolib.v,139,"assert(!ctrl_reg[15]); // && ctrl_reg[17:16] == 2'b01); end endtask // }}} task sdcard_all_send_cid; // CMD2 // {{{ reg [31:0] ctrl_reg; begin // Send CMD2: ALL_SEND_CID u_bfm.writeio(ADDR_SDDATA, 32'h0); u_bfm.writeio(ADDR_SDCARD, SDIO_READCID); // 0x08242 sdio_wait_while_busy; u_bfm.readio(ADDR_SDCARD, ctrl_reg); assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]); // We leave the CID in the FIFO to be read out later end endtask // }}}",20
sdiolib.v,171,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,187,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,205,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,240,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,254,assert(!ctrl_reg[15] && ctrl_reg[17:16] == 2'b01);,1
sdiolib.v,308,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,336,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiostart.v,65,assert(if_cond[7:0] == 8'ha5);,1
sdiostart.v,97,assert(CID[127:8] == u_sdcard.CID);,1
fwb_register.v,81,assume(i_reset);,1
fwb_register.v,119,assert(error_mask == 0);,1
fwb_register.v,126,assert(i_wb_ack);,1
fwb_register.v,128,assert(!i_wb_ack);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
RegisterFile_tb.v,73,assert(Acc == 8'd0);,1
RegisterFile_tb.v,74,assert(X == 8'd0);,1
RegisterFile_tb.v,75,assert(Y == 8'd0);,1
RegisterFile_tb.v,76,assert(SP == 8'd0);,1
RegisterFile_tb.v,77,assert(PSR == 8'd0);,1
RegisterFile_tb.v,78,assert(PC == 16'd0);,1
RegisterFile_tb.v,185,assert(Acc == 8'd100);,1
RegisterFile_tb.v,186,assert(X == 8'd200);,1
RegisterFile_tb.v,187,assert(Y == 8'd150);,1
RegisterFile_tb.v,188,assert(SP == 8'd250);,1
RegisterFile_tb.v,189,assert(PSR == 8'd75);,1
RegisterFile_tb.v,190,assert(PC[7:0] == 8'd123);,1
RegisterFile_tb.v,191,assert(PC[15:8] == 8'd231);,1
RegisterFile_tb.v,232,assert(Acc == 8'd99);,1
RegisterFile_tb.v,233,assert(X == 8'd88);,1
RegisterFile_tb.v,234,assert(Y == 8'd77);,1
RegisterFile_tb.v,235,assert(SP == 8'd66);,1
RegisterFile_tb.v,236,assert(PSR == 8'd55);,1
RegisterFile_tb.v,237,assert(PC[7:0] == 8'd44);,1
RegisterFile_tb.v,238,assert(PC[15:8] == 8'd33);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
hazard3_frontend.v,189,assert(!fifo_valid[1]);,1
hazard3_frontend.v,382,assert(ctr_flush_pending <= pending_fetches);,1
hazard3_frontend.v,383,assert(pending_fetches < 2'd3);,1
hazard3_frontend.v,532,assert(cir_vld <= 2);,1
hazard3_frontend.v,533,assert(cir_use <= cir_vld);,1
hazard3_frontend.v,535,assert(buf_level_next >= level_next_no_fetch);,1
hazard3_frontend.v,554,assert(buf_level != 2'h3);,1
hazard3_instr_decompress.v,430,assert(in_uop_seq || uop_ctr == 4'h0);,1
hazard3_instr_decompress.v,431,assert(in_uop_seq || zcmp_ls_reg == 5'h01);,1
hazard3_instr_decompress.v,432,assert(in_uop_seq || !uop_atomic);,1
hazard3_instr_decompress.v,433,assert(in_uop_seq || !uop_no_pc_update);,1
hazard3_instr_decompress.v,435,assert(in_uop_seq);,1
hazard3_instr_decompress.v,436,assert(instr_out_uop_stall || uop_ctr_nxt == 4'h0);,1
hazard3_power_ctrl.v,137,assert(past_sleeping);,1
hazard3_power_ctrl.v,139,assert(sleeping_on_wfi|| sleeping_on_block);,1
hazard3_power_ctrl.v,142,assert(!past_stall_release);,1
hazard3_power_ctrl.v,145,assert(allow_power_down || allow_clkgate);,1
hazard3_core.v,475,assert(d_rs1_predecoded == d_rs1);,1
hazard3_core.v,477,assert(d_rs2_predecoded == d_rs2);,1
hazard3_core.v,480,assert(~|d_rs1);,1
hazard3_core.v,482,assert(~|d_rs2);,1
hazard3_core.v,577,assert(x_amo_phase == 3'h0 || x_amo_phase == 3'h2 || x_amo_phase == 3'h4);,1
hazard3_core.v,582,assert(x_unaligned_addr);,1
hazard3_core.v,589,assert(x_amo_phase == 3'h0);,1
hazard3_core.v,621,assert(x_amo_phase <= 3'h4);,1
hazard3_core.v,624,assert(x_amo_phase == 3'h0);,1
hazard3_core.v,627,assert(x_amo_phase == 3'h0);,1
hazard3_core.v,631,assert(!x_stall || m_stall);,1
hazard3_core.v,635,assert(x_unaligned_addr);,1
hazard3_core.v,639,assert(!x_unaligned_addr);,1
hazard3_core.v,646,assert(!m_stall);,1
hazard3_core.v,1125,assert(xm_except == EXCEPT_LOAD_FAULT || xm_except == EXCEPT_STORE_FAULT);,1
hazard3_core.v,1137,assert(xm_memop != MEMOP_NONE);,1
hazard3_core.v,1146,assert(!xm_except_to_d_mode);,1
hazard3_core.v,1147,assert(!xm_sleep_wfi);,1
hazard3_core.v,1148,assert(!xm_sleep_block);,1
hazard3_core.v,1149,assert(!unblock_out);,1
hazard3_core.v,1157,assert(!bus_aph_req_d);,1
hazard3_core.v,1167,assert(!bus_aph_req_d);,1
hazard3_core.v,1172,assert(xm_memop == MEMOP_NONE || xm_memop == MEMOP_AMO);,1
hazard3_core.v,1357,assert(m_reg_wen_if_nonzero);,1
hazard3_core.v,1359,assert(~|xm_rd);,1
hazard3_csr.v,1386,assume(except == EXCEPT_NONE || except == EXCEPT_MRET);,1
hazard3_csr.v,1413,assert(!wen);,1
hazard3_csr.v,1417,assert(except != EXCEPT_MRET);,1
hazard3_csr.v,1421,assert(except != EXCEPT_MRET);,1
hazard3_csr.v,1443,assert(trap_enter_vld);,1
hazard3_csr.v,1445,assert(!trap_is_irq);,1
hazard3_csr.v,1450,assert(except == EXCEPT_EBREAK);,1
hazard3_csr.v,1455,assert(!loadstore_dphase_pending);,1
hazard3_csr.v,1463,assert(trap_enter_vld);,1
sync_fifo.v,113,assume(!flush);,1
sync_fifo.v,114,assume(rst_n);,1
sync_fifo.v,118,assert(level <= DEPTH);,1
hazard3_shift_barrel.v,55,assert(dout == din >> shamt);,1
hazard3_shift_barrel.v,57,assert(dout == din << shamt);,1
hazard3_muldiv_seq.v,274,assert(op_rdy);,1
hazard3_muldiv_seq.v,290,assert(alive);,1
pipe.v,23,assert property (d1 == d2);,1
test.v,19,assume property (wen_stage3 == 1);,1
simple_add.v,37,assert property (out == out2);,1
inst_constraints.v,119,assume (ALLOWED_R || ALLOWED_I || ALLOWED_LW || ALLOWED_SW || ALLOWED_NOP);,1
inst_constraints.v,174,assume property (ALLOWED_I || ALLOWED_U || ALLOWED_R || ALLOWED_S || ALLOWED_NOP);,1
mor1kx_lsu_cappuccino.v,884,assume (rst);,1
mor1kx_lsu_cappuccino.v,901,assert (!ctrl_op_lsu_load_i);,1
mor1kx_lsu_cappuccino.v,902,assert (!ctrl_op_lsu_store_i);,1
mor1kx_lsu_cappuccino.v,903,assert (!ctrl_op_lsu_atomic_i);,1
mor1kx_lsu_cappuccino.v,924,assert (dbus_req_o);,1
mor1kx_lsu_cappuccino.v,929,assert (dbus_req_o);,1
mor1kx_lsu_cappuccino.v,934,assert (dbus_req_o);,1
mor1kx_lsu_cappuccino.v,975,assume (dmmu_enable_i == 0);,1
mor1kx_lsu_cappuccino.v,977,assume (dc_enable_i);,1
mor1kx_lsu_cappuccino.v,980,assume (!dbus_ack_i);,1
mor1kx_lsu_cappuccino.v,981,assume (!dbus_err_i);,1
mor1kx_lsu_cappuccino.v,990,assume (!padv_execute_i);,1
mor1kx_lsu_cappuccino.v,991,assume (!padv_ctrl_i);,1
mor1kx_lsu_cappuccino.v,992,assume (!exec_op_lsu_load_i);,1
mor1kx_lsu_cappuccino.v,993,assume (!exec_op_lsu_store_i);,1
mor1kx_lsu_cappuccino.v,994,assume (!ctrl_op_lsu_store_i);,1
mor1kx_lsu_cappuccino.v,995,assume (!ctrl_op_lsu_load_i);,1
mor1kx_lsu_cappuccino.v,996,assume (!ctrl_op_msync_i);,1
mor1kx_lsu_cappuccino.v,997,assume (!spr_bus_stb_i);,1
mor1kx_lsu_cappuccino.v,1002,assume (!padv_execute_i);,1
mor1kx_lsu_cappuccino.v,1006,assume (padv_execute_i);,1
mor1kx_lsu_cappuccino.v,1117,assert (!spr_bus_stb_i);,1
mor1kx_lsu_cappuccino.v,1121,assert (!ctrl_op_lsu_load_i);,1
mor1kx_lsu_cappuccino.v,1122,assert (!ctrl_op_lsu_store_i);,1
mor1kx_lsu_cappuccino.v,1144,assert (spr_bus_stb_i & f_spr_here);,1
mor1kx_lsu_cappuccino.v,1148,assert (f_counting);,1
mor1kx_lsu_cappuccino.v,1151,assert (|f_pending);,1
mor1kx_store_buffer.v,102,assume (rst);,1
mor1kx_store_buffer.v,150,cover ($past(write_i) && full_o);,1
mor1kx_store_buffer.v,155,cover ($past(write_i) && full_o);,1
mor1kx_store_buffer.v,157,cover ($past(write_i) && full_o);,1
mor1kx_store_buffer.v,166,cover (f_seen_full && empty_o);,1
mor1kx_true_dpram_sclk.v,95,assert (f_data_a == mem[f_addr_a] | f_data_ba == mem[f_addr_a]);,1
mor1kx_true_dpram_sclk.v,96,assert (f_data_b == mem[f_addr_b] | f_data_ab == mem[f_addr_b]);,1
mor1kx_true_dpram_sclk.v,113,assert (dout_a == f_data_a | dout_a == f_data_ba);,1
mor1kx_true_dpram_sclk.v,130,assert (dout_b == f_data_b | dout_b == f_data_ab);,1
mor1kx_icache.v,498,assume (rst);,1
mor1kx_icache.v,529,assert (refill);,1
mor1kx_icache.v,539,assert (cpu_dat_o == f_refill_data);,1
mor1kx_icache.v,540,assert (read);,1
mor1kx_icache.v,541,assert (cpu_ack_o);,1
mor1kx_icache.v,553,assert (spr_bus_ack_o);,1
mor1kx_icache.v,554,assert (invalidate);,1
mor1kx_icache.v,555,assert (!cpu_ack_o);,1
mor1kx_icache.v,556,assert (tag_we);,1
mor1kx_icache.v,557,assert (!tag_din[TAGMEM_WAY_VALID]);,1
mor1kx_icache.v,565,assert (!cache_hit_o);,1
mor1kx_icache.v,575,assert (access == way_hit[0]);,1
mor1kx_icache.v,581,assert (we_i);,1
mor1kx_icache.v,586,assert (!tag_we && !way_we);,1
mor1kx_icache.v,591,assert (!way_we);,1
mor1kx_icache.v,596,assert (refill_hit && !read);,1
mor1kx_icache.v,606,assert (cache_hit_o || refill_hit);,1
mor1kx_icache.v,616,assert (state != READ && state != INVALIDATE && state != IDLE);,1
mor1kx_icache.v,626,assert (way_we == access);,1
mor1kx_icache.v,631,assert (tag_we);,1
mor1kx_icache.v,636,assert (access == tag_save_lru);,1
mor1kx_icache.v,641,assert (spr_bus_addr_i == `OR1K_SPR_ICBIR_ADDR);,1
mor1kx_icache.v,654,assert (!spr_bus_ack_o);,1
mor1kx_ticktimer.v,98,assume (rst);,1
mor1kx_ticktimer.v,107,assert (spr_ttmr_o[28]);,1
mor1kx_ticktimer.v,131,assert (spr_ttcr_o == 0);,1
mor1kx_pic.v,150,assume (rst);,1
mor1kx_rf_cappuccino.v,373,assume (rst);,1
mor1kx_ctrl_cappuccino.v,1609,assume (rst);,1
mor1kx_ctrl_cappuccino.v,1637,assert (spr_read_access);,1
mor1kx_ctrl_cappuccino.v,1639,assert (spr_write_access);,1
mor1kx_ctrl_cappuccino.v,1648,assert (!spr_bus_we_o);*/ //Issue 136: Without spr instruction spr_access should be 0. /*always @(posedge clk) if (f_past_valid & !ctrl_op_mfspr_i & !ctrl_op_mtspr_i & !$past(rst)) assert (|spr_access == 0);*/ always @* if (spr_bus_we_o) assert (spr_we);,10
mor1kx_ctrl_cappuccino.v,1661,assert (spr_sr[`OR1K_SPR_SR_SM]);,1
mor1kx_ctrl_cappuccino.v,1663,assert (!spr_sr[`OR1K_SPR_SR_IME]);,1
mor1kx_ctrl_cappuccino.v,1665,assert (!spr_sr[`OR1K_SPR_SR_DME]);,1
mor1kx_ctrl_cappuccino.v,1667,assert (!spr_sr[`OR1K_SPR_SR_TEE]);,1
mor1kx_ctrl_cappuccino.v,1669,assert (!spr_sr[`OR1K_SPR_SR_IEE]);,1
mor1kx_ctrl_cappuccino.v,1673,assert (!spr_sr[`OR1K_SPR_SR_OVE]);,1
mor1kx_ctrl_cappuccino.v,1679,assert (!exception_taken);,1
mor1kx_ctrl_cappuccino.v,1704,assert (!padv_execute_o);,1
mor1kx_ctrl_cappuccino.v,1708,assert (!atomic_flag_set_i | !ctrl_flag_set_i || ctrl_flag_o);,1
mor1kx_ctrl_cappuccino.v,1709,assert (!ctrl_carry_set_i || ctrl_carry_o);,1
mor1kx_ctrl_cappuccino.v,1731,assert (!deassert_doing_rfe);,1
mor1kx_ctrl_cappuccino.v,1808,assert (du_access);,1
mor1kx_ctrl_cappuccino.v,1812,assert (du_npc_written);,1
mor1kx_ctrl_cappuccino.v,1816,assert (!stepped_into_rfe && !du_npc_written && !stepped_into_exception);,1
mor1kx_ctrl_cappuccino.v,1819,assert (stall_on_trap == spr_dsr[`OR1K_SPR_DSR_TE]);,1
mor1kx_decode_execute_cappuccino.v,611,assume (rst);,1
mor1kx_decode_execute_cappuccino.v,616,assert (!execute_op_bf_o);,1
mor1kx_decode_execute_cappuccino.v,617,assert (!execute_op_bnf_o);,1
mor1kx_decode_execute_cappuccino.v,618,assert (!execute_op_alu_o);,1
mor1kx_decode_execute_cappuccino.v,619,assert (!execute_op_add_o);,1
mor1kx_decode_execute_cappuccino.v,620,assert (!execute_op_mul_o);,1
mor1kx_decode_execute_cappuccino.v,621,assert (!execute_op_mul_signed_o);,1
mor1kx_decode_execute_cappuccino.v,622,assert (!execute_op_mul_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,623,assert (!execute_op_div_o);,1
mor1kx_decode_execute_cappuccino.v,624,assert (!execute_op_div_signed_o);,1
mor1kx_decode_execute_cappuccino.v,625,assert (!execute_op_div_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,626,assert (!execute_op_shift_o);,1
mor1kx_decode_execute_cappuccino.v,627,assert (!execute_op_ffl1_o);,1
mor1kx_decode_execute_cappuccino.v,628,assert (!execute_op_movhi_o);,1
mor1kx_decode_execute_cappuccino.v,629,assert (!execute_op_ext_o);,1
mor1kx_decode_execute_cappuccino.v,630,assert (!execute_op_msync_o);,1
mor1kx_decode_execute_cappuccino.v,631,assert (!execute_op_mfspr_o);,1
mor1kx_decode_execute_cappuccino.v,632,assert (!execute_op_mtspr_o);,1
mor1kx_decode_execute_cappuccino.v,633,assert (!execute_op_lsu_load_o);,1
mor1kx_decode_execute_cappuccino.v,634,assert (!execute_op_lsu_store_o);,1
mor1kx_decode_execute_cappuccino.v,635,assert (!execute_op_lsu_atomic_o);,1
mor1kx_decode_execute_cappuccino.v,636,assert (!execute_op_setflag_o);,1
mor1kx_decode_execute_cappuccino.v,637,assert (!execute_op_jbr_o);,1
mor1kx_decode_execute_cappuccino.v,638,assert (!execute_op_jr_o);,1
mor1kx_decode_execute_cappuccino.v,639,assert (!execute_op_jal_o);,1
mor1kx_decode_execute_cappuccino.v,640,assert (!execute_op_brcond_o);,1
mor1kx_decode_execute_cappuccino.v,641,assert (!execute_op_branch_o);,1
mor1kx_decode_execute_cappuccino.v,642,assert (!execute_op_rfe_o);,1
mor1kx_decode_execute_cappuccino.v,643,assert (!execute_rf_wb_o);,1
mor1kx_decode_execute_cappuccino.v,644,assert (execute_opc_insn_o == `OR1K_OPCODE_NOP);,1
mor1kx_decode_execute_cappuccino.v,645,assert (!execute_adder_do_sub_o);,1
mor1kx_decode_execute_cappuccino.v,646,assert (!execute_adder_do_carry_o);,1
mor1kx_decode_execute_cappuccino.v,647,assert (!execute_except_syscall_o);,1
mor1kx_decode_execute_cappuccino.v,648,assert (!execute_except_trap_o);,1
mor1kx_decode_execute_cappuccino.v,649,assert (!execute_except_illegal_o);,1
mor1kx_decode_execute_cappuccino.v,650,assert (!execute_except_ibus_err_o);,1
mor1kx_decode_execute_cappuccino.v,651,assert (!execute_except_itlb_miss_o);,1
mor1kx_decode_execute_cappuccino.v,652,assert (!execute_except_ipagefault_o);,1
mor1kx_decode_execute_cappuccino.v,653,assert (!execute_except_ibus_align_o);,1
mor1kx_decode_execute_cappuccino.v,654,assert (!decode_valid_o);,1
mor1kx_decode_execute_cappuccino.v,655,assert (!execute_bubble_o);,1
mor1kx_decode_execute_cappuccino.v,662,assert (!execute_op_bf_o);,1
mor1kx_decode_execute_cappuccino.v,663,assert (!execute_op_bnf_o);,1
mor1kx_decode_execute_cappuccino.v,664,assert (!execute_op_alu_o);,1
mor1kx_decode_execute_cappuccino.v,665,assert (!execute_op_add_o);,1
mor1kx_decode_execute_cappuccino.v,666,assert (!execute_op_mul_o);,1
mor1kx_decode_execute_cappuccino.v,667,assert (!execute_op_mul_signed_o);,1
mor1kx_decode_execute_cappuccino.v,668,assert (!execute_op_mul_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,669,assert (!execute_op_div_o);,1
mor1kx_decode_execute_cappuccino.v,670,assert (!execute_op_div_signed_o);,1
mor1kx_decode_execute_cappuccino.v,671,assert (!execute_op_div_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,672,assert (!execute_op_shift_o);,1
mor1kx_decode_execute_cappuccino.v,673,assert (!execute_op_ffl1_o);,1
mor1kx_decode_execute_cappuccino.v,674,assert (!execute_op_movhi_o);,1
mor1kx_decode_execute_cappuccino.v,675,assert (!execute_op_ext_o);,1
mor1kx_decode_execute_cappuccino.v,676,assert (!execute_op_msync_o);,1
mor1kx_decode_execute_cappuccino.v,677,assert (!execute_op_lsu_load_o);,1
mor1kx_decode_execute_cappuccino.v,678,assert (!execute_op_lsu_store_o);,1
mor1kx_decode_execute_cappuccino.v,679,assert (!execute_op_lsu_atomic_o);,1
mor1kx_decode_execute_cappuccino.v,680,assert (!execute_op_setflag_o);,1
mor1kx_decode_execute_cappuccino.v,681,assert (!execute_op_jbr_o);,1
mor1kx_decode_execute_cappuccino.v,682,assert (!execute_op_jr_o);,1
mor1kx_decode_execute_cappuccino.v,683,assert (!execute_op_jal_o);,1
mor1kx_decode_execute_cappuccino.v,684,assert (!execute_op_brcond_o);,1
mor1kx_decode_execute_cappuccino.v,685,assert (!execute_op_branch_o);,1
mor1kx_decode_execute_cappuccino.v,686,assert (!execute_rf_wb_o);,1
mor1kx_decode_execute_cappuccino.v,687,assert (execute_opc_insn_o == `OR1K_OPCODE_NOP);,1
mor1kx_decode_execute_cappuccino.v,688,assert (!execute_adder_do_sub_o);,1
mor1kx_decode_execute_cappuccino.v,689,assert (!execute_adder_do_carry_o);,1
mor1kx_decode_execute_cappuccino.v,690,assert (!execute_bubble_o);,1
mor1kx_decode_execute_cappuccino.v,699,assert (!execute_op_bf_o);,1
mor1kx_decode_execute_cappuccino.v,700,assert (!execute_op_bnf_o);,1
mor1kx_decode_execute_cappuccino.v,701,assert (!execute_op_alu_o);,1
mor1kx_decode_execute_cappuccino.v,702,assert (!execute_op_add_o);,1
mor1kx_decode_execute_cappuccino.v,703,assert (!execute_op_mul_o);,1
mor1kx_decode_execute_cappuccino.v,704,assert (!execute_op_mul_signed_o);,1
mor1kx_decode_execute_cappuccino.v,705,assert (!execute_op_mul_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,706,assert (!execute_op_div_o);,1
mor1kx_decode_execute_cappuccino.v,707,assert (!execute_op_div_signed_o);,1
mor1kx_decode_execute_cappuccino.v,708,assert (!execute_op_div_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,709,assert (!execute_op_shift_o);,1
mor1kx_decode_execute_cappuccino.v,710,assert (!execute_op_ffl1_o);,1
mor1kx_decode_execute_cappuccino.v,711,assert (!execute_op_movhi_o);,1
mor1kx_decode_execute_cappuccino.v,712,assert (!execute_op_ext_o);,1
mor1kx_decode_execute_cappuccino.v,713,assert (!execute_op_msync_o);,1
mor1kx_decode_execute_cappuccino.v,714,assert (!execute_op_mfspr_o);,1
mor1kx_decode_execute_cappuccino.v,715,assert (!execute_op_mtspr_o);,1
mor1kx_decode_execute_cappuccino.v,716,assert (!execute_op_lsu_load_o);,1
mor1kx_decode_execute_cappuccino.v,717,assert (!execute_op_lsu_store_o);,1
mor1kx_decode_execute_cappuccino.v,718,assert (!execute_op_lsu_atomic_o);,1
mor1kx_decode_execute_cappuccino.v,719,assert (!execute_op_setflag_o);,1
mor1kx_decode_execute_cappuccino.v,720,assert (!execute_op_jbr_o);,1
mor1kx_decode_execute_cappuccino.v,721,assert (!execute_op_jr_o);,1
mor1kx_decode_execute_cappuccino.v,722,assert (!execute_op_jal_o);,1
mor1kx_decode_execute_cappuccino.v,723,assert (!execute_op_brcond_o);,1
mor1kx_decode_execute_cappuccino.v,724,assert (!execute_op_branch_o);,1
mor1kx_decode_execute_cappuccino.v,736,assert (decode_valid_o);,1
mor1kx_dmmu.v,555,assume (rst);,1
mor1kx_dmmu.v,557,assume (!rst);,1
mor1kx_dmmu.v,590,assume (spr_way_idx < OPTION_DMMU_WAYS);,1
mor1kx_dmmu.v,630,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,631,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,632,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,633,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,634,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,656,assert (spr_bus_stb_i);,1
mor1kx_dmmu.v,661,assert (!dtlb_trans_we & !dtlb_match_we);,1
mor1kx_simple_dpram_sclk.v,89,assert(mem[f_addr] == f_data);,1
mor1kx_simple_dpram_sclk.v,103,assert (dout == $past(din));,1
mor1kx_simple_dpram_sclk.v,104,assert (dout == $past(din));,1
mor1kx_simple_dpram_sclk.v,105,assert (dout == $past(din));,1
mor1kx_fetch_cappuccino.v,654,assume (rst);,1
mor1kx_fetch_cappuccino.v,661,assert (!fetching_brcond);,1
mor1kx_fetch_cappuccino.v,662,assert (!fetching_mispredicted_branch);,1
mor1kx_fetch_cappuccino.v,663,assert (pc_fetch == OPTION_RESET_PC);,1
mor1kx_fetch_cappuccino.v,664,assert (!fetch_exception_taken_o);,1
mor1kx_fetch_cappuccino.v,665,assert (!fetch_valid_o);,1
mor1kx_fetch_cappuccino.v,666,"assert (decode_insn_o == {`OR1K_OPCODE_NOP, 26'd0});",1
mor1kx_fetch_cappuccino.v,667,assert (!decode_except_ipagefault_o);,1
mor1kx_fetch_cappuccino.v,668,assert (!nop_ack);,1
mor1kx_fetch_cappuccino.v,669,assert (!ibus_req_o);,1
mor1kx_fetch_cappuccino.v,679,assert (!fetch_valid_o);,1
mor1kx_fetch_cappuccino.v,692,assert (!fetch_valid_o);,1
mor1kx_fetch_cappuccino.v,717,assert (pc_decode_o == f_last_pc + 4);,1
mor1kx_fetch_cappuccino.v,722,assert (flushing);,1
mor1kx_fetch_cappuccino.v,727,assert (!fetch_exception_taken_o);,1
mor1kx_fetch_cappuccino.v,737,assert (mispredict_stall);,1
mor1kx_fetch_cappuccino.v,755,assert (pc_fetch == f_const_pc);,1
mor1kx_fetch_cappuccino.v,757,assert (state == READ);,1
mor1kx_fetch_cappuccino.v,769,assert (ibus_dat == f_const_insn);,1
mor1kx_fetch_cappuccino.v,771,assert (imem_dat == f_const_insn);,1
mor1kx_fetch_cappuccino.v,779,assert (decode_insn_o == f_const_insn);,1
mor1kx_fetch_cappuccino.v,780,assert (pc_decode_o == f_const_pc);,1
mor1kx_fetch_cappuccino.v,790,assert (!decode_except_itlb_miss_o);,1
mor1kx_fetch_cappuccino.v,791,assert (!decode_except_ipagefault_o);,1
mor1kx_fetch_cappuccino.v,799,assert (decode_except_ibus_err_o);,1
mor1kx_fetch_cappuccino.v,805,assert (!ic_access);,1
mor1kx_fetch_cappuccino.v,810,assert (!ic_refill_done);,1
mor1kx_fetch_cappuccino.v,825,assert (!padv_i);,1
mor1kx_fetch_cappuccino.v,830,assert (decode_except_ipagefault_o);,1
mor1kx_fetch_cappuccino.v,835,assert (decode_except_ibus_err_o);,1
mor1kx_execute_ctrl_cappuccino.v,404,assume (rst);,1
mor1kx_execute_ctrl_cappuccino.v,409,assert (!ctrl_except_ibus_err_o);,1
mor1kx_execute_ctrl_cappuccino.v,410,assert (!ctrl_except_itlb_miss_o);,1
mor1kx_execute_ctrl_cappuccino.v,411,assert (!ctrl_except_ipagefault_o);,1
mor1kx_execute_ctrl_cappuccino.v,412,assert (!ctrl_except_ibus_align_o);,1
mor1kx_execute_ctrl_cappuccino.v,413,assert (!ctrl_except_illegal_o);,1
mor1kx_execute_ctrl_cappuccino.v,414,assert (!ctrl_except_syscall_o);,1
mor1kx_execute_ctrl_cappuccino.v,415,assert (!ctrl_except_trap_o);,1
mor1kx_execute_ctrl_cappuccino.v,416,assert (!ctrl_except_dbus_o);,1
mor1kx_execute_ctrl_cappuccino.v,417,assert (!ctrl_except_align_o);,1
mor1kx_execute_ctrl_cappuccino.v,418,assert (!wb_rf_wb_o);,1
mor1kx_execute_ctrl_cappuccino.v,428,assert (!ctrl_flag_set_o);,1
mor1kx_execute_ctrl_cappuccino.v,429,assert (!ctrl_flag_clear_o);,1
mor1kx_execute_ctrl_cappuccino.v,430,assert (!ctrl_carry_set_o);,1
mor1kx_execute_ctrl_cappuccino.v,431,assert (!ctrl_carry_clear_o);,1
mor1kx_execute_ctrl_cappuccino.v,432,assert (!ctrl_overflow_set_o);,1
mor1kx_execute_ctrl_cappuccino.v,433,assert (!ctrl_overflow_clear_o);,1
mor1kx_execute_ctrl_cappuccino.v,434,assert (pc_ctrl_o == OPTION_RESET_PC);,1
mor1kx_execute_ctrl_cappuccino.v,435,assert (!ctrl_op_mul_o);,1
mor1kx_execute_ctrl_cappuccino.v,436,assert (!ctrl_op_mfspr_o);,1
mor1kx_execute_ctrl_cappuccino.v,437,assert (!ctrl_op_mtspr_o);,1
mor1kx_execute_ctrl_cappuccino.v,438,assert (!ctrl_op_rfe_o);,1
mor1kx_execute_ctrl_cappuccino.v,439,assert (!ctrl_op_msync_o);,1
mor1kx_execute_ctrl_cappuccino.v,440,assert (!ctrl_op_lsu_load_o);,1
mor1kx_execute_ctrl_cappuccino.v,441,assert (!ctrl_op_lsu_store_o);,1
mor1kx_execute_ctrl_cappuccino.v,442,assert (!ctrl_op_lsu_atomic_o);,1
mor1kx_execute_ctrl_cappuccino.v,443,assert (!ctrl_rf_wb_o);,1
mor1kx_execute_ctrl_cappuccino.v,475,assert (ctrl_op_mtspr_o);,1
mor1kx_execute_ctrl_cappuccino.v,481,assert (ctrl_op_mfspr_o);,1
mor1kx_execute_ctrl_cappuccino.v,488,assert (ctrl_op_mul_o);,1
mor1kx_execute_ctrl_cappuccino.v,494,assert (ctrl_op_rfe_o);,1
mor1kx_execute_ctrl_cappuccino.v,500,assert (ctrl_op_msync_o);,1
mor1kx_immu.v,490,assume (rst);,1
mor1kx_immu.v,516,assert (!cache_inhibit_o);,1
mor1kx_immu.v,527,assert (!tlb_miss_o);,1
mor1kx_immu.v,533,assert (spr_bus_addr_i[15:11] == 5'd2);,1
mor1kx_immu.v,537,assert (itlb_match_spr_cs != itlb_trans_spr_cs);,1
mor1kx_immu.v,542,assert (!itlb_trans_spr_cs);,1
mor1kx_immu.v,547,assert (!itlb_trans_we & !itlb_match_we);,1
mor1kx_immu.v,552,assert (itlb_trans_spr_tx | itlb_match_spr_tx);,1
mor1kx_immu.v,557,assert (!itlb_match_spr_tx);,1
mor1kx_immu.v,564,assert (busy_o);,1
mor1kx_immu.v,571,assert (busy_o);,1
mor1kx_immu.v,598,cover (!tlb_miss_o && phys_addr_o != 0);,1
mor1kx_cpu_cappuccino.v,1603,assume (rst);,1
mor1kx_cpu_cappuccino.v,1608,assert (!fetch_valid_o);,1
mor1kx_cpu_cappuccino.v,1609,assert (!ibus_req_o);,1
mor1kx_cpu_cappuccino.v,1610,assert (!spr_bus_stb_o);,1
mor1kx_cpu_cappuccino.v,1611,assert (!ibus_burst_o);,1
mor1kx_cpu_cappuccino.v,1612,assert (!spr_bus_ack_ic_i);,1
mor1kx_cpu_cappuccino.v,1613,assert (!spr_bus_ack_immu_i);,1
mor1kx_cpu_cappuccino.v,1614,assert (!decode_valid_o);,1
mor1kx_cpu_cappuccino.v,1615,assert (!decode_bubble_o);,1
mor1kx_cpu_cappuccino.v,1616,assert (!execute_bubble_o);,1
mor1kx_cpu_cappuccino.v,1617,assert (!padv_decode_o);,1
mor1kx_cpu_cappuccino.v,1618,assert (!padv_execute_o);,1
mor1kx_cpu_cappuccino.v,1619,assert (!padv_ctrl_o);,1
mor1kx_cpu_cappuccino.v,1620,assert (!predicted_flag_o);,1
mor1kx_cpu_cappuccino.v,1621,assert (!spr_bus_ack_dc_i);,1
mor1kx_cpu_cappuccino.v,1622,assert (!spr_bus_ack_dmmu_i);,1
mor1kx_cpu_cappuccino.v,1623,assert (!ctrl_bubble_o);,1
mor1kx_cpu_cappuccino.v,1624,assert (!wb_rf_wb_o);,1
mor1kx_cpu_cappuccino.v,1630,assert (fetch_valid_o);,1
mor1kx_cpu_cappuccino.v,1652,assume (!dbus_ack_i);,1
mor1kx_cpu_cappuccino.v,1653,assume (!dbus_err_i);,1
mor1kx_cpu_cappuccino.v,1656,assume (!ibus_ack_i);,1
mor1kx_cpu_cappuccino.v,1657,assume (!ibus_err_i);,1
mor1kx_cpu_cappuccino.v,1675,assume (ibus_dat_i[`OR1K_OPCODE_SELECT] == `OR1K_OPCODE_ALU);,1
mor1kx_dcache.v,778,assume (rst);,1
mor1kx_dcache.v,854,assume (refill_allowed_i);,1
mor1kx_dcache.v,861,assume (cpu_req_i);,1
mor1kx_dcache.v,864,assume (!cpu_we_i);,1
mor1kx_dcache.v,884,assert (&f_op_count);,1
mor1kx_dcache.v,960,assume (refill_we_i == f_refill_we);,1
mor1kx_dcache.v,961,assume (refill_adr_i == f_refill_addr);,1
mor1kx_bus_if_wb32.v,192,assume (rst);,1
mor1kx_bus_if_wb32.v,194,assume (!rst);,1
mor1kx_bus_if_wb32.v,200,assert (!wbm_stb_o);,1
mor1kx_bus_if_wb32.v,203,assert (!wbm_stb_o);,1
mor1kx_bus_if_wb32.v,209,assert (wbm_stb_o);,1
mor1kx_bus_if_wb32.v,216,assert (!wbm_cti_o);,1
mor1kx_bus_if_wb32.v,217,assert (!wbm_bte_o);,1
mor1kx_bus_if_wb32.v,222,assert (wbm_adr_o == cpu_adr_i);,1
mor1kx_bus_if_wb32.v,229,assert (wbm_cti_o == 3'b111 | wbm_cti_o == 3'b010 | wbm_cti_o == 3'b000);,1
mor1kx_bus_if_wb32.v,237,assert (wbm_cti_o == 3'b111);,1
mor1kx_execute_alu.v,874,assume (rst);,1
mor1kx_execute_alu.v,876,assume (!rst);,1
mor1kx_execute_alu.v,903,assert (mul_valid);,1
mor1kx_execute_alu.v,904,assert (alu_valid_o);,1
mor1kx_execute_alu.v,905,assert (!alu_stall);,1
mor1kx_execute_alu.v,914,assert (!alu_stall);,1
mor1kx_execute_alu.v,915,assert (alu_valid_o);,1
mor1kx_execute_alu.v,916,assert (mul_valid);,1
mor1kx_execute_alu.v,940,assume (!op_mul_i);,1
mor1kx_execute_alu.v,941,assert (!mul_result);,1
mor1kx_execute_alu.v,953,assert (div_valid);,1
mor1kx_execute_alu.v,956,assert (div_by_zero);,1
mor1kx_execute_alu.v,960,assert (!div_result);,1
mor1kx_execute_alu.v,961,assert (!div_by_zero);,1
mor1kx_execute_alu.v,994,assert (alu_result_o == f_sll);,1
mor1kx_execute_alu.v,996,assert (alu_result_o == f_srl);,1
mor1kx_execute_alu.v,1038,assert (carry_clear_o && a_eq_b);,1
mor1kx_execute_alu.v,1042,assert (carry_set_o);,1
mor1kx_execute_alu.v,1046,assert (overflow_set_o);,1
mor1kx_execute_alu.v,1051,assert (!alu_stall);,1
mor1kx_execute_alu.v,1067,assert (logic_result == f_logic_and);,1
mor1kx_execute_alu.v,1070,assert (logic_result == f_logic_or);,1
mor1kx_execute_alu.v,1073,assert (logic_result == f_logic_xor);,1
mor1kx_pcu.v,148,assume (rst);,1
mor1kx_cache_lru.v,282,assert (NUMWAYS > 1);,1
mor1kx_wb_mux_cappuccino.v,62,assume (rst);,1
mor1kx_wb_mux_cappuccino.v,74,assert (rf_result_o == mul_result_i);,1
f_multiclock_op.v,40,assume (!decode_valid_i);,1
f_multiclock_op.v,42,assume (decode_valid_i);,1
f_multiclock_op.v,53,assume (f_op_i);,1
axi2axilite.v,1014,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1019,assert(m_axi_awvalid);,1
axi2axilite.v,1022,assert(!skids_awready);,1
axi2axilite.v,1025,assert(!skids_awready);,1
axi2axilite.v,1027,assert(!skids_awready);,1
axi2axilite.v,1032,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1052,assert(rid == S_AXI_RID);,1
axi2axilite.v,1056,assert(rid == S_AXI_RID);,1
axi2axilite.v,1060,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1065,assert(m_axi_arvalid);,1
axi2axilite.v,1066,assert(!skids_arready);,1
axi2axilite.v,1084,assume(!skids_awvalid);,1
axi2axilite.v,1085,assume(!skids_wvalid);,1
axi2axilite.v,1086,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1087,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1088,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1089,assert(!skidm_bvalid);,1
axi2axilite.v,1090,assert(!S_AXI_BVALID);,1
axi2axilite.v,1099,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1100,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1101,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1133,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1135,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1159,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1161,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
aximwr2wbsp.v,663,assume(!i_wb_err);,1
aximwr2wbsp.v,664,assert(!err_state);,1
aximwr2wbsp.v,668,assert(o_wb_cyc);,1
aximwr2wbsp.v,670,assert(!S_AXI_BRESP[1]);,1
aximwr2wbsp.v,671,assert(!S_AXI_BRESP[0]);,1
axi3reorder.v,477,assert(sr_write == 0);,1
axi3reorder.v,492,cover(cvr_sreg_full && sr_valid == 0);,1
axi3reorder.v,628,assume(!S_AXI_ARESETN);,1
axi3reorder.v,633,assume(!S_AXI3_AWVALID);,1
axi3reorder.v,634,assume(!S_AXI3_WVALID);,1
axi3reorder.v,636,assume(!M_AXI_WVALID);,1
axi3reorder.v,640,assume(S_AXI3_AWVALID);,1
axi3reorder.v,646,assume(S_AXI3_WVALID);,1
axi3reorder.v,655,assert(M_AXI_WVALID);,1
axi3reorder.v,692,assert(!f_ckfifo_empty);,1
axi3reorder.v,693,assert(f_ckfifo_id == M_AXI_WID);,1
axi3reorder.v,694,assert(f_ckfifo_data == M_AXI_WDATA);,1
axi3reorder.v,695,assert(f_ckfifo_strb == M_AXI_WSTRB);,1
axi3reorder.v,696,assert(f_ckfifo_last == M_AXI_WLAST);,1
axi3reorder.v,713,assert(f_awid_count > 0);,1
axi3reorder.v,719,assume(S_AXI3_AWID == 0);,1
axi3reorder.v,724,assume(S_AXI3_WID == 0);,1
axi3reorder.v,725,assume(S_AXI3_WDATA == 0);,1
axi3reorder.v,726,assume(S_AXI3_WSTRB == 0);,1
axi3reorder.v,727,assume(S_AXI3_WLAST == 0);,1
axi3reorder.v,733,assert(M_AXI_WID == 0);,1
axi3reorder.v,734,assert(M_AXI_WDATA == 0);,1
axi3reorder.v,735,assert(M_AXI_WSTRB == 0);,1
axi3reorder.v,736,assert(M_AXI_WLAST == 0);,1
aximrd2wbsp.v,490,assume(w_reset);,1
aximrd2wbsp.v,505,assert(!o_wb_stb && !o_wb_cyc);,1
aximrd2wbsp.v,530,assert(fwb_outstanding == 0);,1
aximrd2wbsp.v,596,assert(resp_fifo_fill == 1);,1
aximrd2wbsp.v,603,assert(o_wb_stb || lastid_fifo_full);,1
aximrd2wbsp.v,607,assert(stblen == 0);,1
aximrd2wbsp.v,612,assert(!o_wb_stb);,1
aximrd2wbsp.v,613,assert(!lastid_fifo_wr);,1
aximrd2wbsp.v,620,assert(!last_ack);,1
aximrd2wbsp.v,626,assert(!last_ack);,1
aximrd2wbsp.v,628,assert(midissue || last_ack);,1
aximrd2wbsp.v,630,assert(last_ack == last_stb);,1
aximrd2wbsp.v,633,assert(o_wb_cyc);,1
aximrd2wbsp.v,647,assert(!o_wb_cyc);,1
aximrd2wbsp.v,730,cover(cvr_reads == 4);,1
aximrd2wbsp.v,733,cover(cvr_read_bursts == 4);,1
aximrd2wbsp.v,736,cover(cvr_rdid_bursts == 4);,1
axisbroadcast.v,148,assume(!S_AXI_ARESETN);,1
axisbroadcast.v,166,assume(!S_AXIS_TVALID);,1
axisbroadcast.v,169,assume(S_AXIS_TVALID);,1
axisbroadcast.v,177,assert(!M_AXIS_TVALID[fc_channel]);,1
axisbroadcast.v,180,assert(M_AXIS_TVALID[fc_channel]);,1
axisbroadcast.v,189,assume(!icount[F_LGDEPTH-1]);,1
axissafety.v,435,assume(!S_AXI_ARESETN);,1
axissafety.v,441,assert(!M_AXIS_TVALID);,1
axissafety.v,444,assert(M_AXIS_TVALID);,1
axissafety.v,466,assert(fm_packet_counter < OPT_PACKET_LENGTH);,1
axissafety.v,469,assert(m_packet_count == fm_packet_counter);,1
axissafety.v,474,assert(s_packet_counter == 0);,1
axissafety.v,475,assert(m_packet_count == OPT_PACKET_LENGTH-2);,1
axissafety.v,479,assert(m_packet_count == OPT_PACKET_LENGTH-1);,1
axissafety.v,489,assert(s_packet_counter < OPT_PACKET_LENGTH);,1
axissafety.v,506,assert(fm_stall_count < OPT_MAX_STALL);,1
axissafety.v,516,assume(!S_AXIS_TVALID);,1
axissafety.v,519,assume(S_AXIS_TVALID);,1
axissafety.v,546,assert(s_packet_counter == fs_packet_counter);,1
axissafety.v,548,assert(s_packet_counter == 0);,1
axissafety.v,583,assert(stall_count == f_stall_count);,1
axissafety.v,586,assume(f_stall_count <= OPT_MAX_STALL);,1
axissafety.v,592,assert(!o_fault);,1
demofull.v,1000,assume(!S_AXI_ARESETN);,1
demofull.v,1096,assert(S_AXI_BVALID);,1
demofull.v,1103,assert(!S_AXI_WREADY);,1
demofull.v,1127,assert(S_AXI_ARREADY);,1
demofull.v,1130,assert(axi_rlen <= 256);,1
demofull.v,1145,assert(!rskd_lock);,1
demofull.v,1148,assert(S_AXI_BRESP == 2'b00);,1
demofull.v,1154,assert(S_AXI_RID == 0);,1
demofull.v,1155,assert(S_AXI_RDATA == 0);,1
demofull.v,1156,assert(S_AXI_RRESP == 2'b00);,1
demofull.v,1161,assert(o_waddr == 0);,1
demofull.v,1162,assert(o_wdata == 0);,1
demofull.v,1163,assert(o_wstrb == 0);,1
demofull.v,1206,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
axlite2wbsp.v,467,assume(!i_axi_reset_n);,1
axlite2wbsp.v,516,assert(f_axi_rd_outstanding == f_rd_fifo_axi_used);,1
axlite2wbsp.v,524,assert(f_axi_awr_outstanding == 0);,1
axlite2wbsp.v,525,assert(f_axi_wr_outstanding == 0);,1
axlite2wbsp.v,531,assert(f_axi_rd_outstanding == 0);,1
axlite2wbsp.v,540,assume(i_axi_awvalid == 0);,1
axlite2wbsp.v,541,assume(i_axi_wvalid == 0);,1
axlite2wbsp.v,543,assert(o_axi_bvalid == 0);,1
axlite2wbsp.v,549,assume(i_axi_arvalid == 0);,1
axlite2wbsp.v,550,assert(o_axi_rvalid == 0);,1
demoaxi.v,453,assert(f_axi_rd_outstanding == 0);,1
demoaxi.v,457,assert(f_axi_rd_outstanding == 1);,1
demoaxi.v,631,cover(fw_wrdemo_pipe[0]);,1
demoaxi.v,632,cover(fw_wrdemo_pipe[1]);,1
demoaxi.v,633,cover(fw_wrdemo_pipe[2]);,1
demoaxi.v,634,cover(fw_wrdemo_pipe[3]);,1
demoaxi.v,635,cover(fw_wrdemo_pipe[4]);,1
demoaxi.v,636,cover(fw_wrdemo_pipe[5]);,1
demoaxi.v,637,cover(fw_wrdemo_pipe[6]);,1
demoaxi.v,638,cover(fw_wrdemo_pipe[7]); // cover(fw_wrdemo_pipe[8]);,2
demoaxi.v,640,cover(fw_wrdemo_pipe[9]);,1
demoaxi.v,641,cover(fw_wrdemo_pipe[10]);,1
demoaxi.v,642,cover(fw_wrdemo_pipe[11]);,1
demoaxi.v,643,cover(fw_wrdemo_pipe[12]);,1
demoaxi.v,644,cover(fw_wrdemo_pipe[13]);,1
demoaxi.v,645,cover(fw_wrdemo_pipe[14]);,1
demoaxi.v,646,cover(fw_wrdemo_pipe[15]);,1
demoaxi.v,647,cover(fw_wrdemo_pipe[16]);,1
demoaxi.v,648,cover(fw_wrdemo_pipe[17]);,1
demoaxi.v,649,cover(fw_wrdemo_pipe[18]);,1
demoaxi.v,650,cover(fw_wrdemo_pipe[19]);,1
demoaxi.v,651,cover(fw_wrdemo_pipe[20]);,1
demoaxi.v,652,cover(fw_wrdemo_pipe[21]);,1
demoaxi.v,653,cover(fw_wrdemo_pipe[22]);,1
demoaxi.v,704,cover(fw_rddemo_pipe[0]);,1
demoaxi.v,705,cover(fw_rddemo_pipe[1]);,1
demoaxi.v,706,cover(fw_rddemo_pipe[2]);,1
demoaxi.v,707,cover(fw_rddemo_pipe[3]);,1
demoaxi.v,708,cover(fw_rddemo_pipe[4]);,1
demoaxi.v,709,cover(fw_rddemo_pipe[5]);,1
demoaxi.v,710,cover(fw_rddemo_pipe[6]);,1
demoaxi.v,711,cover(fw_rddemo_pipe[7]);,1
demoaxi.v,712,cover(fw_rddemo_pipe[8]);,1
demoaxi.v,713,cover(fw_rddemo_pipe[9]);,1
demoaxi.v,714,cover(fw_rddemo_pipe[10]);,1
wbxclk.v,150,assert(bus_abort);,1
wbxclk.v,191,assert(xck_reset);,1
wbxclk.v,357,assume(fwb_step >= 2);,1
wbxclk.v,358,assume(fxck_step >= 2);,1
wbxclk.v,360,assume(fwb_step <= 4'b1000);,1
wbxclk.v,361,assume(fxck_step <= 4'b1000);,1
wbxclk.v,377,assume(i_wb_clk == fwb_count[3]);,1
wbxclk.v,378,assume(i_xclk_clk == fxck_count[3]);,1
wbxclk.v,435,assume(past_wb_reset== i_reset);,1
wbxclk.v,436,assume(past_wb_cyc == i_wb_cyc);,1
wbxclk.v,437,assume(past_wb_stb == i_wb_stb);,1
wbxclk.v,438,assume(past_wb_we == i_wb_we);,1
wbxclk.v,439,assume(past_wb_err == o_wb_err);,1
wbxclk.v,442,assume(!i_wb_cyc);,1
wbxclk.v,444,assume(past_wb_we == i_wb_we);,1
wbxclk.v,459,assume(past_xclk_stall == i_xclk_stall);,1
wbxclk.v,460,assume(past_xclk_data == i_xclk_data);,1
wbxclk.v,461,assume(past_xclk_ack == i_xclk_ack);,1
wbxclk.v,462,assume(past_xclk_err == i_xclk_err);,1
wbxclk.v,510,assert(ackfifo_fill == 0 || xclk_err_state);,1
wbxclk.v,521,assert(wb_active);,1
wbxclk.v,531,assert(reqfifo_fill == fwb_outstanding + 1);,1
wbxclk.v,535,assert(o_xclk_cyc && !o_xclk_stb);,1
wbxclk.v,536,assert(ackfifo_fill == 0);,1
wbxclk.v,537,assert(fxck_outstanding == 0);,1
wbxclk.v,540,assert(wb_active);,1
wbxclk.v,542,assert(!wb_active);,1
wbxclk.v,547,assert(fxck_outstanding == 0);,1
wbxclk.v,548,assert(xck_reset || wb_active || !i_wb_cyc);,1
wbxclk.v,549,assert(!o_xclk_stb);,1
wbxclk.v,551,assert(no_returns || err_stb);,1
wbxclk.v,553,assert(o_wb_err);,1
wbxclk.v,559,assert(reqfifo_fill <= fwb_outstanding + 1);,1
wbxclk.v,560,assert(ackfifo_fill <= fwb_outstanding);,1
wbxclk.v,561,assert(fxck_outstanding <= fwb_outstanding);,1
wbxclk.v,563,assert(wb_active || f_drop_cyc_request);,1
wbxclk.v,571,assert(reqfifo_fill== fwb_outstanding + 1);,1
wbxclk.v,572,assert(ackfifo_fill == 0);,1
wbxclk.v,573,assert(fxck_outstanding == 0);,1
wbxclk.v,574,assert(!o_xclk_stb);,1
wbxclk.v,575,assert(o_xclk_cyc);,1
wbxclk.v,584,assert(o_xclk_cyc || xclk_err_state);,1
wbxclk.v,585,assert(!f_drop_cyc_request);,1
wbxclk.v,586,assert(!xck_reset || bus_abort);,1
wbxclk.v,596,assert(o_xclk_cyc || xck_reset || xclk_err_state);,1
wbxclk.v,605,assert(!i_wb_cyc || fwb_outstanding == reqfifo_fill);,1
wbxclk.v,609,assert(!wb_active);,1
wbxclk.v,615,assert(!ackfifo_full);,1
wbxclk.v,621,assert(i_wb_we == o_xclk_we);,1
wbxclk.v,625,assert(acks_outstanding == fwb_outstanding);,1
wbxclk.v,629,assert(!o_xclk_cyc);,1
wbxclk.v,637,assert(!req_stb || xck_reset);,1
wbxclk.v,638,assert(reqfifo_fill <= 1);,1
wbxclk.v,640,assert(!o_xclk_cyc);,1
wbxclk.v,663,assert(acks_outstanding >= ackfifo_fill);,1
wbxclk.v,664,assert(acks_outstanding >= fxck_outstanding);,1
wbxclk.v,671,assert(acks_outstanding +1 == reqfifo_fill);,1
wbxclk.v,673,assert(!wb_active || o_xclk_cyc || xclk_err_state);,1
wbxclk.v,676,assert(acks_outstanding +1 == reqfifo_fill);,1
wbxclk.v,677,assert(ackfifo_fill == 0);,1
wbxclk.v,678,assert(fxck_outstanding == 0);,1
wbxclk.v,679,assert(!o_xclk_stb);,1
wbxclk.v,680,assert(o_xclk_cyc);,1
wbxclk.v,686,assert(o_xclk_cyc);,1
wbxclk.v,690,assert(!xck_reset);,1
wbxclk.v,693,assert(!xclk_err_state || acks_outstanding != 0 || xck_reset);,1
wbxclk.v,700,assert(f_drop_cyc_request);,1
wbxclk.v,720,assert(o_xclk_cyc);,1
wbxclk.v,725,assert(!ign_ackfifo_stall);,1
wbxclk.v,813,cover(cvr_replies > 1); // 33 cover(cvr_replies > 3); // 38 cover(cvr_replies > 9);,3
wbxclk.v,817,cover(cvr_abort); // 31 cover(cvr_post_abort > 1 && cvr_replies > 1); // 63 cover(cvr_post_abort > 1 && cvr_replies > 2); // 63 cover(cvr_post_abort > 1 && cvr_replies > 3); // 65 cover(cvr_post_abort > 2 && cvr_replies > 3); // 65 cover(cvr_post_abort > 3 && cvr_replies > 3); // 68 cover(cvr_post_abort > 4 && cvr_replies > 3); // 70 cover(cvr_post_abort > 3 && cvr_replies > 6); // 72 end always @(posedge gbl_clk) if (!i_reset) cover(cvr_replies > 9 && !i_wb_clk && acks_outstanding == 0 && fwb_nreqs == fwb_nacks && fwb_nreqs == cvr_replies && !bus_abort && fwb_count != fxck_count);,15
aximm2s.v,1576,assert(fifo_fill == 0 || reset_fifo);,1
aximm2s.v,1588,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
aximm2s.v,1597,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1598,assert(fv_start_addr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1599,assert(axi_araddr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1600,assert(axi_raddr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1624,assert(f_next_start == f_last_addr);,1
aximm2s.v,1692,assert(fv_ar_requests_remaining == ar_requests_remaining);,1
aximm2s.v,1702,assert(fv_ar_requests_remaining <= cmd_length_aligned_w);,1
aximm2s.v,1733,assert(axi_raddr[ADDRLSB-1:0] == cmd_addr[ADDRLSB-1:0]);,1
aximm2s.v,1734,assert(axi_abort_pending || fv_axi_raddr == axi_raddr);,1
aximm2s.v,1737,assert(fv_axi_raddr == fv_start_addr);,1
aximm2s.v,1738,assert(axi_raddr == fv_start_addr);,1
aximm2s.v,1744,assert(fv_axi_raddr <= f_last_addr);,1
aximm2s.v,1745,assert(fv_axi_raddr >= fv_start_addr);,1
aximm2s.v,1758,assert(axi_raddr <= fv_axi_raddr);,1
aximm2s.v,1759,assert(fv_start_addr <= axi_raddr);,1
aximm2s.v,1775,assert(!M_AXI_ARVALID);,1
aximm2s.v,1776,assert(!M_AXI_RVALID);,1
aximm2s.v,1791,assert(!r_busy);,1
aximm2s.v,1804,assert(!r_busy);,1
aximm2s.v,1847,assert(M_AXI_ARVALID);,1
aximm2s.v,1852,assert(r_max_burst > 0);,1
aximm2s.v,1868,assert(cmd_addr == axi_raddr);,1
aximm2s.v,1870,assert(cmd_addr == fv_start_addr);,1
aximm2s.v,1912,assert(rd_reads_remaining <= cmd_length_w);,1
aximm2s.v,1916,assert(ar_bursts_outstanding <= rd_reads_remaining);,1
aximm2s.v,1935,assert(!M_AXI_ARVALID);,1
aximm2s.v,1990,assert(!o_int);,1
aximm2s.v,2009,assume(M_AXI_RDATA != f_restricted);,1
aximm2s.v,2014,assert(M_AXIS_TDATA != f_restricted);,1
aximm2s.v,2059,cover( r_err && cvr_aborted);,1
aximm2s.v,2060,cover( r_err && cvr_buserr);,1
aximm2s.v,2061,cover(!r_err);,1
aximm2s.v,2064,cover(cmd_length_w > 5);,1
aximm2s.v,2065,cover(cmd_length_w > 8);,1
aximm2s.v,2069,cover(&cvr_continued);,1
aximm2s.v,2077,cover(!r_err && fifo_fill > 8 && !r_busy);,1
aximm2s.v,2080,cover(r_busy);,1
aximm2s.v,2083,cover(start_burst);,1
aximm2s.v,2086,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
aximm2s.v,2089,cover(M_AXI_RVALID);,1
aximm2s.v,2092,cover(M_AXI_RVALID & M_AXI_RLAST);,1
aximm2s.v,2096,cover(!ar_none_remaining);,1
aximm2s.v,2099,cover(1);,1
aximm2s.v,2103,cover(!phantom_start);,1
aximm2s.v,2104,cover(phantom_start);,1
aximm2s.v,2122,cover(M_AXIS_TVALID && M_AXIS_TREADY && M_AXIS_TLAST);,1
aximm2s.v,2125,cover(o_int && cvr_lastcount > 2);,1
aximm2s.v,2137,cover(r_err);,1
aximm2s.v,2138,cover(!r_err);,1
aximm2s.v,2139,cover(axi_abort_pending);,1
aximm2s.v,2140,cover(!axi_abort_pending);,1
aximm2s.v,2141,cover(cvr_aborted);,1
aximm2s.v,2142,cover(!cvr_aborted);,1
aximm2s.v,2143,cover(cvr_buserr);,1
aximm2s.v,2144,cover(!cvr_buserr);,1
aximm2s.v,2145,cover(!cvr_buserr && !axi_abort_pending);,1
axivcamera.v,1215,assume(!lost_sync && cfg_active);,1
axivfifo.v,1083,assert(!phantom_write);,1
axivfifo.v,1084,assert(!phantom_read);,1
axivfifo.v,1102,assert(!ofifo_full);,1
axivfifo.v,1117,assert(!M_AXI_WVALID);,1
axivfifo.v,1122,assert(read_from_fifo);,1
axivfifo.v,1124,assert(read_from_fifo);,1
axivfifo.v,1148,assert(o_err);,1
axivfifo.v,1150,assert(o_err);,1
axivfifo.v,1164,assert(!M_AXI_AWVALID);,1
axivfifo.v,1165,assert(!M_AXI_WVALID);,1
axivfifo.v,1166,assert(!M_AXI_ARVALID);,1
axivfifo.v,1226,assert(M_AXI_ARADDR != M_AXI_AWADDR);,1
axivfifo.v,1252,assert(mem_space_available == f_space_available);,1
axivfifo.v,1256,assert(M_AXI_ARADDR == M_AXI_AWADDR);,1
axivfifo.v,1257,assert(!M_AXI_AWVALID || phantom_write);,1
axivfifo.v,1281,assert(mem_data_available == f_data_available);,1
axivfifo.v,1284,assert(vfifo_fill[C_AXI_ADDR_WIDTH]);,1
axivfifo.v,1285,assert(ofifo_empty);,1
axivfifo.v,1314,assert(!M_AXI_AWVALID);,1
axivfifo.v,1315,assert(!M_AXI_WVALID);,1
axivfifo.v,1316,assert(!M_AXI_ARVALID);,1
axivfifo.v,1319,assert(mem_data_available == 0);,1
axivfifo.v,1321,assert(!phantom_read);,1
axivfifo.v,1322,assert(!phantom_write);,1
axivfifo.v,1324,assert(vfifo_fill == 0);,1
axivfifo.v,1357,assume(M_AXI_AWREADY || writes_pending > 0);,1
axivfifo.v,1358,assume(M_AXIS_TREADY);,1
axivfifo.v,1359,assume(M_AXI_WREADY);,1
axivfifo.v,1360,assume(M_AXI_ARREADY);,1
axivfifo.v,1383,cover(cvr_read_bursts > 1 && cvr_write_bursts > 1);,1
axisrandom.v,108,assume(!S_AXI_ARESETN);,1
axisrandom.v,122,assert(!M_AXIS_TVALID);,1
axisrandom.v,124,assert(M_AXIS_TVALID);,1
sfifothresh.v,96,assert(!o_int);,1
wbsafety.v,426,assume(i_reset);,1
wbsafety.v,455,assert(expected_returns == fwbs_outstanding);,1
wbsafety.v,491,assert(!o_fault);,1
wbsafety.v,504,assert(!timeout);,1
wbsafety.v,508,assert(!o_wb_cyc);,1
wbsafety.v,515,assert(sacks == fwbm_nacks);,1
wbsafety.v,519,assert(o_wb_cyc || o_wb_err);,1
wbsafety.v,526,assert(fwbs_nreqs == mreqs);,1
wbsafety.v,530,assert(i_wb_we == o_wb_we);,1
wbsafety.v,534,assert(o_wb_cyc || o_wb_err);,1
wbsafety.v,545,cover(o_fault);,1
wbsafety.v,549,cover(o_fault);,1
wbsafety.v,553,cover(o_fault);,1
wbsafety.v,576,cover(faulted && !o_reset && o_wb_ack);,1
wbsafety.v,583,cover(!i_reset && fwbs_nacks > 4);,1
axiempty.v,285,assume(!S_AXI_ARESETN);,1
axiempty.v,385,assert(S_AXI_ARREADY);,1
axiempty.v,429,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
wbp2classic.v,159,assume(i_reset);,1
wbp2classic.v,199,assume(i_sstb);,1
axilempty.v,125,assert(awskd_unused == 0);,1
axilempty.v,139,assert(wskd_unused == 0);,1
axilempty.v,208,assert(arskd_unused == 0);,1
axilempty.v,339,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
axilempty.v,349,assert(S_AXI_RDATA == 0);,1
axilempty.v,351,assert(S_AXI_RRESP == 2'b11);,1
axilempty.v,353,assert(S_AXI_BRESP == 2'b11);,1
axilite2axi.v,297,assert(faxi_awr_nbursts == faxil_awr_outstanding);,1
axilite2axi.v,317,assert(faxil_wr_outstanding == 0);,1
axilite2axi.v,352,assume(S_AXI_AWVALID || !S_AXI_WVALID);,1
axilite2axi.v,354,assume(!S_AXI_AWVALID);,1
axilite2axi.v,364,assume(!S_AXI_ARVALID);,1
axilite2axi.v,368,assume(!S_AXI_AWVALID);,1
wbxbar.v,1132,assume(i_reset);,1
wbxbar.v,1152,assert(grant[N][M-1:0] == 0);,1
wbxbar.v,1158,assert(o_merr[N] || m_stall[N]);,1
wbxbar.v,1170,assert(checkgrant == mgrant[N]);,1
wbxbar.v,1184,assert(mgrant[N]);,1
wbxbar.v,1185,assert(mindex[N] == M);,1
wbxbar.v,1186,assert(sgrant[M]);,1
wbxbar.v,1187,assert(sindex[M] == N);,1
wbxbar.v,1200,assert(grant[sindex[M]][M]);,1
wbxbar.v,1211,assert(sgrant[M] == f_sgrant);,1
wbxbar.v,1236,assume(sgrant == 0);,1
wbxbar.v,1243,assume(o_scyc[M] == 0);,1
wbxbar.v,1244,assume(o_sstb[M] == 0);,1
wbxbar.v,1245,assume(sgrant[M] == 0);,1
wbxbar.v,1254,assume(grant[N] == 0);,1
wbxbar.v,1255,assume(mgrant[N] == 0);,1
wbxbar.v,1288,assert(f_moutstanding[N] <= 1);,1
wbxbar.v,1292,assert(m_stall[N] || o_merr[N]);,1
wbxbar.v,1329,assert(m_stall[N]);,1
wbxbar.v,1367,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1369,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1371,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1373,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1375,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1377,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1385,assert(i_mwe[N] == m_we[N]);,1
wbxbar.v,1395,assert(!o_scyc[M]);,1
wbxbar.v,1440,assume(special_master == 0);,1
wbxbar.v,1443,assume(special_slave == 0);,1
wbxbar.v,1476,assert(address_found == 0);,1
wbxbar.v,1495,assume(special_value == 0);,1
wbxbar.v,1505,assume(i_sack[special_slave]);,1
wbxbar.v,1512,assume(!i_sack[special_slave]);,1
wbxbar.v,1513,assume(!i_serr[special_slave]);,1
wbxbar.v,1561,assert(grant[special_master][special_slave]);,1
wbxbar.v,1562,assert(mgrant[special_master]);,1
wbxbar.v,1563,assert(sgrant[special_slave]);,1
wbxbar.v,1564,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1565,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1566,assert(!o_merr[special_master]);,1
wbxbar.v,1571,assert(o_scyc[special_slave]);,1
wbxbar.v,1572,assert(o_sstb[special_slave]);,1
wbxbar.v,1573,assert(!o_swe[special_slave]);,1
wbxbar.v,1574,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1581,assert(!m_we[special_master]);,1
wbxbar.v,1582,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1589,assert(o_scyc[special_slave]);,1
wbxbar.v,1590,assert(o_sstb[special_slave]);,1
wbxbar.v,1591,assert(!o_swe[special_slave]);,1
wbxbar.v,1592,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1596,assert(i_sack[special_slave]);,1
wbxbar.v,1604,assert(o_mack[special_master]);,1
wbxbar.v,1612,cover(i_mcyc[special_master] && f_read_ack);,1
wbxbar.v,1649,assert(grant[special_master][special_slave]);,1
wbxbar.v,1650,assert(mgrant[special_master]);,1
wbxbar.v,1651,assert(sgrant[special_slave]);,1
wbxbar.v,1652,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1653,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1654,assert(!o_merr[special_master]);,1
wbxbar.v,1659,assert(o_scyc[special_slave]);,1
wbxbar.v,1660,assert(o_sstb[special_slave]);,1
wbxbar.v,1661,assert(o_swe[special_slave]);,1
wbxbar.v,1662,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1673,assert(m_we[special_master]);,1
wbxbar.v,1674,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1683,assert(o_scyc[special_slave]);,1
wbxbar.v,1684,assert(o_sstb[special_slave]);,1
wbxbar.v,1685,assert(o_swe[special_slave]);,1
wbxbar.v,1686,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1699,assert(i_sack[special_slave]);,1
wbxbar.v,1706,assert(o_mack[special_master]);,1
wbxbar.v,1711,cover(i_mcyc[special_master] && f_write_ack);,1
sfifo.v,272,assert(o_fill == f_fill);,1
sfifo.v,279,assert(o_full == r_full);,1
sfifo.v,286,assert(o_empty == r_empty);,1
sfifo.v,297,assert(r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,303,assert(!r_empty);,1
sfifo.v,310,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,312,assert(o_data == i_data);,1
sfifo.v,368,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,374,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,381,assert(o_data == f_first_data);,1
sfifo.v,385,assert(o_data == f_second_data);,1
sfifo.v,395,assert(f_first_in_fifo);,1
sfifo.v,397,assert(!f_first_in_fifo);,1
sfifo.v,406,assert(!f_first_in_fifo);,1
sfifo.v,411,assert(f_second_in_fifo);,1
sfifo.v,418,assert(f_second_in_fifo);,1
sfifo.v,420,assert(!f_second_in_fifo);,1
sfifo.v,423,assert(f_first_in_fifo);,1
sfifo.v,426,assert(f_second_in_fifo);,1
sfifo.v,429,assert(f_first_in_fifo);,1
sfifo.v,431,assert(o_data == f_first_data);,1
sfifo.v,433,assert(!f_first_in_fifo);,1
sfifo.v,434,assert(o_data == f_second_data);,1
sfifo.v,461,cover(f_was_full && f_empty);,1
apbslave.v,136,assert(PREADY);,1
apbslave.v,154,assume(mem[f_addr[AW-1:APBLSB]] == f_data);,1
apbslave.v,167,assert(PRDATA == f_data);,1
apbslave.v,170,assert(f_data == mem[f_addr[AW-1:APBLSB]]);,1
apbslave.v,197,cover(cvr_writes[2]);,1
apbslave.v,200,cover(cvr_reads[2]);,1
apbslave.v,219,cover(cvr_seq[0]);,1
apbslave.v,220,cover(cvr_seq[1]);,1
apbslave.v,221,cover(cvr_seq[2]);,1
apbslave.v,225,cover(PRESETn && !PSEL && !PENABLE && cvr_seq[2]);,1
easyaxil.v,394,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
easyaxil.v,405,assert(S_AXI_RDATA == 0);,1
axixbar.v,2142,assert(rerr_id[N] == 0);,1
axixbar.v,2214,assert(mwgrant[N]);,1
axixbar.v,2215,assert(mwindex[N] == iM);,1
axixbar.v,2218,assert(swgrant[iM]);,1
axixbar.v,2219,assert(swindex[iM] == N);,1
axixbar.v,2226,assert(wgrant[N] != 0);,1
axixbar.v,2230,assert(wrequest[N][NS-1:0] == 0);,1
axixbar.v,2250,assert(mrgrant[N]);,1
axixbar.v,2251,assert(mrindex[N] == iM);,1
axixbar.v,2254,assert(srgrant[iM]);,1
axixbar.v,2255,assert(srindex[iM] == N);,1
axixbar.v,2262,assert(rgrant[N] != 0);,1
axixbar.v,2270,assert(!mrempty[N]);,1
axixbar.v,2355,assert(mwfull[N] == &w_mawpending[N]);,1
axixbar.v,2361,assert(mrfull[N] == &w_mrpending[N]);,1
axixbar.v,2561,assume(S_AXI_AWVALID[N] == 0);,1
axixbar.v,2563,assert(wgrant[N] == 0);,1
axixbar.v,2565,assert(mwgrant[N] == 0);,1
axixbar.v,2567,assert(S_AXI_BVALID[N]== 0);,1
axixbar.v,2573,assume(S_AXI_ARVALID [N]== 0);,1
axixbar.v,2575,assert(rgrant[N] == 0);,1
axixbar.v,2577,assert(S_AXI_RVALID[N] == 0);,1
axixbar.v,2583,assert(OPT_READS | OPT_WRITES);,1
axivdisplay.v,772,"assert(req_addr >= { 1'b0, cfg_frame_addr });",1
axivdisplay.v,773,"assert(req_line_addr >= { 1'b0, cfg_frame_addr });",1
axivdisplay.v,774,assert(req_line_addr <= req_addr);,1
axivdisplay.v,780,assert(cfg_frame_lines != 0);,1
axivdisplay.v,781,assert(cfg_line_words != 0);,1
axivdisplay.v,787,assert(r_frame_lines != 0);,1
axivdisplay.v,788,assert(r_line_words != 0);,1
axivdisplay.v,986,assert(axi_arlen+1 == req_line_words);,1
axivdisplay.v,988,assert(axi_arlen+1 < req_line_words);,1
axivdisplay.v,993,assert(!req_hlast);,1
axivdisplay.v,995,assert(axi_arlen < max_burst);,1
axivdisplay.v,997,assert(max_burst > 0);,1
axivdisplay.v,1002,assert(max_burst == req_line_words);,1
axivdisplay.v,1181,assert(!cfg_active);,1
axivdisplay.v,1267,assert(M_AXI_ARBURST == 2'b01);,1
axivdisplay.v,1273,assert(!r_stopped);,1
axivdisplay.v,1289,assert(cfg_frame_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1292,assert(req_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1293,assert(req_line_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1315,assert(M_AXI_RLAST);,1
axivdisplay.v,1318,assume(!M_AXI_RLAST);,1
axivdisplay.v,1374,cover(!soft_reset);,1
axivdisplay.v,1377,cover(start_burst);,1
axivdisplay.v,1380,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
axivdisplay.v,1383,cover(M_AXI_RVALID);,1
axivdisplay.v,1386,cover(M_AXI_RVALID & M_AXI_RLAST);,1
axivdisplay.v,1389,cover(!r_stopped && cvr_full_frame);,1
axivdisplay.v,1392,cover(cvr_full_frame && phantom_start && !r_stopped);,1
axivdisplay.v,1398,assume(M_AXI_ARREADY && M_AXI_RREADY);,1
axivdisplay.v,1399,assume(M_AXIS_TREADY);,1
axivdisplay.v,1400,assume(cfg_frame_addr[12:0] == 0);,1
axivdisplay.v,1401,assume(cfg_line_step[3:0] == 0);,1
axivdisplay.v,1405,cover(cvr_hlast_rlast && cvr_full_frame && phantom_start && !r_stopped);,1
axivdisplay.v,1425,assume(!f_sequential);,1
axivdisplay.v,1428,assume(!f_biglines);,1
axivdisplay.v,1431,assume(!req_addr[C_AXI_ADDR_WIDTH]);,1
axivdisplay.v,1434,assume(!req_line_addr[C_AXI_ADDR_WIDTH]);,1
addrdecode.v,326,assume(i_reset);,1
addrdecode.v,330,assert(i_reset);,1
addrdecode.v,336,assert(!o_valid);,1
addrdecode.v,337,assert(o_decode == 0);,1
addrdecode.v,366,assert(!o_decode[iM]);,1
addrdecode.v,375,assert(o_addr == 0);,1
addrdecode.v,376,assert(o_decode == 0);,1
addrdecode.v,377,assert(o_data == 0);,1
addrdecode.v,401,assert(onehot_request);,1
addrdecode.v,419,cover(i_valid);,1
addrdecode.v,422,cover(o_valid);,1
addrdecode.v,425,cover(o_valid && !i_stall);,1
addrdecode.v,439,cover(f_reached[0]);,1
addrdecode.v,448,cover(&f_reached);,1
apbxclk.v,360,assume(!S_PRESETn);,1
apbxclk.v,471,assert(S_APB_PSEL && S_APB_PENABLE);,1
apbxclk.v,476,assert(S_APB_PSEL && S_APB_PENABLE);,1
apbxclk.v,480,assert(!M_APB_PSEL);,1
apbxclk.v,484,assert(m_request && !m_ack);,1
apbxclk.v,488,assert(!M_APB_PSEL);,1
apbxclk.v,507,"assume({ S_APB_PPROT, S_APB_PWSTRB, S_APB_PWDATA } != fnvr_write);",1
apbxclk.v,508,assume(S_APB_PADDR != fnvr_addr);,1
apbxclk.v,514,"assert({ M_APB_PPROT, M_APB_PWSTRB, M_APB_PWDATA } != fnvr_write);",1
apbxclk.v,515,assert(M_APB_PADDR != fnvr_addr);,1
apbxclk.v,521,assert(M_APB_PADDR == S_APB_PADDR);,1
apbxclk.v,522,assert(M_APB_PWRITE == S_APB_PWRITE);,1
apbxclk.v,523,assert(M_APB_PWDATA == S_APB_PWDATA);,1
apbxclk.v,524,assert(M_APB_PWSTRB == S_APB_PWSTRB);,1
apbxclk.v,529,"assume({ M_APB_PSLVERR, M_APB_PRDATA } != fnvr_return);",1
apbxclk.v,533,"assert({ m_pslverr, m_prdata } != fnvr_return);",1
apbxclk.v,537,"assert({ S_APB_PSLVERR, S_APB_PRDATA } != fnvr_return);",1
apbxclk.v,570,cover(cvr_writes >= 2);,1
apbxclk.v,571,cover(cvr_reads >= 2);,1
apbxclk.v,573,cover(cvr_writes >= 3);,1
apbxclk.v,574,cover(cvr_reads >= 3);,1
apbxclk.v,596,assume(S_APB_PCLK);,1
apbxclk.v,598,assume(!S_APB_PCLK);,1
apbxclk.v,602,assume(M_APB_PCLK);,1
apbxclk.v,604,assume(!M_APB_PCLK);,1
axidma.v,988,assert(!clear_read_pipeline);,1
axidma.v,991,assert(!clear_read_pipeline);,1
axidma.v,994,assert(!clear_read_pipeline);,1
axidma.v,1810,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1814,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1894,assert(!M_AXI_AWVALID);,1
axidma.v,1895,assert(!M_AXI_WVALID);,1
axidma.v,1896,assert(!M_AXI_ARVALID);,1
axidma.v,1915,assert(f_length != 0);,1
axidma.v,1916,assert(f_length[LGLEN] == 0);,1
axidma.v,1918,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axidma.v,1919,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axidma.v,1997,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1998,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1999,assert(f_length[ADDRLSB-1:0] == 0);,1
axidma.v,2006,assert(!extra_realignment_write);,1
axidma.v,2008,assert(!extra_realignment_write);,1
axidma.v,2010,assert(extra_realignment_write);,1
axidma.v,2014,assert(r_partial_outvalid);,1
axidma.v,2021,assert(f_extra_realignment_read);,1
axidma.v,2023,assert(f_extra_realignment_read == extra_realignment_read);,1
axidma.v,2032,assert(no_read_bursts_outstanding);,1
axidma.v,2036,assert(!r_int);,1
axidma.v,2065,assert(M_AXI_WVALID);,1
axidma.v,2083,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
axidma.v,2089,assert(r_len[ADDRLSB-1:0] == 0);,1
axidma.v,2090,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,2091,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,2097,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,2098,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,2099,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,2105,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2107,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axidma.v,2111,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2116,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2142,assert(reads_remaining_w == 0);,1
axidma.v,2143,assert(!M_AXI_ARVALID);,1
axidma.v,2144,assert(writes_remaining_w == 0);,1
axidma.v,2169,assert(r_partial_outvalid);,1
axidma.v,2171,assert(!fifo_empty || r_abort || r_err);,1
axidma.v,2197,assert(!M_AXI_WVALID);,1
axidma.v,2204,assert(fifo_data_available == 0);,1
axidma.v,2288,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2292,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
axidma.v,2294,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2301,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
axidma.v,2304,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
axidma.v,2306,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
axidma.v,2322,assert(read_address == f_read_address);,1
axidma.v,2324,assert(read_address[ADDRLSB-1:0] == 0);,1
axidma.v,2328,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2333,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2358,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
axidma.v,2373,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
axidma.v,2381,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
axidma.v,2398,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
axidma.v,2405,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2406,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2408,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
axidma.v,2423,assert(readlen_w != 0);,1
axidma.v,2446,assert(!r_done);,1
axidma.v,2448,assert(!r_done);,1
axidma.v,2456,assert(r_done);,1
axidma.v,2468,assert(M_AXI_WSTRB == 0);,1
axidma.v,2486,assert(reads_remaining_w == 0);,1
axidma.v,2488,assert(reads_remaining_w > 0);,1
axidma.v,2491,assert(readlen_w <= reads_remaining_w);,1
axidma.v,2499,assert(M_AXI_BREADY);,1
axidma.v,2503,assert(M_AXI_RREADY);,1
axidma.v,2526,assert(M_AXI_ARVALID);,1
axidma.v,2530,assert(M_AXI_AWVALID);,1
axidma.v,2551,assert(M_AXI_WVALID);,1
axidma.v,2572,assert(!S_AXIL_BVALID);,1
axidma.v,2573,assert(!S_AXIL_RVALID);,1
axidma.v,2575,assert(!M_AXI_AWVALID);,1
axidma.v,2576,assert(!M_AXI_WVALID);,1
axidma.v,2577,assert(!M_AXI_ARVALID);,1
axidma.v,2579,assert(write_bursts_outstanding == 0);,1
axidma.v,2580,assert(write_requests_remaining == 0);,1
axidma.v,2582,assert(!phantom_read);,1
axidma.v,2583,assert(!phantom_write);,1
axidma.v,2584,assert(!r_busy);,1
axidma.v,2585,assert(read_bursts_outstanding == 0);,1
axidma.v,2586,assert(no_read_bursts_outstanding);,1
axidma.v,2588,assert(r_len == 0);,1
axidma.v,2589,assert(zero_len);,1
axidma.v,2591,assert(write_count == 0);,1
axidma.v,2592,assert(!M_AXI_WLAST);,1
axidma.v,2593,assert(M_AXI_AWLEN == 0);,1
axidma.v,2594,assert(!r_write_fifo);,1
axidma.v,2595,assert(r_src_addr == 0);,1
axidma.v,2596,assert(r_dst_addr == 0);,1
axidma.v,2600,assert(ADDRLSB + LGMAXBURST <= 12);,1
axidma.v,2638,assume(f_const_posn < f_length);,1
axidma.v,2676,assert(f_shifted_wstrb[0]);,1
axidma.v,2677,assert(f_shifted_write[7:0] == f_const_byte);,1
axidma.v,2679,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
axidma.v,2714,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
axidma.v,2751,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
axidma.v,2812,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
axidma.v,2824,cover(!r_busy && r_err);,1
axidma.v,2828,cover(!r_busy && r_abort);,1
axidma.v,2832,cover(reads_remaining_w == 0);,1
axidma.v,2836,cover(reads_remaining_w == 0 && fifo_empty);,1
wbc2pipeline.v,156,assume(i_reset);,1
afifo.v,584,assume(i_wclk == now_wclk);,1
afifo.v,585,assume(i_rclk == now_rclk);,1
afifo.v,596,assume(!pre_wclk && !wclk);,1
afifo.v,597,assume(!pre_rclk && !i_rclk);,1
afifo.v,741,cover(o_rd_empty);,1
afifo.v,742,cover(!o_rd_empty);,1
afifo.v,743,cover(f_state == 2'b01);,1
afifo.v,744,cover(f_state == 2'b10);,1
afifo.v,745,cover(f_state == 2'b11);,1
afifo.v,746,cover(&f_fill[MSB-1:0]);,1
afifo.v,748,cover(i_rd);,1
afifo.v,749,cover(i_rd && !o_rd_empty);,1
afifo.v,770,cover(o_wr_full);,1
afifo.v,771,cover(o_rd_empty && cvr_full);,1
afifo.v,772,cover(o_rd_empty && f_fill == 0 && cvr_full);,1
afifo.v,791,cover(cvr_nearly_full && i_wr_reset_n);,1
afifo.v,792,cover(o_rd_empty && cvr_nearly_full);,1
afifo.v,793,cover(o_rd_empty && f_fill == 0 && cvr_nearly_full);,1
axilgpio.v,612,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
axilgpio.v,623,assert(S_AXI_RDATA == 0);,1
axilgpio.v,637,assume(f_obit < NOUT);,1
axilgpio.v,645,assert(o_gpio[f_obit] == DEFAULT_OUTPUT[f_obit]);,1
axilgpio.v,688,assume(f_ibit < NIN);,1
axilgpio.v,694,assert(!ck_gpio[f_ibit]);,1
axilgpio.v,698,assert(ck_toggled[f_ibit]);,1
axilgpio.v,703,assert(!ck_toggled[f_ibit]);,1
axilgpio.v,799,cover(o_int);,1
axispacker.v,493,assume(!S_AXI_ARESETN);,1
axispacker.v,506,assume(!S_AXIS_TVALID);,1
axispacker.v,509,assume(S_AXIS_TVALID);,1
axispacker.v,524,assume(S_AXIS_TKEEP != 0);,1
axispacker.v,538,assert(!M_AXIS_TVALID);,1
axispacker.v,541,assert(M_AXIS_TVALID);,1
axispacker.v,557,assert(&M_AXIS_TKEEP);,1
axispacker.v,562,assert(M_AXIS_TDATA == 0);,1
axispacker.v,563,assert(M_AXIS_TSTRB == 0);,1
axispacker.v,564,assert(M_AXIS_TKEEP == 0);,1
axispacker.v,565,assert(M_AXIS_TLAST == 0);,1
axispacker.v,571,assert(M_AXIS_TKEEP != 0);,1
axispacker.v,589,assert(mid_fill > 0);,1
axispacker.v,600,assert(mid_strb == 0);,1
axispacker.v,610,assert(&mid_keep[gk-1:0]);,1
axispacker.v,616,assert(M_AXIS_TDATA == 0);,1
axispacker.v,617,assert(M_AXIS_TSTRB == 0);,1
axispacker.v,618,assert(M_AXIS_TKEEP == 0);,1
axispacker.v,619,assert(M_AXIS_TLAST == 0);,1
axispacker.v,650,assume(fc_data == S_AXIS_TDATA[7:0]);,1
axispacker.v,651,assume(fc_strb == S_AXIS_TSTRB[0]);,1
axispacker.v,654,assume(S_AXIS_TKEEP[DW/8-1:1] == 0);,1
axispacker.v,655,assume(S_AXIS_TLAST);,1
axispacker.v,657,assume(S_AXIS_TKEEP[DW/8-1:1] != 0);,1
axispacker.v,667,assume(S_AXIS_TDATA[gk*8 +: 8] == fc_data);,1
axispacker.v,668,assume(S_AXIS_TSTRB[gk] == fc_strb);,1
axispacker.v,672,assume(S_AXIS_TKEEP[DW/8-1:gk+1] == 0);,1
axispacker.v,673,assume(S_AXIS_TLAST);,1
axispacker.v,677,assume(S_AXIS_TKEEP[DW/8-1:gk+1] != 0);,1
axispacker.v,679,assume(!S_AXIS_TLAST);,1
axispacker.v,695,assert(M_AXIS_TDATA[7:0] == fc_data);,1
axispacker.v,696,assert(M_AXIS_TSTRB[0] == fc_strb);,1
axispacker.v,699,assert(M_AXIS_TKEEP[DW/8-1:1] == 0);,1
axispacker.v,700,assert(M_AXIS_TLAST);,1
axispacker.v,702,assert(M_AXIS_TKEEP[DW/8-1:1] != 0);,1
axispacker.v,713,assert(M_AXIS_TDATA[gk*8 +: 8] == fc_data);,1
axispacker.v,714,assert(M_AXIS_TSTRB[gk] == fc_strb);,1
axispacker.v,718,assert(M_AXIS_TKEEP[DW/8-1:gk+1] == 0);,1
axispacker.v,719,assert(M_AXIS_TLAST);,1
axispacker.v,723,assert(M_AXIS_TKEEP[DW/8-1:gk+1] != 0);,1
axispacker.v,725,assert(!M_AXIS_TLAST);,1
axispacker.v,768,assert(mid_data[7:0] == fc_data);,1
axispacker.v,769,assert(mid_strb[0] == fc_strb);,1
axispacker.v,770,assert(mid_keep[0]);,1
axispacker.v,773,assert(mid_fill == 1);,1
axispacker.v,774,assert(mid_last);,1
axispacker.v,776,assert(mid_fill > 1);,1
axispacker.v,779,assert(mid_data[7:0] == 8'h00);,1
axispacker.v,780,assert(!mid_strb[0]);,1
axispacker.v,781,assert(!mid_keep[0]);,1
axispacker.v,789,assert(mid_data[gk*8 +: 8] == fc_data);,1
axispacker.v,790,assert(mid_strb[gk] == fc_strb);,1
axispacker.v,791,assert(mid_keep[gk]);,1
axispacker.v,794,assert(mid_fill == gk + 1);,1
axispacker.v,795,assert(mid_last);,1
axispacker.v,799,assert(mid_fill > gk + 1);,1
axispacker.v,801,assert(!mid_last);,1
axispacker.v,804,assert(mid_data[gk*8 +: 8] == 8'h00);,1
axispacker.v,805,assert(!mid_strb[gk]);,1
axispacker.v,806,assert(!mid_keep[gk]);,1
axispacker.v,821,assume(f_chk_count[F_COUNT] == 1'b0);,1
axispacker.v,822,assert(f_icount == f_chk_count[F_COUNT-1:0]);,1
axilsingle.v,316,assert(bfifo.f_first_data != 2'b01);,1
axilsingle.v,319,assert(bfifo.f_second_data != 2'b01);,1
axilsingle.v,323,assume(S_AXI_BRESP != 2'b01);,1
axilsingle.v,327,assume(S_AXI_BRESP != 2'b01);,1
axilsingle.v,335,assert(!bffull || !write_bvalid);,1
axilsingle.v,435,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
axilsingle.v,439,assert(rfifo.f_first_data[1:0] != 2'b01);,1
axilsingle.v,442,assert(rfifo.f_second_data[1:0] != 2'b01);,1
axilsingle.v,446,assume(S_AXI_RRESP != 2'b01);,1
axilsingle.v,450,assume(S_AXI_RRESP != 2'b01);,1
axilsingle.v,580,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
axilsingle.v,624,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
axilsingle.v,638,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
axilsingle.v,657,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
axilsingle.v,697,cover(cvr_awvalids > 4);,1
axilsingle.v,700,cover(cvr_arvalids > 4);,1
axilsingle.v,703,cover(cvr_reads > 4);,1
axilsingle.v,706,cover(cvr_writes > 4);,1
axil2apb.v,547,assert(S_AXI_BVALID);,1
axil2apb.v,549,assert(S_AXI_RVALID);,1
axil2apb.v,586,assert(!M_APB_PENABLE);,1
axil2apb.v,598,assert(!axil_write_ready || !axil_read_ready);,1
axil2apb.v,620,assume(f_never_addr[AXILLSB-1:0] == 0);,1
axil2apb.v,624,assume(S_AXI_AWADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,625,assume(S_AXI_AWPROT != f_never_prot);,1
axil2apb.v,630,assume(S_AXI_WDATA != f_never_data);,1
axil2apb.v,631,assume(S_AXI_WSTRB != f_never_strb);,1
axil2apb.v,636,assume(S_AXI_ARADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,637,assume(S_AXI_ARPROT != f_never_prot);,1
axil2apb.v,641,assume(M_APB_PRDATA != f_never_data);,1
axil2apb.v,652,assert(awskd_addr != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,653,assert(awskd_prot != f_never_prot);,1
axil2apb.v,658,assert(wskd_data != f_never_data);,1
axil2apb.v,659,assert(wskd_strb != f_never_strb);,1
axil2apb.v,664,assert(arskd_addr != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,665,assert(arskd_prot != f_never_prot);,1
axil2apb.v,669,assert(r_apb_data != f_never_data);,1
axil2apb.v,680,assert(M_APB_PADDR != f_never_addr);,1
axil2apb.v,681,assert(M_APB_PPROT != f_never_prot);,1
axil2apb.v,684,assert(M_APB_PWDATA != f_never_data);,1
axil2apb.v,685,assert(M_APB_PWSTRB != f_never_strb);,1
axil2apb.v,690,assert(S_AXI_RDATA != f_never_data);,1
axisswitch.v,473,assert(S_AXI_RDATA[C_AXI_DATA_WIDTH-1:LGNS] == 0);,1
axisswitch.v,479,assert(S_AXI_RVALID);,1
axisswitch.v,489,assert(S_AXI_RDATA == 0);,1
axisswitch.v,505,assume(S_AXIS_TVALID[gk] == 0);,1
axisswitch.v,508,assume(S_AXIS_TVALID[gk]);,1
axisswitch.v,516,assert(!M_AXIS_TVALID);,1
axisswitch.v,519,assert(M_AXIS_TVALID);,1
axisswitch.v,527,assert(M_AXIS_TDATA == 0);,1
axisswitch.v,528,assert(M_AXIS_TLAST == 0);,1
axisswitch.v,538,assume(f_const_index < NUM_STREAMS);,1
axisswitch.v,550,assert(f_this_index < NUM_STREAMS);,1
axisswitch.v,553,assert(switch_index < NUM_STREAMS);,1
axisswitch.v,587,assert(f_recount == f_count);,1
axisswitch.v,594,assert(f_this_index == switch_index);,1
axisswitch.v,600,"assume({ S_AXIS_TDATA[f_const_index * C_AXIS_DATA_WIDTH +: C_AXIS_DATA_WIDTH], S_AXIS_TLAST[f_const_index] } != f_never_data);",1
axisswitch.v,608,"assert({ skd_data[f_const_index], skd_last[f_const_index] } != f_never_data);",1
axisswitch.v,610,"assert({ M_AXIS_TDATA, M_AXIS_TLAST } != f_never_data);",1
axilwr2wbsp.v,460,assert(!r_awvalid || !o_axi_awready);,1
axilwr2wbsp.v,461,assert(!r_wvalid || !o_axi_wready);,1
axilwr2wbsp.v,463,assert(!o_wb_cyc);,1
axilwr2wbsp.v,473,assert(!fifo_empty);,1
axilwr2wbsp.v,474,assert(r_first[LGFIFO-1:0] == r_last[LGFIFO-1:0]);,1
axilwr2wbsp.v,475,assert(r_first[LGFIFO] != r_last[LGFIFO]);,1
axilwr2wbsp.v,484,assert(!r_awvalid || !o_axi_awready);,1
axilwr2wbsp.v,485,assert(!r_wvalid || !o_axi_wready);,1
axilwr2wbsp.v,508,assert(f_wb_outstanding == wb_outstanding);,1
axilwr2wbsp.v,516,assert(wb_fill <= f_fifo_fill);,1
axilwr2wbsp.v,522,assert(wb_outstanding+1 == wb_fill);,1
axilwr2wbsp.v,525,assert(wb_outstanding == wb_fill);,1
axilwr2wbsp.v,568,assert(f_axi_rd_outstanding == 0);,1
axilwr2wbsp.v,575,assert(f_axi_wr_outstanding > 0);,1
axilwr2wbsp.v,579,assert(f_axi_awr_outstanding > 0);,1
axilwr2wbsp.v,589,assert(!o_axi_bresp[1]);,1
axilwr2wbsp.v,592,assert(o_axi_bresp == 2'b10);,1
axilwr2wbsp.v,595,assert(!o_axi_bresp[1]);,1
axilwr2wbsp.v,597,assert(o_axi_bresp[1]);,1
axilwr2wbsp.v,613,assert(f_first_minus_err != 0);,1
axilwr2wbsp.v,617,assert(f_mid_minus_err <= f_first_minus_err);,1
axilwr2wbsp.v,624,assert(!o_axi_awready);,1
axilwr2wbsp.v,627,assert(!o_axi_wready);,1
axilwr2wbsp.v,637,cover(o_wb_cyc && o_wb_stb && !i_wb_stall);,1
axilwr2wbsp.v,639,cover(o_wb_cyc && i_wb_ack);,1
wbm2axilite.v,398,assume(f_past_valid || i_reset);,1
wbm2axilite.v,479,assert(o_axi_bready);,1
wbm2axilite.v,485,assert(o_axi_rready);,1
wbm2axilite.v,495,assert(!o_axi_awvalid);,1
wbm2axilite.v,496,assert(!o_axi_wvalid);,1
wbm2axilite.v,505,assert(o_axi_awvalid);,1
wbm2axilite.v,506,assert(o_axi_wvalid);,1
wbm2axilite.v,507,assert(wb_we);,1
wbm2axilite.v,511,assert(!o_axi_awvalid);,1
wbm2axilite.v,513,assert(!o_axi_wvalid);,1
wbm2axilite.v,541,assert(o_axi_arvalid);,1
wbm2axilite.v,557,assert(outstanding == 0);,1
wbm2axilite.v,558,assert(err_pending == 0);,1
wbm2axilite.v,565,assert(f_axi_awr_outstanding == 0);,1
wbm2axilite.v,566,assert(f_axi_wr_outstanding == 0);,1
wbm2axilite.v,567,assert(f_axi_rd_outstanding == 0);,1
wbm2axilite.v,569,assert(f_wb_outstanding == 0);,1
wbm2axilite.v,570,assert(!pending);,1
wbm2axilite.v,571,assert(outstanding == 0);,1
wbm2axilite.v,572,assert(err_pending == 0);,1
wbm2axilite.v,639,cover(i_axi_bvalid && o_axi_bready);,1
wbm2axilite.v,641,cover(i_axi_rvalid && o_axi_rready);,1
wbm2axilite.v,670,cover(i_axi_rvalid && o_axi_rready);,1
wbm2axilite.v,674,cover(i_wb_cyc && o_wb_ack);,1
axisgfsm.v,544,assert(dma_aborting);,1
axisgfsm.v,546,assert(!dma_aborting);,1
axisgfsm.v,597,assume(!S_AXI_ARESETN);,1
axisgfsm.v,602,assume(!i_abort);,1
axisgfsm.v,603,assume(i_tbl_addr[1:0] == 2'b00);,1
axisgfsm.v,624,assert(o_pf_pc[1:0] == 2'b00);,1
axisgfsm.v,634,assume(i_pf_pc == f_pc);,1
axisgfsm.v,638,assert(f_pc[1:0] == 2'b00);,1
axisgfsm.v,644,assume(!i_pf_illegal);,1
axisgfsm.v,718,assert(fdma_awr_outstanding == fdma_wr_outstanding);,1
axisgfsm.v,720,assert(fdma_rd_outstanding <= 1);,1
axisgfsm.v,779,assert(!f_dma_busy);,1
axisgfsm.v,781,assert(!f_dma_busy);,1
axisgfsm.v,786,assert(!dma_starting);,1
axisgfsm.v,797,assume(!f_dma_complete);,1
axisgfsm.v,841,assert(sgstate == SG_SRCADDR);,1
axisgfsm.v,843,assert(sgstate == SG_SRCHALF);,1
axisgfsm.v,896,assert(sgstate != SG_SRCHALF);,1
axisgfsm.v,897,assert(sgstate != SG_DSTHALF);,1
axisgfsm.v,945,assert(sgstate == SG_SRCADDR);,1
axisgfsm.v,946,assert(!o_dmac_wvalid);,1
axisgfsm.v,947,assert(!dma_busy);,1
axisgfsm.v,959,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,960,assert(f_pc == o_pf_pc);,1
axisgfsm.v,968,assert(o_new_pc);,1
axisgfsm.v,984,assert(sgstate == SG_DSTADDR);,1
axisgfsm.v,985,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,986,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,988,assert(o_dmac_wvalid);,1
axisgfsm.v,989,assert(o_dmac_waddr == DMA_SRCLO);,1
axisgfsm.v,990,assert(o_dmac_wdata == f_tblentry[31:0]);,1
axisgfsm.v,991,assert(&o_dmac_wstrb);,1
axisgfsm.v,992,assert(!dma_busy);,1
axisgfsm.v,993,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,1005,assert(sgstate == SG_LENGTH);,1
axisgfsm.v,1006,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,1007,assert(tbl_int_enable == f_tbl_int_enable);,1
axisgfsm.v,1008,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,1010,assert(o_dmac_wvalid);,1
axisgfsm.v,1011,assert(o_dmac_waddr == DMA_DSTLO);,1
axisgfsm.v,1012,"assert(o_dmac_wdata == { 2'b00, f_tblentry[61:32] });",1
axisgfsm.v,1013,assert(&o_dmac_wstrb);,1
axisgfsm.v,1014,assert(!dma_busy);,1
axisgfsm.v,1015,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,1036,assert(sgstate == SG_CONTROL);,1
axisgfsm.v,1037,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,1038,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,1039,assert(o_dmac_wvalid);,1
axisgfsm.v,1040,assert(o_dmac_waddr == DMA_LENLO);,1
axisgfsm.v,1041,assert(o_dmac_wdata == f_tblentry[95:64]);,1
axisgfsm.v,1042,assert(&o_dmac_wstrb);,1
axisgfsm.v,1043,assert(!dma_busy);,1
axisgfsm.v,1044,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,1045,assert(f_pc == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,1057,assert(sgstate == SG_WAIT);,1
axisgfsm.v,1058,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,1059,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,1060,assert(o_dmac_wvalid);,1
axisgfsm.v,1061,assert(o_dmac_waddr == DMA_CONTROL);,1
axisgfsm.v,1062,assert(o_dmac_wdata[15:0] == 16'h1f);,1
axisgfsm.v,1063,assert(&o_dmac_wstrb);,1
axisgfsm.v,1064,assert(!dma_busy);,1
axisgfsm.v,1065,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,1066,assert(f_pc == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,1078,assert(sgstate == SG_WAIT);,1
axisgfsm.v,1079,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,1080,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,1081,assert(o_dmac_waddr == DMA_CONTROL);,1
axisgfsm.v,1085,assert(&o_dmac_wstrb);,1
axisgfsm.v,1086,assert(!o_dmac_wvalid);,1
axisgfsm.v,1091,assert(!o_dmac_wstrb[0]);,1
axisgfsm.v,1093,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,1094,assert(f_pc == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,1124,assert(sgstate == SG_IDLE);,1
axisgfsm.v,1125,assert(!o_new_pc);,1
axisgfsm.v,1126,assert(!o_dmac_wvalid);,1
axisgfsm.v,1134,assert(o_pf_clear_cache);,1
axisgfsm.v,1135,assert(!dma_busy);,1
axisgfsm.v,1178,assert(!o_done);,1
axisgfsm.v,1179,assert(!o_err);,1
axisgfsm.v,1184,assert(o_done);,1
axisgfsm.v,1194,assert(!o_dmac_wvalid || i_dmac_wready);,1
axisgfsm.v,1216,assume(!i_abort);,1
skidbuffer.v,258,assume(i_reset);,1
skidbuffer.v,276,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,286,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,288,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,306,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,329,assert(o_ready);,1
skidbuffer.v,360,assert(o_valid == i_valid);,1
skidbuffer.v,370,assert(o_valid);,1
skidbuffer.v,373,assert(!o_valid);,1
skidbuffer.v,384,assert(o_ready);,1
skidbuffer.v,394,assert(o_data == 0);,1
skidbuffer.v,398,assert(w_data == 0);,1
skidbuffer.v,466,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,472,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
axilrd2wbsp.v,387,assume(w_reset);,1
axilrd2wbsp.v,391,assert(!o_axi_arready);,1
axilrd2wbsp.v,412,assert(!o_axi_arready);,1
axilrd2wbsp.v,417,assert(!o_axi_arready);,1
axilrd2wbsp.v,440,assert(f_wb_outstanding == wb_outstanding);,1
axilrd2wbsp.v,448,assert(wb_fill <= f_fifo_fill);,1
axilrd2wbsp.v,455,assert(&o_wb_sel);,1
axilrd2wbsp.v,457,assert(wb_outstanding == wb_fill);,1
axilrd2wbsp.v,462,assert(o_wb_stb);,1
axilrd2wbsp.v,463,assert(!o_axi_arready);,1
axilrd2wbsp.v,499,assert(f_axi_wr_outstanding == 0);,1
axilrd2wbsp.v,501,assert(f_axi_awr_outstanding == 0);,1
axilrd2wbsp.v,503,assert(f_axi_rd_outstanding == f_fifo_fill);,1
axilrd2wbsp.v,514,assert(!o_axi_rresp[1]);,1
axilrd2wbsp.v,517,assert(o_axi_rresp == 2'b10);,1
axilrd2wbsp.v,520,assert(!o_axi_rresp[1]);,1
axilrd2wbsp.v,522,assert(o_axi_rresp[1]);,1
axilrd2wbsp.v,538,assert(f_first_minus_err != 0);,1
axilrd2wbsp.v,542,assert(f_mid_minus_err <= f_first_minus_err);,1
axilrd2wbsp.v,563,cover(o_wb_cyc && o_wb_stb);,1
axilrd2wbsp.v,567,cover(o_wb_cyc && f_wb_outstanding > 2);,1
axilrd2wbsp.v,576,cover(o_axi_rvalid && i_axi_rready);,1
axilfetch.v,330,assert(!o_valid);,1
axi2axilsub.v,510,assert(slv_wlen > 0);,1
axi2axilsub.v,637,assert(mst_awaddr == 0);,1
axi2axilsub.v,731,assert(skids_wvalid && skids_wready);,1
axi2axilsub.v,1077,assert(faxi_rd_nbursts == 0);,1
axi2axilsub.v,1151,assert(faxil_rd_outstanding == 0);,1
axi2axilsub.v,1190,assert(f_bfifo_packets <= wfifo_count);,1
axi2axilsub.v,1609,assert(mst_arid == 0);,1
axi2axilsub.v,1610,assert(mst_araddr == 0);,1
axi2axilsub.v,1611,assert(mst_arprot == 0);,1
axi2axilsub.v,1894,assert(faxi_awr_nbursts == 0);,1
axi2axilsub.v,1895,assert(faxi_wr_pending == 0);,1
axi2axilsub.v,1896,assert(faxi_wr_ckvalid == 0);,1
axi2axilsub.v,1967,assert(faxil_awr_outstanding == 0);,1
axi2axilsub.v,1968,assert(faxil_wr_outstanding == 0);,1
axi2axilsub.v,2050,assume(!S_AXI_AWVALID);,1
axi2axilsub.v,2051,assume(!S_AXI_WVALID);,1
axi2axilsub.v,2052,assert(!M_AXI_AWVALID);,1
axi2axilsub.v,2053,assert(!M_AXI_WVALID);,1
axi2axilsub.v,2054,assume(!M_AXI_BVALID);,1
axi2axilsub.v,2055,assert(!S_AXI_BVALID);,1
axi2axilsub.v,2064,assume(!S_AXI_ARVALID);,1
axi2axilsub.v,2065,assert(!M_AXI_ARVALID);,1
axi2axilsub.v,2099,assert(M_AXI_ARADDR == 0);,1
axi2axilsub.v,2100,assert(M_AXI_ARPROT == 0);,1
axildouble.v,329,assert(bfifo.f_first_data != 2'b01);,1
axildouble.v,332,assert(bfifo.f_second_data != 2'b01);,1
axildouble.v,338,assume(S_AXI_BRESP != 2'b01);,1
axildouble.v,342,assume(S_AXI_BRESP != 2'b01);,1
axildouble.v,350,assert(!bffull || !write_bvalid);,1
axildouble.v,453,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
axildouble.v,457,assert(rfifo.f_first_data[1:0] != 2'b01);,1
axildouble.v,460,assert(rfifo.f_second_data[1:0] != 2'b01);,1
axildouble.v,466,assume(S_AXI_RRESP != 2'b01);,1
axildouble.v,470,assume(S_AXI_RRESP != 2'b01);,1
axildouble.v,599,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
axildouble.v,643,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
axildouble.v,657,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
axildouble.v,676,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
axildouble.v,717,cover(cvr_awvalids > 4);,1
axildouble.v,720,cover(cvr_arvalids > 4);,1
axildouble.v,723,cover(cvr_reads > 4);,1
axildouble.v,726,cover(cvr_writes > 4);,1
wbarbiter.v,336,assert(f_b_nreqs == 0);,1
wbarbiter.v,337,assert(f_b_nacks == 0);,1
wbarbiter.v,338,assert(f_a_outstanding == f_outstanding);,1
wbarbiter.v,340,assert(f_a_nreqs == 0);,1
wbarbiter.v,341,assert(f_a_nacks == 0);,1
wbarbiter.v,342,assert(f_b_outstanding == f_outstanding);,1
wbarbiter.v,348,assert(r_a_owner);,1
wbarbiter.v,353,assert(!r_a_owner);,1
wbarbiter.v,382,cover(f_prior_b_ack && o_cyc && o_a_ack);,1
wbarbiter.v,389,cover(f_prior_a_ack && o_cyc && o_b_ack);,1
wbarbiter.v,397,cover(o_cyc && o_b_ack);,1
axiperf.v,1546,assert(S_AXIL_RDATA == 0);,1
axiperf.v,1559,assert(!start_request || !stop_request);,1
axiperf.v,1563,assert(clear_request);,1
axiperf.v,1570,assert(start_request);,1
axiperf.v,1596,assume(wr_aw_outstanding < 8'hff);,1
axiperf.v,1599,assume(wr_w_outstanding < 8'hff);,1
axis2mm.v,1896,assert(wr_writes_pending == 0);,1
axis2mm.v,1897,assert(wr_none_pending);,1
axis2mm.v,1900,assert(wr_writes_pending <= M_AXI_AWLEN+1);,1
axis2mm.v,1909,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axis2mm.v,1913,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
axis2mm.v,1933,assert(!M_AXI_AWVALID);,1
axis2mm.v,1934,assert(!M_AXI_WVALID);,1
axis2mm.v,1935,assert(!M_AXI_BVALID);,1
axis2mm.v,1959,assert(wr_writes_pending == 0);,1
axis2mm.v,1966,assert(fifo_fill >= wr_writes_pending);,1
axis2mm.v,1977,assert(wr_writes_pending <= r_remaining_w);,1
axis2mm.v,1980,assert(aw_requests_remaining == r_remaining_w);,1
axis2mm.v,1983,assert(wr_writes_pending == 0);,1
axis2mm.v,1986,assert(!M_AXI_WVALID);,1
axis2mm.v,2007,assert(!r_busy);,1
axis2mm.v,2010,assert(fifo_fill >= wr_writes_pending);,1
axis2mm.v,2024,assert(M_AXI_AWVALID && M_AXI_WVALID);,1
axis2mm.v,2025,assert(wr_none_pending);,1
axis2mm.v,2032,assert(r_max_burst > 0);,1
axis2mm.v,2038,assert(initial_burstlen > 0);,1
axis2mm.v,2048,assert(M_AXI_AWLEN+1 <= MAX_FIXED_BURST);,1
axis2mm.v,2074,assert(M_AXI_AWADDR[ADDRLSB +: LGMAXBURST] == 0);,1
axis2mm.v,2089,assert(!sskd_ready);,1
axis2mm.v,2094,assert(sskd_ready);,1
axis2mm.v,2098,assert(sskd_ready);,1
axis2mm.v,2103,assert(!sskd_ready);,1
axis2mm.v,2106,assert(sskd_ready);,1
axis2mm.v,2120,assert(r_errcode == 0);,1
axis2mm.v,2122,assert(r_errcode != 0);,1
axis2mm.v,2131,assert(!r_err);,1
axis2mm.v,2154,assert(axi_addr == cmd_addr);,1
axis2mm.v,2190,cover(cvr_abort_clear);,1
axis2mm.v,2215,cover( r_err && cvr_aborted);,1
axis2mm.v,2216,cover( r_err && cvr_buserr);,1
axis2mm.v,2217,cover(!r_err);,1
axis2mm.v,2220,cover(cmd_length_w > 5);,1
axis2mm.v,2221,cover(cmd_length_w > 8);,1
axilxbar.v,1162,assert(axi_awaddr == 0);,1
axilxbar.v,1163,assert(axi_awprot == 0);,1
axilxbar.v,1169,assert(axi_wdata == 0);,1
axilxbar.v,1170,assert(axi_wstrb == 0);,1
axilxbar.v,1266,assert(axi_araddr == 0);,1
axilxbar.v,1267,assert(axi_arprot == 0);,1
axilxbar.v,1365,assert(r_bresp[N] != 2'b01);,1
axilxbar.v,1368,assert(m_axi_bready[swindex[N]] == !r_bvalid[N]);,1
axilxbar.v,1370,assert(!r_bvalid[N]);,1
axilxbar.v,1373,assert(r_bresp[N] == 0);,1
axilxbar.v,1377,assert(axi_bresp == 0);,1
axilxbar.v,1506,assert(r_rresp[N] != 2'b01);,1
axilxbar.v,1509,assert(m_axi_rready[srindex[N]] == !r_rvalid[N]);,1
axilxbar.v,1511,assert(!r_rvalid[N]);,1
axilxbar.v,1515,assert(r_rresp[N] == 0);,1
axilxbar.v,1516,assert(r_rdata[N] == 0);,1
axilxbar.v,1522,assert(axi_rresp == 0);,1
axilxbar.v,1523,assert(axi_rdata == 0);,1
axilxbar.v,1633,assert(missing_wdata == awpending - wpending);,1
axilxbar.v,1637,assert(awpending >= wpending);,1
axilxbar.v,1716,assume(swindex[iN] == 0);,1
axilxbar.v,1719,assume(srindex[iN] == 0);,1
axilxbar.v,1750,assert(swgrant[N]);,1
axilxbar.v,1751,assert(swindex[N] == iM);,1
axilxbar.v,1754,assert(mwgrant[iM]);,1
axilxbar.v,1755,assert(mwindex[iM] == N);,1
axilxbar.v,1762,assert(wgrant[N] != 0);,1
axilxbar.v,1766,assert(wrequest[N][NS-1:0] == 0);,1
axilxbar.v,1779,assert(srgrant[N]);,1
axilxbar.v,1780,assert(srindex[N] == iM);,1
axilxbar.v,1783,assert(mrgrant[iM]);,1
axilxbar.v,1784,assert(mrindex[iM] == N);,1
axilxbar.v,1791,assert(rgrant[N] != 0);,1
axilxbar.v,1795,assert(rrequest[N][NS-1:0] == 0);,1
axilxbar.v,1882,assert(!S_AXI_BVALID[N]);,1
axilxbar.v,1887,assert(w_sawpending[N] == 0);,1
axilxbar.v,1888,assert(w_swpending[N] == 0);,1
axilxbar.v,1923,assert(!S_AXI_RVALID[N]);,1
axilxbar.v,1926,assert(w_srpending[N] == 0);,1
axilxbar.v,1936,assert(swfull[N] == &w_sawpending[N]);,1
axilxbar.v,1942,assert(srfull[N] == &w_srpending[N]);,1
axilxbar.v,1996,assert(fs_awr_outstanding[M] == 0);,1
axilxbar.v,1997,assert(fs_wr_outstanding[M] == 0);,1
axilxbar.v,2002,assert(fs_rd_outstanding[M] == 0);,1
axilxbar.v,2150,cover(!swgrant[N] && cvr_whsreturn);,1
axilxbar.v,2152,cover(!swgrant[N] && cvr_was_wevery);,1
axilxbar.v,2155,cover(S_AXI_ARESETN && wrequest[N][NS]);,1
axilxbar.v,2157,cover(S_AXI_ARESETN && wrequest[N][NS] && slave_awaccepts[N]);,1
axilxbar.v,2159,cover(err_wr_return);,1
axilxbar.v,2161,cover(!swgrant[N] && err_wr_return);,1
axilxbar.v,2166,assert(swgrant[N]);,1
axilxbar.v,2226,cover(!srgrant[N] && cvr_rhsreturn); // @26 always @(*) cover(!srgrant[N] && cvr_was_revery); // @26 always @(*) cover(S_AXI_ARVALID[N] && rrequest[N][NS]);,6
axilxbar.v,2233,cover(rgrant[N][NS]);,1
axilxbar.v,2235,cover(err_rd_return);,1
axilxbar.v,2237,cover(!srgrant[N] && err_rd_return); //@! `endif always @(*) if (S_AXI_BVALID[N] && wgrant[N][NS]) assert(S_AXI_BRESP[2*N+:2]==INTERCONNECT_ERROR);,6
axilxbar.v,2245,assert(S_AXI_RRESP[2*N+:2]==INTERCONNECT_ERROR);,1
axilxbar.v,2265,cover(cvr_multi_write_hit);,1
axilxbar.v,2268,cover(cvr_multi_read_hit);,1
axilxbar.v,2271,cover(S_AXI_ARESETN && cvr_multi_write_hit & mwgrant == 0 && M_AXI_BVALID == 0);,1
axilxbar.v,2274,cover(S_AXI_ARESETN && cvr_multi_read_hit & mrgrant == 0 && M_AXI_RVALID == 0);,1
axilxbar.v,2299,assume(f_const_source < NM);,1
axilxbar.v,2310,assume(f_const_slave < NS);,1
axilxbar.v,2326,assume(f_awaddr != f_const_addr_n);,1
axilxbar.v,2327,assume(S_AXI_AWPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2331,assume(m_wdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2332,assume(m_wstrb[f_const_source] != f_const_strb_n);,1
axilxbar.v,2336,assume(f_araddr != f_const_addr_n);,1
axilxbar.v,2337,assume(S_AXI_ARPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2342,assume(m_axi_bresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2347,assume(m_axi_rdata[f_const_slave] != f_const_data_n);,1
axilxbar.v,2348,assume(m_axi_rresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2357,assert(skd_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2358,assert(skd_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2362,assert(m_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2363,assert(m_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2367,assert(M_AXI_AWADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2368,assert(M_AXI_AWPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2372,assert(M_AXI_WDATA[f_const_slave*DW+:DW] != f_const_data_n);,1
axilxbar.v,2377,assert(skd_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2378,assert(skd_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2382,assert(m_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2383,assert(m_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2387,assert(M_AXI_ARADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2388,assert(M_AXI_ARPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2392,assert(r_bresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2394,assert(S_AXI_BRESP[f_const_source*2+:2] != f_const_resp_n);,1
axilxbar.v,2397,assert(r_rresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2398,assert(r_rdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2402,assert(S_AXI_RRESP[f_const_source*2+:2]!=f_const_resp_n);,1
axilxbar.v,2403,assert(S_AXI_RDATA[f_const_source*DW+:DW]!=f_const_data_n);,1
wbm2axisp.v,525,assert(wr_addr - rd_addr == npending);,1
wbm2axisp.v,585,assert(C_AXI_DATA_WIDTH >= DW);,1
wbm2axisp.v,612,assume(i_reset);,1
wbm2axisp.v,706,assert(direction);,1
wbm2axisp.v,707,assert(f_axi_rd_nbursts == 0);,1
wbm2axisp.v,717,assert(o_axi_wvalid);,1
wbm2axisp.v,723,assert(!direction);,1
wbm2axisp.v,726,assert(f_axi_awr_nbursts == 0);,1
wbm2axisp.v,737,assert(!o_axi_arvalid);,1
wbm2axisp.v,738,assert(f_axi_rd_nbursts == 0);,1
wbm2axisp.v,739,assert(!i_axi_rvalid);,1
wbm2axisp.v,742,assert(!o_axi_awvalid);,1
wbm2axisp.v,743,assert(!o_axi_wvalid);,1
wbm2axisp.v,744,assert(f_axi_awr_nbursts == 0);,1
wbm2axisp.v,762,assert(!m_ready);,1
wbm2axisp.v,777,assert(o_axi_bready);,1
wbm2axisp.v,783,assert(o_axi_rready);,1
wbm2axisp.v,792,assert(direction);,1
wbm2axisp.v,803,assert(!direction);,1
wbm2axisp.v,857,assume(i_axi_rdata == f_data);,1
wbm2axisp.v,1058,cover(!i_reset && cvr_flushed && !flushing);,1
wbm2axisp.v,1059,cover(!i_reset && cvr_flushed && !flushing && !o_wb_stall);,1
wbm2axisp.v,1086,cover(cvr_read2write && direction && o_wb_ack && f_wb_outstanding == 1);,1
wbm2axisp.v,1087,cover(cvr_write2read && !direction && o_wb_ack && f_wb_outstanding == 1);,1
wbm2axisp.v,1106,cover(&cvr_ack_after_abort[1:0]);,1
wbm2axisp.v,1110,cover(&cvr_ack_after_abort[2:0]);,1
wbm2axisp.v,1112,cover(!i_wb_cyc && &cvr_ack_after_abort[2:0]);,1
wbm2axisp.v,1129,cover(cvr_nwrites == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
wbm2axisp.v,1132,cover(cvr_nreads == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
wbm2axisp.v,1141,assume(!i_reset && i_wb_cyc && !o_wb_err);,1
axilupsz.v,374,assert(rdata == 0);,1
axilupsz.v,375,assert(rresp == 0);,1
axilupsz.v,555,assert(rfifo_fill == fmst_rd_outstanding);,1
axilupsz.v,558,assert(!rfifo_empty);,1
counter.v,24,assert(counter < MAX_AMOUNT);,1
shift.v,22,assert(counter <= THRESHOLD);,1
shift.v,87,assert(f_valid_output);,1
counter.v,49,assert(counter < MAX_AMOUNT);,1
counter.v,57,assert(o_busy == 1);,1
counter.v,59,assert(o_busy == 0);,1
counter.v,32,assert(counter == MAX_AMOUNT-1'b1);,1
counter.v,35,assert(counter < MAX_AMOUNT);,1
counter.v,38,assume(!i_start_signal);,1
counter.v,41,assert(counter == 0);,1
double_pipe.v,28,assert(o_data == 0);,1
shift.v,53,assert(counter <= THRESHOLD);,1
shift.v,124,assert(f_valid_output);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
ready_valid_fifo.v,67,assume(rst);,1
ready_valid_fifo.v,80,assert(f_depth <= DEPTH);,1
ready_valid_fifo.v,81,assert(f_depth >= 0);,1
ready_valid_fifo.v,82,assert(!full || !empty);,1
counter_4b_tb.v,54,assert(data_out == 4'b1001);,1
fftstage.v,407,assume(f_mpydelay > 1);,1
fftstage.v,417,assert(iaddr == 0);,1
fftstage.v,418,assert(wait_for_sync);,1
fftstage.v,419,assert(o_sync == 0);,1
fftstage.v,420,assert(oaddr == 0);,1
fftstage.v,421,assert(!b_started);,1
fftstage.v,422,assert(!o_sync);,1
fftstage.v,438,assume(!i_ce);,1
fftstage.v,441,assume(f_addr[LGSPAN]==1'b0);,1
fftstage.v,449,assert(iaddr == 0);,1
fftstage.v,455,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,465,assert(ib_a == f_left);,1
fftstage.v,466,assert(ib_b == f_right);,1
fftstage.v,467,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,492,assert(f_output_active == b_started);,1
fftstage.v,496,assert(!f_output_active);,1
fftstage.v,501,assert(oaddr == f_oaddr);,1
fftstage.v,503,assert(oaddr == 0);,1
fftstage.v,507,assume(!ob_sync);,1
fftstage.v,530,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
fftstage.v,535,assert(o_sync);,1
fftstage.v,537,assert(!o_sync);,1
fftstage.v,541,assert(o_data == f_oleft);,1
fftstage.v,546,assert(pre_ovalue == f_oright);,1
fftstage.v,551,assert(o_data == f_oright);,1
hwbfly.v,674,assume(i_ce);,1
hwbfly.v,686,assume(!i_ce);,1
hwbfly.v,693,assume(!i_ce);,1
hwbfly.v,730,assert(left_sr == f_sumrx);,1
hwbfly.v,731,assert(left_si == f_sumix);,1
hwbfly.v,732,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,736,assert(mpy_r == 0);,1
hwbfly.v,737,assert(mpy_i == 0);,1
hwbfly.v,741,assert(mpy_r == 0);,1
hwbfly.v,742,assert(mpy_i == 0);,1
hwbfly.v,747,assert(mpy_r == f_difrx);,1
hwbfly.v,748,assert(mpy_i == f_difix);,1
hwbfly.v,753,assert(mpy_r == -f_difix);,1
hwbfly.v,754,assert(mpy_i == f_difrx);,1
hwbfly.v,759,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,760,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,765,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,766,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,796,assert(p_one == 0);,1
hwbfly.v,798,assert(p_two == 0);,1
hwbfly.v,801,assert(p_one == f_predifrx);,1
hwbfly.v,803,assert(p_two == f_predifix);,1
hwbfly.v,806,assert(p_one == 0);,1
hwbfly.v,808,assert(p_two == 0);,1
hwbfly.v,812,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,814,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,818,assert(p_three == 0);,1
hwbfly.v,820,assert(p_three == 0);,1
hwbfly.v,823,assert(p_three == f_sumdiff);,1
hwbfly.v,825,assert(p_three == f_sumcoef);,1
hwbfly.v,828,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,829,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,830,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1008,assume(i_ce);,1
butterfly.v,1016,assume(i_ce);,1
butterfly.v,1026,assume(!i_ce);,1
butterfly.v,1031,assume(i_ce);,1
butterfly.v,1036,assume(i_ce);,1
butterfly.v,1045,assume(!i_ce);,1
butterfly.v,1052,assume(i_ce);,1
butterfly.v,1062,assume(i_ce);,1
butterfly.v,1101,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,1102,assert(left_sr == f_sumrx);,1
butterfly.v,1103,assert(left_si == f_sumix);,1
butterfly.v,1104,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,1108,assert(mpy_r == 0);,1
butterfly.v,1109,assert(mpy_i == 0);,1
butterfly.v,1113,assert(mpy_r == 0);,1
butterfly.v,1114,assert(mpy_i == 0);,1
butterfly.v,1119,assert(mpy_r == f_difrx);,1
butterfly.v,1120,assert(mpy_i == f_difix);,1
butterfly.v,1125,assert(mpy_r == -f_difix);,1
butterfly.v,1126,assert(mpy_i == f_difrx);,1
butterfly.v,1131,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,1132,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,1137,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,1138,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,1168,assert(p_one == 0);,1
butterfly.v,1170,assert(p_two == 0);,1
butterfly.v,1173,assert(p_one == f_predifrx);,1
butterfly.v,1175,assert(p_two == f_predifix);,1
butterfly.v,1178,assert(p_one == 0);,1
butterfly.v,1180,assert(p_two == 0);,1
butterfly.v,1184,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,1186,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,1190,assert(p_three == 0);,1
butterfly.v,1192,assert(p_three == 0);,1
butterfly.v,1195,assert(p_three == f_sumdiff);,1
butterfly.v,1197,assert(p_three == f_sumcoef);,1
butterfly.v,1202,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1203,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1204,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1224,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1225,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1226,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1227,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,198,assert(o_out == f_addr_value);,1
bitreverse.v,202,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,257,assume(i_ce);,1
longbimpy.v,448,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,450,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,459,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,460,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,467,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,473,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,280,assume(!i_sync);,1
qtrstage.v,283,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,291,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,292,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,293,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,294,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,296,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,297,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,303,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,304,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,305,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,306,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,313,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,314,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,320,assert(!o_sync);,1
qtrstage.v,321,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,322,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,328,assert(!o_sync);,1
qtrstage.v,329,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,330,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,335,assume(i_sync);,1
qtrstage.v,343,assert(!wait_for_sync);,1
qtrstage.v,348,assert(!o_sync);,1
qtrstage.v,351,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,352,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,354,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,355,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,214,assume(!i_sync);,1
laststage.v,217,assert(stage == f_state[0]);,1
laststage.v,222,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,223,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,229,assert(!o_sync);,1
laststage.v,230,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,231,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,237,assert(!f_rsyncd);,1
laststage.v,238,assert(!o_sync);,1
laststage.v,239,assert(f_state == 0);,1
txuart.v,487,assert(r_setup == fsv_setup);,1
txuart.v,495,assert(zero_baud_counter);,1
txuart.v,505,"assert(baud_counter <= { fsv_setup[23:0], 4'h0 });",1
txuart.v,549,assert(fsv_setup[29:28] == data_bits);,1
txuart.v,550,assert(data_bits == 2'b11);,1
txuart.v,551,assert(baud_counter < fsv_setup[23:0]);,1
txuart.v,553,assert(1'b0 == |f_six_seq);,1
txuart.v,554,assert(1'b0 == |f_seven_seq);,1
txuart.v,555,assert(1'b0 == |f_eight_seq);,1
txuart.v,556,assert(r_busy);,1
txuart.v,557,assert(state > 4'h2);,1
txuart.v,564,assert(state == 4'h3);,1
txuart.v,565,assert(o_uart_tx == 1'b0);,1
txuart.v,566,assert(lcl_data[4:0] == fsv_data[4:0]);,1
txuart.v,568,assert(calc_parity == parity_odd);,1
txuart.v,571,assert(state == 4'h4);,1
txuart.v,572,assert(o_uart_tx == fsv_data[0]);,1
txuart.v,573,assert(lcl_data[3:0] == fsv_data[4:1]);,1
txuart.v,575,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
txuart.v,578,assert(state == 4'h5);,1
txuart.v,579,assert(o_uart_tx == fsv_data[1]);,1
txuart.v,580,assert(lcl_data[2:0] == fsv_data[4:2]);,1
txuart.v,585,assert(state == 4'h6);,1
txuart.v,586,assert(o_uart_tx == fsv_data[2]);,1
txuart.v,587,assert(lcl_data[1:0] == fsv_data[4:3]);,1
txuart.v,592,assert(state == 4'h7);,1
txuart.v,593,assert(o_uart_tx == fsv_data[3]);,1
txuart.v,594,assert(lcl_data[0] == fsv_data[4]);,1
txuart.v,600,assert(state == 4'h8);,1
txuart.v,602,assert(state == 4'h9);,1
txuart.v,603,assert(o_uart_tx == fsv_data[4]);,1
txuart.v,631,assert(fsv_setup[29:28] == 2'b10);,1
txuart.v,632,assert(fsv_setup[29:28] == data_bits);,1
txuart.v,633,assert(baud_counter < fsv_setup[23:0]);,1
txuart.v,635,assert(1'b0 == |f_five_seq);,1
txuart.v,636,assert(1'b0 == |f_seven_seq);,1
txuart.v,637,assert(1'b0 == |f_eight_seq);,1
txuart.v,638,assert(r_busy);,1
txuart.v,639,assert(state > 4'h1);,1
txuart.v,646,assert(state == 4'h2);,1
txuart.v,647,assert(o_uart_tx == 1'b0);,1
txuart.v,648,assert(lcl_data[5:0] == fsv_data[5:0]);,1
txuart.v,650,assert(calc_parity == parity_odd);,1
txuart.v,653,assert(state == 4'h3);,1
txuart.v,654,assert(o_uart_tx == fsv_data[0]);,1
txuart.v,655,assert(lcl_data[4:0] == fsv_data[5:1]);,1
txuart.v,657,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
txuart.v,660,assert(state == 4'h4);,1
txuart.v,661,assert(o_uart_tx == fsv_data[1]);,1
txuart.v,662,assert(lcl_data[3:0] == fsv_data[5:2]);,1
txuart.v,667,assert(state == 4'h5);,1
txuart.v,668,assert(o_uart_tx == fsv_data[2]);,1
txuart.v,669,assert(lcl_data[2:0] == fsv_data[5:3]);,1
txuart.v,674,assert(state == 4'h6);,1
txuart.v,675,assert(o_uart_tx == fsv_data[3]);,1
txuart.v,676,assert(lcl_data[1:0] == fsv_data[5:4]);,1
txuart.v,681,assert(state == 4'h7);,1
txuart.v,682,assert(lcl_data[0] == fsv_data[5]);,1
txuart.v,683,assert(o_uart_tx == fsv_data[4]);,1
txuart.v,689,assert(state == 4'h8);,1
txuart.v,691,assert(state == 4'h9);,1
txuart.v,692,assert(o_uart_tx == fsv_data[5]);,1
txuart.v,720,assert(fsv_setup[29:28] == 2'b01);,1
txuart.v,721,assert(fsv_setup[29:28] == data_bits);,1
txuart.v,722,assert(baud_counter < fsv_setup[23:0]);,1
txuart.v,724,assert(1'b0 == |f_five_seq);,1
txuart.v,725,assert(1'b0 == |f_six_seq);,1
txuart.v,726,assert(1'b0 == |f_eight_seq);,1
txuart.v,727,assert(r_busy);,1
txuart.v,728,assert(state != 4'h0);,1
txuart.v,735,assert(state == 4'h1);,1
txuart.v,736,assert(o_uart_tx == 1'b0);,1
txuart.v,737,assert(lcl_data[6:0] == fsv_data[6:0]);,1
txuart.v,739,assert(calc_parity == parity_odd);,1
txuart.v,742,assert(state == 4'h2);,1
txuart.v,743,assert(o_uart_tx == fsv_data[0]);,1
txuart.v,744,assert(lcl_data[5:0] == fsv_data[6:1]);,1
txuart.v,746,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
txuart.v,749,assert(state == 4'h3);,1
txuart.v,750,assert(o_uart_tx == fsv_data[1]);,1
txuart.v,751,assert(lcl_data[4:0] == fsv_data[6:2]);,1
txuart.v,756,assert(state == 4'h4);,1
txuart.v,757,assert(o_uart_tx == fsv_data[2]);,1
txuart.v,758,assert(lcl_data[3:0] == fsv_data[6:3]);,1
txuart.v,763,assert(state == 4'h5);,1
txuart.v,764,assert(o_uart_tx == fsv_data[3]);,1
txuart.v,765,assert(lcl_data[2:0] == fsv_data[6:4]);,1
txuart.v,770,assert(state == 4'h6);,1
txuart.v,771,assert(o_uart_tx == fsv_data[4]);,1
txuart.v,772,assert(lcl_data[1:0] == fsv_data[6:5]);,1
txuart.v,777,assert(state == 4'h7);,1
txuart.v,778,assert(lcl_data[0] == fsv_data[6]);,1
txuart.v,779,assert(o_uart_tx == fsv_data[5]);,1
txuart.v,785,assert(state == 4'h8);,1
txuart.v,787,assert(state == 4'h9);,1
txuart.v,788,assert(o_uart_tx == fsv_data[6]);,1
txuart.v,813,assert(fsv_setup[29:28] == 2'b00);,1
txuart.v,814,assert(fsv_setup[29:28] == data_bits);,1
txuart.v,815,"assert(baud_counter < { 6'h0, fsv_setup[23:0]});",1
txuart.v,817,assert(1'b0 == |f_five_seq);,1
txuart.v,818,assert(1'b0 == |f_six_seq);,1
txuart.v,819,assert(1'b0 == |f_seven_seq);,1
txuart.v,820,assert(r_busy);,1
txuart.v,827,assert(state == 4'h0);,1
txuart.v,828,assert(o_uart_tx == 1'b0);,1
txuart.v,829,assert(lcl_data[7:0] == fsv_data[7:0]);,1
txuart.v,831,assert(calc_parity == parity_odd);,1
txuart.v,834,assert(state == 4'h1);,1
txuart.v,835,assert(o_uart_tx == fsv_data[0]);,1
txuart.v,836,assert(lcl_data[6:0] == fsv_data[7:1]);,1
txuart.v,838,assert(calc_parity == fsv_data[0] ^ parity_odd);,1
txuart.v,841,assert(state == 4'h2);,1
txuart.v,842,assert(o_uart_tx == fsv_data[1]);,1
txuart.v,843,assert(lcl_data[5:0] == fsv_data[7:2]);,1
txuart.v,848,assert(state == 4'h3);,1
txuart.v,849,assert(o_uart_tx == fsv_data[2]);,1
txuart.v,850,assert(lcl_data[4:0] == fsv_data[7:3]);,1
txuart.v,855,assert(state == 4'h4);,1
txuart.v,856,assert(o_uart_tx == fsv_data[3]);,1
txuart.v,857,assert(lcl_data[3:0] == fsv_data[7:4]);,1
txuart.v,862,assert(state == 4'h5);,1
txuart.v,863,assert(o_uart_tx == fsv_data[4]);,1
txuart.v,864,assert(lcl_data[2:0] == fsv_data[7:5]);,1
txuart.v,869,assert(state == 4'h6);,1
txuart.v,870,assert(o_uart_tx == fsv_data[5]);,1
txuart.v,871,assert(lcl_data[1:0] == fsv_data[7:6]);,1
txuart.v,876,assert(state == 4'h7);,1
txuart.v,877,assert(o_uart_tx == fsv_data[6]);,1
txuart.v,878,assert(lcl_data[0] == fsv_data[7]);,1
txuart.v,884,assert(state == 4'h8);,1
txuart.v,886,assert(state == 4'h9);,1
txuart.v,887,assert(o_uart_tx == fsv_data[7]);,1
txuart.v,904,"assert(baud_counter == { 4'h0, fsv_setup[23:0] }-1);",1
txuart.v,948,assert(1'b0 == |f_five_seq[4:0]);,1
txuart.v,949,assert(1'b0 == |f_six_seq[5:0]);,1
txuart.v,950,assert(1'b0 == |f_seven_seq[6:0]);,1
txuart.v,951,assert(1'b0 == |f_eight_seq[7:0]);,1
txuart.v,953,assert(r_busy);,1
txuart.v,961,assert(state == TXU_STOP);,1
txuart.v,963,assert(state == TXU_STOP);,1
txuart.v,964,assert(use_parity);,1
txuart.v,965,assert(o_uart_tx == fsv_parity);,1
txuart.v,972,assert(state == TXU_SECOND_STOP);,1
txuart.v,973,assert(dblstop);,1
txuart.v,974,assert(o_uart_tx);,1
txuart.v,980,assert(state == 4'hf);,1
txuart.v,981,assert(o_uart_tx);,1
txuart.v,982,assert(baud_counter < fsv_setup[23:0]-1'b1);,1
txuart.v,1021,assert(state == TXU_IDLE);,1
txuart.v,1022,assert(o_uart_tx == 1'b1);,1
txuart.v,1028,assert(state == TXU_BREAK);,1
txuart.v,1029,assert(r_busy);,1
txuart.v,1030,assert(o_uart_tx == 1'b0);,1
txuart.v,1146,assert(dblstop && use_parity);,1
txuart.v,1185,assert(dblstop);,1
txuart.v,1186,assert(use_parity);,1
txuart.v,1220,assume(i_setup[23:0] > 2);,1
txuart.v,1222,assert(fsv_setup[23:0] > 2);,1
ControlUnit.v,333,assume(i_rst);,1
ControlUnit.v,354,assume(!debug);,1
ControlUnit.v,355,assume(!nxtInstr);,1
ControlUnit.v,356,cover( state == S_ADD );,1
ControlUnit.v,357,cover( state == S_BUMPN );,1
ControlUnit.v,358,cover( halt );,1
system_tb.v,187,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,188,assert(FPGA_SERIAL_RX == 1'b1);,1
system_tb.v,199,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,200,assert(FPGA_SERIAL_RX == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
fifo.v,110,"assert property (read_pointer_stable_while_empty) else $error(""Error: read_pointer changes although empty==1 at time: %t ns!"", $realtime/1000);",2
fifo.v,120,"assert property (reset_conditions) else $error(""Reset conditions are violated at time: %t ns!"", $realtime/1000);",2
system_tb.v,186,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,187,assert(FPGA_SERIAL_RX == 1'b1);,1
system_tb.v,198,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,199,assert(FPGA_SERIAL_RX == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
fifo.v,109,"assert property (read_pointer_stable_while_empty) else $error(""Error: read_pointer changes although empty==1 at time: %t ns!"", $realtime/1000);",2
fifo.v,119,"assert property (reset_conditions) else $error(""Reset conditions are violated at time: %t ns!"", $realtime/1000);",2
axi2axilite.v,1013,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1018,assert(m_axi_awvalid);,1
axi2axilite.v,1021,assert(!skids_awready);,1
axi2axilite.v,1024,assert(!skids_awready);,1
axi2axilite.v,1026,assert(!skids_awready);,1
axi2axilite.v,1031,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1051,assert(rid == S_AXI_RID);,1
axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
axi2axilite.v,1059,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1064,assert(m_axi_arvalid);,1
axi2axilite.v,1065,assert(!skids_arready);,1
axi2axilite.v,1083,assume(!skids_awvalid);,1
axi2axilite.v,1084,assume(!skids_wvalid);,1
axi2axilite.v,1085,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1086,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1087,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1088,assert(!skidm_bvalid);,1
axi2axilite.v,1089,assert(!S_AXI_BVALID);,1
axi2axilite.v,1098,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1099,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1100,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1132,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1134,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1158,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1160,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
axi_cdma.v,988,assert(!clear_read_pipeline);,1
axi_cdma.v,991,assert(!clear_read_pipeline);,1
axi_cdma.v,994,assert(!clear_read_pipeline);,1
axi_cdma.v,1808,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1812,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1892,assert(!M_AXI_AWVALID);,1
axi_cdma.v,1893,assert(!M_AXI_WVALID);,1
axi_cdma.v,1894,assert(!M_AXI_ARVALID);,1
axi_cdma.v,1913,assert(f_length != 0);,1
axi_cdma.v,1914,assert(f_length[LGLEN] == 0);,1
axi_cdma.v,1916,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1917,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1995,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1996,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1997,assert(f_length[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2004,assert(!extra_realignment_write);,1
axi_cdma.v,2006,assert(!extra_realignment_write);,1
axi_cdma.v,2008,assert(extra_realignment_write);,1
axi_cdma.v,2012,assert(r_partial_outvalid);,1
axi_cdma.v,2019,assert(f_extra_realignment_read);,1
axi_cdma.v,2021,assert(f_extra_realignment_read == extra_realignment_read);,1
axi_cdma.v,2030,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2034,assert(!r_int);,1
axi_cdma.v,2063,assert(M_AXI_WVALID);,1
axi_cdma.v,2081,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
axi_cdma.v,2087,assert(r_len[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2088,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2089,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2095,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2096,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2097,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2103,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2105,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2109,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2114,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2140,assert(reads_remaining_w == 0);,1
axi_cdma.v,2141,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2142,assert(writes_remaining_w == 0);,1
axi_cdma.v,2167,assert(r_partial_outvalid);,1
axi_cdma.v,2169,assert(!fifo_empty || r_abort || r_err);,1
axi_cdma.v,2195,assert(!M_AXI_WVALID);,1
axi_cdma.v,2202,assert(fifo_data_available == 0);,1
axi_cdma.v,2286,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2290,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
axi_cdma.v,2292,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2299,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2302,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2304,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2320,assert(read_address == f_read_address);,1
axi_cdma.v,2322,assert(read_address[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2326,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2331,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2356,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
axi_cdma.v,2371,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
axi_cdma.v,2379,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
axi_cdma.v,2396,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
axi_cdma.v,2403,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2404,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2406,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
axi_cdma.v,2421,assert(readlen_w != 0);,1
axi_cdma.v,2444,assert(!r_done);,1
axi_cdma.v,2446,assert(!r_done);,1
axi_cdma.v,2454,assert(r_done);,1
axi_cdma.v,2466,assert(M_AXI_WSTRB == 0);,1
axi_cdma.v,2484,assert(reads_remaining_w == 0);,1
axi_cdma.v,2486,assert(reads_remaining_w > 0);,1
axi_cdma.v,2489,assert(readlen_w <= reads_remaining_w);,1
axi_cdma.v,2497,assert(M_AXI_BREADY);,1
axi_cdma.v,2501,assert(M_AXI_RREADY);,1
axi_cdma.v,2524,assert(M_AXI_ARVALID);,1
axi_cdma.v,2528,assert(M_AXI_AWVALID);,1
axi_cdma.v,2549,assert(M_AXI_WVALID);,1
axi_cdma.v,2570,assert(!S_AXIL_BVALID);,1
axi_cdma.v,2571,assert(!S_AXIL_RVALID);,1
axi_cdma.v,2573,assert(!M_AXI_AWVALID);,1
axi_cdma.v,2574,assert(!M_AXI_WVALID);,1
axi_cdma.v,2575,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2577,assert(write_bursts_outstanding == 0);,1
axi_cdma.v,2578,assert(write_requests_remaining == 0);,1
axi_cdma.v,2580,assert(!phantom_read);,1
axi_cdma.v,2581,assert(!phantom_write);,1
axi_cdma.v,2582,assert(!r_busy);,1
axi_cdma.v,2583,assert(read_bursts_outstanding == 0);,1
axi_cdma.v,2584,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2586,assert(r_len == 0);,1
axi_cdma.v,2587,assert(zero_len);,1
axi_cdma.v,2589,assert(write_count == 0);,1
axi_cdma.v,2590,assert(!M_AXI_WLAST);,1
axi_cdma.v,2591,assert(M_AXI_AWLEN == 0);,1
axi_cdma.v,2592,assert(!r_write_fifo);,1
axi_cdma.v,2593,assert(r_src_addr == 0);,1
axi_cdma.v,2594,assert(r_dst_addr == 0);,1
axi_cdma.v,2598,assert(ADDRLSB + LGMAXBURST <= 12);,1
axi_cdma.v,2636,assume(f_const_posn < f_length);,1
axi_cdma.v,2674,assert(f_shifted_wstrb[0]);,1
axi_cdma.v,2675,assert(f_shifted_write[7:0] == f_const_byte);,1
axi_cdma.v,2677,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
axi_cdma.v,2712,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
axi_cdma.v,2749,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
axi_cdma.v,2810,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
axi_cdma.v,2822,cover(!r_busy && r_err);,1
axi_cdma.v,2826,cover(!r_busy && r_abort);,1
axi_cdma.v,2830,cover(reads_remaining_w == 0);,1
axi_cdma.v,2834,cover(reads_remaining_w == 0 && fifo_empty);,1
sfifo.v,269,assert(o_fill == f_fill);,1
sfifo.v,273,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,277,assert(o_full == r_full);,1
sfifo.v,284,assert(o_empty == r_empty);,1
sfifo.v,295,assert(r_empty);,1
sfifo.v,299,assert(!r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,308,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,310,assert(o_data == i_data);,1
sfifo.v,366,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,372,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,385,assert(f_first_in_fifo);,1
sfifo.v,387,assert(!f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,401,assert(f_second_in_fifo);,1
sfifo.v,408,assert(f_second_in_fifo);,1
sfifo.v,410,assert(!f_second_in_fifo);,1
sfifo.v,413,assert(f_first_in_fifo);,1
sfifo.v,416,assert(f_second_in_fifo);,1
sfifo.v,419,assert(f_first_in_fifo);,1
sfifo.v,421,assert(o_data == f_first_data);,1
sfifo.v,423,assert(!f_first_in_fifo);,1
sfifo.v,424,assert(o_data == f_second_data);,1
sfifo.v,451,cover(f_was_full && f_empty);,1
skidbuffer.v,251,assume(i_reset);,1
skidbuffer.v,269,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,273,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,279,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,299,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,322,assert(o_ready);,1
skidbuffer.v,353,assert(o_valid == i_valid);,1
skidbuffer.v,363,assert(o_valid);,1
skidbuffer.v,366,assert(!o_valid);,1
skidbuffer.v,377,assert(o_ready);,1
skidbuffer.v,387,assert(o_data == 0);,1
skidbuffer.v,391,assert(w_data == 0);,1
skidbuffer.v,459,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,465,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
sfifo.v,268,assert(o_fill == f_fill);,1
sfifo.v,272,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,276,assert(o_full == r_full);,1
sfifo.v,283,assert(o_empty == r_empty);,1
sfifo.v,294,assert(r_empty);,1
sfifo.v,298,assert(!r_empty);,1
sfifo.v,300,assert(!r_empty);,1
sfifo.v,307,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,309,assert(o_data == i_data);,1
sfifo.v,365,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,371,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,384,assert(f_first_in_fifo);,1
sfifo.v,386,assert(!f_first_in_fifo);,1
sfifo.v,395,assert(!f_first_in_fifo);,1
sfifo.v,400,assert(f_second_in_fifo);,1
sfifo.v,407,assert(f_second_in_fifo);,1
sfifo.v,409,assert(!f_second_in_fifo);,1
sfifo.v,412,assert(f_first_in_fifo);,1
sfifo.v,415,assert(f_second_in_fifo);,1
sfifo.v,418,assert(f_first_in_fifo);,1
sfifo.v,420,assert(o_data == f_first_data);,1
sfifo.v,422,assert(!f_first_in_fifo);,1
sfifo.v,423,assert(o_data == f_second_data);,1
sfifo.v,450,cover(f_was_full && f_empty);,1
skidbuffer.v,250,assume(i_reset);,1
skidbuffer.v,268,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,272,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,278,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,298,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,321,assert(o_ready);,1
skidbuffer.v,352,assert(o_valid == i_valid);,1
skidbuffer.v,362,assert(o_valid);,1
skidbuffer.v,365,assert(!o_valid);,1
skidbuffer.v,376,assert(o_ready);,1
skidbuffer.v,386,assert(o_data == 0);,1
skidbuffer.v,390,assert(w_data == 0);,1
skidbuffer.v,458,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,464,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
axi2axilite.v,1013,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1018,assert(m_axi_awvalid);,1
axi2axilite.v,1021,assert(!skids_awready);,1
axi2axilite.v,1024,assert(!skids_awready);,1
axi2axilite.v,1026,assert(!skids_awready);,1
axi2axilite.v,1031,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1051,assert(rid == S_AXI_RID);,1
axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
axi2axilite.v,1059,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1064,assert(m_axi_arvalid);,1
axi2axilite.v,1065,assert(!skids_arready);,1
axi2axilite.v,1083,assume(!skids_awvalid);,1
axi2axilite.v,1084,assume(!skids_wvalid);,1
axi2axilite.v,1085,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1086,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1087,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1088,assert(!skidm_bvalid);,1
axi2axilite.v,1089,assert(!S_AXI_BVALID);,1
axi2axilite.v,1098,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1099,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1100,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1132,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1134,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1158,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1160,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
axi_cdma.v,988,assert(!clear_read_pipeline);,1
axi_cdma.v,991,assert(!clear_read_pipeline);,1
axi_cdma.v,994,assert(!clear_read_pipeline);,1
axi_cdma.v,1808,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1812,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1892,assert(!M_AXI_AWVALID);,1
axi_cdma.v,1893,assert(!M_AXI_WVALID);,1
axi_cdma.v,1894,assert(!M_AXI_ARVALID);,1
axi_cdma.v,1913,assert(f_length != 0);,1
axi_cdma.v,1914,assert(f_length[LGLEN] == 0);,1
axi_cdma.v,1916,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1917,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1995,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1996,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1997,assert(f_length[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2004,assert(!extra_realignment_write);,1
axi_cdma.v,2006,assert(!extra_realignment_write);,1
axi_cdma.v,2008,assert(extra_realignment_write);,1
axi_cdma.v,2012,assert(r_partial_outvalid);,1
axi_cdma.v,2019,assert(f_extra_realignment_read);,1
axi_cdma.v,2021,assert(f_extra_realignment_read == extra_realignment_read);,1
axi_cdma.v,2030,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2034,assert(!r_int);,1
axi_cdma.v,2063,assert(M_AXI_WVALID);,1
axi_cdma.v,2081,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
axi_cdma.v,2087,assert(r_len[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2088,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2089,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2095,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2096,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2097,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2103,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2105,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2109,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2114,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2140,assert(reads_remaining_w == 0);,1
axi_cdma.v,2141,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2142,assert(writes_remaining_w == 0);,1
axi_cdma.v,2167,assert(r_partial_outvalid);,1
axi_cdma.v,2169,assert(!fifo_empty || r_abort || r_err);,1
axi_cdma.v,2195,assert(!M_AXI_WVALID);,1
axi_cdma.v,2202,assert(fifo_data_available == 0);,1
axi_cdma.v,2286,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2290,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
axi_cdma.v,2292,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2299,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2302,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2304,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2320,assert(read_address == f_read_address);,1
axi_cdma.v,2322,assert(read_address[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2326,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2331,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2356,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
axi_cdma.v,2371,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
axi_cdma.v,2379,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
axi_cdma.v,2396,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
axi_cdma.v,2403,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2404,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2406,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
axi_cdma.v,2421,assert(readlen_w != 0);,1
axi_cdma.v,2444,assert(!r_done);,1
axi_cdma.v,2446,assert(!r_done);,1
axi_cdma.v,2454,assert(r_done);,1
axi_cdma.v,2466,assert(M_AXI_WSTRB == 0);,1
axi_cdma.v,2484,assert(reads_remaining_w == 0);,1
axi_cdma.v,2486,assert(reads_remaining_w > 0);,1
axi_cdma.v,2489,assert(readlen_w <= reads_remaining_w);,1
axi_cdma.v,2497,assert(M_AXI_BREADY);,1
axi_cdma.v,2501,assert(M_AXI_RREADY);,1
axi_cdma.v,2524,assert(M_AXI_ARVALID);,1
axi_cdma.v,2528,assert(M_AXI_AWVALID);,1
axi_cdma.v,2549,assert(M_AXI_WVALID);,1
axi_cdma.v,2570,assert(!S_AXIL_BVALID);,1
axi_cdma.v,2571,assert(!S_AXIL_RVALID);,1
axi_cdma.v,2573,assert(!M_AXI_AWVALID);,1
axi_cdma.v,2574,assert(!M_AXI_WVALID);,1
axi_cdma.v,2575,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2577,assert(write_bursts_outstanding == 0);,1
axi_cdma.v,2578,assert(write_requests_remaining == 0);,1
axi_cdma.v,2580,assert(!phantom_read);,1
axi_cdma.v,2581,assert(!phantom_write);,1
axi_cdma.v,2582,assert(!r_busy);,1
axi_cdma.v,2583,assert(read_bursts_outstanding == 0);,1
axi_cdma.v,2584,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2586,assert(r_len == 0);,1
axi_cdma.v,2587,assert(zero_len);,1
axi_cdma.v,2589,assert(write_count == 0);,1
axi_cdma.v,2590,assert(!M_AXI_WLAST);,1
axi_cdma.v,2591,assert(M_AXI_AWLEN == 0);,1
axi_cdma.v,2592,assert(!r_write_fifo);,1
axi_cdma.v,2593,assert(r_src_addr == 0);,1
axi_cdma.v,2594,assert(r_dst_addr == 0);,1
axi_cdma.v,2598,assert(ADDRLSB + LGMAXBURST <= 12);,1
axi_cdma.v,2636,assume(f_const_posn < f_length);,1
axi_cdma.v,2674,assert(f_shifted_wstrb[0]);,1
axi_cdma.v,2675,assert(f_shifted_write[7:0] == f_const_byte);,1
axi_cdma.v,2677,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
axi_cdma.v,2712,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
axi_cdma.v,2749,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
axi_cdma.v,2810,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
axi_cdma.v,2822,cover(!r_busy && r_err);,1
axi_cdma.v,2826,cover(!r_busy && r_abort);,1
axi_cdma.v,2830,cover(reads_remaining_w == 0);,1
axi_cdma.v,2834,cover(reads_remaining_w == 0 && fifo_empty);,1
sfifo.v,269,assert(o_fill == f_fill);,1
sfifo.v,273,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,277,assert(o_full == r_full);,1
sfifo.v,284,assert(o_empty == r_empty);,1
sfifo.v,295,assert(r_empty);,1
sfifo.v,299,assert(!r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,308,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,310,assert(o_data == i_data);,1
sfifo.v,366,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,372,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,385,assert(f_first_in_fifo);,1
sfifo.v,387,assert(!f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,401,assert(f_second_in_fifo);,1
sfifo.v,408,assert(f_second_in_fifo);,1
sfifo.v,410,assert(!f_second_in_fifo);,1
sfifo.v,413,assert(f_first_in_fifo);,1
sfifo.v,416,assert(f_second_in_fifo);,1
sfifo.v,419,assert(f_first_in_fifo);,1
sfifo.v,421,assert(o_data == f_first_data);,1
sfifo.v,423,assert(!f_first_in_fifo);,1
sfifo.v,424,assert(o_data == f_second_data);,1
sfifo.v,451,cover(f_was_full && f_empty);,1
skidbuffer.v,251,assume(i_reset);,1
skidbuffer.v,269,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,273,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,279,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,299,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,322,assert(o_ready);,1
skidbuffer.v,353,assert(o_valid == i_valid);,1
skidbuffer.v,363,assert(o_valid);,1
skidbuffer.v,366,assert(!o_valid);,1
skidbuffer.v,377,assert(o_ready);,1
skidbuffer.v,387,assert(o_data == 0);,1
skidbuffer.v,391,assert(w_data == 0);,1
skidbuffer.v,459,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,465,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
axi2axilite.v,1013,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1018,assert(m_axi_awvalid);,1
axi2axilite.v,1021,assert(!skids_awready);,1
axi2axilite.v,1024,assert(!skids_awready);,1
axi2axilite.v,1026,assert(!skids_awready);,1
axi2axilite.v,1031,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1051,assert(rid == S_AXI_RID);,1
axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
axi2axilite.v,1059,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1064,assert(m_axi_arvalid);,1
axi2axilite.v,1065,assert(!skids_arready);,1
axi2axilite.v,1083,assume(!skids_awvalid);,1
axi2axilite.v,1084,assume(!skids_wvalid);,1
axi2axilite.v,1085,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1086,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1087,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1088,assert(!skidm_bvalid);,1
axi2axilite.v,1089,assert(!S_AXI_BVALID);,1
axi2axilite.v,1098,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1099,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1100,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1132,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1134,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1158,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1160,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
sfifo.v,269,assert(o_fill == f_fill);,1
sfifo.v,273,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,277,assert(o_full == r_full);,1
sfifo.v,284,assert(o_empty == r_empty);,1
sfifo.v,295,assert(r_empty);,1
sfifo.v,299,assert(!r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,308,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,310,assert(o_data == i_data);,1
sfifo.v,366,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,372,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,385,assert(f_first_in_fifo);,1
sfifo.v,387,assert(!f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,401,assert(f_second_in_fifo);,1
sfifo.v,408,assert(f_second_in_fifo);,1
sfifo.v,410,assert(!f_second_in_fifo);,1
sfifo.v,413,assert(f_first_in_fifo);,1
sfifo.v,416,assert(f_second_in_fifo);,1
sfifo.v,419,assert(f_first_in_fifo);,1
sfifo.v,421,assert(o_data == f_first_data);,1
sfifo.v,423,assert(!f_first_in_fifo);,1
sfifo.v,424,assert(o_data == f_second_data);,1
sfifo.v,451,cover(f_was_full && f_empty);,1
picorv32_base.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32_base.v,2107,restrict property (resetn != $initstate);,1
picorv32_base.v,2117,assert (mem_wstrb == 0);,1
picorv32_base.v,2129,assert (ok);,1
picorv32_base.v,2147,assert(mem_valid);,1
picorv32_base.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32_base.v,2149,assert(mem_wstrb == 0);,1
picorv32_base.v,2152,assert(mem_valid);,1
picorv32_base.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32_base.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32_base.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32_base.v,2158,assert(!mem_valid || mem_ready);,1
sub.v,36,cover property (@(posedge clk) count_c==3);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
afifo.v,597,assume(i_wclk == now_wclk);,1
afifo.v,598,assume(i_rclk == now_rclk);,1
afifo.v,609,assume(!pre_wclk && !wclk);,1
afifo.v,610,assume(!pre_rclk && !i_rclk);,1
afifo.v,754,cover(o_rd_empty);,1
afifo.v,755,cover(!o_rd_empty);,1
afifo.v,756,cover(f_state == 2'b01);,1
afifo.v,757,cover(f_state == 2'b10);,1
afifo.v,758,cover(f_state == 2'b11);,1
afifo.v,759,cover(&f_fill[MSB-1:0]);,1
afifo.v,761,cover(i_rd);,1
afifo.v,762,cover(i_rd && !o_rd_empty);,1
afifo.v,783,cover(o_wr_full);,1
afifo.v,784,cover(o_rd_empty && cvr_full);,1
afifo.v,785,cover(o_rd_empty && f_fill == 0 && cvr_full);,1
afifo.v,804,cover(cvr_nearly_full && i_wr_reset_n);,1
afifo.v,805,cover(o_rd_empty && cvr_nearly_full);,1
afifo.v,806,cover(o_rd_empty && f_fill == 0 && cvr_nearly_full);,1
spell.v,312,assert (!sleep || !stop);,1
spell.v,323,assume (cycles_per_ms > 0);,1
spell.v,324,assert (delay_counter != 8'hff);,1
spell.v,325,assert (delay_cycles < cycles_per_ms);,1
spell.v,328,assert (!mem_select);,1
spell.v,331,assert (!mem_write_en);,1
picorv32.v,2119,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2122,restrict property (resetn != $initstate);,1
picorv32.v,2132,assert (mem_wstrb == 0);,1
picorv32.v,2144,assert (ok);,1
picorv32.v,2162,assert(mem_valid);,1
picorv32.v,2163,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2164,assert(mem_wstrb == 0);,1
picorv32.v,2167,assert(mem_valid);,1
picorv32.v,2168,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2169,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2170,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2173,assert(!mem_valid || mem_ready);,1
ws2812.v,157,assume(reset);,1
ws2812.v,163,assert(bit_counter == t_reset);,1
ws2812.v,164,assert(rgb_counter == 23);,1
ws2812.v,165,assert(state == STATE_RESET);,1
ws2812.v,169,assert(bit_counter <= t_reset);,1
ws2812.v,170,assert(rgb_counter <= 23);,1
ws2812.v,171,assert(led_counter <= NUM_LEDS - 1);,1
ws2812.v,174,assert(bit_counter <= t_period);,1
ws2812.v,181,assert(data == 0);,1
ws2812.v,182,assert(bit_counter <= t_reset);,1
ws2812.v,188,assume(led_num < NUM_LEDS);,1
ws2812.v,151,assume(reset);,1
ws2812.v,157,assert(bit_counter == t_reset);,1
ws2812.v,158,assert(rgb_counter == 23);,1
ws2812.v,159,assert(state == STATE_RESET);,1
ws2812.v,163,assert(bit_counter <= t_reset);,1
ws2812.v,164,assert(rgb_counter <= 23);,1
ws2812.v,165,assert(led_counter <= NUM_LEDS - 1);,1
ws2812.v,168,assert(bit_counter <= t_period);,1
ws2812.v,175,assert(data == 0);,1
ws2812.v,176,assert(bit_counter <= t_reset);,1
ws2812.v,182,assume(led_num < NUM_LEDS);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
button_pulse.v,51,cover property (comp < MAX_COUNT - 1);,1
button_pulse.v,54,assert property (button && count == 0 |-> pulse);,1
button_pulse.v,55,assert property (pulse |=> !pulse);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
TopModuleTB.v,54,assert(Anode_Activate == 0); // Expected output for team 1 score of 1 // Test case 2: increment team 1 score by two points two_point = 1;,4
TopModuleTB.v,62,assert(Anode_Activate == 4); // Expected output for team 1 score of 3 // Test case 3: increment team 2 score by three points team = 1;,4
TopModuleTB.v,71,assert(Anode_Activate == 3); // Expected output for team 2 score of 3 // Test case 4: reset team scores reset_points = 1;,4
TopModuleTB.v,80,assert(Anode_Activate == 0 && LED_out == 0); // Expected output for team scores of 0 // Test case 5: reset timer reset_score = 1;,4
TopModuleTB.v,88,assert(Anode_Activate == 12 && LED_out == 0); // Expected output for timer reset // Test case 6: pause timer pause = 1;,4
TopModuleTB.v,94,assert(Anode_Activate == 12 && LED_out == 0); // Expected,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
spell.v,313,assert (!sleep || !stop);,1
spell.v,324,assume (cycles_per_ms > 0);,1
spell.v,325,assert (delay_counter != 8'hff);,1
spell.v,326,assert (delay_cycles < cycles_per_ms);,1
spell.v,329,assert (!mem_select);,1
spell.v,332,assert (!mem_write_en);,1
picorv32.v,2131,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2134,restrict property (resetn != $initstate);,1
picorv32.v,2144,assert (mem_wstrb == 0);,1
picorv32.v,2156,assert (ok);,1
picorv32.v,2174,assert(mem_valid);,1
picorv32.v,2175,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2176,assert(mem_wstrb == 0);,1
picorv32.v,2179,assert(mem_valid);,1
picorv32.v,2180,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2181,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2182,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2185,assert(!mem_valid || mem_ready);,1
cells_sim.v,512,assert(A0m==A1m);,1
cells_sim.v,513,assert(B0m==B1m);,1
cells_sim.v,514,assert(C0m==C1m);,1
cells_sim.v,515,assert(D0m==D1m);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
tdt_dm.v,3486,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3489,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3491,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3494,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3496,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3499,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3501,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3504,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3506,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3509,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3511,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3514,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dtm_idr.v,219,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,222,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,224,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,227,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,229,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,232,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,234,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,237,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,239,assert property(set_op_when_capture_dr_in_dmi_running);,1
tdt_dtm_idr.v,242,assert property(set_op_when_capture_dr_in_dmi_running);,1
tb_riscv_crypto_fu.v,145,cover(dut_valid );,1
tb_riscv_crypto_fu.v,148,cover(dut_valid && dut_ready);,1
tb_riscv_crypto_fu.v,189,assume(ops_active == 1);,1
tb_riscv_crypto_fu.v,197,assume( dut_valid );,1
tb_riscv_crypto_fu.v,236,assume(dut_imm[3:0] <= 4'hA);,1
tb_riscv_crypto_fu.v,242,assume(dut_rs1 == 64'h0102030405060708);,1
tb_riscv_crypto_fu.v,243,assume(dut_rs2 == 64'h090a0b0c0d0e0f00);,1
tb_riscv_crypto_fu.v,247,assume(dut_rs1 == 32'h01020304);,1
tb_riscv_crypto_fu.v,248,assume(dut_rs2 == 32'h090a0b0c);,1
tb_riscv_crypto_fu.v,260,assert(dut_rd == grm_saes_rd);,1
tb_riscv_crypto_fu.v,261,cover (dut_rd == grm_saes_rd);,1
tb_riscv_crypto_fu.v,264,cover(dut_op_saes32_encs );,1
tb_riscv_crypto_fu.v,265,cover(dut_op_saes32_decs );,1
tb_riscv_crypto_fu.v,266,cover(dut_op_saes32_encsm);,1
tb_riscv_crypto_fu.v,267,cover(dut_op_saes32_decsm);,1
tb_riscv_crypto_fu.v,269,cover(dut_op_saes64_ks1 );,1
tb_riscv_crypto_fu.v,270,cover(dut_op_saes64_ks2 );,1
tb_riscv_crypto_fu.v,271,cover(dut_op_saes64_imix );,1
tb_riscv_crypto_fu.v,272,cover(dut_op_saes64_encs );,1
tb_riscv_crypto_fu.v,273,cover(dut_op_saes64_encsm);,1
tb_riscv_crypto_fu.v,274,cover(dut_op_saes64_decs );,1
tb_riscv_crypto_fu.v,275,cover(dut_op_saes64_decsm);,1
tb_riscv_crypto_fu.v,280,assert(dut_rd == grm_xperm4_rd);,1
tb_riscv_crypto_fu.v,281,cover (dut_rd == grm_xperm4_rd);,1
tb_riscv_crypto_fu.v,283,cover(dut_op_xperm4);,1
tb_riscv_crypto_fu.v,288,assert(dut_rd == grm_xperm8_rd);,1
tb_riscv_crypto_fu.v,289,cover (dut_rd == grm_xperm8_rd);,1
tb_riscv_crypto_fu.v,291,cover(dut_op_xperm8);,1
tb_riscv_crypto_fu.v,296,"assert(dut_rd == {32'b0,grm_ssm4_rd});",1
tb_riscv_crypto_fu.v,297,"cover (dut_rd == {32'b0,grm_ssm4_rd});",1
tb_riscv_crypto_fu.v,299,assert(dut_rd == grm_ssm4_rd );,1
tb_riscv_crypto_fu.v,300,cover (dut_rd == grm_ssm4_rd );,1
tb_riscv_crypto_fu.v,302,cover (dut_op_ssm4_ks );,1
tb_riscv_crypto_fu.v,303,cover (dut_op_ssm4_ed );,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
mor1kx_lsu_cappuccino.v,884,assume (rst);,1
mor1kx_lsu_cappuccino.v,901,assert (!ctrl_op_lsu_load_i);,1
mor1kx_lsu_cappuccino.v,902,assert (!ctrl_op_lsu_store_i);,1
mor1kx_lsu_cappuccino.v,903,assert (!ctrl_op_lsu_atomic_i);,1
mor1kx_lsu_cappuccino.v,924,assert (dbus_req_o);,1
mor1kx_lsu_cappuccino.v,929,assert (dbus_req_o);,1
mor1kx_lsu_cappuccino.v,934,assert (dbus_req_o);,1
mor1kx_lsu_cappuccino.v,975,assume (dmmu_enable_i == 0);,1
mor1kx_lsu_cappuccino.v,977,assume (dc_enable_i);,1
mor1kx_lsu_cappuccino.v,980,assume (!dbus_ack_i);,1
mor1kx_lsu_cappuccino.v,981,assume (!dbus_err_i);,1
mor1kx_lsu_cappuccino.v,990,assume (!padv_execute_i);,1
mor1kx_lsu_cappuccino.v,991,assume (!padv_ctrl_i);,1
mor1kx_lsu_cappuccino.v,992,assume (!exec_op_lsu_load_i);,1
mor1kx_lsu_cappuccino.v,993,assume (!exec_op_lsu_store_i);,1
mor1kx_lsu_cappuccino.v,994,assume (!ctrl_op_lsu_store_i);,1
mor1kx_lsu_cappuccino.v,995,assume (!ctrl_op_lsu_load_i);,1
mor1kx_lsu_cappuccino.v,996,assume (!ctrl_op_msync_i);,1
mor1kx_lsu_cappuccino.v,997,assume (!spr_bus_stb_i);,1
mor1kx_lsu_cappuccino.v,1002,assume (!padv_execute_i);,1
mor1kx_lsu_cappuccino.v,1006,assume (padv_execute_i);,1
mor1kx_lsu_cappuccino.v,1117,assert (!spr_bus_stb_i);,1
mor1kx_lsu_cappuccino.v,1121,assert (!ctrl_op_lsu_load_i);,1
mor1kx_lsu_cappuccino.v,1122,assert (!ctrl_op_lsu_store_i);,1
mor1kx_lsu_cappuccino.v,1144,assert (spr_bus_stb_i & f_spr_here);,1
mor1kx_lsu_cappuccino.v,1148,assert (f_counting);,1
mor1kx_lsu_cappuccino.v,1151,assert (|f_pending);,1
mor1kx_store_buffer.v,102,assume (rst);,1
mor1kx_store_buffer.v,150,cover ($past(write_i) && full_o);,1
mor1kx_store_buffer.v,155,cover ($past(write_i) && full_o);,1
mor1kx_store_buffer.v,157,cover ($past(write_i) && full_o);,1
mor1kx_store_buffer.v,166,cover (f_seen_full && empty_o);,1
mor1kx_true_dpram_sclk.v,95,assert (f_data_a == mem[f_addr_a] | f_data_ba == mem[f_addr_a]);,1
mor1kx_true_dpram_sclk.v,96,assert (f_data_b == mem[f_addr_b] | f_data_ab == mem[f_addr_b]);,1
mor1kx_true_dpram_sclk.v,113,assert (dout_a == f_data_a | dout_a == f_data_ba);,1
mor1kx_true_dpram_sclk.v,130,assert (dout_b == f_data_b | dout_b == f_data_ab);,1
mor1kx_icache.v,498,assume (rst);,1
mor1kx_icache.v,529,assert (refill);,1
mor1kx_icache.v,539,assert (cpu_dat_o == f_refill_data);,1
mor1kx_icache.v,540,assert (read);,1
mor1kx_icache.v,541,assert (cpu_ack_o);,1
mor1kx_icache.v,553,assert (spr_bus_ack_o);,1
mor1kx_icache.v,554,assert (invalidate);,1
mor1kx_icache.v,555,assert (!cpu_ack_o);,1
mor1kx_icache.v,556,assert (tag_we);,1
mor1kx_icache.v,557,assert (!tag_din[TAGMEM_WAY_VALID]);,1
mor1kx_icache.v,565,assert (!cache_hit_o);,1
mor1kx_icache.v,575,assert (access == way_hit[0]);,1
mor1kx_icache.v,581,assert (we_i);,1
mor1kx_icache.v,586,assert (!tag_we && !way_we);,1
mor1kx_icache.v,591,assert (!way_we);,1
mor1kx_icache.v,596,assert (refill_hit && !read);,1
mor1kx_icache.v,606,assert (cache_hit_o || refill_hit);,1
mor1kx_icache.v,616,assert (state != READ && state != INVALIDATE && state != IDLE);,1
mor1kx_icache.v,626,assert (way_we == access);,1
mor1kx_icache.v,631,assert (tag_we);,1
mor1kx_icache.v,636,assert (access == tag_save_lru);,1
mor1kx_icache.v,641,assert (spr_bus_addr_i == `OR1K_SPR_ICBIR_ADDR);,1
mor1kx_icache.v,654,assert (!spr_bus_ack_o);,1
mor1kx_ticktimer.v,98,assume (rst);,1
mor1kx_ticktimer.v,107,assert (spr_ttmr_o[28]);,1
mor1kx_ticktimer.v,131,assert (spr_ttcr_o == 0);,1
mor1kx_pic.v,150,assume (rst);,1
mor1kx_rf_cappuccino.v,373,assume (rst);,1
mor1kx_ctrl_cappuccino.v,1609,assume (rst);,1
mor1kx_ctrl_cappuccino.v,1637,assert (spr_read_access);,1
mor1kx_ctrl_cappuccino.v,1639,assert (spr_write_access);,1
mor1kx_ctrl_cappuccino.v,1648,assert (!spr_bus_we_o);*/ //Issue 136: Without spr instruction spr_access should be 0. /*always @(posedge clk) if (f_past_valid & !ctrl_op_mfspr_i & !ctrl_op_mtspr_i & !$past(rst)) assert (|spr_access == 0);*/ always @* if (spr_bus_we_o) assert (spr_we);,10
mor1kx_ctrl_cappuccino.v,1661,assert (spr_sr[`OR1K_SPR_SR_SM]);,1
mor1kx_ctrl_cappuccino.v,1663,assert (!spr_sr[`OR1K_SPR_SR_IME]);,1
mor1kx_ctrl_cappuccino.v,1665,assert (!spr_sr[`OR1K_SPR_SR_DME]);,1
mor1kx_ctrl_cappuccino.v,1667,assert (!spr_sr[`OR1K_SPR_SR_TEE]);,1
mor1kx_ctrl_cappuccino.v,1669,assert (!spr_sr[`OR1K_SPR_SR_IEE]);,1
mor1kx_ctrl_cappuccino.v,1673,assert (!spr_sr[`OR1K_SPR_SR_OVE]);,1
mor1kx_ctrl_cappuccino.v,1679,assert (!exception_taken);,1
mor1kx_ctrl_cappuccino.v,1704,assert (!padv_execute_o);,1
mor1kx_ctrl_cappuccino.v,1708,assert (!atomic_flag_set_i | !ctrl_flag_set_i || ctrl_flag_o);,1
mor1kx_ctrl_cappuccino.v,1709,assert (!ctrl_carry_set_i || ctrl_carry_o);,1
mor1kx_ctrl_cappuccino.v,1731,assert (!deassert_doing_rfe);,1
mor1kx_ctrl_cappuccino.v,1808,assert (du_access);,1
mor1kx_ctrl_cappuccino.v,1812,assert (du_npc_written);,1
mor1kx_ctrl_cappuccino.v,1816,assert (!stepped_into_rfe && !du_npc_written && !stepped_into_exception);,1
mor1kx_ctrl_cappuccino.v,1819,assert (stall_on_trap == spr_dsr[`OR1K_SPR_DSR_TE]);,1
mor1kx_decode_execute_cappuccino.v,611,assume (rst);,1
mor1kx_decode_execute_cappuccino.v,616,assert (!execute_op_bf_o);,1
mor1kx_decode_execute_cappuccino.v,617,assert (!execute_op_bnf_o);,1
mor1kx_decode_execute_cappuccino.v,618,assert (!execute_op_alu_o);,1
mor1kx_decode_execute_cappuccino.v,619,assert (!execute_op_add_o);,1
mor1kx_decode_execute_cappuccino.v,620,assert (!execute_op_mul_o);,1
mor1kx_decode_execute_cappuccino.v,621,assert (!execute_op_mul_signed_o);,1
mor1kx_decode_execute_cappuccino.v,622,assert (!execute_op_mul_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,623,assert (!execute_op_div_o);,1
mor1kx_decode_execute_cappuccino.v,624,assert (!execute_op_div_signed_o);,1
mor1kx_decode_execute_cappuccino.v,625,assert (!execute_op_div_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,626,assert (!execute_op_shift_o);,1
mor1kx_decode_execute_cappuccino.v,627,assert (!execute_op_ffl1_o);,1
mor1kx_decode_execute_cappuccino.v,628,assert (!execute_op_movhi_o);,1
mor1kx_decode_execute_cappuccino.v,629,assert (!execute_op_ext_o);,1
mor1kx_decode_execute_cappuccino.v,630,assert (!execute_op_msync_o);,1
mor1kx_decode_execute_cappuccino.v,631,assert (!execute_op_mfspr_o);,1
mor1kx_decode_execute_cappuccino.v,632,assert (!execute_op_mtspr_o);,1
mor1kx_decode_execute_cappuccino.v,633,assert (!execute_op_lsu_load_o);,1
mor1kx_decode_execute_cappuccino.v,634,assert (!execute_op_lsu_store_o);,1
mor1kx_decode_execute_cappuccino.v,635,assert (!execute_op_lsu_atomic_o);,1
mor1kx_decode_execute_cappuccino.v,636,assert (!execute_op_setflag_o);,1
mor1kx_decode_execute_cappuccino.v,637,assert (!execute_op_jbr_o);,1
mor1kx_decode_execute_cappuccino.v,638,assert (!execute_op_jr_o);,1
mor1kx_decode_execute_cappuccino.v,639,assert (!execute_op_jal_o);,1
mor1kx_decode_execute_cappuccino.v,640,assert (!execute_op_brcond_o);,1
mor1kx_decode_execute_cappuccino.v,641,assert (!execute_op_branch_o);,1
mor1kx_decode_execute_cappuccino.v,642,assert (!execute_op_rfe_o);,1
mor1kx_decode_execute_cappuccino.v,643,assert (!execute_rf_wb_o);,1
mor1kx_decode_execute_cappuccino.v,644,assert (execute_opc_insn_o == `OR1K_OPCODE_NOP);,1
mor1kx_decode_execute_cappuccino.v,645,assert (!execute_adder_do_sub_o);,1
mor1kx_decode_execute_cappuccino.v,646,assert (!execute_adder_do_carry_o);,1
mor1kx_decode_execute_cappuccino.v,647,assert (!execute_except_syscall_o);,1
mor1kx_decode_execute_cappuccino.v,648,assert (!execute_except_trap_o);,1
mor1kx_decode_execute_cappuccino.v,649,assert (!execute_except_illegal_o);,1
mor1kx_decode_execute_cappuccino.v,650,assert (!execute_except_ibus_err_o);,1
mor1kx_decode_execute_cappuccino.v,651,assert (!execute_except_itlb_miss_o);,1
mor1kx_decode_execute_cappuccino.v,652,assert (!execute_except_ipagefault_o);,1
mor1kx_decode_execute_cappuccino.v,653,assert (!execute_except_ibus_align_o);,1
mor1kx_decode_execute_cappuccino.v,654,assert (!decode_valid_o);,1
mor1kx_decode_execute_cappuccino.v,655,assert (!execute_bubble_o);,1
mor1kx_decode_execute_cappuccino.v,662,assert (!execute_op_bf_o);,1
mor1kx_decode_execute_cappuccino.v,663,assert (!execute_op_bnf_o);,1
mor1kx_decode_execute_cappuccino.v,664,assert (!execute_op_alu_o);,1
mor1kx_decode_execute_cappuccino.v,665,assert (!execute_op_add_o);,1
mor1kx_decode_execute_cappuccino.v,666,assert (!execute_op_mul_o);,1
mor1kx_decode_execute_cappuccino.v,667,assert (!execute_op_mul_signed_o);,1
mor1kx_decode_execute_cappuccino.v,668,assert (!execute_op_mul_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,669,assert (!execute_op_div_o);,1
mor1kx_decode_execute_cappuccino.v,670,assert (!execute_op_div_signed_o);,1
mor1kx_decode_execute_cappuccino.v,671,assert (!execute_op_div_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,672,assert (!execute_op_shift_o);,1
mor1kx_decode_execute_cappuccino.v,673,assert (!execute_op_ffl1_o);,1
mor1kx_decode_execute_cappuccino.v,674,assert (!execute_op_movhi_o);,1
mor1kx_decode_execute_cappuccino.v,675,assert (!execute_op_ext_o);,1
mor1kx_decode_execute_cappuccino.v,676,assert (!execute_op_msync_o);,1
mor1kx_decode_execute_cappuccino.v,677,assert (!execute_op_lsu_load_o);,1
mor1kx_decode_execute_cappuccino.v,678,assert (!execute_op_lsu_store_o);,1
mor1kx_decode_execute_cappuccino.v,679,assert (!execute_op_lsu_atomic_o);,1
mor1kx_decode_execute_cappuccino.v,680,assert (!execute_op_setflag_o);,1
mor1kx_decode_execute_cappuccino.v,681,assert (!execute_op_jbr_o);,1
mor1kx_decode_execute_cappuccino.v,682,assert (!execute_op_jr_o);,1
mor1kx_decode_execute_cappuccino.v,683,assert (!execute_op_jal_o);,1
mor1kx_decode_execute_cappuccino.v,684,assert (!execute_op_brcond_o);,1
mor1kx_decode_execute_cappuccino.v,685,assert (!execute_op_branch_o);,1
mor1kx_decode_execute_cappuccino.v,686,assert (!execute_rf_wb_o);,1
mor1kx_decode_execute_cappuccino.v,687,assert (execute_opc_insn_o == `OR1K_OPCODE_NOP);,1
mor1kx_decode_execute_cappuccino.v,688,assert (!execute_adder_do_sub_o);,1
mor1kx_decode_execute_cappuccino.v,689,assert (!execute_adder_do_carry_o);,1
mor1kx_decode_execute_cappuccino.v,690,assert (!execute_bubble_o);,1
mor1kx_decode_execute_cappuccino.v,699,assert (!execute_op_bf_o);,1
mor1kx_decode_execute_cappuccino.v,700,assert (!execute_op_bnf_o);,1
mor1kx_decode_execute_cappuccino.v,701,assert (!execute_op_alu_o);,1
mor1kx_decode_execute_cappuccino.v,702,assert (!execute_op_add_o);,1
mor1kx_decode_execute_cappuccino.v,703,assert (!execute_op_mul_o);,1
mor1kx_decode_execute_cappuccino.v,704,assert (!execute_op_mul_signed_o);,1
mor1kx_decode_execute_cappuccino.v,705,assert (!execute_op_mul_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,706,assert (!execute_op_div_o);,1
mor1kx_decode_execute_cappuccino.v,707,assert (!execute_op_div_signed_o);,1
mor1kx_decode_execute_cappuccino.v,708,assert (!execute_op_div_unsigned_o);,1
mor1kx_decode_execute_cappuccino.v,709,assert (!execute_op_shift_o);,1
mor1kx_decode_execute_cappuccino.v,710,assert (!execute_op_ffl1_o);,1
mor1kx_decode_execute_cappuccino.v,711,assert (!execute_op_movhi_o);,1
mor1kx_decode_execute_cappuccino.v,712,assert (!execute_op_ext_o);,1
mor1kx_decode_execute_cappuccino.v,713,assert (!execute_op_msync_o);,1
mor1kx_decode_execute_cappuccino.v,714,assert (!execute_op_mfspr_o);,1
mor1kx_decode_execute_cappuccino.v,715,assert (!execute_op_mtspr_o);,1
mor1kx_decode_execute_cappuccino.v,716,assert (!execute_op_lsu_load_o);,1
mor1kx_decode_execute_cappuccino.v,717,assert (!execute_op_lsu_store_o);,1
mor1kx_decode_execute_cappuccino.v,718,assert (!execute_op_lsu_atomic_o);,1
mor1kx_decode_execute_cappuccino.v,719,assert (!execute_op_setflag_o);,1
mor1kx_decode_execute_cappuccino.v,720,assert (!execute_op_jbr_o);,1
mor1kx_decode_execute_cappuccino.v,721,assert (!execute_op_jr_o);,1
mor1kx_decode_execute_cappuccino.v,722,assert (!execute_op_jal_o);,1
mor1kx_decode_execute_cappuccino.v,723,assert (!execute_op_brcond_o);,1
mor1kx_decode_execute_cappuccino.v,724,assert (!execute_op_branch_o);,1
mor1kx_decode_execute_cappuccino.v,736,assert (decode_valid_o);,1
mor1kx_dmmu.v,555,assume (rst);,1
mor1kx_dmmu.v,557,assume (!rst);,1
mor1kx_dmmu.v,590,assume (spr_way_idx < OPTION_DMMU_WAYS);,1
mor1kx_dmmu.v,630,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,631,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,632,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,633,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,634,"assert ($onehot0({tlb_miss_o, cache_inhibit_o}));",1
mor1kx_dmmu.v,656,assert (spr_bus_stb_i);,1
mor1kx_dmmu.v,661,assert (!dtlb_trans_we & !dtlb_match_we);,1
mor1kx_simple_dpram_sclk.v,89,assert(mem[f_addr] == f_data);,1
mor1kx_simple_dpram_sclk.v,103,assert (dout == $past(din));,1
mor1kx_simple_dpram_sclk.v,104,assert (dout == $past(din));,1
mor1kx_simple_dpram_sclk.v,105,assert (dout == $past(din));,1
mor1kx_fetch_cappuccino.v,654,assume (rst);,1
mor1kx_fetch_cappuccino.v,661,assert (!fetching_brcond);,1
mor1kx_fetch_cappuccino.v,662,assert (!fetching_mispredicted_branch);,1
mor1kx_fetch_cappuccino.v,663,assert (pc_fetch == OPTION_RESET_PC);,1
mor1kx_fetch_cappuccino.v,664,assert (!fetch_exception_taken_o);,1
mor1kx_fetch_cappuccino.v,665,assert (!fetch_valid_o);,1
mor1kx_fetch_cappuccino.v,666,"assert (decode_insn_o == {`OR1K_OPCODE_NOP, 26'd0});",1
mor1kx_fetch_cappuccino.v,667,assert (!decode_except_ipagefault_o);,1
mor1kx_fetch_cappuccino.v,668,assert (!nop_ack);,1
mor1kx_fetch_cappuccino.v,669,assert (!ibus_req_o);,1
mor1kx_fetch_cappuccino.v,679,assert (!fetch_valid_o);,1
mor1kx_fetch_cappuccino.v,692,assert (!fetch_valid_o);,1
mor1kx_fetch_cappuccino.v,717,assert (pc_decode_o == f_last_pc + 4);,1
mor1kx_fetch_cappuccino.v,722,assert (flushing);,1
mor1kx_fetch_cappuccino.v,727,assert (!fetch_exception_taken_o);,1
mor1kx_fetch_cappuccino.v,737,assert (mispredict_stall);,1
mor1kx_fetch_cappuccino.v,755,assert (pc_fetch == f_const_pc);,1
mor1kx_fetch_cappuccino.v,757,assert (state == READ);,1
mor1kx_fetch_cappuccino.v,769,assert (ibus_dat == f_const_insn);,1
mor1kx_fetch_cappuccino.v,771,assert (imem_dat == f_const_insn);,1
mor1kx_fetch_cappuccino.v,779,assert (decode_insn_o == f_const_insn);,1
mor1kx_fetch_cappuccino.v,780,assert (pc_decode_o == f_const_pc);,1
mor1kx_fetch_cappuccino.v,790,assert (!decode_except_itlb_miss_o);,1
mor1kx_fetch_cappuccino.v,791,assert (!decode_except_ipagefault_o);,1
mor1kx_fetch_cappuccino.v,799,assert (decode_except_ibus_err_o);,1
mor1kx_fetch_cappuccino.v,805,assert (!ic_access);,1
mor1kx_fetch_cappuccino.v,810,assert (!ic_refill_done);,1
mor1kx_fetch_cappuccino.v,825,assert (!padv_i);,1
mor1kx_fetch_cappuccino.v,830,assert (decode_except_ipagefault_o);,1
mor1kx_fetch_cappuccino.v,835,assert (decode_except_ibus_err_o);,1
mor1kx_execute_ctrl_cappuccino.v,404,assume (rst);,1
mor1kx_execute_ctrl_cappuccino.v,409,assert (!ctrl_except_ibus_err_o);,1
mor1kx_execute_ctrl_cappuccino.v,410,assert (!ctrl_except_itlb_miss_o);,1
mor1kx_execute_ctrl_cappuccino.v,411,assert (!ctrl_except_ipagefault_o);,1
mor1kx_execute_ctrl_cappuccino.v,412,assert (!ctrl_except_ibus_align_o);,1
mor1kx_execute_ctrl_cappuccino.v,413,assert (!ctrl_except_illegal_o);,1
mor1kx_execute_ctrl_cappuccino.v,414,assert (!ctrl_except_syscall_o);,1
mor1kx_execute_ctrl_cappuccino.v,415,assert (!ctrl_except_trap_o);,1
mor1kx_execute_ctrl_cappuccino.v,416,assert (!ctrl_except_dbus_o);,1
mor1kx_execute_ctrl_cappuccino.v,417,assert (!ctrl_except_align_o);,1
mor1kx_execute_ctrl_cappuccino.v,418,assert (!wb_rf_wb_o);,1
mor1kx_execute_ctrl_cappuccino.v,428,assert (!ctrl_flag_set_o);,1
mor1kx_execute_ctrl_cappuccino.v,429,assert (!ctrl_flag_clear_o);,1
mor1kx_execute_ctrl_cappuccino.v,430,assert (!ctrl_carry_set_o);,1
mor1kx_execute_ctrl_cappuccino.v,431,assert (!ctrl_carry_clear_o);,1
mor1kx_execute_ctrl_cappuccino.v,432,assert (!ctrl_overflow_set_o);,1
mor1kx_execute_ctrl_cappuccino.v,433,assert (!ctrl_overflow_clear_o);,1
mor1kx_execute_ctrl_cappuccino.v,434,assert (pc_ctrl_o == OPTION_RESET_PC);,1
mor1kx_execute_ctrl_cappuccino.v,435,assert (!ctrl_op_mul_o);,1
mor1kx_execute_ctrl_cappuccino.v,436,assert (!ctrl_op_mfspr_o);,1
mor1kx_execute_ctrl_cappuccino.v,437,assert (!ctrl_op_mtspr_o);,1
mor1kx_execute_ctrl_cappuccino.v,438,assert (!ctrl_op_rfe_o);,1
mor1kx_execute_ctrl_cappuccino.v,439,assert (!ctrl_op_msync_o);,1
mor1kx_execute_ctrl_cappuccino.v,440,assert (!ctrl_op_lsu_load_o);,1
mor1kx_execute_ctrl_cappuccino.v,441,assert (!ctrl_op_lsu_store_o);,1
mor1kx_execute_ctrl_cappuccino.v,442,assert (!ctrl_op_lsu_atomic_o);,1
mor1kx_execute_ctrl_cappuccino.v,443,assert (!ctrl_rf_wb_o);,1
mor1kx_execute_ctrl_cappuccino.v,475,assert (ctrl_op_mtspr_o);,1
mor1kx_execute_ctrl_cappuccino.v,481,assert (ctrl_op_mfspr_o);,1
mor1kx_execute_ctrl_cappuccino.v,488,assert (ctrl_op_mul_o);,1
mor1kx_execute_ctrl_cappuccino.v,494,assert (ctrl_op_rfe_o);,1
mor1kx_execute_ctrl_cappuccino.v,500,assert (ctrl_op_msync_o);,1
mor1kx_immu.v,490,assume (rst);,1
mor1kx_immu.v,516,assert (!cache_inhibit_o);,1
mor1kx_immu.v,527,assert (!tlb_miss_o);,1
mor1kx_immu.v,533,assert (spr_bus_addr_i[15:11] == 5'd2);,1
mor1kx_immu.v,537,assert (itlb_match_spr_cs != itlb_trans_spr_cs);,1
mor1kx_immu.v,542,assert (!itlb_trans_spr_cs);,1
mor1kx_immu.v,547,assert (!itlb_trans_we & !itlb_match_we);,1
mor1kx_immu.v,552,assert (itlb_trans_spr_tx | itlb_match_spr_tx);,1
mor1kx_immu.v,557,assert (!itlb_match_spr_tx);,1
mor1kx_immu.v,564,assert (busy_o);,1
mor1kx_immu.v,571,assert (busy_o);,1
mor1kx_immu.v,598,cover (!tlb_miss_o && phys_addr_o != 0);,1
mor1kx_cpu_cappuccino.v,1603,assume (rst);,1
mor1kx_cpu_cappuccino.v,1608,assert (!fetch_valid_o);,1
mor1kx_cpu_cappuccino.v,1609,assert (!ibus_req_o);,1
mor1kx_cpu_cappuccino.v,1610,assert (!spr_bus_stb_o);,1
mor1kx_cpu_cappuccino.v,1611,assert (!ibus_burst_o);,1
mor1kx_cpu_cappuccino.v,1612,assert (!spr_bus_ack_ic_i);,1
mor1kx_cpu_cappuccino.v,1613,assert (!spr_bus_ack_immu_i);,1
mor1kx_cpu_cappuccino.v,1614,assert (!decode_valid_o);,1
mor1kx_cpu_cappuccino.v,1615,assert (!decode_bubble_o);,1
mor1kx_cpu_cappuccino.v,1616,assert (!execute_bubble_o);,1
mor1kx_cpu_cappuccino.v,1617,assert (!padv_decode_o);,1
mor1kx_cpu_cappuccino.v,1618,assert (!padv_execute_o);,1
mor1kx_cpu_cappuccino.v,1619,assert (!padv_ctrl_o);,1
mor1kx_cpu_cappuccino.v,1620,assert (!predicted_flag_o);,1
mor1kx_cpu_cappuccino.v,1621,assert (!spr_bus_ack_dc_i);,1
mor1kx_cpu_cappuccino.v,1622,assert (!spr_bus_ack_dmmu_i);,1
mor1kx_cpu_cappuccino.v,1623,assert (!ctrl_bubble_o);,1
mor1kx_cpu_cappuccino.v,1624,assert (!wb_rf_wb_o);,1
mor1kx_cpu_cappuccino.v,1630,assert (fetch_valid_o);,1
mor1kx_cpu_cappuccino.v,1652,assume (!dbus_ack_i);,1
mor1kx_cpu_cappuccino.v,1653,assume (!dbus_err_i);,1
mor1kx_cpu_cappuccino.v,1656,assume (!ibus_ack_i);,1
mor1kx_cpu_cappuccino.v,1657,assume (!ibus_err_i);,1
mor1kx_cpu_cappuccino.v,1675,assume (ibus_dat_i[`OR1K_OPCODE_SELECT] == `OR1K_OPCODE_ALU);,1
mor1kx_dcache.v,778,assume (rst);,1
mor1kx_dcache.v,854,assume (refill_allowed_i);,1
mor1kx_dcache.v,861,assume (cpu_req_i);,1
mor1kx_dcache.v,864,assume (!cpu_we_i);,1
mor1kx_dcache.v,884,assert (&f_op_count);,1
mor1kx_dcache.v,960,assume (refill_we_i == f_refill_we);,1
mor1kx_dcache.v,961,assume (refill_adr_i == f_refill_addr);,1
mor1kx_bus_if_wb32.v,192,assume (rst);,1
mor1kx_bus_if_wb32.v,194,assume (!rst);,1
mor1kx_bus_if_wb32.v,200,assert (!wbm_stb_o);,1
mor1kx_bus_if_wb32.v,203,assert (!wbm_stb_o);,1
mor1kx_bus_if_wb32.v,209,assert (wbm_stb_o);,1
mor1kx_bus_if_wb32.v,216,assert (!wbm_cti_o);,1
mor1kx_bus_if_wb32.v,217,assert (!wbm_bte_o);,1
mor1kx_bus_if_wb32.v,222,assert (wbm_adr_o == cpu_adr_i);,1
mor1kx_bus_if_wb32.v,229,assert (wbm_cti_o == 3'b111 | wbm_cti_o == 3'b010 | wbm_cti_o == 3'b000);,1
mor1kx_bus_if_wb32.v,237,assert (wbm_cti_o == 3'b111);,1
mor1kx_execute_alu.v,874,assume (rst);,1
mor1kx_execute_alu.v,876,assume (!rst);,1
mor1kx_execute_alu.v,903,assert (mul_valid);,1
mor1kx_execute_alu.v,904,assert (alu_valid_o);,1
mor1kx_execute_alu.v,905,assert (!alu_stall);,1
mor1kx_execute_alu.v,914,assert (!alu_stall);,1
mor1kx_execute_alu.v,915,assert (alu_valid_o);,1
mor1kx_execute_alu.v,916,assert (mul_valid);,1
mor1kx_execute_alu.v,940,assume (!op_mul_i);,1
mor1kx_execute_alu.v,941,assert (!mul_result);,1
mor1kx_execute_alu.v,953,assert (div_valid);,1
mor1kx_execute_alu.v,956,assert (div_by_zero);,1
mor1kx_execute_alu.v,960,assert (!div_result);,1
mor1kx_execute_alu.v,961,assert (!div_by_zero);,1
mor1kx_execute_alu.v,994,assert (alu_result_o == f_sll);,1
mor1kx_execute_alu.v,996,assert (alu_result_o == f_srl);,1
mor1kx_execute_alu.v,1038,assert (carry_clear_o && a_eq_b);,1
mor1kx_execute_alu.v,1042,assert (carry_set_o);,1
mor1kx_execute_alu.v,1046,assert (overflow_set_o);,1
mor1kx_execute_alu.v,1051,assert (!alu_stall);,1
mor1kx_execute_alu.v,1067,assert (logic_result == f_logic_and);,1
mor1kx_execute_alu.v,1070,assert (logic_result == f_logic_or);,1
mor1kx_execute_alu.v,1073,assert (logic_result == f_logic_xor);,1
mor1kx_pcu.v,148,assume (rst);,1
mor1kx_cache_lru.v,282,assert (NUMWAYS > 1);,1
mor1kx_wb_mux_cappuccino.v,62,assume (rst);,1
mor1kx_wb_mux_cappuccino.v,74,assert (rf_result_o == mul_result_i);,1
f_multiclock_op.v,40,assume (!decode_valid_i);,1
f_multiclock_op.v,42,assume (decode_valid_i);,1
f_multiclock_op.v,53,assume (f_op_i);,1
DW_lp_fifoctl_1c_df.v,1147,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
DW_lp_fifoctl_1c_df.v,1152,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
project.v,106,assume(reset);,1
project.v,244,assume(reset);,1
project.v,751,assume(reset);,1
project.v,1305,assume(reset);,1
uart_tx.v,125,"assert property(check_tx_high_in_special_idle) else $error(""Time=%0t: TX not high in SPECIAL_IDLE state"", $time);",2
uart_tx.v,132,"assert property(check_no_ready_in_special_idle) else $error(""Time=%0t: s_ready not low in SPECIAL_IDLE state"", $time);",2
uart_top_tb.v,115,assert property(valid_ready_handshake);,1
uart_top_tb.v,119,assert property(valid_ready_handshake);,1
uart_top_tb.v,122,assert property(reset_behavior);,1
uart_top_tb.v,126,assert property(reset_behavior);,1
uart_top_tb.v,129,"assert property(complete_transfer_timing) else $error(""Transfer timing violation! Expected %d clocks"", TOTAL_TRANSFER_CLOCKS);",2
uart_top_tb.v,138,"assert property(data_integrity) else $error(""Data integrity check failed! Last TX: %h, RX: %h"", last_tx_data, rx_data);",2
uart_top_tb.v,115,assert property(valid_ready_handshake);,1
uart_top_tb.v,119,assert property(valid_ready_handshake);,1
uart_top_tb.v,122,assert property(reset_behavior);,1
uart_top_tb.v,126,assert property(reset_behavior);,1
uart_top_tb.v,129,"assert property(complete_transfer_timing) else $error(""Transfer timing violation! Expected %d clocks"", TOTAL_TRANSFER_CLOCKS);",2
uart_top_tb.v,138,"assert property(data_integrity) else $error(""Data integrity check failed! Last TX: %h, RX: %h"", last_tx_data, rx_data);",2
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
mvm_uart_system.v,157,assert property(valid_stable_uart);,1
mvm_uart_system.v,161,assert property(valid_stable_uart);,1
mvm_uart_system.v,163,assert property(valid_stable_skid);,1
mvm_uart_system.v,167,assert property(valid_stable_skid);,1
mvm_uart_system.v,169,assert property(valid_stable_mvm);,1
mvm_uart_system.v,173,assert property(valid_stable_mvm);,1
skid_buffer_tb.v,146,assert property(p_valid_stable),1
skid_buffer_tb.v,151,assert property(p_valid_stable) else $error("Valid dropped during backpressure");,2
skid_buffer_tb.v,156,assert property(p_valid_stable) else $error("Valid dropped during backpressure");,2
skid_buffer_tb.v,161,assert property(p_valid_stable) else $error("Valid dropped during backpressure");,2
uart_rx_tb.v,95,assert property(p_reset_behavior) else $error("Reset behavior verification failed");,2
uart_rx_tb.v,103,assert property(p_valid_duration) else $error("Valid signal duration violation");,2
uart_rx_tb.v,111,assert property(p_idle_rx) else $error("Idle RX value violation");,2
uart_rx_tb.v,119,assert property(p_start_bit) else $error("Start bit sequence violation");,2
uart_rx_tb.v,123,assert property(p_start_bit) else $error("Start bit sequence violation");,2
uart_rx_tb.v,131,assert property(p_data_verify) else $error("Data verification failed");,2
mvm_uart_system_tb.v,192,assert property(reset_behavior) else $error("Reset behavior violation");,2
mvm_uart_system_tb.v,198,assert property(uart_rx_protocol) else $error("UART RX protocol violation");,2
mvm_uart_system_tb.v,205,assert property(axis_handshake) else $error("AXI-Stream handshake violation");,2
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
fftstage.v,407,assume(f_mpydelay > 1);,1
fftstage.v,417,assert(iaddr == 0);,1
fftstage.v,418,assert(wait_for_sync);,1
fftstage.v,419,assert(o_sync == 0);,1
fftstage.v,420,assert(oaddr == 0);,1
fftstage.v,421,assert(!b_started);,1
fftstage.v,422,assert(!o_sync);,1
fftstage.v,438,assume(!i_ce);,1
fftstage.v,441,assume(f_addr[LGSPAN]==1'b0);,1
fftstage.v,449,assert(iaddr == 0);,1
fftstage.v,455,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,465,assert(ib_a == f_left);,1
fftstage.v,466,assert(ib_b == f_right);,1
fftstage.v,467,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,492,assert(f_output_active == b_started);,1
fftstage.v,496,assert(!f_output_active);,1
fftstage.v,501,assert(oaddr == f_oaddr);,1
fftstage.v,503,assert(oaddr == 0);,1
fftstage.v,507,assume(!ob_sync);,1
fftstage.v,530,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
fftstage.v,535,assert(o_sync);,1
fftstage.v,537,assert(!o_sync);,1
fftstage.v,541,assert(o_data == f_oleft);,1
fftstage.v,546,assert(pre_ovalue == f_oright);,1
fftstage.v,551,assert(o_data == f_oright);,1
hwbfly.v,674,assume(i_ce);,1
hwbfly.v,686,assume(!i_ce);,1
hwbfly.v,693,assume(!i_ce);,1
hwbfly.v,730,assert(left_sr == f_sumrx);,1
hwbfly.v,731,assert(left_si == f_sumix);,1
hwbfly.v,732,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,736,assert(mpy_r == 0);,1
hwbfly.v,737,assert(mpy_i == 0);,1
hwbfly.v,741,assert(mpy_r == 0);,1
hwbfly.v,742,assert(mpy_i == 0);,1
hwbfly.v,747,assert(mpy_r == f_difrx);,1
hwbfly.v,748,assert(mpy_i == f_difix);,1
hwbfly.v,753,assert(mpy_r == -f_difix);,1
hwbfly.v,754,assert(mpy_i == f_difrx);,1
hwbfly.v,759,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,760,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,765,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,766,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,796,assert(p_one == 0);,1
hwbfly.v,798,assert(p_two == 0);,1
hwbfly.v,801,assert(p_one == f_predifrx);,1
hwbfly.v,803,assert(p_two == f_predifix);,1
hwbfly.v,806,assert(p_one == 0);,1
hwbfly.v,808,assert(p_two == 0);,1
hwbfly.v,812,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,814,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,818,assert(p_three == 0);,1
hwbfly.v,820,assert(p_three == 0);,1
hwbfly.v,823,assert(p_three == f_sumdiff);,1
hwbfly.v,825,assert(p_three == f_sumcoef);,1
hwbfly.v,828,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,829,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,830,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1047,assume(i_ce);,1
butterfly.v,1055,assume(i_ce);,1
butterfly.v,1065,assume(!i_ce);,1
butterfly.v,1070,assume(i_ce);,1
butterfly.v,1075,assume(i_ce);,1
butterfly.v,1084,assume(!i_ce);,1
butterfly.v,1091,assume(i_ce);,1
butterfly.v,1101,assume(i_ce);,1
butterfly.v,1140,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,1141,assert(left_sr == f_sumrx);,1
butterfly.v,1142,assert(left_si == f_sumix);,1
butterfly.v,1143,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,1147,assert(mpy_r == 0);,1
butterfly.v,1148,assert(mpy_i == 0);,1
butterfly.v,1152,assert(mpy_r == 0);,1
butterfly.v,1153,assert(mpy_i == 0);,1
butterfly.v,1158,assert(mpy_r == f_difrx);,1
butterfly.v,1159,assert(mpy_i == f_difix);,1
butterfly.v,1164,assert(mpy_r == -f_difix);,1
butterfly.v,1165,assert(mpy_i == f_difrx);,1
butterfly.v,1170,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,1171,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,1176,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,1177,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,1207,assert(p_one == 0);,1
butterfly.v,1209,assert(p_two == 0);,1
butterfly.v,1212,assert(p_one == f_predifrx);,1
butterfly.v,1214,assert(p_two == f_predifix);,1
butterfly.v,1217,assert(p_one == 0);,1
butterfly.v,1219,assert(p_two == 0);,1
butterfly.v,1223,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,1225,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,1229,assert(p_three == 0);,1
butterfly.v,1231,assert(p_three == 0);,1
butterfly.v,1234,assert(p_three == f_sumdiff);,1
butterfly.v,1236,assert(p_three == f_sumcoef);,1
butterfly.v,1241,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1242,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1243,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1263,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1264,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1265,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1266,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,198,assert(o_out == f_addr_value);,1
bitreverse.v,202,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,290,assume(i_ce);,1
longbimpy.v,486,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,488,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,498,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,499,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,507,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,514,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,280,assume(!i_sync);,1
qtrstage.v,283,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,291,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,292,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,293,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,294,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,296,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,297,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,303,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,304,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,305,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,306,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,313,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,314,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,320,assert(!o_sync);,1
qtrstage.v,321,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,322,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,328,assert(!o_sync);,1
qtrstage.v,329,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,330,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,335,assume(i_sync);,1
qtrstage.v,343,assert(!wait_for_sync);,1
qtrstage.v,348,assert(!o_sync);,1
qtrstage.v,351,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,352,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,354,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,355,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,214,assume(!i_sync);,1
laststage.v,217,assert(stage == f_state[0]);,1
laststage.v,222,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,223,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,229,assert(!o_sync);,1
laststage.v,230,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,231,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,237,assert(!f_rsyncd);,1
laststage.v,238,assert(!o_sync);,1
laststage.v,239,assert(f_state == 0);,1
tb_cell_calculator.v,41,assert(direction == 2'b00);,1
tb_cell_calculator.v,49,assert(direction == 2'b01);,1
tb_cell_calculator.v,57,assert(direction == 2'b10);,1
system_tb.v,187,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,188,assert(FPGA_SERIAL_RX == 1'b1);,1
system_tb.v,199,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,200,assert(FPGA_SERIAL_RX == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
uart_transmitter.v,66,assert property (not_transmitting) else $error("Error: data_in_ready or serial_out is not high when not transmitting");,1
uart_transmitter.v,73,assert property (transmitting) else $error("Error: data_in_ready did not stay low for the correct duration during transmission");,1
fifo.v,61,assert property (write_pointer_stable_when_full) else $error("Error: write pointer changed when FIFO was full");,1
fifo.v,67,assert property (read_pointer_stable_when_empty) else $error("Error: read pointer changed when FIFO was empty");,1
fifo.v,73,assert property (reset_behavior) else $error("Error: read/write pointers were not reset or full signal was not deasserted");,1
fifo_tb.v,284,assert(empty == 1'b1);,1
uart_transmitter.v,65,assert property (not_transmitting) else $error("Error: data_in_ready or serial_out is not high when not transmitting");,1
uart_transmitter.v,72,assert property (transmitting) else $error("Error: data_in_ready did not stay low for the correct duration during transmission");,1
fifo.v,61,assert property (write_pointer_stable_when_full) else $error("Error: write pointer changed when FIFO was full");,1
fifo.v,67,assert property (read_pointer_stable_when_empty) else $error("Error: read pointer changed when FIFO was empty");,1
fifo.v,73,assert property (reset_behavior) else $error("Error: read/write pointers were not reset or full signal was not deasserted");,1
adder_testbench.v,29,assert(sum == 15'd2);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
afifo.v,267,assume(f_wclk_step != 0);,1
afifo.v,269,assume(f_rclk_step != 0);,1
afifo.v,280,assume(i_wclk == f_wclk_count[F_CLKBITS-1]);,1
afifo.v,281,assume(i_rclk == f_rclk_count[F_CLKBITS-1]);,1
afifo.v,312,assert(rbin == 0);,1
afifo.v,679,cover(i_wrst_n);,1
afifo.v,682,cover(i_rrst_n);,1
afifo.v,690,cover(o_wfull);,1
afifo.v,704,cover(i_wr);,1
system_tb.v,187,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,188,assert(FPGA_SERIAL_RX == 1'b1);,1
system_tb.v,199,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,200,assert(FPGA_SERIAL_RX == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
adder_testbench.v,29,assert(sum == 15'd2);,1
project.v,118,assume(reset);,1
project.v,257,assume(reset);,1
project.v,768,assume(reset);,1
project.v,1327,assume(reset);,1
ros2_eth_rx_adapter.v,200,assume(~i_rst_n);,1
ros2_eth_rx_adapter.v,202,assume(i_rst_n);,1
ros2_eth_rx_adapter.v,209,assert(i_dout_full_n);,1
ros2_eth_rx_adapter.v,212,assert(i_dout_full_n);,1
ros2_eth_rx_adapter.v,214,assert(i_dout_full_n);,1
ros2_eth_rx_adapter.v,216,assert(i_dout_full_n);,1
ros2_eth_rx_adapter.v,218,assert(i_dout_full_n);,1
queue.v,81,assume(~rst_n);,1
queue.v,104,cover(empty);,1
queue.v,110,cover(empty);,1
queue.v,112,cover(empty);,1
queue.v,114,cover(empty);,1
queue.v,116,cover(empty);,1
queue.v,122,cover(empty);,1
queue.v,123,cover(almost_full);,1
queue.v,124,cover(full);,1
verilog_tutorial.v,724,assert property (p_no_invalid_data) else $error("Invalid data sequence detected!");,1
verilog_tutorial.v,728,assert property (p_no_invalid_data) else $error("Invalid data sequence detected!");,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
deaggregator_tb.v,93,assert(fifo_dout == expected_dout);,1
skew_registers_tb.v,44,assert(dout_w[1] == 2);,1
skew_registers_tb.v,50,assert(dout_w[1] == 3);,1
skew_registers_tb.v,51,assert(dout_w[2] == 3);,1
skew_registers_tb.v,57,assert(dout_w[1] == 4);,1
skew_registers_tb.v,58,assert(dout_w[2] == 4);,1
skew_registers_tb.v,59,assert(dout_w[3] == 4);,1
fifo_tb.v,53,assert(empty_n == 0); // Meaning empty is high assert(full_n == 1); // Meaning fifo is not full // Now we will write 3 data into the fifo and check if it becomes full // after that. Note that we are changing testbench signals on the // negative edge of clock. #20 enq <= 1;,8
fifo_tb.v,62,assert(empty_n == 1);,1
fifo_tb.v,63,assert(full_n == 1);,1
fifo_tb.v,64,assert(dout == 0);,1
fifo_tb.v,67,assert(empty_n == 1);,1
fifo_tb.v,68,assert(full_n == 1);,1
fifo_tb.v,69,assert(dout == 0);,1
fifo_tb.v,72,assert(empty_n == 1);,1
fifo_tb.v,73,assert(full_n == 0);,1
fifo_tb.v,74,assert(dout == 0);,1
fifo_tb.v,80,assert(empty_n == 1);,1
fifo_tb.v,81,assert(full_n == 1);,1
fifo_tb.v,82,assert(dout == 1);,1
fifo_tb.v,84,assert(empty_n == 1);,1
fifo_tb.v,85,assert(full_n == 1);,1
fifo_tb.v,86,assert(dout == 2);,1
fifo_tb.v,88,assert(empty_n == 0);,1
fifo_tb.v,89,assert(full_n == 1);,1
fifo_tb.v,90,assert(dout == 2);,1
fifo_tb.v,99,assert(empty_n == 1);,1
fifo_tb.v,103,assert(empty_n == 0);,1
fifo_tb.v,112,assert(dout == 4);,1
fifo_tb.v,116,assert(dout == 5);,1
fifo_tb.v,119,assert(empty_n == 0);,1
adr_gen_sequential_tb.v,37,assert(adr == 0);,1
ifmap_double_buffer_tb.v,78,assert(rdata == 64'hdeadbeef);,1
ifmap_double_buffer_tb.v,82,assert(rdata == 64'habcdabcd);,1
ifmap_double_buffer_tb.v,103,assert(rdata == 64'hfefefefe);,1
ifmap_double_buffer_tb.v,107,assert(rdata == 64'hbaddadda);,1
ifmap_double_buffer_tb.v,117,assert(rdata == 64'hdeadbeef);,1
ifmap_double_buffer_tb.v,125,assert(rdata == 64'hfefefefe);,1
ifmap_double_buffer_tb.v,136,assert(rdata == 64'hbaddadda);,1
ifmap_double_buffer_tb.v,144,assert(rdata == 64'h12345678);,1
double_buffer_tb.v,76,assert(rdata == 64'hdeadbeef);,1
double_buffer_tb.v,80,assert(rdata == 64'habcdabcd);,1
double_buffer_tb.v,101,assert(rdata == 64'hfefefefe);,1
double_buffer_tb.v,105,assert(rdata == 64'hbaddadda);,1
double_buffer_tb.v,115,assert(rdata == 64'hdeadbeef);,1
double_buffer_tb.v,123,assert(rdata == 64'hfefefefe);,1
double_buffer_tb.v,134,assert(rdata == 64'hbaddadda);,1
double_buffer_tb.v,142,assert(rdata == 64'h12345678);,1
systolic_array_with_skew_tb.v,146,assert(ofmap_out_w[0] == 1*1 + 2*5 + 3* 9 + 4*13);,1
systolic_array_with_skew_tb.v,147,assert(ofmap_out_w[1] == 1*2 + 2*6 + 3*10 + 4*14);,1
systolic_array_with_skew_tb.v,148,assert(ofmap_out_w[2] == 1*3 + 2*7 + 3*11 + 4*15);,1
systolic_array_with_skew_tb.v,149,assert(ofmap_out_w[3] == 1*4 + 2*8 + 3*12 + 4*16);,1
systolic_array_with_skew_tb.v,156,assert(ofmap_out_w[0] == 5*1 + 6*5 + 7* 9 + 8*13);,1
systolic_array_with_skew_tb.v,157,assert(ofmap_out_w[1] == 5*2 + 6*6 + 7*10 + 8*14);,1
systolic_array_with_skew_tb.v,158,assert(ofmap_out_w[2] == 5*3 + 6*7 + 7*11 + 8*15);,1
systolic_array_with_skew_tb.v,159,assert(ofmap_out_w[3] == 5*4 + 6*8 + 7*12 + 8*16);,1
systolic_array_with_skew_tb.v,166,assert(ofmap_out_w[0] == 9*1 + 10*5 + 11* 9 + 12*13);,1
systolic_array_with_skew_tb.v,167,assert(ofmap_out_w[1] == 9*2 + 10*6 + 11*10 + 12*14);,1
systolic_array_with_skew_tb.v,168,assert(ofmap_out_w[2] == 9*3 + 10*7 + 11*11 + 12*15);,1
systolic_array_with_skew_tb.v,169,assert(ofmap_out_w[3] == 9*4 + 10*8 + 11*12 + 12*16);,1
systolic_array_with_skew_tb.v,176,assert(ofmap_out_w[0] == 13*1 + 14*5 + 15* 9 + 16*13);,1
systolic_array_with_skew_tb.v,177,assert(ofmap_out_w[1] == 13*2 + 14*6 + 15*10 + 16*14);,1
systolic_array_with_skew_tb.v,178,assert(ofmap_out_w[2] == 13*3 + 14*7 + 15*11 + 16*15);,1
systolic_array_with_skew_tb.v,179,assert(ofmap_out_w[3] == 13*4 + 14*8 + 15*12 + 16*16);,1
weight_double_buffer_tb.v,78,assert(rdata == 64'hdeadbeef);,1
weight_double_buffer_tb.v,82,assert(rdata == 64'habcdabcd);,1
weight_double_buffer_tb.v,103,assert(rdata == 64'hfefefefe);,1
weight_double_buffer_tb.v,107,assert(rdata == 64'hbaddadda);,1
weight_double_buffer_tb.v,117,assert(rdata == 64'hdeadbeef);,1
weight_double_buffer_tb.v,125,assert(rdata == 64'hfefefefe);,1
weight_double_buffer_tb.v,136,assert(rdata == 64'hbaddadda);,1
weight_double_buffer_tb.v,144,assert(rdata == 64'h12345678);,1
accumulation_buffer_tb.v,84,assert(rdata_wb == 64'hdeadbeef);,1
accumulation_buffer_tb.v,88,assert(rdata_wb == 64'habcdabcd);,1
accumulation_buffer_tb.v,105,assert(rdata == 64'hfefefefe);,1
accumulation_buffer_tb.v,109,assert(rdata == 64'hbaddadda);,1
accumulation_buffer_tb.v,120,assert(rdata_wb == 64'hfefefefe);,1
accumulation_buffer_tb.v,124,assert(rdata_wb == 64'hbaddadda);,1
accumulation_buffer_tb.v,135,assert(rdata_wb == 64'hdeadbeef);,1
accumulation_buffer_tb.v,146,assert(rdata_wb == 64'hfefefefe);,1
accumulation_buffer_tb.v,157,assert(rdata_wb == 64'hbaddadda);,1
accumulation_buffer_tb.v,167,assert(rdata == 64'h12345678);,1
axi2axilite.v,1013,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1018,assert(m_axi_awvalid);,1
axi2axilite.v,1021,assert(!skids_awready);,1
axi2axilite.v,1024,assert(!skids_awready);,1
axi2axilite.v,1026,assert(!skids_awready);,1
axi2axilite.v,1031,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1051,assert(rid == S_AXI_RID);,1
axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
axi2axilite.v,1059,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1064,assert(m_axi_arvalid);,1
axi2axilite.v,1065,assert(!skids_arready);,1
axi2axilite.v,1083,assume(!skids_awvalid);,1
axi2axilite.v,1084,assume(!skids_wvalid);,1
axi2axilite.v,1085,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1086,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1087,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1088,assert(!skidm_bvalid);,1
axi2axilite.v,1089,assert(!S_AXI_BVALID);,1
axi2axilite.v,1098,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1099,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1100,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1132,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1134,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1158,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1160,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
axi_cdma.v,988,assert(!clear_read_pipeline);,1
axi_cdma.v,991,assert(!clear_read_pipeline);,1
axi_cdma.v,994,assert(!clear_read_pipeline);,1
axi_cdma.v,1808,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1812,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1892,assert(!M_AXI_AWVALID);,1
axi_cdma.v,1893,assert(!M_AXI_WVALID);,1
axi_cdma.v,1894,assert(!M_AXI_ARVALID);,1
axi_cdma.v,1913,assert(f_length != 0);,1
axi_cdma.v,1914,assert(f_length[LGLEN] == 0);,1
axi_cdma.v,1916,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1917,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1995,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1996,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1997,assert(f_length[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2004,assert(!extra_realignment_write);,1
axi_cdma.v,2006,assert(!extra_realignment_write);,1
axi_cdma.v,2008,assert(extra_realignment_write);,1
axi_cdma.v,2012,assert(r_partial_outvalid);,1
axi_cdma.v,2019,assert(f_extra_realignment_read);,1
axi_cdma.v,2021,assert(f_extra_realignment_read == extra_realignment_read);,1
axi_cdma.v,2030,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2034,assert(!r_int);,1
axi_cdma.v,2063,assert(M_AXI_WVALID);,1
axi_cdma.v,2081,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
axi_cdma.v,2087,assert(r_len[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2088,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2089,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2095,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2096,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2097,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2103,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2105,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2109,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2114,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2140,assert(reads_remaining_w == 0);,1
axi_cdma.v,2141,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2142,assert(writes_remaining_w == 0);,1
axi_cdma.v,2167,assert(r_partial_outvalid);,1
axi_cdma.v,2169,assert(!fifo_empty || r_abort || r_err);,1
axi_cdma.v,2195,assert(!M_AXI_WVALID);,1
axi_cdma.v,2202,assert(fifo_data_available == 0);,1
axi_cdma.v,2286,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2290,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
axi_cdma.v,2292,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2299,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2302,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2304,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2320,assert(read_address == f_read_address);,1
axi_cdma.v,2322,assert(read_address[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2326,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2331,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2356,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
axi_cdma.v,2371,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
axi_cdma.v,2379,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
axi_cdma.v,2396,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
axi_cdma.v,2403,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2404,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2406,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
axi_cdma.v,2421,assert(readlen_w != 0);,1
axi_cdma.v,2444,assert(!r_done);,1
axi_cdma.v,2446,assert(!r_done);,1
axi_cdma.v,2454,assert(r_done);,1
axi_cdma.v,2466,assert(M_AXI_WSTRB == 0);,1
axi_cdma.v,2484,assert(reads_remaining_w == 0);,1
axi_cdma.v,2486,assert(reads_remaining_w > 0);,1
axi_cdma.v,2489,assert(readlen_w <= reads_remaining_w);,1
axi_cdma.v,2497,assert(M_AXI_BREADY);,1
axi_cdma.v,2501,assert(M_AXI_RREADY);,1
axi_cdma.v,2524,assert(M_AXI_ARVALID);,1
axi_cdma.v,2528,assert(M_AXI_AWVALID);,1
axi_cdma.v,2549,assert(M_AXI_WVALID);,1
axi_cdma.v,2570,assert(!S_AXIL_BVALID);,1
axi_cdma.v,2571,assert(!S_AXIL_RVALID);,1
axi_cdma.v,2573,assert(!M_AXI_AWVALID);,1
axi_cdma.v,2574,assert(!M_AXI_WVALID);,1
axi_cdma.v,2575,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2577,assert(write_bursts_outstanding == 0);,1
axi_cdma.v,2578,assert(write_requests_remaining == 0);,1
axi_cdma.v,2580,assert(!phantom_read);,1
axi_cdma.v,2581,assert(!phantom_write);,1
axi_cdma.v,2582,assert(!r_busy);,1
axi_cdma.v,2583,assert(read_bursts_outstanding == 0);,1
axi_cdma.v,2584,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2586,assert(r_len == 0);,1
axi_cdma.v,2587,assert(zero_len);,1
axi_cdma.v,2589,assert(write_count == 0);,1
axi_cdma.v,2590,assert(!M_AXI_WLAST);,1
axi_cdma.v,2591,assert(M_AXI_AWLEN == 0);,1
axi_cdma.v,2592,assert(!r_write_fifo);,1
axi_cdma.v,2593,assert(r_src_addr == 0);,1
axi_cdma.v,2594,assert(r_dst_addr == 0);,1
axi_cdma.v,2598,assert(ADDRLSB + LGMAXBURST <= 12);,1
axi_cdma.v,2636,assume(f_const_posn < f_length);,1
axi_cdma.v,2674,assert(f_shifted_wstrb[0]);,1
axi_cdma.v,2675,assert(f_shifted_write[7:0] == f_const_byte);,1
axi_cdma.v,2677,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
axi_cdma.v,2712,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
axi_cdma.v,2749,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
axi_cdma.v,2810,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
axi_cdma.v,2822,cover(!r_busy && r_err);,1
axi_cdma.v,2826,cover(!r_busy && r_abort);,1
axi_cdma.v,2830,cover(reads_remaining_w == 0);,1
axi_cdma.v,2834,cover(reads_remaining_w == 0 && fifo_empty);,1
sfifo.v,269,assert(o_fill == f_fill);,1
sfifo.v,273,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,277,assert(o_full == r_full);,1
sfifo.v,284,assert(o_empty == r_empty);,1
sfifo.v,295,assert(r_empty);,1
sfifo.v,299,assert(!r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,308,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,310,assert(o_data == i_data);,1
sfifo.v,366,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,372,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,385,assert(f_first_in_fifo);,1
sfifo.v,387,assert(!f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,401,assert(f_second_in_fifo);,1
sfifo.v,408,assert(f_second_in_fifo);,1
sfifo.v,410,assert(!f_second_in_fifo);,1
sfifo.v,413,assert(f_first_in_fifo);,1
sfifo.v,416,assert(f_second_in_fifo);,1
sfifo.v,419,assert(f_first_in_fifo);,1
sfifo.v,421,assert(o_data == f_first_data);,1
sfifo.v,423,assert(!f_first_in_fifo);,1
sfifo.v,424,assert(o_data == f_second_data);,1
sfifo.v,451,cover(f_was_full && f_empty);,1
skidbuffer.v,251,assume(i_reset);,1
skidbuffer.v,269,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,273,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,279,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,299,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,322,assert(o_ready);,1
skidbuffer.v,353,assert(o_valid == i_valid);,1
skidbuffer.v,363,assert(o_valid);,1
skidbuffer.v,366,assert(!o_valid);,1
skidbuffer.v,377,assert(o_ready);,1
skidbuffer.v,387,assert(o_data == 0);,1
skidbuffer.v,391,assert(w_data == 0);,1
skidbuffer.v,459,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,465,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
axi2axilite.v,1013,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1018,assert(m_axi_awvalid);,1
axi2axilite.v,1021,assert(!skids_awready);,1
axi2axilite.v,1024,assert(!skids_awready);,1
axi2axilite.v,1026,assert(!skids_awready);,1
axi2axilite.v,1031,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1051,assert(rid == S_AXI_RID);,1
axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
axi2axilite.v,1059,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1064,assert(m_axi_arvalid);,1
axi2axilite.v,1065,assert(!skids_arready);,1
axi2axilite.v,1083,assume(!skids_awvalid);,1
axi2axilite.v,1084,assume(!skids_wvalid);,1
axi2axilite.v,1085,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1086,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1087,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1088,assert(!skidm_bvalid);,1
axi2axilite.v,1089,assert(!S_AXI_BVALID);,1
axi2axilite.v,1098,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1099,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1100,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1132,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1134,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1158,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1160,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
sfifo.v,269,assert(o_fill == f_fill);,1
sfifo.v,273,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,277,assert(o_full == r_full);,1
sfifo.v,284,assert(o_empty == r_empty);,1
sfifo.v,295,assert(r_empty);,1
sfifo.v,299,assert(!r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,308,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,310,assert(o_data == i_data);,1
sfifo.v,366,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,372,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,385,assert(f_first_in_fifo);,1
sfifo.v,387,assert(!f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,401,assert(f_second_in_fifo);,1
sfifo.v,408,assert(f_second_in_fifo);,1
sfifo.v,410,assert(!f_second_in_fifo);,1
sfifo.v,413,assert(f_first_in_fifo);,1
sfifo.v,416,assert(f_second_in_fifo);,1
sfifo.v,419,assert(f_first_in_fifo);,1
sfifo.v,421,assert(o_data == f_first_data);,1
sfifo.v,423,assert(!f_first_in_fifo);,1
sfifo.v,424,assert(o_data == f_second_data);,1
sfifo.v,451,cover(f_was_full && f_empty);,1
SeqEqvMiter.v,15,assert property (~NotEqv);,1
TLC.v,168,assert property (~collision);,1
SeqEqvMiter.v,15,assert property (~NotEqv);,1
SeqEqvMiter.v,15,assert property (~NotEqv);,1
TLC.v,168,assert property (~collision);,1
SeqEqvMiter.v,15,assert property (~NotEqv);,1
TLC.v,168,assert property (~collision);,1
system_tb.v,187,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,188,assert(FPGA_SERIAL_RX == 1'b1);,1
system_tb.v,199,assert(FPGA_SERIAL_TX == 1'b1);,1
system_tb.v,200,assert(FPGA_SERIAL_RX == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
fifo_tb.v,284,assert(empty == 1'b1);,1
adder_testbench.v,29,assert(sum == 15'd2);,1
full_adder.v,36,"assert property ({1'b0, in_a} + {1'b0, in_b} + {1'b0, in_carry} == {out_carry, out});",1
mult_32.v,259,assert property(A * B == Result);,1
properties.v,3,assert(outputs[0] == scan_clk_in);,1
properties.v,4,assert(outputs[1] == scan_data_in);,1
properties.v,5,assert(scan_clk_out == inputs[0]);,1
properties.v,6,assert(scan_data_out == inputs[1]);,1
properties.v,7,assert(scan_select == inputs[2]);,1
properties.v,8,assert(scan_latch_en == inputs[3]);,1
properties.v,11,assert(la_scan_data_out == scan_data_in);,1
properties.v,12,assert(scan_clk_out == la_scan_clk_in);,1
properties.v,13,assert(scan_data_out == la_scan_data_in);,1
properties.v,14,assert(scan_select == la_scan_select);,1
properties.v,15,assert(scan_latch_en == la_scan_latch_en);,1
properties.v,18,assert(int_scan_data_out == scan_data_out);,1
properties.v,19,assert(scan_clk_out == int_scan_clk_out);,1
properties.v,20,assert(scan_data_in == int_scan_data_in);,1
properties.v,21,assert(scan_clk_in == int_scan_clk_in);,1
properties.v,22,assert(scan_select == int_scan_select);,1
properties.v,23,assert(scan_latch_en == int_scan_latch_en);,1
properties.v,3,assert(outputs[0] == scan_clk_in);,1
properties.v,4,assert(outputs[1] == scan_data_in);,1
properties.v,5,assert(scan_clk_out == inputs[0]);,1
properties.v,6,assert(scan_data_out == inputs[1]);,1
properties.v,7,assert(scan_select == inputs[2]);,1
properties.v,8,assert(scan_latch_en == inputs[3]);,1
properties.v,11,assert(la_scan_data_out == scan_data_in);,1
properties.v,12,assert(scan_clk_out == la_scan_clk_in);,1
properties.v,13,assert(scan_data_out == la_scan_data_in);,1
properties.v,14,assert(scan_select == la_scan_select);,1
properties.v,15,assert(scan_latch_en == la_scan_latch_en);,1
properties.v,18,assert(int_scan_data_out == scan_data_out);,1
properties.v,19,assert(scan_clk_out == int_scan_clk_out);,1
properties.v,20,assert(scan_data_in == int_scan_data_in);,1
properties.v,21,assert(scan_clk_in == int_scan_clk_in);,1
properties.v,22,assert(scan_select == int_scan_select);,1
properties.v,23,assert(scan_latch_en == int_scan_latch_en);,1
qspi_ctrl.v,298,assert(spi_flash_select + spi_ram_a_select + spi_ram_b_select >= 2);,1
qspi_ctrl.v,303,assert(busy);,1
qspi_ctrl.v,305,assert(!busy);,1
qspi_ctrl.v,314,assume(start_read + start_write < 2);,1
qspi_ctrl.v,319,assert(!busy);,1
qspi_ctrl.v,321,assert(busy);,1
qspi_ctrl.v,332,assert(!spi_clk_out);,1
qspi_ctrl.v,344,assert(spi_flash_select + spi_ram_a_select + spi_ram_b_select == 3);,1
qspi_ctrl.v,345,assert(spi_clk_out == 0);,1
qspi_ctrl.v,348,assert(spi_flash_select + spi_ram_a_select + spi_ram_b_select == 3);,1
qspi_ctrl.v,349,assert(spi_clk_out == 0);,1
qspi_ctrl.v,360,assume(delay_cycles_cfg <= 5);,1
qspi_ctrl.v,428,assert(data_out[7:4] == f_rcv_data[f_rcv_index]);,1
qspi_ctrl.v,429,assert(data_out[3:0] == f_rcv_data[f_rcv_index+1]);,1
spell.v,311,assert (!sleep || !stop);,1
spell.v,322,assume (cycles_per_ms > 0);,1
spell.v,323,assert (delay_counter != 8'hff);,1
spell.v,324,assert (delay_cycles < cycles_per_ms);,1
spell.v,327,assert (!mem_select);,1
spell.v,330,assert (!mem_write_en);,1
arcade_io_device.v,113,cover(test_counter==20);,1
arcade_io_device.v,123,cover(test_counter==20);,1
bus_if.v,106,assume property (memory_read && !memory_done |=> memory_read);,1
bus_if.v,107,assume property (memory_write && !memory_done |=> memory_write);,1
bus_if.v,113,assume property(bus_handshake_req |-> ##[1:5] bus_handshake_ack);,1
bus_if.v,114,assume property(bus_handshake_req |-> ##[1:5] bus_handshake_ack);,1
bus_if.v,115,assume property(bus_handshake_req |-> ##[1:5] bus_handshake_ack);,1
bus_if.v,127,assume property(bus_handshake_req |-> ##[1:5] bus_handshake_ack);,1
bus_if.v,128,assume property(!bus_handshake_req |-> ##[1:5] !bus_handshake_ack);,1
cpu.v,601,assert(0);,1
cpu.v,961,assume property (memory_done |=> !memory_done);,1
cpu.v,962,assume property (debug_req && !cpu_in_debug |=> debug_req);,1
cpu.v,964,assert property (state == CPU_ALU0 || state == CPU_ALU1 |-> iALU || iALUI);,1
cpu.v,965,assert property (state == CPU_ALU0 || state == CPU_ALU1 |-> iALU || iALUI);,1
cpu.v,966,assert property (state == CPU_ALU0 || state == CPU_ALU1 |-> iALU || iALUI);,1
cpu.v,970,assert property (state == CPU_ALU0 || state == CPU_ALU1 |-> iALU || iALUI);,1
cpu.v,971,assert property (state == CPU_HALT |-> iHALT);,1
cpu.v,972,assert property (state == CPU_POP0 || state == CPU_POP1 |-> iPOP);,1
cpu.v,973,assert property (state == CPU_PUSH0 || state == CPU_PUSH1 || state == CPU_PUSH2 |-> iPUSH);,1
cpu.v,974,assert property (state == CPU_PCHL0 || state == CPU_PCHL1 || state == CPU_PCHL2 |-> iPCHL);,1
cpu.v,975,assert property (state == CPU_RET0 || state == CPU_RET1 |-> iRET || iRETcc);,1
cpu.v,976,assert property (state == CPU_UNARY |-> iUNARY);,1
cpu.v,977,assert property (state == CPU_INRDCR0 || state == CPU_INRDCR1 |-> iINR || iDCR);,1
cpu.v,978,assert property (state == CPU_DAD0 || state == CPU_DAD1 || state == CPU_DAD2 || state == CPU_DAD3 || state == CPU_DAD4 || state == CPU_DAD5 || state == CPU_DAD6 || state == CPU_DAD7 |-> iDAD);,1
cpu.v,979,assert property (state == CPU_JMP0 || state == CPU_JMP1 |-> iJMP || iJMPcc);,1
cpu.v,980,assert property (state == CPU_INXDCX0 || state == CPU_INXDCX1 || state == CPU_INXDCX2 || state == CPU_INXDCX3 |-> iINX || iDCX);,1
cpu.v,981,assert property (state == CPU_MOV |-> iMOV);,1
cpu.v,982,assert property (state == CPU_DIRECT0 || state == CPU_DIRECT1 || state == CPU_DIRECT2 |-> iLDA || iSTA || iLHLD || iSHLD);,1
cpu.v,983,assert property (state == CPU_DIRECT3 |-> iLHLD || iSHLD);,1
cpu.v,984,assert property (state == CPU_MVI0 || state == CPU_MVI1 |-> iMVI);,1
cpu.v,985,assert property (state == CPU_LXI0 || state == CPU_LXI1 |-> iLXI);,1
cpu.v,986,assert property (state == CPU_LDAXSTAX0 || state == CPU_LDAXSTAX1 || state == CPU_LDAXSTAX2 |-> iLDAX || iSTAX);,1
cpu.v,987,assert property (state == CPU_SPHL0 || state == CPU_SPHL1 |-> iSPHL);,1
cpu.v,988,assert property (state == CPU_IO0 || state == CPU_IO1 |-> iIN || iOUT);,1
cpu.v,989,assert property (state == CPU_CALL0 || state == CPU_CALL1 || state == CPU_CALL2 || state == CPU_CALL3 |-> iCALL || iCALLcc || iRST);,1
cpu.v,990,assert property (state == CPU_XCHG0 || state == CPU_XCHG1 || state == CPU_XCHG2 || state == CPU_XCHG3 || state == CPU_XCHG4 || state == CPU_XCHG5 |-> iXCHG || iXTHL);,1
cpu.v,991,assert property (state == CPU_EIDI |-> iEI || iDI);,1
cpu.v,999,assume property (memory_read |-> ##[1:3] memory_done);,1
cpu.v,1003,assume property (memory_read |-> ##[1:3] memory_done);,1
cpu.v,1004,assume property (memory_write |-> ##[1:3] memory_done);,1
cpu.v,1005,assert property (state != CPU_FETCH |-> ##[1:40] state == CPU_FETCH || state == CPU_HALT || state == CPU_DEBUG0 || state == CPU_DEBUG1);,1
cpu.v,1006,assert property (debug_req && !cpu_in_debug |-> ##[1:40] cpu_in_debug);,1
arcade_io_device.v,113,cover(test_counter==20);,1
arcade_io_device.v,123,cover(test_counter==20);,1
picorv32.v,2109,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2112,restrict property (resetn != $initstate);,1
picorv32.v,2122,assert (mem_wstrb == 0);,1
picorv32.v,2134,assert (ok);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wstrb == 0);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2160,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2163,assert(!mem_valid || mem_ready);,1
G2.1 - Geniületici TestBench.v,15,assert(expanded == 32'h000000010000);,1
G2.1 - Geniületici TestBench.v,20,assert(expanded == 32'h0000ffff0001);,1
G2.1 - Geniületici TestBench.v,25,assert(expanded == 32'h000012340001);,1
frequency_divider_tb.v,44,assert(0);,1
fifo_tb.v,46,"assert(8'b00000000, 1, 0);",1
fifo_tb.v,50,"assert(8'b00000000, 0, 0);",1
fifo_tb.v,52,"assert(8'b00000000, 0, 0);",1
fifo_tb.v,54,"assert(8'b00000000, 0, 0);",1
fifo_tb.v,56,"assert(8'b00000000, 0, 0);",1
fifo_tb.v,60,"assert(8'b10101010, 0, 0);",1
fifo_tb.v,62,"assert(8'b01010101, 0, 0);",1
fifo_tb.v,64,"assert(8'b11110000, 0, 0);",1
fifo_tb.v,66,"assert(8'b00001111, 1, 0);",1
fifo_tb.v,70,"assert(8'b00001111, 0, 0);",1
fifo_tb.v,72,"assert(8'b00001111, 0, 0);",1
fifo_tb.v,74,"assert(8'b00001111, 0, 0);",1
fifo_tb.v,76,"assert(8'b00001111, 0, 0);",1
fifo_tb.v,78,"assert(8'b00000000, 1, 0);",1
fifo_tb.v,84,"assert(8'b0000000, 0, 0);",1
fifo_tb.v,86,"assert(8'b0000000, 0, 1);",1
fifo_tb.v,94,"assert(i[7:0], 1, 0);",1
fifo_tb.v,96,"assert(i[7:0], 0, 0);",1
counter_tb.v,37,assert(5'b00000);,1
counter_tb.v,39,assert(i[4:0]);,1
counter_tb.v,42,assert(j[4:0]);,1
counter_tb.v,47,assert(5'b00000);,1
counter_tb.v,50,assert(i[4:0]);,1
counter_tb.v,55,assert(5'b00000);,1
counter_tb.v,59,assert(i[4:0]);,1
counter_tb.v,66,assert(i[4:0]);,1
counter_tb.v,72,assert(5'b00000);,1
counter_tb.v,75,assert(i[4:0]);,1
counter_tb.v,78,assert(5'b00000);,1
risc_tb.v,58,assert(0);,1
risc_tb.v,82,assert(0);,1
risc_tb.v,138,assert(0);,1
risc_tb.v,140,assert(1);,1
tdt_dm.v,3486,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3489,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3491,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3494,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3496,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3499,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3501,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3504,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3506,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3509,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3511,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3514,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dtm_idr.v,219,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,222,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,224,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,227,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,229,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,232,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,234,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,237,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,239,assert property(set_op_when_capture_dr_in_dmi_running);,1
tdt_dtm_idr.v,242,assert property(set_op_when_capture_dr_in_dmi_running);,1
spicmd.v,258,assert(!o_rxvalid);,1
spicmd.v,259,assert(!rxvalid || !o_busy);,1
spicmd.v,261,assert(&shift_data);,1
spicmd.v,265,assert(!o_rxvalid);,1
spicmd.v,284,assert(f_send_seq == 0);,1
spicmd.v,287,"assert(shift_data == { 2'b01, f_cmd, f_data });",1
spicmd.v,288,assert(o_busy);,1
spicmd.v,289,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,290,assert(crc_valid_sreg == 5'b1_0000);,1
spicmd.v,293,"assert(shift_data == { f_data, 8'hff });",1
spicmd.v,294,assert(o_busy);,1
spicmd.v,295,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,296,assert(crc_valid_sreg == 5'b1000);,1
spicmd.v,299,"assert(shift_data == { f_data[23:0], 16'hffff });",1
spicmd.v,300,assert(o_busy);,1
spicmd.v,301,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,302,assert(crc_valid_sreg == 5'b100);,1
spicmd.v,305,"assert(shift_data == { f_data[15:0], 24'hffffff });",1
spicmd.v,306,assert(o_busy);,1
spicmd.v,307,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,308,assert(crc_valid_sreg == 5'b10);,1
spicmd.v,311,"assert(shift_data == { f_data[7:0], 32'hffffffff });",1
spicmd.v,312,assert(o_busy);,1
spicmd.v,313,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
spicmd.v,314,assert(crc_valid_sreg == 5'b1);,1
spicmd.v,317,"assert(shift_data == { crc_byte, 32'hffffffff });",1
spicmd.v,318,assert(o_busy);,1
spicmd.v,319,"assert({ o_cmd_sent, almost_sent } == 2'b01);",1
spicmd.v,320,assert(crc_valid_sreg == 5'b0);,1
spicmd.v,323,assert(shift_data == 40'hff_ffff_ffff);,1
spicmd.v,324,assert(crc_valid_sreg == 5'b0);,1
spicmd.v,325,assert(o_cmd_sent);,1
spicmd.v,332,assert(f_send_seq != 0);,1
spicmd.v,333,assert(f_rcv_seq != 0);,1
spicmd.v,337,assert(crc_bit_counter <= 20);,1
spicmd.v,357,assume(i_ll_byte == 8'hff);,1
spicmd.v,365,assert(f_rcv_seq == 1);,1
spicmd.v,366,assert(&o_response);,1
spicmd.v,377,assert(f_rcv_seq != 0);,1
spicmd.v,413,assert(!rx_r1_byte);,1
spicmd.v,416,assert(!rxvalid);,1
spicmd.v,417,assert(f_send_seq != 0);,1
spicmd.v,418,assert(&o_response[31:0]);,1
spicmd.v,421,assert(o_cmd_sent);,1
spicmd.v,422,assert(rx_r1_byte);,1
spicmd.v,423,assert(rx_counter == 0);,1
spicmd.v,424,assert(rx_check_busy);,1
spicmd.v,425,assert(rxvalid);,1
spicmd.v,426,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,430,assert(o_cmd_sent);,1
spicmd.v,431,assert(rx_r1_byte);,1
spicmd.v,432,assert(rx_counter == 0);,1
spicmd.v,433,assert(!rx_check_busy);,1
spicmd.v,434,assert(rxvalid);,1
spicmd.v,435,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,439,assert(rx_r1_byte);,1
spicmd.v,440,assert(rx_counter == 4);,1
spicmd.v,441,assert(!rx_check_busy);,1
spicmd.v,442,assert(!rxvalid);,1
spicmd.v,443,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,444,assert(&o_response[31:0]);,1
spicmd.v,447,assert(rx_r1_byte);,1
spicmd.v,448,assert(rx_counter == 3);,1
spicmd.v,449,assert(!rx_check_busy);,1
spicmd.v,450,assert(!rxvalid);,1
spicmd.v,451,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,452,assert(o_response[7:0] == f_rcv_data[7:0]);,1
spicmd.v,453,assert(&o_response[31:8]);,1
spicmd.v,456,assert(rx_r1_byte);,1
spicmd.v,457,assert(rx_counter == 2);,1
spicmd.v,458,assert(!rx_check_busy);,1
spicmd.v,459,assert(!rxvalid);,1
spicmd.v,460,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,461,assert(o_response[15:0] == f_rcv_data[15:0]);,1
spicmd.v,462,assert(&o_response[31:16]);,1
spicmd.v,465,assert(rx_r1_byte);,1
spicmd.v,466,assert(rx_counter == 1);,1
spicmd.v,467,assert(!rx_check_busy);,1
spicmd.v,468,assert(!rxvalid);,1
spicmd.v,469,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,470,assert(o_response[23:0] == f_rcv_data[23:0]);,1
spicmd.v,471,assert(&o_response[31:24]);,1
spicmd.v,474,assert(rx_r1_byte);,1
spicmd.v,475,assert(rx_counter == 0);,1
spicmd.v,476,assert(!rx_check_busy);,1
spicmd.v,477,assert(rxvalid);,1
spicmd.v,478,assert(o_response[39:32] == f_rcv_data[39:32]);,1
spicmd.v,480,assert(rxvalid == (rx_counter == 0));,1
spicmd.v,494,cover(o_cmd_sent);,1
spicmd.v,495,cover(f_rcv_seq == 1);,1
spicmd.v,496,cover(f_rcv_seq == 2);,1
spicmd.v,497,cover(f_rcv_seq == 3);,1
spicmd.v,498,cover(f_rcv_seq == 4);,1
spicmd.v,499,cover(f_rcv_seq == 5);,1
spicmd.v,500,cover(f_rcv_seq == 6);,1
spicmd.v,501,cover(f_rcv_seq == 7);,1
spicmd.v,502,cover(f_rcv_seq == 8);,1
spicmd.v,506,cover(o_rxvalid && f_cmd == 0 && f_data == 0);,1
sdckgen.v,203,assume(i_reset);,1
sdckgen.v,207,assume(i_cfg_clk90);,1
sdckgen.v,214,assert(o_ckstb);,1
sdckgen.v,241,assert(counter[NCTR-1] == 1'b0);,1
spitxdata.v,410,assert(!o_ll_stb);,1
spitxdata.v,411,assert(!o_busy);,1
spitxdata.v,412,assert(rdvalid == 0);,1
spitxdata.v,413,assert(!o_rxvalid);,1
spitxdata.v,419,assert(rdvalid == 0);,1
spitxdata.v,420,assert(!o_rxvalid);,1
spitxdata.v,422,assert(fill == 0);,1
spitxdata.v,424,assert(fill == 5'h10);,1
spitxdata.v,426,assert(fill == 0);,1
spitxdata.v,427,assert(crc_fill == 0);,1
spitxdata.v,474,assert(o_ll_stb);,1
spitxdata.v,475,assert(!crc_stb);,1
spitxdata.v,480,assert(!o_ll_stb || i_ll_busy);,1
spitxdata.v,489,assert(crc_fill <= 1);,1
spitxdata.v,497,assert(rdvalid == 0);,1
spitxdata.v,512,assert(received_token);,1
spitxdata.v,516,assert(data_sent);,1
spitxdata.v,521,assert(data_read);,1
spitxdata.v,522,assert(!crc_stb);,1
spitxdata.v,523,assert(!crc_active);,1
spitxdata.v,528,assert(&fill[4:1]);,1
spitxdata.v,530,assert(&fill[4:2]);,1
spitxdata.v,532,assert(&fill[4:3]);,1
spitxdata.v,535,assert(crc_fill <= 5'h10);,1
spitxdata.v,539,assert(crc_flag);,1
spitxdata.v,540,assert(!crc_stb);,1
spitxdata.v,541,assert(!crc_active);,1
spitxdata.v,547,assert(!crc_stb);,1
spitxdata.v,548,assert(all_mem_read);,1
spitxdata.v,549,assert(!crc_active);,1
spitxdata.v,558,assert(lastaddr);,1
spitxdata.v,562,assert(!all_mem_read);,1
spitxdata.v,572,assert(f_lgblksz >= 3);,1
spitxdata.v,576,assert(f_lgblksz_m3[2:0] == r_lgblksz_m3);,1
spitxdata.v,592,assert(fill[4]);,1
spitxdata.v,596,assert(fill[DW/8]);,1
spitxdata.v,604,assert(fill[k-1:0]==0);,1
spitxdata.v,609,assert(!crc_stb);,1
spitxdata.v,631,assume(!f_read_check);,1
spitxdata.v,651,assert(rdvalid != 0);,1
spitxdata.v,652,assert(fill == 5'h10);,1
spitxdata.v,655,assert(o_ll_stb);,1
spitxdata.v,656,assert(rdvalid == 0);,1
spitxdata.v,657,assert(fill == 5'h1f);,1
spitxdata.v,659,assert(gearbox[DW+8-1:8] == f_read_data);,1
spitxdata.v,661,assert(gearbox[DW-1:0] == f_read_data);,1
spitxdata.v,664,assert(o_ll_stb);,1
spitxdata.v,665,assert(rdvalid == 0);,1
spitxdata.v,666,assert(fill == 5'h1e);,1
spitxdata.v,668,assert(gearbox[DW-1:0] == f_read_data);,1
spitxdata.v,670,assert(gearbox[8+DW-1:8] == f_read_data);,1
spitxdata.v,673,assert(o_ll_stb);,1
spitxdata.v,674,assert(rdvalid == 0);,1
spitxdata.v,675,assert(fill == 5'h1c);,1
spitxdata.v,677,assert(gearbox[DW-8-1:0] == f_read_data[31:8]);,1
spitxdata.v,679,assert(gearbox[8+DW-1:16] == f_read_data[23:0]);,1
spitxdata.v,682,assert(o_ll_stb);,1
spitxdata.v,683,assert(rdvalid == 0);,1
spitxdata.v,684,assert(fill == 5'h18);,1
spitxdata.v,686,assert(gearbox[DW-16-1:0] == f_read_data[31:16]);,1
spitxdata.v,688,assert(gearbox[8+DW-1:24] == f_read_data[15:0]);,1
spitxdata.v,691,assert(o_ll_stb);,1
spitxdata.v,692,assert(fill[4]);,1
spitxdata.v,694,assert(gearbox[DW-24-1:0] == f_read_data[31:24]);,1
spitxdata.v,696,assert(gearbox[8+DW-1:DW] == f_read_data[7:0]);,1
spitxdata.v,703,assert(0);,1
spitxdata.v,713,cover(f_lgblksz == 4 && o_rxvalid);,1
spitxdata.v,714,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h00);,1
spitxdata.v,715,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h01);,1
spitxdata.v,716,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h02);,1
spitxdata.v,717,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h03);,1
spitxdata.v,718,cover(o_busy && f_lgblksz == 4 && lastaddr);,1
spitxdata.v,719,cover(o_busy && f_lgblksz == 4 && crc_stb);,1
spitxdata.v,720,cover(o_busy && f_lgblksz == 4 && all_mem_read);,1
spitxdata.v,721,cover(o_busy && f_lgblksz == 4 && crc_flag);,1
spitxdata.v,722,cover(o_busy && f_lgblksz == 4 && data_read);,1
spitxdata.v,723,cover(o_busy && f_lgblksz == 4 && data_sent);,1
spitxdata.v,724,cover(o_busy && f_lgblksz == 4 && received_token);,1
spitxdata.v,725,cover(o_busy && f_lgblksz == 4 && all_idle);,1
spitxdata.v,726,cover(!o_busy && f_lgblksz == 4 && all_idle);,1
sdspi.v,876,assert(!tx_busy || !rx_busy);,1
sdspi.v,879,assert(!tx_start || !rx_start);,1
sdspi.v,884,assert(!tx_start && !rx_start);,1
sdspi.v,885,assert(!tx_busy && !rx_busy);,1
sdspi.v,887,assert(!rx_start && !rx_busy);,1
sdspi.v,889,assert(!tx_start && !tx_busy);,1
sdspi.v,894,assert(r_cmd_busy);,1
sdspi.v,898,assert(r_lgblklen >= 3);,1
sdspi.v,899,assert(r_lgblklen <= 9);,1
sdspi.v,905,assert(spi_read_addr[LGFIFOLN-1:0] <= 1);,1
sdspi.v,906,assert(spi_write_addr[LGFIFOLN-1:0] <= 1);,1
sdspi.v,932,assert(ll_cmd_stb);,1
sdspi.v,933,assert(ll_cmd_dat == f_cmd_byte);,1
sdspi.v,1000,assert(!cmd_busy && !tx_busy && !rx_busy);,1
sdspi.v,1011,cover(cmd_sent && !r_cmd_busy);,1
sdspi.v,1012,cover(tx_busy && tx_start);,1
sdspi.v,1013,cover(rx_busy && rx_start);,1
sdtxframe.v,487,assert(ck_valid);,1
sdtxframe.v,864,assume(i_reset);,1
sdtxframe.v,873,assume(!i_cfg_ddr || i_cfg_spd > 1);,1
sdtxframe.v,874,assume(i_cfg_spd > 0);,1
sdtxframe.v,879,assume(i_cfg_width != 2'b11);,1
sdtxframe.v,885,assert(cfg_period <= P_4D);,1
sdtxframe.v,889,assume(i_en);,1
sdtxframe.v,902,assert(i_cfg_ddr == cfg_ddr);,1
sdtxframe.v,903,assert(i_cfg_width == cfg_width);,1
sdtxframe.v,908,assert(cfg_width != 2'b11);,1
sdtxframe.v,915,assert(cfg_ddr);,1
sdtxframe.v,923,assert(cfg_period == 2'b10);,1
sdtxframe.v,927,assert(cfg_period == 2'b01);,1
sdtxframe.v,929,assert(cfg_period == 2'b00);,1
sdtxframe.v,941,assume(!i_ckstb || !i_hlfck);,1
sdtxframe.v,954,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
sdtxframe.v,955,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
sdtxframe.v,956,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
sdtxframe.v,957,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
sdtxframe.v,966,assume(!i_ckstb);,1
sdtxframe.v,968,assume(i_ckstb);,1
sdtxframe.v,977,assume(i_ckstb && i_hlfck); // On every clock period end // }}} //////////////////////////////////////////////////////////////////////// // // IO properties // {{{ // Only change on a clock // {{{ always @(posedge i_clk) if (!f_past_valid || $past(i_reset)) assert(!tx_valid); else if (!$past(i_ckstb) && !$past(i_hlfck && cfg_ddr)) begin assert($stable(tx_valid)); assert($stable(tx_data)); end // }}},20
sdtxframe.v,1004,assert(&tx_data);,1
sdtxframe.v,1007,assert(tx_data[31:25] == 7'h7f);,1
sdtxframe.v,1008,assert(tx_data[23:17] == 7'h7f);,1
sdtxframe.v,1009,assert(tx_data[15: 9] == 7'h7f);,1
sdtxframe.v,1010,assert(tx_data[ 7: 1] == 7'h7f);,1
sdtxframe.v,1013,assert(tx_data[31:28] == 4'hf);,1
sdtxframe.v,1014,assert(tx_data[23:20] == 4'hf);,1
sdtxframe.v,1015,assert(tx_data[15:12] == 4'hf);,1
sdtxframe.v,1016,assert(tx_data[ 7: 4] == 4'hf);,1
sdtxframe.v,1029,assert(tx_data[31:24] == tx_data[ 7: 0]);,1
sdtxframe.v,1030,assert(tx_data[23:16] == tx_data[ 7: 0]);,1
sdtxframe.v,1031,assert(tx_data[15: 8] == tx_data[ 7: 0]);,1
sdtxframe.v,1034,assert(tx_data[31:24] == tx_data[23:16]);,1
sdtxframe.v,1035,assert(tx_data[15: 8] == tx_data[ 7: 0]);,1
sdtxframe.v,1043,assert(tx_valid && pre_valid);,1
sdtxframe.v,1047,assert(!tx_valid);,1
sdtxframe.v,1058,assume(i_en);,1
sdtxframe.v,1062,assume(!S_VALID);,1
sdtxframe.v,1070,assert(fs_count == 0);,1
sdtxframe.v,1077,assert(fcrc_count == fs_count);,1
sdtxframe.v,1079,assert(fcrc_count >= fs_count);,1
sdtxframe.v,1086,assume(!S_VALID);,1
sdtxframe.v,1087,assume(!i_en);,1
sdtxframe.v,1090,assume(S_VALID);,1
sdtxframe.v,1094,assume(S_VALID);,1
sdtxframe.v,1098,assume(!S_VALID);,1
sdtxframe.v,1102,assume(!S_VALID || S_LAST);,1
sdtxframe.v,1106,assert(fs_last);,1
sdtxframe.v,1110,assert(!fs_last);,1
sdtxframe.v,1114,assert(fs_last);,1
sdtxframe.v,1118,assert(!fs_last && S_VALID && fs_count > 0);,1
sdtxframe.v,1128,assume(fc_data == S_DATA);,1
sdtxframe.v,1144,assert(ck_counts == ((cfg_ddr && f_pending_half) ? 1:0));,1
sdtxframe.v,1148,assert(fs_count <= 1);,1
sdtxframe.v,1149,assert(fd_count == 0);,1
sdtxframe.v,1172,assert(pstate != P_IDLE);,1
sdtxframe.v,1175,assert(pstate != P_IDLE);,1
sdtxframe.v,1188,assert(pstate != P_IDLE);,1
sdtxframe.v,1190,assert(pre_data == fc_data);,1
sdtxframe.v,1192,assert(pstate == P_IDLE || pstate == P_LAST);,1
sdtxframe.v,1199,assert(pre_count <= 7);,1
sdtxframe.v,1203,assert(pre_valid);,1
sdtxframe.v,1209,assert(pre_count == (cfg_ddr) ? 7 : 3);,1
sdtxframe.v,1216,assert(pre_valid);,1
sdtxframe.v,1218,assert(pre_count <= (cfg_ddr) ? 7 : 3);,1
sdtxframe.v,1225,assert(pre_count == 0);,1
sdtxframe.v,1234,assert(fd_count == 0);,1
sdtxframe.v,1243,assert(pre_valid);,1
sdtxframe.v,1244,assert(fcrc_count == 1 + f_loaded_count[14:5]);,1
sdtxframe.v,1247,assert(ck_counts == 0);,1
sdtxframe.v,1267,assert(ck_counts == 0);,1
sdtxframe.v,1276,assert(ck_counts <= 7);,1
sdtxframe.v,1279,assert(ck_counts <= 3);,1
sdtxframe.v,1286,assert(ck_counts <= 15);,1
sdtxframe.v,1289,assert(ck_counts <= 3);,1
sdtxframe.v,1292,assert(ck_counts <= 1);,1
sdtxframe.v,1299,assert(ck_counts <= 7);,1
sdtxframe.v,1302,assert(ck_counts <= 1);,1
sdtxframe.v,1305,assert(ck_counts == 0);,1
sdtxframe.v,1307,"assert(fd_count + 32 == { fp_count, 5'h0 });",1
sdtxframe.v,1309,assert(ck_data == fc_data);,1
sdtxframe.v,1362,assert(ck_counts[0] == f_pending_half || (!pre_valid && pstate == P_LAST && ck_counts==0));,2
sdtxframe.v,1368,assert(ck_counts[0] == f_pending_half || (!pre_valid && pstate == P_LAST && ck_counts==0));,2
sdtxframe.v,1410,cover(1);,1
sdtxframe.v,1411,cover(1);,1
sdtxframe.v,1412,cover(1);,1
sdtxframe.v,1417,cover(1);,1
sdtxframe.v,1418,cover(1);,1
sdtxframe.v,1419,cover(1);,1
sdtxframe.v,1426,cover(1);,1
sdtxframe.v,1428,cover(1);,1
sdtxframe.v,1429,cover(fs_count == 1);,1
sdtxframe.v,1430,cover(fs_count == 2);,1
sdtxframe.v,1431,cover(fs_count == 3); // !!! cover(fs_count == 4); // !!! cover(S_VALID && S_LAST);,3
sdtxframe.v,1434,cover(!S_VALID);,1
sdtxframe.v,1436,cover(pstate == P_CRC);,1
sdtxframe.v,1437,cover(pstate == P_LAST); // !!! cover(!pre_valid); // !!! end WIDTH_8W: cover(1);,4
sdrxframe.v,370,assert(rnxt_strb == 0);,1
sdrxframe.v,371,assert(rnxt_data == 0);,1
sdrxframe.v,374,assert(next_subaddr == 1);,1
sdrxframe.v,376,assert(rnxt_data == 0);,1
sdrxframe.v,700,assume(i_reset);,1
sdrxframe.v,709,assume(!i_cfg_ds);,1
sdrxframe.v,713,assume(!i_rx_en);,1
sdrxframe.v,715,assume(!i_rx_en);,1
sdrxframe.v,717,assume(i_rx_en);,1
sdrxframe.v,728,assume(i_length > 0);,1
sdrxframe.v,731,assume(i_length[1:0] == 2'b00);,1
sdrxframe.v,733,assume(i_length[0] == 1'b0);,1
sdrxframe.v,742,assume(i_cfg_width != 2'b11);,1
sdrxframe.v,743,assume(i_length <= 16'h8000);,1
sdrxframe.v,760,assert(f_state);,1
sdrxframe.v,766,assert(busy || r_watchdog);,1
sdrxframe.v,776,assume(!r_watchdog);,1
sdrxframe.v,780,assume(o_ercode);,1
sdrxframe.v,793,assume(i_rx_strb == 0);,1
sdrxframe.v,794,assume(S_ASYNC_VALID == 0);,1
sdrxframe.v,799,assume(!i_rx_strb[0]);,1
sdrxframe.v,803,assume(!S_ASYNC_VALID);,1
sdrxframe.v,840,assert(f_count[4:0] == 0);,1
sdrxframe.v,843,assert(f_count[2:0] == sync_fill[2:0]);,1
sdrxframe.v,844,assert(f_count[2:0] == sync_fill[2:0]);,1
sdrxframe.v,848,assert(f_count[2:0] == sync_fill[2:0]);,1
sdrxframe.v,867,assert(!s2_valid);,1
sdrxframe.v,873,assert(sync_fill == 0);,1
sdrxframe.v,908,assert(f_count[LGLEN+3:3] == f_recount);,1
sdrxframe.v,921,assert(rail_count <= (i_length*8));,1
sdrxframe.v,949,assert(rail_count <= i_length);,1
sdrxframe.v,955,assert(!load_crc);,1
sdrxframe.v,960,assert(!load_crc);,1
sdrxframe.v,961,assert(!pending_crc);,1
sdrxframe.v,973,assert(pending_crc);,1
sdrxframe.v,982,assert(rail_count + f_count == i_length*8);,1
sdrxframe.v,983,assert(f_count <= i_length*8);,1
sdrxframe.v,984,assert(rail_count <= i_length*8);,1
sdrxframe.v,987,assert(rail_count + f_count == i_length*8+16);,1
sdrxframe.v,988,assert(f_count <= i_length*8+16);,1
sdrxframe.v,989,assert(rail_count <= i_length*8+16);,1
sdrxframe.v,992,assert(rail_count + f_count == i_length*8+32);,1
sdrxframe.v,993,assert(f_count <= i_length*8+32);,1
sdrxframe.v,994,assert(rail_count <= i_length*8+32);,1
sdrxframe.v,999,assert(rail_count <= i_length*2);,1
sdrxframe.v,1004,assert(rail_count <= i_length*2+16);,1
sdrxframe.v,1009,assert(rail_count <= i_length*2+32);,1
sdrxframe.v,1014,assert(rail_count <= i_length);,1
sdrxframe.v,1019,assert(rail_count <= i_length+16);,1
sdrxframe.v,1024,assert(rail_count <= i_length+32);,1
sdrxframe.v,1026,assert(!mem_full);,1
sdrxframe.v,1039,assert(!mem_full);,1
sdrxframe.v,1051,assert(f_next_subaddr == next_subaddr);,1
sdrxframe.v,1055,assert(o_mem_valid);,1
sdrxframe.v,1059,"assert({ mem_addr, subaddr } == 0);",1
sdrxframe.v,1063,"assert({ mem_full, o_mem_addr, subaddr } == fmem_count);",1
sdrxframe.v,1067,assert(!o_mem_valid);,1
sdrxframe.v,1069,assert(o_mem_strb != 0);,1
sdrxframe.v,1096,assume(i_rx_data[8] == fc_data[7]);,1
sdrxframe.v,1098,assume(i_rx_data[8] == fc_data[6]);,1
sdrxframe.v,1100,assume(i_rx_data[8] == fc_data[5]);,1
sdrxframe.v,1102,assume(i_rx_data[8] == fc_data[4]);,1
sdrxframe.v,1104,assume(i_rx_data[8] == fc_data[3]);,1
sdrxframe.v,1106,assume(i_rx_data[8] == fc_data[2]);,1
sdrxframe.v,1108,assume(i_rx_data[8] == fc_data[1]);,1
sdrxframe.v,1110,assume(i_rx_data[8] == fc_data[0]);,1
sdrxframe.v,1113,assume(i_rx_data[0] == fc_data[7]);,1
sdrxframe.v,1115,assume(i_rx_data[0] == fc_data[6]);,1
sdrxframe.v,1117,assume(i_rx_data[0] == fc_data[5]);,1
sdrxframe.v,1119,assume(i_rx_data[0] == fc_data[4]);,1
sdrxframe.v,1121,assume(i_rx_data[0] == fc_data[3]);,1
sdrxframe.v,1123,assume(i_rx_data[0] == fc_data[2]);,1
sdrxframe.v,1125,assume(i_rx_data[0] == fc_data[1]);,1
sdrxframe.v,1127,assume(i_rx_data[0] == fc_data[0]);,1
sdrxframe.v,1136,assume(i_rx_data[11:8] == fc_data[7:4]);,1
sdrxframe.v,1138,assume(i_rx_data[11:8] == fc_data[3:0]);,1
sdrxframe.v,1141,assume(i_rx_data[ 3: 0] == fc_data[7:4]);,1
sdrxframe.v,1143,assume(i_rx_data[ 3: 0] == fc_data[3:0]);,1
sdrxframe.v,1151,assume(i_rx_data[15:8] == fc_data);,1
sdrxframe.v,1153,assume(i_rx_data[ 7:0] == fc_data);,1
sdrxframe.v,1179,assert(sync_sreg[3:0] == fc_data[7:4]);,1
sdrxframe.v,1198,assert(fmem_data[MW-1:MW-8] == fc_data);,1
sdrxframe.v,1199,assert(fmem_strb);,1
sdrxframe.v,1213,cover(!i_crc_en);,1
sdrxframe.v,1214,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1218,cover(!i_crc_en);,1
sdrxframe.v,1219,cover(fc_posn == 0 && fc_data == 8'hff);,1
sdrxframe.v,1220,cover(fc_posn == 0 && fc_data == 8'ha5);,1
sdrxframe.v,1221,cover(fc_posn == 0 && fc_data == 8'h5a);,1
sdrxframe.v,1222,cover(fc_posn == 0 && fc_data == 8'h7e);,1
sdrxframe.v,1223,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1227,cover(!i_crc_en);,1
sdrxframe.v,1228,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1232,cover(!i_crc_en);,1
sdrxframe.v,1233,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1237,cover(!i_crc_en);,1
sdrxframe.v,1238,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1242,cover(!i_crc_en);,1
sdrxframe.v,1243,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
sdrxframe.v,1264,cover(!i_crc_en);,1
sdrxframe.v,1265,cover(o_err);,1
sdrxframe.v,1266,cover(i_crc_en && !o_err);,1
sdcmd.v,499,assert(!r_self_request);,1
sdcmd.v,703,assume(i_reset);,1
sdcmd.v,708,assume(!i_cmd_request);,1
sdcmd.v,709,assert(!active);,1
sdcmd.v,717,assume(!i_cmd_request);,1
sdcmd.v,720,assume(i_cmd_request);,1
sdcmd.v,740,assume(i_cmd_request);,1
sdcmd.v,741,assume(i_cmd_type == R_NONE);,1
sdcmd.v,754,assert(!f_busy);,1
sdcmd.v,755,assert(!r_busy);,1
sdcmd.v,756,assert(!o_done);,1
sdcmd.v,759,assert(!r_busy);,1
sdcmd.v,761,assert(!active);,1
sdcmd.v,764,assert(!r_busy);,1
sdcmd.v,765,assert(!f_busy);,1
sdcmd.v,771,assert(!o_err && o_ercode == 2'b00);,1
sdcmd.v,775,assert(o_done);,1
sdcmd.v,779,assert(o_ercode == ECODE_TIMEOUT);,1
sdcmd.v,783,assert(!o_cmd_response);,1
sdcmd.v,803,assume(!S_ASYNC_VALID && i_cmd_strb == 0);,1
sdcmd.v,807,assume(!i_cmd_strb[0]);,1
sdcmd.v,811,assert(!cfg_ds);,1
sdcmd.v,815,assume(!S_ASYNC_VALID);,1
sdcmd.v,845,assert(&tx_sreg);,1
sdcmd.v,846,assert(!o_cmd_en);,1
sdcmd.v,847,assert(o_cmd_data == 2'b11);,1
sdcmd.v,849,assert(o_cmd_en);,1
sdcmd.v,850,assert(tx_sreg == f_tx_now);,1
sdcmd.v,861,assert(!resp_count[0]);,1
sdcmd.v,865,assume(i_cmd_strb != 2'b11);,1
sdcmd.v,873,assert(r_busy);,1
sdcmd.v,879,assert(!o_mem_valid);,1
sdcmd.v,882,assert(resp_count == 0);,1
sdcmd.v,886,assert(mem_addr == 0);,1
sdcmd.v,889,assert(mem_addr == 4);,1
sdcmd.v,897,assert(resp_count == 0);,1
sdcmd.v,902,assert(w_done || r_done);,1
sdcmd.v,907,assert(w_done || r_done);,1
sdcmd.v,912,assert(cmd_type == R_R2);,1
sdcmd.v,916,assert(!waiting_on_response);,1
sdcmd.v,918,assert(waiting_on_response);,1
sdcmd.v,922,assert(w_done || r_done);,1
sdcmd.v,927,assert(o_mem_addr <= 3);,1
sdcmd.v,933,assert(srcount <= 48);,1
sdcmd.v,938,assert(srcount[0] == 1'b0);,1
sdcmd.v,942,assert(!waiting_on_response);,1
sdcmd.v,949,assert(!rx_timeout);,1
sdcmd.v,953,assert(!o_err && o_ercode == 2'b00);,1
sdcmd.v,960,assert(!r_done);,1
sdcmd.v,964,assert(!r_done);,1
sdcmd.v,971,assert(!r_done);,1
sdcmd.v,976,assert(!r_done);,1
sdcmd.v,981,assert(!waiting_on_response);,1
sdcmd.v,990,assert(r_busy);,1
sdcmd.v,995,assert(!o_done);,1
sdcmd.v,1001,assert(f_busy == r_busy);,1
sdcmd.v,1005,assert(o_ercode != ECODE_OKAY);,1
sdcmd.v,1017,cover(i_cmd_type == R_NONE);,1
sdcmd.v,1022,cover(i_cmd_type == R_R1 && !o_err);,1
sdcmd.v,1023,cover(i_cmd_type == R_R1 && o_err && o_ercode == ECODE_BADCRC);,1
sdcmd.v,1024,cover(i_cmd_type == R_R1 && o_err && o_ercode== ECODE_FRAMEERR);,1
sdcmd.v,1027,cover(i_cmd_type == R_R2 && !o_err);,1
sdcmd.v,1028,cover(i_cmd_type == R_R2 && o_err && o_ercode == ECODE_BADCRC);,1
sdcmd.v,1029,cover(i_cmd_type == R_R2 && o_err && o_ercode== ECODE_FRAMEERR);,1
sdcmd.v,1034,cover(!o_busy);,1
exportspi.v,876,assert(!tx_busy || !rx_busy);,1
exportspi.v,879,assert(!tx_start || !rx_start);,1
exportspi.v,884,assert(!tx_start && !rx_start);,1
exportspi.v,885,assert(!tx_busy && !rx_busy);,1
exportspi.v,887,assert(!rx_start && !rx_busy);,1
exportspi.v,889,assert(!tx_start && !tx_busy);,1
exportspi.v,894,assert(r_cmd_busy);,1
exportspi.v,898,assert(r_lgblklen >= 3);,1
exportspi.v,899,assert(r_lgblklen <= 9);,1
exportspi.v,905,assert(spi_read_addr[LGFIFOLN-1:0] <= 1);,1
exportspi.v,906,assert(spi_write_addr[LGFIFOLN-1:0] <= 1);,1
exportspi.v,932,assert(ll_cmd_stb);,1
exportspi.v,933,assert(ll_cmd_dat == f_cmd_byte);,1
exportspi.v,1000,assert(!cmd_busy && !tx_busy && !rx_busy);,1
exportspi.v,1011,cover(cmd_sent && !r_cmd_busy);,1
exportspi.v,1012,cover(tx_busy && tx_start);,1
exportspi.v,1013,cover(rx_busy && rx_start);,1
exportspi.v,1294,assert(!o_rxvalid);,1
exportspi.v,1295,assert(!rxvalid || !o_busy);,1
exportspi.v,1297,assert(&shift_data);,1
exportspi.v,1301,assert(!o_rxvalid);,1
exportspi.v,1320,assert(f_send_seq == 0);,1
exportspi.v,1323,"assert(shift_data == { 2'b01, f_cmd, f_data });",1
exportspi.v,1324,assert(o_busy);,1
exportspi.v,1325,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1326,assert(crc_valid_sreg == 5'b1_0000);,1
exportspi.v,1329,"assert(shift_data == { f_data, 8'hff });",1
exportspi.v,1330,assert(o_busy);,1
exportspi.v,1331,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1332,assert(crc_valid_sreg == 5'b1000);,1
exportspi.v,1335,"assert(shift_data == { f_data[23:0], 16'hffff });",1
exportspi.v,1336,assert(o_busy);,1
exportspi.v,1337,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1338,assert(crc_valid_sreg == 5'b100);,1
exportspi.v,1341,"assert(shift_data == { f_data[15:0], 24'hffffff });",1
exportspi.v,1342,assert(o_busy);,1
exportspi.v,1343,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1344,assert(crc_valid_sreg == 5'b10);,1
exportspi.v,1347,"assert(shift_data == { f_data[7:0], 32'hffffffff });",1
exportspi.v,1348,assert(o_busy);,1
exportspi.v,1349,"assert({ o_cmd_sent, almost_sent } == 2'b00);",1
exportspi.v,1350,assert(crc_valid_sreg == 5'b1);,1
exportspi.v,1353,"assert(shift_data == { crc_byte, 32'hffffffff });",1
exportspi.v,1354,assert(o_busy);,1
exportspi.v,1355,"assert({ o_cmd_sent, almost_sent } == 2'b01);",1
exportspi.v,1356,assert(crc_valid_sreg == 5'b0);,1
exportspi.v,1359,assert(shift_data == 40'hff_ffff_ffff);,1
exportspi.v,1360,assert(crc_valid_sreg == 5'b0);,1
exportspi.v,1361,assert(o_cmd_sent);,1
exportspi.v,1368,assert(f_send_seq != 0);,1
exportspi.v,1369,assert(f_rcv_seq != 0);,1
exportspi.v,1373,assert(crc_bit_counter <= 20);,1
exportspi.v,1393,assume(i_ll_byte == 8'hff);,1
exportspi.v,1401,assert(f_rcv_seq == 1);,1
exportspi.v,1402,assert(&o_response);,1
exportspi.v,1413,assert(f_rcv_seq != 0);,1
exportspi.v,1449,assert(!rx_r1_byte);,1
exportspi.v,1452,assert(!rxvalid);,1
exportspi.v,1453,assert(f_send_seq != 0);,1
exportspi.v,1454,assert(&o_response[31:0]);,1
exportspi.v,1457,assert(o_cmd_sent);,1
exportspi.v,1458,assert(rx_r1_byte);,1
exportspi.v,1459,assert(rx_counter == 0);,1
exportspi.v,1460,assert(rx_check_busy);,1
exportspi.v,1461,assert(rxvalid);,1
exportspi.v,1462,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1466,assert(o_cmd_sent);,1
exportspi.v,1467,assert(rx_r1_byte);,1
exportspi.v,1468,assert(rx_counter == 0);,1
exportspi.v,1469,assert(!rx_check_busy);,1
exportspi.v,1470,assert(rxvalid);,1
exportspi.v,1471,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1475,assert(rx_r1_byte);,1
exportspi.v,1476,assert(rx_counter == 4);,1
exportspi.v,1477,assert(!rx_check_busy);,1
exportspi.v,1478,assert(!rxvalid);,1
exportspi.v,1479,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1480,assert(&o_response[31:0]);,1
exportspi.v,1483,assert(rx_r1_byte);,1
exportspi.v,1484,assert(rx_counter == 3);,1
exportspi.v,1485,assert(!rx_check_busy);,1
exportspi.v,1486,assert(!rxvalid);,1
exportspi.v,1487,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1488,assert(o_response[7:0] == f_rcv_data[7:0]);,1
exportspi.v,1489,assert(&o_response[31:8]);,1
exportspi.v,1492,assert(rx_r1_byte);,1
exportspi.v,1493,assert(rx_counter == 2);,1
exportspi.v,1494,assert(!rx_check_busy);,1
exportspi.v,1495,assert(!rxvalid);,1
exportspi.v,1496,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1497,assert(o_response[15:0] == f_rcv_data[15:0]);,1
exportspi.v,1498,assert(&o_response[31:16]);,1
exportspi.v,1501,assert(rx_r1_byte);,1
exportspi.v,1502,assert(rx_counter == 1);,1
exportspi.v,1503,assert(!rx_check_busy);,1
exportspi.v,1504,assert(!rxvalid);,1
exportspi.v,1505,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1506,assert(o_response[23:0] == f_rcv_data[23:0]);,1
exportspi.v,1507,assert(&o_response[31:24]);,1
exportspi.v,1510,assert(rx_r1_byte);,1
exportspi.v,1511,assert(rx_counter == 0);,1
exportspi.v,1512,assert(!rx_check_busy);,1
exportspi.v,1513,assert(rxvalid);,1
exportspi.v,1514,assert(o_response[39:32] == f_rcv_data[39:32]);,1
exportspi.v,1516,assert(rxvalid == (rx_counter == 0));,1
exportspi.v,1530,cover(o_cmd_sent);,1
exportspi.v,1531,cover(f_rcv_seq == 1);,1
exportspi.v,1532,cover(f_rcv_seq == 2);,1
exportspi.v,1533,cover(f_rcv_seq == 3);,1
exportspi.v,1534,cover(f_rcv_seq == 4);,1
exportspi.v,1535,cover(f_rcv_seq == 5);,1
exportspi.v,1536,cover(f_rcv_seq == 6);,1
exportspi.v,1537,cover(f_rcv_seq == 7);,1
exportspi.v,1538,cover(f_rcv_seq == 8);,1
exportspi.v,1542,cover(o_rxvalid && f_cmd == 0 && f_data == 0);,1
exportspi.v,1959,assert(!o_ll_stb);,1
exportspi.v,1960,assert(!o_busy);,1
exportspi.v,1961,assert(rdvalid == 0);,1
exportspi.v,1962,assert(!o_rxvalid);,1
exportspi.v,1968,assert(rdvalid == 0);,1
exportspi.v,1969,assert(!o_rxvalid);,1
exportspi.v,1971,assert(fill == 0);,1
exportspi.v,1973,assert(fill == 5'h10);,1
exportspi.v,1975,assert(fill == 0);,1
exportspi.v,1976,assert(crc_fill == 0);,1
exportspi.v,2023,assert(o_ll_stb);,1
exportspi.v,2024,assert(!crc_stb);,1
exportspi.v,2029,assert(!o_ll_stb || i_ll_busy);,1
exportspi.v,2038,assert(crc_fill <= 1);,1
exportspi.v,2046,assert(rdvalid == 0);,1
exportspi.v,2061,assert(received_token);,1
exportspi.v,2065,assert(data_sent);,1
exportspi.v,2070,assert(data_read);,1
exportspi.v,2071,assert(!crc_stb);,1
exportspi.v,2072,assert(!crc_active);,1
exportspi.v,2077,assert(&fill[4:1]);,1
exportspi.v,2079,assert(&fill[4:2]);,1
exportspi.v,2081,assert(&fill[4:3]);,1
exportspi.v,2084,assert(crc_fill <= 5'h10);,1
exportspi.v,2088,assert(crc_flag);,1
exportspi.v,2089,assert(!crc_stb);,1
exportspi.v,2090,assert(!crc_active);,1
exportspi.v,2096,assert(!crc_stb);,1
exportspi.v,2097,assert(all_mem_read);,1
exportspi.v,2098,assert(!crc_active);,1
exportspi.v,2107,assert(lastaddr);,1
exportspi.v,2111,assert(!all_mem_read);,1
exportspi.v,2121,assert(f_lgblksz >= 3);,1
exportspi.v,2125,assert(f_lgblksz_m3[2:0] == r_lgblksz_m3);,1
exportspi.v,2141,assert(fill[4]);,1
exportspi.v,2145,assert(fill[DW/8]);,1
exportspi.v,2153,assert(fill[k-1:0]==0);,1
exportspi.v,2158,assert(!crc_stb);,1
exportspi.v,2180,assume(!f_read_check);,1
exportspi.v,2200,assert(rdvalid != 0);,1
exportspi.v,2201,assert(fill == 5'h10);,1
exportspi.v,2204,assert(o_ll_stb);,1
exportspi.v,2205,assert(rdvalid == 0);,1
exportspi.v,2206,assert(fill == 5'h1f);,1
exportspi.v,2208,assert(gearbox[DW+8-1:8] == f_read_data);,1
exportspi.v,2210,assert(gearbox[DW-1:0] == f_read_data);,1
exportspi.v,2213,assert(o_ll_stb);,1
exportspi.v,2214,assert(rdvalid == 0);,1
exportspi.v,2215,assert(fill == 5'h1e);,1
exportspi.v,2217,assert(gearbox[DW-1:0] == f_read_data);,1
exportspi.v,2219,assert(gearbox[8+DW-1:8] == f_read_data);,1
exportspi.v,2222,assert(o_ll_stb);,1
exportspi.v,2223,assert(rdvalid == 0);,1
exportspi.v,2224,assert(fill == 5'h1c);,1
exportspi.v,2226,assert(gearbox[DW-8-1:0] == f_read_data[31:8]);,1
exportspi.v,2228,assert(gearbox[8+DW-1:16] == f_read_data[23:0]);,1
exportspi.v,2231,assert(o_ll_stb);,1
exportspi.v,2232,assert(rdvalid == 0);,1
exportspi.v,2233,assert(fill == 5'h18);,1
exportspi.v,2235,assert(gearbox[DW-16-1:0] == f_read_data[31:16]);,1
exportspi.v,2237,assert(gearbox[8+DW-1:24] == f_read_data[15:0]);,1
exportspi.v,2240,assert(o_ll_stb);,1
exportspi.v,2241,assert(fill[4]);,1
exportspi.v,2243,assert(gearbox[DW-24-1:0] == f_read_data[31:24]);,1
exportspi.v,2245,assert(gearbox[8+DW-1:DW] == f_read_data[7:0]);,1
exportspi.v,2252,assert(0);,1
exportspi.v,2262,cover(f_lgblksz == 4 && o_rxvalid);,1
exportspi.v,2263,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h00);,1
exportspi.v,2264,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h01);,1
exportspi.v,2265,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h02);,1
exportspi.v,2266,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h03);,1
exportspi.v,2267,cover(o_busy && f_lgblksz == 4 && lastaddr);,1
exportspi.v,2268,cover(o_busy && f_lgblksz == 4 && crc_stb);,1
exportspi.v,2269,cover(o_busy && f_lgblksz == 4 && all_mem_read);,1
exportspi.v,2270,cover(o_busy && f_lgblksz == 4 && crc_flag);,1
exportspi.v,2271,cover(o_busy && f_lgblksz == 4 && data_read);,1
exportspi.v,2272,cover(o_busy && f_lgblksz == 4 && data_sent);,1
exportspi.v,2273,cover(o_busy && f_lgblksz == 4 && received_token);,1
exportspi.v,2274,cover(o_busy && f_lgblksz == 4 && all_idle);,1
exportspi.v,2275,cover(!o_busy && f_lgblksz == 4 && all_idle);,1
exportspi.v,2674,assert(!o_busy);,1
exportspi.v,2675,assert(o_write == 0);,1
exportspi.v,2681,assert(!o_rxvalid);,1
exportspi.v,2682,assert(crc_fill == 0);,1
exportspi.v,2687,assert(!o_write);,1
exportspi.v,2746,assert(fill == 0);,1
exportspi.v,2751,assert(lastaddr);,1
exportspi.v,2752,assert(all_mem_written || o_write);,1
exportspi.v,2753,assert(lastdata);,1
exportspi.v,2759,assert(lastaddr);,1
exportspi.v,2760,assert(lastdata);,1
exportspi.v,2766,assert(lastaddr);,1
exportspi.v,2782,assert(f_lgblksz >= 3);,1
exportspi.v,2783,assert(f_lgblksz <= 9);,1
exportspi.v,2785,assert(o_addr[AW-1] == f_fifo);,1
exportspi.v,2790,assert(o_addr[AW-2:0] == 0);,1
exportspi.v,2791,assert(fill == 0);,1
exportspi.v,2797,assert(f_lgblksz_m3[2:0] == r_lgblksz_m3);,1
exportspi.v,2826,assert(fill[0]);,1
exportspi.v,2828,assert(fill[2] == 0);,1
exportspi.v,2839,assert(crc_fill <= 4);,1
exportspi.v,2844,assert(!crc_active);,1
exportspi.v,2845,assert(crc_fill == 0);,1
exportspi.v,2846,assert(crc_data == 0);,1
exportspi.v,2853,assert(next_crc_data == 0);,1
exportspi.v,2876,assume(!f_read_check);,1
exportspi.v,2896,assert(rdvalid != 0);,1
exportspi.v,2897,assert(fill == 5'h10);,1
exportspi.v,2900,assert(rdvalid == 0);,1
exportspi.v,2901,assert(fill == 5'h1f);,1
exportspi.v,2902,assert(gearbox[DW-1:0] == f_read_data);,1
exportspi.v,2905,assert(rdvalid == 0);,1
exportspi.v,2906,assert(fill == 5'h1e);,1
exportspi.v,2907,assert(gearbox[8+DW-1:8] == f_read_data);,1
exportspi.v,2910,assert(rdvalid == 0);,1
exportspi.v,2911,assert(fill == 5'h1c);,1
exportspi.v,2912,assert(gearbox[8+DW-1:16] == f_read_data[23:0]);,1
exportspi.v,2915,assert(rdvalid == 0);,1
exportspi.v,2916,assert(fill == 5'h18);,1
exportspi.v,2917,assert(gearbox[8+DW-1:24] == f_read_data[15:0]);,1
exportspi.v,2920,assert(fill[4]);,1
exportspi.v,2921,assert(gearbox[8+DW-1:DW] == f_read_data[7:0]);,1
exportspi.v,2941,cover(error_token);,1
exportspi.v,2942,cover(start_token);,1
exportspi.v,2954,cover(o_rxvalid);,1
exportspi.v,2955,cover(o_rxvalid && all_mem_written);,1
exportspi.v,2956,cover(o_rxvalid && f_lgblksz == 4 && all_mem_written);,1
exportspi.v,2957,cover(o_rxvalid && f_lgblksz == 4 && o_response == 0);,1
exportspi.v,2958,cover(o_rxvalid && f_lgblksz == 4 && o_response == 0 && all_mem_written);,1
exportspi.v,2960,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h01);,1
exportspi.v,2961,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h02);,1
exportspi.v,2962,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h03);,1
exportspi.v,2963,cover(o_busy && crc_byte == 0);,1
exportspi.v,2964,cover(o_busy && crc_byte == 1);,1
exportspi.v,2965,cover(o_busy && crc_byte == 2);,1
exportspi.v,2966,cover(o_busy && crc_byte == 1 && i_ll_stb);,1
exportspi.v,2967,cover(o_busy && crc_byte == 2 && i_ll_stb);,1
exportspi.v,2969,cover(cvr_packet_received && !o_busy);,1
exportspi.v,3168,assume(powerup_counter > 2);,1
exportspi.v,3171,assert(powerup_hold);,1
exportspi.v,3207,assume(startup_counter > 1);,1
exportspi.v,3210,assert(startup_hold);,1
exportspi.v,3226,assert(startup_hold);,1
exportspi.v,3472,assert(r_clk_counter <= i_speed);,1
exportspi.v,3511,assert(o_cs_n == CSN_ON_STARTUP);,1
exportspi.v,3519,assert(!CSN_ON_STARTUP || o_cs_n);,1
exportspi.v,3521,assert(!o_cs_n);,1
exportspi.v,3528,assert(o_cs_n);,1
exportspi.v,3532,assert(!o_cs_n && o_sclk);,1
exportspi.v,3534,assert(o_cs_n || bus_grant);,1
exportspi.v,3538,assert(!o_cs_n && o_sclk);,1
exportspi.v,3566,assert(startup_hold);,1
exportspi.v,3567,assert(o_cs_n == CSN_ON_STARTUP);,1
exportspi.v,3568,assert(o_sclk);,1
exportspi.v,3589,assert(r_state <= LLSDSPI_END);,1
exportspi.v,3626,assert(r_state != LLSDSPI_WAIT);,1
exportspi.v,3632,assert(r_byte == fv_byte[7:0]);,1
exportspi.v,3633,assert(o_sclk);,1
exportspi.v,3634,assert(!o_stb);,1
exportspi.v,3635,assert(f_start_seq == 0);,1
exportspi.v,3636,assert(f_next_seq == 0);,1
exportspi.v,3637,assert(!r_idle);,1
exportspi.v,3638,assert(r_z_counter);,1
exportspi.v,3643,assert(o_sclk);,1
exportspi.v,3645,assert(!o_sclk);,1
exportspi.v,3651,cover(r_state == LLSDSPI_START);,1
exportspi.v,3657,assert(o_sclk);,1
exportspi.v,3658,assert(r_byte == fv_byte[7:0] );,1
exportspi.v,3659,assert(r_state == LLSDSPI_START);,1
exportspi.v,3661,assert(!OPT_CONTINUOUS_CLOCK);,1
exportspi.v,3662,assert(!o_cs_n);,1
exportspi.v,3663,assert(!r_idle);,1
exportspi.v,3666,assert(!o_sclk);,1
exportspi.v,3668,assert(r_state == LLSDSPI_START+1);,1
exportspi.v,3669,assert(o_mosi == fv_byte[7]);,1
exportspi.v,3670,assert(!o_cs_n);,1
exportspi.v,3671,assert(!r_idle);,1
exportspi.v,3674,assert(o_sclk);,1
exportspi.v,3676,assert(r_state == LLSDSPI_START+1);,1
exportspi.v,3677,assert(o_mosi == fv_byte[7]);,1
exportspi.v,3678,assert(!o_cs_n);,1
exportspi.v,3679,assert(!r_idle);,1
exportspi.v,3682,assert(!o_sclk);,1
exportspi.v,3684,assert(r_state == LLSDSPI_START+2);,1
exportspi.v,3685,assert(o_mosi == fv_byte[6]);,1
exportspi.v,3686,assert(!o_cs_n);,1
exportspi.v,3687,assert(!r_idle);,1
exportspi.v,3690,assert(o_sclk);,1
exportspi.v,3692,assert(r_state == LLSDSPI_START+2);,1
exportspi.v,3693,assert(o_mosi == fv_byte[6]);,1
exportspi.v,3694,assert(!o_cs_n);,1
exportspi.v,3695,assert(!r_idle);,1
exportspi.v,3698,assert(!o_sclk);,1
exportspi.v,3700,assert(r_state == LLSDSPI_START+3);,1
exportspi.v,3701,assert(o_mosi == fv_byte[5]);,1
exportspi.v,3702,assert(!o_cs_n);,1
exportspi.v,3703,assert(!r_idle);,1
exportspi.v,3706,assert(o_sclk);,1
exportspi.v,3708,assert(r_state == LLSDSPI_START+3);,1
exportspi.v,3709,assert(o_mosi == fv_byte[5]);,1
exportspi.v,3710,assert(!o_cs_n);,1
exportspi.v,3711,assert(!r_idle);,1
exportspi.v,3714,assert(!o_sclk);,1
exportspi.v,3716,assert(r_state == LLSDSPI_START+4);,1
exportspi.v,3717,assert(o_mosi == fv_byte[4]);,1
exportspi.v,3718,assert(!o_cs_n);,1
exportspi.v,3719,assert(!r_idle);,1
exportspi.v,3722,assert(o_sclk);,1
exportspi.v,3724,assert(r_state == LLSDSPI_START+4);,1
exportspi.v,3725,assert(o_mosi == fv_byte[4]);,1
exportspi.v,3726,assert(!o_cs_n);,1
exportspi.v,3727,assert(!r_idle);,1
exportspi.v,3730,assert(!o_sclk);,1
exportspi.v,3732,assert(r_state == LLSDSPI_START+5);,1
exportspi.v,3733,assert(o_mosi == fv_byte[3]);,1
exportspi.v,3734,assert(!o_cs_n);,1
exportspi.v,3735,assert(!r_idle);,1
exportspi.v,3738,assert(o_sclk);,1
exportspi.v,3740,assert(r_state == LLSDSPI_START+5);,1
exportspi.v,3741,assert(o_mosi == fv_byte[3]);,1
exportspi.v,3742,assert(!o_cs_n);,1
exportspi.v,3743,assert(!r_idle);,1
exportspi.v,3746,assert(!o_sclk);,1
exportspi.v,3748,assert(r_state == LLSDSPI_START+6);,1
exportspi.v,3749,assert(o_mosi == fv_byte[2]);,1
exportspi.v,3750,assert(!o_cs_n);,1
exportspi.v,3751,assert(!r_idle);,1
exportspi.v,3754,assert(o_sclk);,1
exportspi.v,3756,assert(r_state == LLSDSPI_START+6);,1
exportspi.v,3757,assert(o_mosi == fv_byte[2]);,1
exportspi.v,3758,assert(!o_cs_n);,1
exportspi.v,3759,assert(!r_idle);,1
exportspi.v,3762,assert(!o_sclk);,1
exportspi.v,3764,assert(r_state == LLSDSPI_START+7);,1
exportspi.v,3765,assert(o_mosi == fv_byte[1]);,1
exportspi.v,3766,assert(!o_cs_n);,1
exportspi.v,3767,assert(!r_idle);,1
exportspi.v,3770,assert(o_sclk);,1
exportspi.v,3772,assert(r_state == LLSDSPI_START+7);,1
exportspi.v,3773,assert(o_mosi == fv_byte[1]);,1
exportspi.v,3774,assert(!o_cs_n);,1
exportspi.v,3775,assert(!r_idle);,1
exportspi.v,3778,assert(!o_sclk);,1
exportspi.v,3780,assert(r_state == LLSDSPI_END);,1
exportspi.v,3781,assert(o_mosi == fv_byte[0]);,1
exportspi.v,3782,assert(!o_cs_n);,1
exportspi.v,3783,assert(!r_idle);,1
exportspi.v,3786,assert(o_sclk);,1
exportspi.v,3788,assert(r_state == LLSDSPI_END);,1
exportspi.v,3789,assert(o_mosi == fv_byte[0]);,1
exportspi.v,3790,assert(!o_cs_n);,1
exportspi.v,3791,assert(r_idle);,1
exportspi.v,3794,assert(o_sclk);,1
exportspi.v,3795,assert(r_state == LLSDSPI_HOTIDLE);,1
exportspi.v,3796,assert(r_idle);,1
exportspi.v,3798,assert(!o_cs_n);,1
exportspi.v,3804,assert(!o_cs_n);,1
exportspi.v,3805,assert(bus_grant);,1
exportspi.v,3832,assert(o_sclk);,1
exportspi.v,3834,assert(!o_sclk);,1
exportspi.v,3839,assert(!o_sclk);,1
exportspi.v,3841,assert(r_state == LLSDSPI_START+1);,1
exportspi.v,3842,assert(o_mosi == fv_byte[7]);,1
exportspi.v,3843,assert(!o_cs_n);,1
exportspi.v,3844,assert(!r_idle);,1
exportspi.v,3847,assert(o_sclk);,1
exportspi.v,3849,assert(r_state == LLSDSPI_START+1);,1
exportspi.v,3850,assert(o_mosi == fv_byte[7]);,1
exportspi.v,3851,assert(!o_cs_n);,1
exportspi.v,3852,assert(!r_idle);,1
exportspi.v,3855,assert(!o_sclk);,1
exportspi.v,3857,assert(r_state == LLSDSPI_START+2);,1
exportspi.v,3858,assert(o_mosi == fv_byte[6]);,1
exportspi.v,3859,assert(!o_cs_n);,1
exportspi.v,3860,assert(!r_idle);,1
exportspi.v,3863,assert(o_sclk);,1
exportspi.v,3865,assert(r_state == LLSDSPI_START+2);,1
exportspi.v,3866,assert(o_mosi == fv_byte[6]);,1
exportspi.v,3867,assert(!o_cs_n);,1
exportspi.v,3868,assert(!r_idle);,1
exportspi.v,3871,assert(!o_sclk);,1
exportspi.v,3873,assert(r_state == LLSDSPI_START+3);,1
exportspi.v,3874,assert(o_mosi == fv_byte[5]);,1
exportspi.v,3875,assert(!o_cs_n);,1
exportspi.v,3876,assert(!r_idle);,1
exportspi.v,3879,assert(o_sclk);,1
exportspi.v,3881,assert(r_state == LLSDSPI_START+3);,1
exportspi.v,3882,assert(o_mosi == fv_byte[5]);,1
exportspi.v,3883,assert(!o_cs_n);,1
exportspi.v,3884,assert(!r_idle);,1
exportspi.v,3887,assert(!o_sclk);,1
exportspi.v,3889,assert(r_state == LLSDSPI_START+4);,1
exportspi.v,3890,assert(o_mosi == fv_byte[4]);,1
exportspi.v,3891,assert(!o_cs_n);,1
exportspi.v,3892,assert(!r_idle);,1
exportspi.v,3895,assert(o_sclk);,1
exportspi.v,3897,assert(r_state == LLSDSPI_START+4);,1
exportspi.v,3898,assert(o_mosi == fv_byte[4]);,1
exportspi.v,3899,assert(!o_cs_n);,1
exportspi.v,3900,assert(!r_idle);,1
exportspi.v,3903,assert(!o_sclk);,1
exportspi.v,3905,assert(r_state == LLSDSPI_START+5);,1
exportspi.v,3906,assert(o_mosi == fv_byte[3]);,1
exportspi.v,3907,assert(!o_cs_n);,1
exportspi.v,3908,assert(!r_idle);,1
exportspi.v,3911,assert(o_sclk);,1
exportspi.v,3913,assert(r_state == LLSDSPI_START+5);,1
exportspi.v,3914,assert(o_mosi == fv_byte[3]);,1
exportspi.v,3915,assert(!o_cs_n);,1
exportspi.v,3916,assert(!r_idle);,1
exportspi.v,3919,assert(!o_sclk);,1
exportspi.v,3921,assert(r_state == LLSDSPI_START+6);,1
exportspi.v,3922,assert(o_mosi == fv_byte[2]);,1
exportspi.v,3923,assert(!o_cs_n);,1
exportspi.v,3924,assert(!r_idle);,1
exportspi.v,3927,assert(o_sclk);,1
exportspi.v,3929,assert(r_state == LLSDSPI_START+6);,1
exportspi.v,3930,assert(o_mosi == fv_byte[2]);,1
exportspi.v,3931,assert(!o_cs_n);,1
exportspi.v,3932,assert(!r_idle);,1
exportspi.v,3935,assert(!o_sclk);,1
exportspi.v,3937,assert(r_state == LLSDSPI_START+7);,1
exportspi.v,3938,assert(o_mosi == fv_byte[1]);,1
exportspi.v,3939,assert(!o_cs_n);,1
exportspi.v,3940,assert(!r_idle);,1
exportspi.v,3943,assert(o_sclk);,1
exportspi.v,3945,assert(r_state == LLSDSPI_START+7);,1
exportspi.v,3946,assert(o_mosi == fv_byte[1]);,1
exportspi.v,3947,assert(!o_cs_n);,1
exportspi.v,3948,assert(!r_idle);,1
exportspi.v,3951,assert(!o_sclk);,1
exportspi.v,3953,assert(r_state == LLSDSPI_END);,1
exportspi.v,3954,assert(o_mosi == fv_byte[0]);,1
exportspi.v,3955,assert(!o_cs_n);,1
exportspi.v,3956,assert(!r_idle);,1
exportspi.v,3959,assert(o_sclk);,1
exportspi.v,3961,assert(r_state == LLSDSPI_END);,1
exportspi.v,3962,assert(o_mosi == fv_byte[0]);,1
exportspi.v,3963,assert(!o_cs_n);,1
exportspi.v,3964,assert(r_idle);,1
exportspi.v,3967,assert(o_sclk);,1
exportspi.v,3968,assert(!o_cs_n);,1
exportspi.v,3969,assert(r_state == LLSDSPI_HOTIDLE);,1
exportspi.v,3970,assert(r_idle);,1
exportspi.v,3972,assert(f_start_seq == 0);,1
exportspi.v,3977,assert(f_start_seq == 0);,1
exportspi.v,4022,assume(i_miso == f_rxdata[7]);,1
exportspi.v,4026,assert(r_ireg[0] == f_rxdata[7]);,1
exportspi.v,4030,assert(r_ireg[0] == f_rxdata[7]);,1
exportspi.v,4033,assume(i_miso == f_rxdata[6]);,1
exportspi.v,4034,assert(r_ireg[1:0] == f_rxdata[7:6]);,1
exportspi.v,4037,assume(i_miso == f_rxdata[5]);,1
exportspi.v,4038,assert(r_ireg[1:0] == f_rxdata[7:6]);,1
exportspi.v,4041,assume(i_miso == f_rxdata[5]);,1
exportspi.v,4042,assert(r_ireg[2:0] == f_rxdata[7:5]);,1
exportspi.v,4045,assume(i_miso == f_rxdata[4]);,1
exportspi.v,4046,assert(r_ireg[2:0] == f_rxdata[7:5]);,1
exportspi.v,4049,assume(i_miso == f_rxdata[4]);,1
exportspi.v,4050,assert(r_ireg[3:0] == f_rxdata[7:4]);,1
exportspi.v,4053,assume(i_miso == f_rxdata[3]);,1
exportspi.v,4054,assert(r_ireg[3:0] == f_rxdata[7:4]);,1
exportspi.v,4057,assume(i_miso == f_rxdata[3]);,1
exportspi.v,4058,assert(r_ireg[4:0] == f_rxdata[7:3]);,1
exportspi.v,4061,assume(i_miso == f_rxdata[2]);,1
exportspi.v,4062,assert(r_ireg[4:0] == f_rxdata[7:3]);,1
exportspi.v,4065,assume(i_miso == f_rxdata[2]);,1
exportspi.v,4066,assert(r_ireg[5:0] == f_rxdata[7:2]);,1
exportspi.v,4069,assume(i_miso == f_rxdata[1]);,1
exportspi.v,4070,assert(r_ireg[5:0] == f_rxdata[7:2]);,1
exportspi.v,4073,assume(i_miso == f_rxdata[1]);,1
exportspi.v,4074,assert(r_ireg[6:0] == f_rxdata[7:1]);,1
exportspi.v,4077,assume(i_miso == f_rxdata[0]);,1
exportspi.v,4078,assert(r_ireg[6:0] == f_rxdata[7:1]);,1
exportspi.v,4081,assume(i_miso == f_rxdata[0]);,1
exportspi.v,4082,assert(r_ireg == f_rxdata);,1
exportspi.v,4085,assume(i_miso == f_rxdata[0]);,1
exportspi.v,4086,assert(r_ireg == f_rxdata);,1
exportspi.v,4087,assert(o_byte == f_rxdata);,1
exportspi.v,4093,assert(!o_stb);,1
exportspi.v,4097,assert(o_stb);,1
exportspi.v,4099,assert(o_stb);,1
exportspi.v,4101,assert(!o_stb);,1
exportspi.v,4103,assert(!o_stb);,1
exportspi.v,4107,assert(o_mosi == MOSI_INACTIVE_VALUE);,1
exportspi.v,4114,assert(r_z_counter);,1
exportspi.v,4115,assert(!r_idle);,1
exportspi.v,4116,assert(o_cs_n == CSN_ON_STARTUP);,1
exportspi.v,4117,assert(o_sclk);,1
exportspi.v,4122,assert(o_sclk && !o_cs_n);,1
exportspi.v,4126,assert(o_sclk);,1
exportspi.v,4130,assert(o_cs_n == CSN_ON_STARTUP);,1
exportspi.v,4132,assert(o_sclk);,1
exportspi.v,4159,cover(byte_count == 2 && !o_cs_n && nonzero_speed);,1
exportspi.v,4160,cover(byte_count == 2 && !o_cs_n && !nonzero_speed);,1
exportspi.v,4165,assume(i_speed > 0);,1
exportspi.v,4186,cover(f_next_seq == 2);,1
exportspi.v,4187,cover(f_start_seq[3]);,1
exportspi.v,4188,cover(f_next_seq[15]);,1
exportspi.v,4193,cover(f_next_seq == 1);,1
exportspi.v,4209,assume(!i_cs);,1
exportspi.v,4216,assume(i_stb == i_cs);,1
exportspi.v,4219,assume(!i_stb);,1
afifo.v,587,assume(i_wclk == now_wclk);,1
afifo.v,588,assume(i_rclk == now_rclk);,1
afifo.v,599,assume(!pre_wclk && !wclk);,1
afifo.v,600,assume(!pre_rclk && !i_rclk);,1
afifo.v,744,cover(o_rd_empty);,1
afifo.v,745,cover(!o_rd_empty);,1
afifo.v,746,cover(f_state == 2'b01);,1
afifo.v,747,cover(f_state == 2'b10);,1
afifo.v,748,cover(f_state == 2'b11);,1
afifo.v,749,cover(&f_fill[MSB-1:0]);,1
afifo.v,751,cover(i_rd);,1
afifo.v,752,cover(i_rd && !o_rd_empty);,1
afifo.v,773,cover(o_wr_full);,1
afifo.v,774,cover(o_rd_empty && cvr_full);,1
afifo.v,775,cover(o_rd_empty && f_fill == 0 && cvr_full);,1
afifo.v,794,cover(cvr_nearly_full && i_wr_reset_n);,1
afifo.v,795,cover(o_rd_empty && cvr_nearly_full);,1
afifo.v,796,cover(o_rd_empty && f_fill == 0 && cvr_nearly_full);,1
llsdspi.v,193,assume(powerup_counter > 2);,1
llsdspi.v,196,assert(powerup_hold);,1
llsdspi.v,232,assume(startup_counter > 1);,1
llsdspi.v,235,assert(startup_hold);,1
llsdspi.v,251,assert(startup_hold);,1
llsdspi.v,497,assert(r_clk_counter <= i_speed);,1
llsdspi.v,536,assert(o_cs_n == CSN_ON_STARTUP);,1
llsdspi.v,544,assert(!CSN_ON_STARTUP || o_cs_n);,1
llsdspi.v,546,assert(!o_cs_n);,1
llsdspi.v,553,assert(o_cs_n);,1
llsdspi.v,557,assert(!o_cs_n && o_sclk);,1
llsdspi.v,559,assert(o_cs_n || bus_grant);,1
llsdspi.v,563,assert(!o_cs_n && o_sclk);,1
llsdspi.v,591,assert(startup_hold);,1
llsdspi.v,592,assert(o_cs_n == CSN_ON_STARTUP);,1
llsdspi.v,593,assert(o_sclk);,1
llsdspi.v,614,assert(r_state <= LLSDSPI_END);,1
llsdspi.v,651,assert(r_state != LLSDSPI_WAIT);,1
llsdspi.v,657,assert(r_byte == fv_byte[7:0]);,1
llsdspi.v,658,assert(o_sclk);,1
llsdspi.v,659,assert(!o_stb);,1
llsdspi.v,660,assert(f_start_seq == 0);,1
llsdspi.v,661,assert(f_next_seq == 0);,1
llsdspi.v,662,assert(!r_idle);,1
llsdspi.v,663,assert(r_z_counter);,1
llsdspi.v,668,assert(o_sclk);,1
llsdspi.v,670,assert(!o_sclk);,1
llsdspi.v,676,cover(r_state == LLSDSPI_START);,1
llsdspi.v,682,assert(o_sclk);,1
llsdspi.v,683,assert(r_byte == fv_byte[7:0] );,1
llsdspi.v,684,assert(r_state == LLSDSPI_START);,1
llsdspi.v,686,assert(!OPT_CONTINUOUS_CLOCK);,1
llsdspi.v,687,assert(!o_cs_n);,1
llsdspi.v,688,assert(!r_idle);,1
llsdspi.v,691,assert(!o_sclk);,1
llsdspi.v,693,assert(r_state == LLSDSPI_START+1);,1
llsdspi.v,694,assert(o_mosi == fv_byte[7]);,1
llsdspi.v,695,assert(!o_cs_n);,1
llsdspi.v,696,assert(!r_idle);,1
llsdspi.v,699,assert(o_sclk);,1
llsdspi.v,701,assert(r_state == LLSDSPI_START+1);,1
llsdspi.v,702,assert(o_mosi == fv_byte[7]);,1
llsdspi.v,703,assert(!o_cs_n);,1
llsdspi.v,704,assert(!r_idle);,1
llsdspi.v,707,assert(!o_sclk);,1
llsdspi.v,709,assert(r_state == LLSDSPI_START+2);,1
llsdspi.v,710,assert(o_mosi == fv_byte[6]);,1
llsdspi.v,711,assert(!o_cs_n);,1
llsdspi.v,712,assert(!r_idle);,1
llsdspi.v,715,assert(o_sclk);,1
llsdspi.v,717,assert(r_state == LLSDSPI_START+2);,1
llsdspi.v,718,assert(o_mosi == fv_byte[6]);,1
llsdspi.v,719,assert(!o_cs_n);,1
llsdspi.v,720,assert(!r_idle);,1
llsdspi.v,723,assert(!o_sclk);,1
llsdspi.v,725,assert(r_state == LLSDSPI_START+3);,1
llsdspi.v,726,assert(o_mosi == fv_byte[5]);,1
llsdspi.v,727,assert(!o_cs_n);,1
llsdspi.v,728,assert(!r_idle);,1
llsdspi.v,731,assert(o_sclk);,1
llsdspi.v,733,assert(r_state == LLSDSPI_START+3);,1
llsdspi.v,734,assert(o_mosi == fv_byte[5]);,1
llsdspi.v,735,assert(!o_cs_n);,1
llsdspi.v,736,assert(!r_idle);,1
llsdspi.v,739,assert(!o_sclk);,1
llsdspi.v,741,assert(r_state == LLSDSPI_START+4);,1
llsdspi.v,742,assert(o_mosi == fv_byte[4]);,1
llsdspi.v,743,assert(!o_cs_n);,1
llsdspi.v,744,assert(!r_idle);,1
llsdspi.v,747,assert(o_sclk);,1
llsdspi.v,749,assert(r_state == LLSDSPI_START+4);,1
llsdspi.v,750,assert(o_mosi == fv_byte[4]);,1
llsdspi.v,751,assert(!o_cs_n);,1
llsdspi.v,752,assert(!r_idle);,1
llsdspi.v,755,assert(!o_sclk);,1
llsdspi.v,757,assert(r_state == LLSDSPI_START+5);,1
llsdspi.v,758,assert(o_mosi == fv_byte[3]);,1
llsdspi.v,759,assert(!o_cs_n);,1
llsdspi.v,760,assert(!r_idle);,1
llsdspi.v,763,assert(o_sclk);,1
llsdspi.v,765,assert(r_state == LLSDSPI_START+5);,1
llsdspi.v,766,assert(o_mosi == fv_byte[3]);,1
llsdspi.v,767,assert(!o_cs_n);,1
llsdspi.v,768,assert(!r_idle);,1
llsdspi.v,771,assert(!o_sclk);,1
llsdspi.v,773,assert(r_state == LLSDSPI_START+6);,1
llsdspi.v,774,assert(o_mosi == fv_byte[2]);,1
llsdspi.v,775,assert(!o_cs_n);,1
llsdspi.v,776,assert(!r_idle);,1
llsdspi.v,779,assert(o_sclk);,1
llsdspi.v,781,assert(r_state == LLSDSPI_START+6);,1
llsdspi.v,782,assert(o_mosi == fv_byte[2]);,1
llsdspi.v,783,assert(!o_cs_n);,1
llsdspi.v,784,assert(!r_idle);,1
llsdspi.v,787,assert(!o_sclk);,1
llsdspi.v,789,assert(r_state == LLSDSPI_START+7);,1
llsdspi.v,790,assert(o_mosi == fv_byte[1]);,1
llsdspi.v,791,assert(!o_cs_n);,1
llsdspi.v,792,assert(!r_idle);,1
llsdspi.v,795,assert(o_sclk);,1
llsdspi.v,797,assert(r_state == LLSDSPI_START+7);,1
llsdspi.v,798,assert(o_mosi == fv_byte[1]);,1
llsdspi.v,799,assert(!o_cs_n);,1
llsdspi.v,800,assert(!r_idle);,1
llsdspi.v,803,assert(!o_sclk);,1
llsdspi.v,805,assert(r_state == LLSDSPI_END);,1
llsdspi.v,806,assert(o_mosi == fv_byte[0]);,1
llsdspi.v,807,assert(!o_cs_n);,1
llsdspi.v,808,assert(!r_idle);,1
llsdspi.v,811,assert(o_sclk);,1
llsdspi.v,813,assert(r_state == LLSDSPI_END);,1
llsdspi.v,814,assert(o_mosi == fv_byte[0]);,1
llsdspi.v,815,assert(!o_cs_n);,1
llsdspi.v,816,assert(r_idle);,1
llsdspi.v,819,assert(o_sclk);,1
llsdspi.v,820,assert(r_state == LLSDSPI_HOTIDLE);,1
llsdspi.v,821,assert(r_idle);,1
llsdspi.v,823,assert(!o_cs_n);,1
llsdspi.v,829,assert(!o_cs_n);,1
llsdspi.v,830,assert(bus_grant);,1
llsdspi.v,857,assert(o_sclk);,1
llsdspi.v,859,assert(!o_sclk);,1
llsdspi.v,864,assert(!o_sclk);,1
llsdspi.v,866,assert(r_state == LLSDSPI_START+1);,1
llsdspi.v,867,assert(o_mosi == fv_byte[7]);,1
llsdspi.v,868,assert(!o_cs_n);,1
llsdspi.v,869,assert(!r_idle);,1
llsdspi.v,872,assert(o_sclk);,1
llsdspi.v,874,assert(r_state == LLSDSPI_START+1);,1
llsdspi.v,875,assert(o_mosi == fv_byte[7]);,1
llsdspi.v,876,assert(!o_cs_n);,1
llsdspi.v,877,assert(!r_idle);,1
llsdspi.v,880,assert(!o_sclk);,1
llsdspi.v,882,assert(r_state == LLSDSPI_START+2);,1
llsdspi.v,883,assert(o_mosi == fv_byte[6]);,1
llsdspi.v,884,assert(!o_cs_n);,1
llsdspi.v,885,assert(!r_idle);,1
llsdspi.v,888,assert(o_sclk);,1
llsdspi.v,890,assert(r_state == LLSDSPI_START+2);,1
llsdspi.v,891,assert(o_mosi == fv_byte[6]);,1
llsdspi.v,892,assert(!o_cs_n);,1
llsdspi.v,893,assert(!r_idle);,1
llsdspi.v,896,assert(!o_sclk);,1
llsdspi.v,898,assert(r_state == LLSDSPI_START+3);,1
llsdspi.v,899,assert(o_mosi == fv_byte[5]);,1
llsdspi.v,900,assert(!o_cs_n);,1
llsdspi.v,901,assert(!r_idle);,1
llsdspi.v,904,assert(o_sclk);,1
llsdspi.v,906,assert(r_state == LLSDSPI_START+3);,1
llsdspi.v,907,assert(o_mosi == fv_byte[5]);,1
llsdspi.v,908,assert(!o_cs_n);,1
llsdspi.v,909,assert(!r_idle);,1
llsdspi.v,912,assert(!o_sclk);,1
llsdspi.v,914,assert(r_state == LLSDSPI_START+4);,1
llsdspi.v,915,assert(o_mosi == fv_byte[4]);,1
llsdspi.v,916,assert(!o_cs_n);,1
llsdspi.v,917,assert(!r_idle);,1
llsdspi.v,920,assert(o_sclk);,1
llsdspi.v,922,assert(r_state == LLSDSPI_START+4);,1
llsdspi.v,923,assert(o_mosi == fv_byte[4]);,1
llsdspi.v,924,assert(!o_cs_n);,1
llsdspi.v,925,assert(!r_idle);,1
llsdspi.v,928,assert(!o_sclk);,1
llsdspi.v,930,assert(r_state == LLSDSPI_START+5);,1
llsdspi.v,931,assert(o_mosi == fv_byte[3]);,1
llsdspi.v,932,assert(!o_cs_n);,1
llsdspi.v,933,assert(!r_idle);,1
llsdspi.v,936,assert(o_sclk);,1
llsdspi.v,938,assert(r_state == LLSDSPI_START+5);,1
llsdspi.v,939,assert(o_mosi == fv_byte[3]);,1
llsdspi.v,940,assert(!o_cs_n);,1
llsdspi.v,941,assert(!r_idle);,1
llsdspi.v,944,assert(!o_sclk);,1
llsdspi.v,946,assert(r_state == LLSDSPI_START+6);,1
llsdspi.v,947,assert(o_mosi == fv_byte[2]);,1
llsdspi.v,948,assert(!o_cs_n);,1
llsdspi.v,949,assert(!r_idle);,1
llsdspi.v,952,assert(o_sclk);,1
llsdspi.v,954,assert(r_state == LLSDSPI_START+6);,1
llsdspi.v,955,assert(o_mosi == fv_byte[2]);,1
llsdspi.v,956,assert(!o_cs_n);,1
llsdspi.v,957,assert(!r_idle);,1
llsdspi.v,960,assert(!o_sclk);,1
llsdspi.v,962,assert(r_state == LLSDSPI_START+7);,1
llsdspi.v,963,assert(o_mosi == fv_byte[1]);,1
llsdspi.v,964,assert(!o_cs_n);,1
llsdspi.v,965,assert(!r_idle);,1
llsdspi.v,968,assert(o_sclk);,1
llsdspi.v,970,assert(r_state == LLSDSPI_START+7);,1
llsdspi.v,971,assert(o_mosi == fv_byte[1]);,1
llsdspi.v,972,assert(!o_cs_n);,1
llsdspi.v,973,assert(!r_idle);,1
llsdspi.v,976,assert(!o_sclk);,1
llsdspi.v,978,assert(r_state == LLSDSPI_END);,1
llsdspi.v,979,assert(o_mosi == fv_byte[0]);,1
llsdspi.v,980,assert(!o_cs_n);,1
llsdspi.v,981,assert(!r_idle);,1
llsdspi.v,984,assert(o_sclk);,1
llsdspi.v,986,assert(r_state == LLSDSPI_END);,1
llsdspi.v,987,assert(o_mosi == fv_byte[0]);,1
llsdspi.v,988,assert(!o_cs_n);,1
llsdspi.v,989,assert(r_idle);,1
llsdspi.v,992,assert(o_sclk);,1
llsdspi.v,993,assert(!o_cs_n);,1
llsdspi.v,994,assert(r_state == LLSDSPI_HOTIDLE);,1
llsdspi.v,995,assert(r_idle);,1
llsdspi.v,997,assert(f_start_seq == 0);,1
llsdspi.v,1002,assert(f_start_seq == 0);,1
llsdspi.v,1047,assume(i_miso == f_rxdata[7]);,1
llsdspi.v,1051,assert(r_ireg[0] == f_rxdata[7]);,1
llsdspi.v,1055,assert(r_ireg[0] == f_rxdata[7]);,1
llsdspi.v,1058,assume(i_miso == f_rxdata[6]);,1
llsdspi.v,1059,assert(r_ireg[1:0] == f_rxdata[7:6]);,1
llsdspi.v,1062,assume(i_miso == f_rxdata[5]);,1
llsdspi.v,1063,assert(r_ireg[1:0] == f_rxdata[7:6]);,1
llsdspi.v,1066,assume(i_miso == f_rxdata[5]);,1
llsdspi.v,1067,assert(r_ireg[2:0] == f_rxdata[7:5]);,1
llsdspi.v,1070,assume(i_miso == f_rxdata[4]);,1
llsdspi.v,1071,assert(r_ireg[2:0] == f_rxdata[7:5]);,1
llsdspi.v,1074,assume(i_miso == f_rxdata[4]);,1
llsdspi.v,1075,assert(r_ireg[3:0] == f_rxdata[7:4]);,1
llsdspi.v,1078,assume(i_miso == f_rxdata[3]);,1
llsdspi.v,1079,assert(r_ireg[3:0] == f_rxdata[7:4]);,1
llsdspi.v,1082,assume(i_miso == f_rxdata[3]);,1
llsdspi.v,1083,assert(r_ireg[4:0] == f_rxdata[7:3]);,1
llsdspi.v,1086,assume(i_miso == f_rxdata[2]);,1
llsdspi.v,1087,assert(r_ireg[4:0] == f_rxdata[7:3]);,1
llsdspi.v,1090,assume(i_miso == f_rxdata[2]);,1
llsdspi.v,1091,assert(r_ireg[5:0] == f_rxdata[7:2]);,1
llsdspi.v,1094,assume(i_miso == f_rxdata[1]);,1
llsdspi.v,1095,assert(r_ireg[5:0] == f_rxdata[7:2]);,1
llsdspi.v,1098,assume(i_miso == f_rxdata[1]);,1
llsdspi.v,1099,assert(r_ireg[6:0] == f_rxdata[7:1]);,1
llsdspi.v,1102,assume(i_miso == f_rxdata[0]);,1
llsdspi.v,1103,assert(r_ireg[6:0] == f_rxdata[7:1]);,1
llsdspi.v,1106,assume(i_miso == f_rxdata[0]);,1
llsdspi.v,1107,assert(r_ireg == f_rxdata);,1
llsdspi.v,1110,assume(i_miso == f_rxdata[0]);,1
llsdspi.v,1111,assert(r_ireg == f_rxdata);,1
llsdspi.v,1112,assert(o_byte == f_rxdata);,1
llsdspi.v,1118,assert(!o_stb);,1
llsdspi.v,1122,assert(o_stb);,1
llsdspi.v,1124,assert(o_stb);,1
llsdspi.v,1126,assert(!o_stb);,1
llsdspi.v,1128,assert(!o_stb);,1
llsdspi.v,1132,assert(o_mosi == MOSI_INACTIVE_VALUE);,1
llsdspi.v,1139,assert(r_z_counter);,1
llsdspi.v,1140,assert(!r_idle);,1
llsdspi.v,1141,assert(o_cs_n == CSN_ON_STARTUP);,1
llsdspi.v,1142,assert(o_sclk);,1
llsdspi.v,1147,assert(o_sclk && !o_cs_n);,1
llsdspi.v,1151,assert(o_sclk);,1
llsdspi.v,1155,assert(o_cs_n == CSN_ON_STARTUP);,1
llsdspi.v,1157,assert(o_sclk);,1
llsdspi.v,1184,cover(byte_count == 2 && !o_cs_n && nonzero_speed);,1
llsdspi.v,1185,cover(byte_count == 2 && !o_cs_n && !nonzero_speed);,1
llsdspi.v,1190,assume(i_speed > 0);,1
llsdspi.v,1211,cover(f_next_seq == 2);,1
llsdspi.v,1212,cover(f_start_seq[3]);,1
llsdspi.v,1213,cover(f_next_seq[15]);,1
llsdspi.v,1218,cover(f_next_seq == 1);,1
llsdspi.v,1234,assume(!i_cs);,1
llsdspi.v,1241,assume(i_stb == i_cs);,1
llsdspi.v,1244,assume(!i_stb);,1
exportsd.v,2158,assert(cmd_busy);,1
exportsd.v,2249,assert(r_card_busy);,1
exportsd.v,2255,assert(r_busy_counter == 0);,1
exportsd.v,2312,assert(!r_tx_request || !o_tx_en);,1
exportsd.v,2317,assert(r_tx_request || o_tx_en);,1
exportsd.v,2350,assert(!r_rx_request || !o_rx_en);,1
exportsd.v,2353,assert(r_rx_request || o_rx_en);,1
exportsd.v,2584,assert(!o_cfg_shutdown);,1
exportsd.v,2587,assert(!o_cfg_shutdown);,1
exportsd.v,2634,assert(!o_cfg_ddr);,1
exportsd.v,2637,assert(!o_cfg_ds);,1
exportsd.v,2640,assert(!o_cfg_dscmd);,1
exportsd.v,2699,assert(o_cfg_ckspeed >= 2);,1
exportsd.v,2703,assert(o_cfg_ckspeed >= 1);,1
exportsd.v,3054,assert(!i_cmd_mem_valid || !i_rx_mem_valid);,1
exportsd.v,3151,assume(i_reset);,1
exportsd.v,3190,assert(cmd_busy);,1
exportsd.v,3194,assert(!cmd_busy);,1
exportsd.v,3198,assume(i_cmd_busy);,1
exportsd.v,3207,assume(!i_cmd_mem_valid);,1
exportsd.v,3213,assume(i_cmd_ercode == 2'b00);,1
exportsd.v,3215,assert(!o_cmd_request);,1
exportsd.v,3220,assert(!o_cmd_request);,1
exportsd.v,3223,assert(o_cmd_request);,1
exportsd.v,3236,assert(o_cmd_request && o_cmd_type == RNO_REPLY);,1
exportsd.v,3246,assert(!o_rx_en && !r_rx_request);,1
exportsd.v,3247,assert(!cmd_busy || o_cmd_type != R2_REPLY);,1
exportsd.v,3250,assert(!cmd_busy || o_cmd_type != R2_REPLY);,1
exportsd.v,3277,assert(!o_cmd_request);,1
exportsd.v,3282,assert(!o_cmd_request);,1
exportsd.v,3286,assert(!o_cmd_request);,1
exportsd.v,3289,assert(o_cmd_request);,1
exportsd.v,3295,assert(o_cmd_request && o_cmd_selfreply);,1
exportsd.v,3297,assert(!o_cmd_request);,1
exportsd.v,3305,assert(cmd_busy);,1
exportsd.v,3317,assert(o_cmd_request);,1
exportsd.v,3318,assert(mem_busy);,1
exportsd.v,3323,assert(o_cmd_request);,1
exportsd.v,3324,assert(r_rx_request);,1
exportsd.v,3329,assert(o_cmd_request);,1
exportsd.v,3330,assert(r_tx_request);,1
exportsd.v,3335,assert(!o_cmd_request);,1
exportsd.v,3336,assert(r_rx_request);,1
exportsd.v,3341,assert(!o_cmd_request);,1
exportsd.v,3342,assert(r_tx_request);,1
exportsd.v,3355,assert(fif_wraddr == 0);,1
exportsd.v,3356,assert(fif_rdaddr == 0);,1
exportsd.v,3372,assert(o_cmd_request);,1
exportsd.v,3373,assert(o_cmd_selfreply);,1
exportsd.v,3374,assert(o_cmd_type == RNO_REPLY);,1
exportsd.v,3386,assert(!o_tx_mem_valid);,1
exportsd.v,3390,assert(!o_tx_en);,1
exportsd.v,3393,assert(o_tx_mem_valid);,1
exportsd.v,3400,assert(!r_tx_request);,1
exportsd.v,3416,assume(!i_rx_mem_valid);,1
exportsd.v,3420,assert(!r_rx_request || !o_rx_en);,1
exportsd.v,3461,assume(f_mem == 0);,1
exportsd.v,3462,assume(f_word == 0);,1
exportsd.v,3464,assert(f_word == f_mem);,1
exportsd.v,3493,assert(o_tx_mem_data == f_word);,1
exportsd.v,3507,assert(r_fifo == f_txaddr[LGFIFO32]);,1
exportsd.v,3512,assert(tx_pipe_valid);,1
exportsd.v,3518,assert(next_tx_mem == f_word);,1
exportsd.v,3528,assert(tx_mem_addr == 0);,1
exportsd.v,3530,assert(tx_mem_addr == 1);,1
exportsd.v,3535,assert(!tx_pipe_valid && !o_tx_mem_valid);,1
exportsd.v,3575,assert(r_width != 2'b11);,1
exportsd.v,3577,assert(r_width == WIDTH_1W);,1
exportsd.v,3579,assert(r_width == WIDTH_1W || r_width == WIDTH_4W);,1
exportsd.v,3584,assert(o_cfg_ddr);,1
exportsd.v,3589,assert(lgblk <= LGFIFO);,1
exportsd.v,3590,assert(lgblk >= 2);,1
exportsd.v,3603,"assume(lgblk < 15); // Assume no overflow ... for now // Assume the user won't do something dumb, like write to the same FIFO // we're reading from, or either read or write from the same FIFO we // are writing to // {{{ always @(*) if (o_tx_en || r_tx_request) assume(!i_wb_stb || !i_wb_we || i_wb_addr != ADDR_FIFOA + r_fifo); always @(*) if (cmd_busy && o_cmd_type == R2_REPLY) assume(!i_wb_stb || i_wb_addr != ADDR_FIFOA + r_fifo); always @(*) if (o_rx_en || r_rx_request) assume(!i_wb_stb || i_wb_addr != ADDR_FIFOA + r_fifo); // }}} // }}} `endif // FORMAL",21
exportsd.v,3829,assume(i_reset);,1
exportsd.v,3833,assume(i_cfg_clk90);,1
exportsd.v,3840,assert(o_ckstb);,1
exportsd.v,3867,assert(counter[NCTR-1] == 1'b0);,1
exportsd.v,4387,assert(!r_self_request);,1
exportsd.v,4591,assume(i_reset);,1
exportsd.v,4596,assume(!i_cmd_request);,1
exportsd.v,4597,assert(!active);,1
exportsd.v,4605,assume(!i_cmd_request);,1
exportsd.v,4608,assume(i_cmd_request);,1
exportsd.v,4628,assume(i_cmd_request);,1
exportsd.v,4629,assume(i_cmd_type == R_NONE);,1
exportsd.v,4642,assert(!f_busy);,1
exportsd.v,4643,assert(!r_busy);,1
exportsd.v,4644,assert(!o_done);,1
exportsd.v,4647,assert(!r_busy);,1
exportsd.v,4649,assert(!active);,1
exportsd.v,4652,assert(!r_busy);,1
exportsd.v,4653,assert(!f_busy);,1
exportsd.v,4659,assert(!o_err && o_ercode == 2'b00);,1
exportsd.v,4663,assert(o_done);,1
exportsd.v,4667,assert(o_ercode == ECODE_TIMEOUT);,1
exportsd.v,4671,assert(!o_cmd_response);,1
exportsd.v,4691,assume(!S_ASYNC_VALID && i_cmd_strb == 0);,1
exportsd.v,4695,assume(!i_cmd_strb[0]);,1
exportsd.v,4699,assert(!cfg_ds);,1
exportsd.v,4703,assume(!S_ASYNC_VALID);,1
exportsd.v,4733,assert(&tx_sreg);,1
exportsd.v,4734,assert(!o_cmd_en);,1
exportsd.v,4735,assert(o_cmd_data == 2'b11);,1
exportsd.v,4737,assert(o_cmd_en);,1
exportsd.v,4738,assert(tx_sreg == f_tx_now);,1
exportsd.v,4749,assert(!resp_count[0]);,1
exportsd.v,4753,assume(i_cmd_strb != 2'b11);,1
exportsd.v,4761,assert(r_busy);,1
exportsd.v,4767,assert(!o_mem_valid);,1
exportsd.v,4770,assert(resp_count == 0);,1
exportsd.v,4774,assert(mem_addr == 0);,1
exportsd.v,4777,assert(mem_addr == 4);,1
exportsd.v,4785,assert(resp_count == 0);,1
exportsd.v,4790,assert(w_done || r_done);,1
exportsd.v,4795,assert(w_done || r_done);,1
exportsd.v,4800,assert(cmd_type == R_R2);,1
exportsd.v,4804,assert(!waiting_on_response);,1
exportsd.v,4806,assert(waiting_on_response);,1
exportsd.v,4810,assert(w_done || r_done);,1
exportsd.v,4815,assert(o_mem_addr <= 3);,1
exportsd.v,4821,assert(srcount <= 48);,1
exportsd.v,4826,assert(srcount[0] == 1'b0);,1
exportsd.v,4830,assert(!waiting_on_response);,1
exportsd.v,4837,assert(!rx_timeout);,1
exportsd.v,4841,assert(!o_err && o_ercode == 2'b00);,1
exportsd.v,4848,assert(!r_done);,1
exportsd.v,4852,assert(!r_done);,1
exportsd.v,4859,assert(!r_done);,1
exportsd.v,4864,assert(!r_done);,1
exportsd.v,4869,assert(!waiting_on_response);,1
exportsd.v,4878,assert(r_busy);,1
exportsd.v,4883,assert(!o_done);,1
exportsd.v,4889,assert(f_busy == r_busy);,1
exportsd.v,4893,assert(o_ercode != ECODE_OKAY);,1
exportsd.v,4905,cover(i_cmd_type == R_NONE);,1
exportsd.v,4910,cover(i_cmd_type == R_R1 && !o_err);,1
exportsd.v,4911,cover(i_cmd_type == R_R1 && o_err && o_ercode == ECODE_BADCRC);,1
exportsd.v,4912,cover(i_cmd_type == R_R1 && o_err && o_ercode== ECODE_FRAMEERR);,1
exportsd.v,4915,cover(i_cmd_type == R_R2 && !o_err);,1
exportsd.v,4916,cover(i_cmd_type == R_R2 && o_err && o_ercode == ECODE_BADCRC);,1
exportsd.v,4917,cover(i_cmd_type == R_R2 && o_err && o_ercode== ECODE_FRAMEERR);,1
exportsd.v,4922,cover(!o_busy);,1
exportsd.v,5311,assert(rnxt_strb == 0);,1
exportsd.v,5312,assert(rnxt_data == 0);,1
exportsd.v,5315,assert(next_subaddr == 1);,1
exportsd.v,5317,assert(rnxt_data == 0);,1
exportsd.v,5641,assume(i_reset);,1
exportsd.v,5650,assume(!i_cfg_ds);,1
exportsd.v,5654,assume(!i_rx_en);,1
exportsd.v,5656,assume(!i_rx_en);,1
exportsd.v,5658,assume(i_rx_en);,1
exportsd.v,5669,assume(i_length > 0);,1
exportsd.v,5672,assume(i_length[1:0] == 2'b00);,1
exportsd.v,5674,assume(i_length[0] == 1'b0);,1
exportsd.v,5683,assume(i_cfg_width != 2'b11);,1
exportsd.v,5684,assume(i_length <= 16'h8000);,1
exportsd.v,5701,assert(f_state);,1
exportsd.v,5707,assert(busy || r_watchdog);,1
exportsd.v,5717,assume(!r_watchdog);,1
exportsd.v,5721,assume(o_ercode);,1
exportsd.v,5734,assume(i_rx_strb == 0);,1
exportsd.v,5735,assume(S_ASYNC_VALID == 0);,1
exportsd.v,5740,assume(!i_rx_strb[0]);,1
exportsd.v,5744,assume(!S_ASYNC_VALID);,1
exportsd.v,5781,assert(f_count[4:0] == 0);,1
exportsd.v,5784,assert(f_count[2:0] == sync_fill[2:0]);,1
exportsd.v,5785,assert(f_count[2:0] == sync_fill[2:0]);,1
exportsd.v,5789,assert(f_count[2:0] == sync_fill[2:0]);,1
exportsd.v,5808,assert(!s2_valid);,1
exportsd.v,5814,assert(sync_fill == 0);,1
exportsd.v,5849,assert(f_count[LGLEN+3:3] == f_recount);,1
exportsd.v,5862,assert(rail_count <= (i_length*8));,1
exportsd.v,5890,assert(rail_count <= i_length);,1
exportsd.v,5896,assert(!load_crc);,1
exportsd.v,5901,assert(!load_crc);,1
exportsd.v,5902,assert(!pending_crc);,1
exportsd.v,5914,assert(pending_crc);,1
exportsd.v,5923,assert(rail_count + f_count == i_length*8);,1
exportsd.v,5924,assert(f_count <= i_length*8);,1
exportsd.v,5925,assert(rail_count <= i_length*8);,1
exportsd.v,5928,assert(rail_count + f_count == i_length*8+16);,1
exportsd.v,5929,assert(f_count <= i_length*8+16);,1
exportsd.v,5930,assert(rail_count <= i_length*8+16);,1
exportsd.v,5933,assert(rail_count + f_count == i_length*8+32);,1
exportsd.v,5934,assert(f_count <= i_length*8+32);,1
exportsd.v,5935,assert(rail_count <= i_length*8+32);,1
exportsd.v,5940,assert(rail_count <= i_length*2);,1
exportsd.v,5945,assert(rail_count <= i_length*2+16);,1
exportsd.v,5950,assert(rail_count <= i_length*2+32);,1
exportsd.v,5955,assert(rail_count <= i_length);,1
exportsd.v,5960,assert(rail_count <= i_length+16);,1
exportsd.v,5965,assert(rail_count <= i_length+32);,1
exportsd.v,5967,assert(!mem_full);,1
exportsd.v,5980,assert(!mem_full);,1
exportsd.v,5992,assert(f_next_subaddr == next_subaddr);,1
exportsd.v,5996,assert(o_mem_valid);,1
exportsd.v,6000,"assert({ mem_addr, subaddr } == 0);",1
exportsd.v,6004,"assert({ mem_full, o_mem_addr, subaddr } == fmem_count);",1
exportsd.v,6008,assert(!o_mem_valid);,1
exportsd.v,6010,assert(o_mem_strb != 0);,1
exportsd.v,6037,assume(i_rx_data[8] == fc_data[7]);,1
exportsd.v,6039,assume(i_rx_data[8] == fc_data[6]);,1
exportsd.v,6041,assume(i_rx_data[8] == fc_data[5]);,1
exportsd.v,6043,assume(i_rx_data[8] == fc_data[4]);,1
exportsd.v,6045,assume(i_rx_data[8] == fc_data[3]);,1
exportsd.v,6047,assume(i_rx_data[8] == fc_data[2]);,1
exportsd.v,6049,assume(i_rx_data[8] == fc_data[1]);,1
exportsd.v,6051,assume(i_rx_data[8] == fc_data[0]);,1
exportsd.v,6054,assume(i_rx_data[0] == fc_data[7]);,1
exportsd.v,6056,assume(i_rx_data[0] == fc_data[6]);,1
exportsd.v,6058,assume(i_rx_data[0] == fc_data[5]);,1
exportsd.v,6060,assume(i_rx_data[0] == fc_data[4]);,1
exportsd.v,6062,assume(i_rx_data[0] == fc_data[3]);,1
exportsd.v,6064,assume(i_rx_data[0] == fc_data[2]);,1
exportsd.v,6066,assume(i_rx_data[0] == fc_data[1]);,1
exportsd.v,6068,assume(i_rx_data[0] == fc_data[0]);,1
exportsd.v,6077,assume(i_rx_data[11:8] == fc_data[7:4]);,1
exportsd.v,6079,assume(i_rx_data[11:8] == fc_data[3:0]);,1
exportsd.v,6082,assume(i_rx_data[ 3: 0] == fc_data[7:4]);,1
exportsd.v,6084,assume(i_rx_data[ 3: 0] == fc_data[3:0]);,1
exportsd.v,6092,assume(i_rx_data[15:8] == fc_data);,1
exportsd.v,6094,assume(i_rx_data[ 7:0] == fc_data);,1
exportsd.v,6120,assert(sync_sreg[3:0] == fc_data[7:4]);,1
exportsd.v,6139,assert(fmem_data[MW-1:MW-8] == fc_data);,1
exportsd.v,6140,assert(fmem_strb);,1
exportsd.v,6154,cover(!i_crc_en);,1
exportsd.v,6155,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6159,cover(!i_crc_en);,1
exportsd.v,6160,cover(fc_posn == 0 && fc_data == 8'hff);,1
exportsd.v,6161,cover(fc_posn == 0 && fc_data == 8'ha5);,1
exportsd.v,6162,cover(fc_posn == 0 && fc_data == 8'h5a);,1
exportsd.v,6163,cover(fc_posn == 0 && fc_data == 8'h7e);,1
exportsd.v,6164,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6168,cover(!i_crc_en);,1
exportsd.v,6169,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6173,cover(!i_crc_en);,1
exportsd.v,6174,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6178,cover(!i_crc_en);,1
exportsd.v,6179,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6183,cover(!i_crc_en);,1
exportsd.v,6184,cover(o_err); // !!! cover(i_crc_en && !o_err);,2
exportsd.v,6205,cover(!i_crc_en);,1
exportsd.v,6206,cover(o_err);,1
exportsd.v,6207,cover(i_crc_en && !o_err);,1
exportsd.v,6712,assert(ck_valid);,1
exportsd.v,7089,assume(i_reset);,1
exportsd.v,7098,assume(!i_cfg_ddr || i_cfg_spd > 1);,1
exportsd.v,7099,assume(i_cfg_spd > 0);,1
exportsd.v,7104,assume(i_cfg_width != 2'b11);,1
exportsd.v,7110,assert(cfg_period <= P_4D);,1
exportsd.v,7114,assume(i_en);,1
exportsd.v,7127,assert(i_cfg_ddr == cfg_ddr);,1
exportsd.v,7128,assert(i_cfg_width == cfg_width);,1
exportsd.v,7133,assert(cfg_width != 2'b11);,1
exportsd.v,7140,assert(cfg_ddr);,1
exportsd.v,7148,assert(cfg_period == 2'b10);,1
exportsd.v,7152,assert(cfg_period == 2'b01);,1
exportsd.v,7154,assert(cfg_period == 2'b00);,1
exportsd.v,7166,assume(!i_ckstb || !i_hlfck);,1
exportsd.v,7179,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
exportsd.v,7180,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
exportsd.v,7181,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
exportsd.v,7182,"assume({ i_ckstb, i_hlfck } == (f_pending_half ? 2'b01:2'b10));",1
exportsd.v,7191,assume(!i_ckstb);,1
exportsd.v,7193,assume(i_ckstb);,1
exportsd.v,7202,assume(i_ckstb && i_hlfck); // On every clock period end // }}} //////////////////////////////////////////////////////////////////////// // // IO properties // {{{ // Only change on a clock // {{{ always @(posedge i_clk) if (!f_past_valid || $past(i_reset)) assert(!tx_valid); else if (!$past(i_ckstb) && !$past(i_hlfck && cfg_ddr)) begin assert($stable(tx_valid)); assert($stable(tx_data)); end // }}},20
exportsd.v,7229,assert(&tx_data);,1
exportsd.v,7232,assert(tx_data[31:25] == 7'h7f);,1
exportsd.v,7233,assert(tx_data[23:17] == 7'h7f);,1
exportsd.v,7234,assert(tx_data[15: 9] == 7'h7f);,1
exportsd.v,7235,assert(tx_data[ 7: 1] == 7'h7f);,1
exportsd.v,7238,assert(tx_data[31:28] == 4'hf);,1
exportsd.v,7239,assert(tx_data[23:20] == 4'hf);,1
exportsd.v,7240,assert(tx_data[15:12] == 4'hf);,1
exportsd.v,7241,assert(tx_data[ 7: 4] == 4'hf);,1
exportsd.v,7254,assert(tx_data[31:24] == tx_data[ 7: 0]);,1
exportsd.v,7255,assert(tx_data[23:16] == tx_data[ 7: 0]);,1
exportsd.v,7256,assert(tx_data[15: 8] == tx_data[ 7: 0]);,1
exportsd.v,7259,assert(tx_data[31:24] == tx_data[23:16]);,1
exportsd.v,7260,assert(tx_data[15: 8] == tx_data[ 7: 0]);,1
exportsd.v,7268,assert(tx_valid && pre_valid);,1
exportsd.v,7272,assert(!tx_valid);,1
exportsd.v,7283,assume(i_en);,1
exportsd.v,7287,assume(!S_VALID);,1
exportsd.v,7295,assert(fs_count == 0);,1
exportsd.v,7302,assert(fcrc_count == fs_count);,1
exportsd.v,7304,assert(fcrc_count >= fs_count);,1
exportsd.v,7311,assume(!S_VALID);,1
exportsd.v,7312,assume(!i_en);,1
exportsd.v,7315,assume(S_VALID);,1
exportsd.v,7319,assume(S_VALID);,1
exportsd.v,7323,assume(!S_VALID);,1
exportsd.v,7327,assume(!S_VALID || S_LAST);,1
exportsd.v,7331,assert(fs_last);,1
exportsd.v,7335,assert(!fs_last);,1
exportsd.v,7339,assert(fs_last);,1
exportsd.v,7343,assert(!fs_last && S_VALID && fs_count > 0);,1
exportsd.v,7353,assume(fc_data == S_DATA);,1
exportsd.v,7369,assert(ck_counts == ((cfg_ddr && f_pending_half) ? 1:0));,1
exportsd.v,7373,assert(fs_count <= 1);,1
exportsd.v,7374,assert(fd_count == 0);,1
exportsd.v,7397,assert(pstate != P_IDLE);,1
exportsd.v,7400,assert(pstate != P_IDLE);,1
exportsd.v,7413,assert(pstate != P_IDLE);,1
exportsd.v,7415,assert(pre_data == fc_data);,1
exportsd.v,7417,assert(pstate == P_IDLE || pstate == P_LAST);,1
exportsd.v,7424,assert(pre_count <= 7);,1
exportsd.v,7428,assert(pre_valid);,1
exportsd.v,7434,assert(pre_count == (cfg_ddr) ? 7 : 3);,1
exportsd.v,7441,assert(pre_valid);,1
exportsd.v,7443,assert(pre_count <= (cfg_ddr) ? 7 : 3);,1
exportsd.v,7450,assert(pre_count == 0);,1
exportsd.v,7459,assert(fd_count == 0);,1
exportsd.v,7468,assert(pre_valid);,1
exportsd.v,7469,assert(fcrc_count == 1 + f_loaded_count[14:5]);,1
exportsd.v,7472,assert(ck_counts == 0);,1
exportsd.v,7492,assert(ck_counts == 0);,1
exportsd.v,7501,assert(ck_counts <= 7);,1
exportsd.v,7504,assert(ck_counts <= 3);,1
exportsd.v,7511,assert(ck_counts <= 15);,1
exportsd.v,7514,assert(ck_counts <= 3);,1
exportsd.v,7517,assert(ck_counts <= 1);,1
exportsd.v,7524,assert(ck_counts <= 7);,1
exportsd.v,7527,assert(ck_counts <= 1);,1
exportsd.v,7530,assert(ck_counts == 0);,1
exportsd.v,7532,"assert(fd_count + 32 == { fp_count, 5'h0 });",1
exportsd.v,7534,assert(ck_data == fc_data);,1
exportsd.v,7587,assert(ck_counts[0] == f_pending_half || (!pre_valid && pstate == P_LAST && ck_counts==0));,2
exportsd.v,7593,assert(ck_counts[0] == f_pending_half || (!pre_valid && pstate == P_LAST && ck_counts==0));,2
exportsd.v,7635,cover(1);,1
exportsd.v,7636,cover(1);,1
exportsd.v,7637,cover(1);,1
exportsd.v,7642,cover(1);,1
exportsd.v,7643,cover(1);,1
exportsd.v,7644,cover(1);,1
exportsd.v,7651,cover(1);,1
exportsd.v,7653,cover(1);,1
exportsd.v,7654,cover(fs_count == 1);,1
exportsd.v,7655,cover(fs_count == 2);,1
exportsd.v,7656,cover(fs_count == 3); // !!! cover(fs_count == 4); // !!! cover(S_VALID && S_LAST);,3
exportsd.v,7659,cover(!S_VALID);,1
exportsd.v,7661,cover(pstate == P_CRC);,1
exportsd.v,7662,cover(pstate == P_LAST); // !!! cover(!pre_valid); // !!! end WIDTH_8W: cover(1);,4
sdwb.v,369,assert(cmd_busy);,1
sdwb.v,460,assert(r_card_busy);,1
sdwb.v,466,assert(r_busy_counter == 0);,1
sdwb.v,523,assert(!r_tx_request || !o_tx_en);,1
sdwb.v,528,assert(r_tx_request || o_tx_en);,1
sdwb.v,561,assert(!r_rx_request || !o_rx_en);,1
sdwb.v,564,assert(r_rx_request || o_rx_en);,1
sdwb.v,795,assert(!o_cfg_shutdown);,1
sdwb.v,798,assert(!o_cfg_shutdown);,1
sdwb.v,845,assert(!o_cfg_ddr);,1
sdwb.v,848,assert(!o_cfg_ds);,1
sdwb.v,851,assert(!o_cfg_dscmd);,1
sdwb.v,910,assert(o_cfg_ckspeed >= 2);,1
sdwb.v,914,assert(o_cfg_ckspeed >= 1);,1
sdwb.v,1265,assert(!i_cmd_mem_valid || !i_rx_mem_valid);,1
sdwb.v,1362,assume(i_reset);,1
sdwb.v,1401,assert(cmd_busy);,1
sdwb.v,1405,assert(!cmd_busy);,1
sdwb.v,1409,assume(i_cmd_busy);,1
sdwb.v,1418,assume(!i_cmd_mem_valid);,1
sdwb.v,1424,assume(i_cmd_ercode == 2'b00);,1
sdwb.v,1426,assert(!o_cmd_request);,1
sdwb.v,1431,assert(!o_cmd_request);,1
sdwb.v,1434,assert(o_cmd_request);,1
sdwb.v,1447,assert(o_cmd_request && o_cmd_type == RNO_REPLY);,1
sdwb.v,1457,assert(!o_rx_en && !r_rx_request);,1
sdwb.v,1458,assert(!cmd_busy || o_cmd_type != R2_REPLY);,1
sdwb.v,1461,assert(!cmd_busy || o_cmd_type != R2_REPLY);,1
sdwb.v,1488,assert(!o_cmd_request);,1
sdwb.v,1493,assert(!o_cmd_request);,1
sdwb.v,1497,assert(!o_cmd_request);,1
sdwb.v,1500,assert(o_cmd_request);,1
sdwb.v,1506,assert(o_cmd_request && o_cmd_selfreply);,1
sdwb.v,1508,assert(!o_cmd_request);,1
sdwb.v,1516,assert(cmd_busy);,1
sdwb.v,1528,assert(o_cmd_request);,1
sdwb.v,1529,assert(mem_busy);,1
sdwb.v,1534,assert(o_cmd_request);,1
sdwb.v,1535,assert(r_rx_request);,1
sdwb.v,1540,assert(o_cmd_request);,1
sdwb.v,1541,assert(r_tx_request);,1
sdwb.v,1546,assert(!o_cmd_request);,1
sdwb.v,1547,assert(r_rx_request);,1
sdwb.v,1552,assert(!o_cmd_request);,1
sdwb.v,1553,assert(r_tx_request);,1
sdwb.v,1566,assert(fif_wraddr == 0);,1
sdwb.v,1567,assert(fif_rdaddr == 0);,1
sdwb.v,1583,assert(o_cmd_request);,1
sdwb.v,1584,assert(o_cmd_selfreply);,1
sdwb.v,1585,assert(o_cmd_type == RNO_REPLY);,1
sdwb.v,1597,assert(!o_tx_mem_valid);,1
sdwb.v,1601,assert(!o_tx_en);,1
sdwb.v,1604,assert(o_tx_mem_valid);,1
sdwb.v,1611,assert(!r_tx_request);,1
sdwb.v,1627,assume(!i_rx_mem_valid);,1
sdwb.v,1631,assert(!r_rx_request || !o_rx_en);,1
sdwb.v,1672,assume(f_mem == 0);,1
sdwb.v,1673,assume(f_word == 0);,1
sdwb.v,1675,assert(f_word == f_mem);,1
sdwb.v,1704,assert(o_tx_mem_data == f_word);,1
sdwb.v,1718,assert(r_fifo == f_txaddr[LGFIFO32]);,1
sdwb.v,1723,assert(tx_pipe_valid);,1
sdwb.v,1729,assert(next_tx_mem == f_word);,1
sdwb.v,1739,assert(tx_mem_addr == 0);,1
sdwb.v,1741,assert(tx_mem_addr == 1);,1
sdwb.v,1746,assert(!tx_pipe_valid && !o_tx_mem_valid);,1
sdwb.v,1786,assert(r_width != 2'b11);,1
sdwb.v,1788,assert(r_width == WIDTH_1W);,1
sdwb.v,1790,assert(r_width == WIDTH_1W || r_width == WIDTH_4W);,1
sdwb.v,1795,assert(o_cfg_ddr);,1
sdwb.v,1800,assert(lgblk <= LGFIFO);,1
sdwb.v,1801,assert(lgblk >= 2);,1
sdwb.v,1814,"assume(lgblk < 15); // Assume no overflow ... for now // Assume the user won't do something dumb, like write to the same FIFO // we're reading from, or either read or write from the same FIFO we // are writing to // {{{ always @(*) if (o_tx_en || r_tx_request) assume(!i_wb_stb || !i_wb_we || i_wb_addr != ADDR_FIFOA + r_fifo); always @(*) if (cmd_busy && o_cmd_type == R2_REPLY) assume(!i_wb_stb || i_wb_addr != ADDR_FIFOA + r_fifo); always @(*) if (o_rx_en || r_rx_request) assume(!i_wb_stb || i_wb_addr != ADDR_FIFOA + r_fifo); // }}} // }}} `endif // FORMAL",21
spirxdata.v,395,assert(!o_busy);,1
spirxdata.v,396,assert(o_write == 0);,1
spirxdata.v,402,assert(!o_rxvalid);,1
spirxdata.v,403,assert(crc_fill == 0);,1
spirxdata.v,408,assert(!o_write);,1
spirxdata.v,467,assert(fill == 0);,1
spirxdata.v,472,assert(lastaddr);,1
spirxdata.v,473,assert(all_mem_written || o_write);,1
spirxdata.v,474,assert(lastdata);,1
spirxdata.v,480,assert(lastaddr);,1
spirxdata.v,481,assert(lastdata);,1
spirxdata.v,487,assert(lastaddr);,1
spirxdata.v,503,assert(f_lgblksz >= 3);,1
spirxdata.v,504,assert(f_lgblksz <= 9);,1
spirxdata.v,506,assert(o_addr[AW-1] == f_fifo);,1
spirxdata.v,511,assert(o_addr[AW-2:0] == 0);,1
spirxdata.v,512,assert(fill == 0);,1
spirxdata.v,518,assert(f_lgblksz_m3[2:0] == r_lgblksz_m3);,1
spirxdata.v,547,assert(fill[0]);,1
spirxdata.v,549,assert(fill[2] == 0);,1
spirxdata.v,560,assert(crc_fill <= 4);,1
spirxdata.v,565,assert(!crc_active);,1
spirxdata.v,566,assert(crc_fill == 0);,1
spirxdata.v,567,assert(crc_data == 0);,1
spirxdata.v,574,assert(next_crc_data == 0);,1
spirxdata.v,597,assume(!f_read_check);,1
spirxdata.v,617,assert(rdvalid != 0);,1
spirxdata.v,618,assert(fill == 5'h10);,1
spirxdata.v,621,assert(rdvalid == 0);,1
spirxdata.v,622,assert(fill == 5'h1f);,1
spirxdata.v,623,assert(gearbox[DW-1:0] == f_read_data);,1
spirxdata.v,626,assert(rdvalid == 0);,1
spirxdata.v,627,assert(fill == 5'h1e);,1
spirxdata.v,628,assert(gearbox[8+DW-1:8] == f_read_data);,1
spirxdata.v,631,assert(rdvalid == 0);,1
spirxdata.v,632,assert(fill == 5'h1c);,1
spirxdata.v,633,assert(gearbox[8+DW-1:16] == f_read_data[23:0]);,1
spirxdata.v,636,assert(rdvalid == 0);,1
spirxdata.v,637,assert(fill == 5'h18);,1
spirxdata.v,638,assert(gearbox[8+DW-1:24] == f_read_data[15:0]);,1
spirxdata.v,641,assert(fill[4]);,1
spirxdata.v,642,assert(gearbox[8+DW-1:DW] == f_read_data[7:0]);,1
spirxdata.v,662,cover(error_token);,1
spirxdata.v,663,cover(start_token);,1
spirxdata.v,675,cover(o_rxvalid);,1
spirxdata.v,676,cover(o_rxvalid && all_mem_written);,1
spirxdata.v,677,cover(o_rxvalid && f_lgblksz == 4 && all_mem_written);,1
spirxdata.v,678,cover(o_rxvalid && f_lgblksz == 4 && o_response == 0);,1
spirxdata.v,679,cover(o_rxvalid && f_lgblksz == 4 && o_response == 0 && all_mem_written);,1
spirxdata.v,681,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h01);,1
spirxdata.v,682,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h02);,1
spirxdata.v,683,cover(o_busy && f_lgblksz == 4 && o_addr == 8'h03);,1
spirxdata.v,684,cover(o_busy && crc_byte == 0);,1
spirxdata.v,685,cover(o_busy && crc_byte == 1);,1
spirxdata.v,686,cover(o_busy && crc_byte == 2);,1
spirxdata.v,687,cover(o_busy && crc_byte == 1 && i_ll_stb);,1
spirxdata.v,688,cover(o_busy && crc_byte == 2 && i_ll_stb);,1
spirxdata.v,690,cover(cvr_packet_received && !o_busy);,1
mdl_sdio.v,301,assert(cmd_arg[31:12]==20'h0);,1
mdl_sdio.v,302,assert(cmd_arg[11:8]==4'h1);,1
mdl_sdrx.v,140,assert(crcfill == 0);,1
mdl_sdrx.v,158,assert(halffill == 0);,1
mdl_sdrx.v,265,assert(!o_err);,1
mdl_sdcmd.v,120,assert(ireg[47:46] == 2'b01);,1
mdl_sdcmd.v,121,assert(ireg[0]);,1
tb_txframe.v,517,assert(crcfill == 0);,1
sdiolib.v,121,assert(r_interrupted);,1
sdiolib.v,139,"assert(!ctrl_reg[15]); // && ctrl_reg[17:16] == 2'b01); end endtask // }}} task sdcard_all_send_cid; // CMD2 // {{{ reg [31:0] ctrl_reg; begin // Send CMD2: ALL_SEND_CID u_bfm.writeio(ADDR_SDDATA, 32'h0); u_bfm.writeio(ADDR_SDCARD, SDIO_READCID); // 0x08242 sdio_wait_while_busy; u_bfm.readio(ADDR_SDCARD, ctrl_reg); assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]); // We leave the CID in the FIFO to be read out later end endtask // }}}",20
sdiolib.v,171,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,187,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,205,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,240,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,254,assert(!ctrl_reg[15] && ctrl_reg[17:16] == 2'b01);,1
sdiolib.v,308,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiolib.v,336,assert(1'b0 === ctrl_reg[15] && 2'b01 === ctrl_reg[17:16]);,1
sdiostart.v,65,assert(if_cond[7:0] == 8'ha5);,1
sdiostart.v,97,assert(CID[127:8] == u_sdcard.CID);,1
fwb_register.v,81,assume(i_reset);,1
fwb_register.v,119,assert(error_mask == 0);,1
fwb_register.v,126,assert(i_wb_ack);,1
fwb_register.v,128,assert(!i_wb_ack);,1
sdspi.v,876,assert(!tx_busy || !rx_busy);,1
sdspi.v,879,assert(!tx_start || !rx_start);,1
sdspi.v,884,assert(!tx_start && !rx_start);,1
sdspi.v,885,assert(!tx_busy && !rx_busy);,1
sdspi.v,887,assert(!rx_start && !rx_busy);,1
sdspi.v,889,assert(!tx_start && !tx_busy);,1
sdspi.v,894,assert(r_cmd_busy);,1
sdspi.v,898,assert(r_lgblklen >= 3);,1
sdspi.v,899,assert(r_lgblklen <= 9);,1
sdspi.v,905,assert(spi_read_addr[LGFIFOLN-1:0] <= 1);,1
sdspi.v,906,assert(spi_write_addr[LGFIFOLN-1:0] <= 1);,1
sdspi.v,932,assert(ll_cmd_stb);,1
sdspi.v,933,assert(ll_cmd_dat == f_cmd_byte);,1
sdspi.v,1000,assert(!cmd_busy && !tx_busy && !rx_busy);,1
sdspi.v,1011,cover(cmd_sent && !r_cmd_busy);,1
sdspi.v,1012,cover(tx_busy && tx_start);,1
sdspi.v,1013,cover(rx_busy && rx_start);,1
top_level.v,173,assert property(counter_counts);,1
top_level.v,178,assert property(counter_counts);,1
top_level.v,183,assert property(counter_counts);,1
top_level.v,188,assert property(counter_counts);,1
top_level.v,189,assert property(counter_doesnt_count);,1
top_level.v,190,assert property (counters_equal_2_cycles_apart);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
sodor5_lb_unified_bmc.v,157,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,161,assert(!lb_diverge);,1
sodor1_ind.v,47,assume(mo_ou_io_port_regfile == de_ou_io_port_regfile);,1
sodor1_ind.v,48,assume(mo_ou_io_port_pc == de_ou_io_imem_req_bits_addr);,1
sodor1_ind.v,99,assert(mo_ou_io_port_pc == de_ou_io_imem_req_bits_addr);,1
sodor1_ind.v,100,assert(mo_ou_io_port_regfile == de_ou_io_port_regfile);,1
sodor1_ind.v,105,assume(!reset);,1
sodor1_bmc.v,81,assume(mo_ou_io_port_regfile == de_ou_io_port_regfile);,1
sodor1_bmc.v,98,assert(mo_ou_io_port_pc == de_ou_io_imem_req_bits_addr);,1
sodor1_bmc.v,99,assert(mo_ou_io_port_regfile == de_ou_io_port_regfile);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_distinguisher_old.v,392,assume(de_io_port_imm == copy1_imm);,1
sodor5_distinguisher_old.v,393,assume(de_io_port_alu_out == copy1_alu_out);,1
sodor5_distinguisher_old.v,394,assume(de_io_port_reg_rs1_addr_in == copy1_reg_rs1_addr_in);,1
sodor5_distinguisher_old.v,395,assume(de_io_port_reg_rs2_addr_in == copy1_reg_rs2_addr_in);,1
sodor5_distinguisher_old.v,396,assume(de_io_port_reg_rs1_data_out == copy1_reg_rs1_data_out);,1
sodor5_distinguisher_old.v,397,assume(de_io_port_reg_rs2_data_out == copy1_reg_rs2_data_out);,1
sodor5_distinguisher_old.v,398,assume(de_io_port_reg_rd_data_in == copy1_reg_rd_data_in);,1
sodor5_distinguisher_old.v,399,assume(de_io_port_reg_rd_addr_in == copy1_reg_rd_addr_in);,1
sodor5_distinguisher_old.v,400,assume(de_io_port_regfile == copy1_port_regfile);,1
sodor5_distinguisher_old.v,402,assume(de_io_port_imm == copy2_imm);,1
sodor5_distinguisher_old.v,403,assume(de_io_port_alu_out == copy2_alu_out);,1
sodor5_distinguisher_old.v,404,assume(de_io_port_reg_rs1_addr_in == copy2_reg_rs1_addr_in);,1
sodor5_distinguisher_old.v,405,assume(de_io_port_reg_rs2_addr_in == copy2_reg_rs2_addr_in);,1
sodor5_distinguisher_old.v,406,assume(de_io_port_reg_rs1_data_out == copy2_reg_rs1_data_out);,1
sodor5_distinguisher_old.v,407,assume(de_io_port_reg_rs2_data_out == copy2_reg_rs2_data_out);,1
sodor5_distinguisher_old.v,408,assume(de_io_port_reg_rd_data_in == copy2_reg_rd_data_in);,1
sodor5_distinguisher_old.v,409,assume(de_io_port_reg_rd_addr_in == copy2_reg_rd_addr_in);,1
sodor5_distinguisher_old.v,410,assume(de_io_port_regfile == copy2_port_regfile);,1
sodor5_lb_unified_bmc.v,170,assert(!lb_diverge);,1
sodor5_lb_bmc.v,157,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_bmc.v,161,assert(!lb_diverge);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_lb_model_bmc.v,159,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_model_bmc.v,163,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,157,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,161,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,158,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,162,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,165,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,166,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,170,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,164,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,160,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,164,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,165,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,161,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,165,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_lb_unified_bmc.v,165,assume(de_io_port_regfile1 == de_io_port_regfile2);,1
sodor5_lb_unified_bmc.v,169,assert(!lb_diverge);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
sodor5_bmc.v,377,assume(mo_io_port_dmem_resp_bits_data == de_io_port_dmem_resp_bits_data);,1
sodor5_bmc.v,378,assume(mo_io_port_dmem_resp_valid == de_io_port_dmem_resp_valid);,1
sodor5_bmc.v,379,assume(mo_io_port_dmem_req_ready == de_io_port_dmem_req_ready);,1
sodor5_bmc.v,380,assume(mo_io_port_lb_table_data == de_io_port_lb_table_data);,1
sodor5_bmc.v,383,assume(all_equal);,1
sodor5_bmc.v,384,assume(mo_io_port_lb_table_addr == de_io_port_lb_table_addr);,1
sodor5_bmc.v,385,assume(mo_io_port_lb_table_valid == de_io_port_lb_table_valid);,1
cva6_tlb_equiv.v,154,assume(tb_io_update_i == 0);,1
cva6_tlb_equiv.v,158,assert(mo_io_content_q == de_io_content_q);,1
cva6_tlb_equiv.v,159,assert(mo_io_tags_q == de_io_tags_q);,1
cva6_tlb_equiv.v,154,assume(tb_io_update_i == 0);,1
cva6_tlb_equiv.v,158,assert(mo_io_content_q == de_io_content_q);,1
cva6_tlb_equiv.v,159,assert(mo_io_tags_q == de_io_tags_q);,1
cva6_tlb_ni_model.v,137,assume(eviction_indices_0 == 1 || eviction_indices_0 == 2 || eviction_indices_0 == 4 || eviction_indices_0 == 8);,1
cva6_tlb_ni_model.v,138,assume(eviction_indices_1 == 1 || eviction_indices_1 == 2 || eviction_indices_1 == 4 || eviction_indices_1 == 8);,1
cva6_tlb_ni_model.v,139,assume(eviction_indices_2 == 1 || eviction_indices_2 == 2 || eviction_indices_2 == 4 || eviction_indices_2 == 8);,1
cva6_tlb_ni_model.v,140,assume(eviction_indices_3 == 1 || eviction_indices_3 == 2 || eviction_indices_3 == 4 || eviction_indices_3 == 8);,1
cva6_tlb_ni_model.v,141,assume(eviction_indices_0 != eviction_indices_1);,1
cva6_tlb_ni_model.v,142,assume(eviction_indices_0 != eviction_indices_2);,1
cva6_tlb_ni_model.v,143,assume(eviction_indices_0 != eviction_indices_3);,1
cva6_tlb_ni_model.v,144,assume(eviction_indices_1 != eviction_indices_3);,1
cva6_tlb_ni_model.v,145,assume(eviction_indices_2 != eviction_indices_3);,1
cva6_tlb_ni_model.v,146,assume(eviction_indices_1 != eviction_indices_2);,1
cva6_tlb_ni_model.v,149,assume(tb_io_update_i_0 == tb_io_update_i_1);,1
cva6_tlb_ni_model.v,150,assume(tb_io_update_i_0[62]);,1
cva6_tlb_ni_model.v,151,assume(tb_io_update_i_1[62]);,1
cva6_tlb_ni_model.v,152,assume(!tb_io_flush_i);,1
cva6_tlb_ni_model.v,153,assume(eviction_master == de_io_replace_en_0);,1
cva6_tlb_ni_model.v,154,assume(eviction_master == de_io_replace_en_1);,1
cva6_tlb_ni_model.v,157,assert(de_io_content_q_0 == de_io_content_q_1);,1
cva6_tlb_ni_model.v,158,assert(de_io_tags_q_0 == de_io_tags_q_1);,1
cva6_tlb_distinguisher.v,154,assume(asid == 9'd1);,1
cva6_tlb_ni.v,155,assume(tb_io_update_i_0 == tb_io_update_i_1);,1
cva6_tlb_ni.v,156,assume(tb_io_update_i_0[62]);,1
cva6_tlb_ni.v,157,assume(tb_io_update_i_1[62]);,1
cva6_tlb_ni.v,158,assume(!tb_io_flush_i);,1
cva6_tlb_ni.v,161,assert(de_io_content_q_0 == de_io_content_q_1);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0010011 && instr0[14:12] == 3'b000);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,168,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,169,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,205,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_wbuffer_equiv.v,553,assert(all_equal);,1
cva6_wbuffer_distinguisher_old0.v,368,assert(0);,1
cva6_lsu_formal.v,199,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,200,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,201,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,202,assume(instr3[6:0] == 7'b0000011 && instr3[14:12] == 3'b010);,1
cva6_lsu_formal.v,204,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,206,assume(instr0[11:7] != instr2[19:15]);,1
cva6_lsu_formal.v,208,assume(instr0[11:7] != instr3[19:15]);,1
cva6_lsu_formal.v,209,assume(instr2[11:7] != instr3[19:15]);,1
cva6_lsu_formal.v,211,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,215,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,216,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,252,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_tlb_equiv.v,154,assume(tb_io_update_i == 0);,1
cva6_tlb_equiv.v,158,assert(mo_io_content_q == de_io_content_q);,1
cva6_tlb_equiv.v,159,assert(mo_io_tags_q == de_io_tags_q);,1
cva6_tlb_equiv.v,154,assume(tb_io_update_i == 0);,1
cva6_tlb_equiv.v,158,assert(mo_io_content_q == de_io_content_q);,1
cva6_tlb_equiv.v,159,assert(mo_io_tags_q == de_io_tags_q);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,164,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,166,assume(instr0[11:7] != instr2[19:15]);,1
cva6_lsu_formal.v,168,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,172,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,173,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,209,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0010011 && instr0[14:12] == 3'b000);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,168,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,169,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,205,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0010011 && instr0[14:12] == 3'b000);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,164,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,168,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,169,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,205,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0010011 && instr0[14:12] == 3'b000);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,164,assume(instr1[31:25] == 0 && instr1[11:7] == 0 && instr1[19:15] == instr2[19:15]);,1
cva6_lsu_formal.v,165,assume(instr2[31:20] == 0);,1
cva6_lsu_formal.v,171,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,172,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,208,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,164,assume(instr1[31:25] == 0 && instr1[11:7] == 0 && instr1[19:15] == instr2[19:15]);,1
cva6_lsu_formal.v,165,assume(instr2[31:20] == 0);,1
cva6_lsu_formal.v,171,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,172,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,208,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0000011 && instr3[14:12] == 3'b010);,1
cva6_lsu_formal.v,164,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,166,assume(instr0[11:7] != instr2[19:15]);,1
cva6_lsu_formal.v,168,assume(instr0[11:7] != instr3[19:15]);,1
cva6_lsu_formal.v,169,assume(instr2[11:7] != instr3[19:15]);,1
cva6_lsu_formal.v,171,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,175,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,176,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,212,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0000011 && instr3[14:12] == 3'b010);,1
cva6_lsu_formal.v,164,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,166,assume(instr0[11:7] != instr2[19:15]);,1
cva6_lsu_formal.v,171,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,175,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,176,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,212,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,171,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,172,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,208,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,160,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,163,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,165,assume(instr0[11:7] != instr1[19:15]);,1
cva6_lsu_formal.v,170,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,174,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,175,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,211,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_lsu_formal.v,159,assume(instr0[6:0] == 7'b0000011 && instr0[14:12] == 3'b010);,1
cva6_lsu_formal.v,160,assume(instr1[6:0] == 7'b0100011 && instr1[14:12] == 3'b010);,1
cva6_lsu_formal.v,161,assume(instr2[6:0] == 7'b0000011 && instr2[14:12] == 3'b010);,1
cva6_lsu_formal.v,162,assume(instr3[6:0] == 7'b0010011 && instr3[14:12] == 3'b000);,1
cva6_lsu_formal.v,167,assume(de_io_regfile_o_1 == de_io_regfile_o_2);,1
cva6_lsu_formal.v,171,assume (de_io_load_mem_resp_i_1 == de_io_load_mem_resp_i_2);,1
cva6_lsu_formal.v,172,assume (de_io_store_mem_resp_i_1 == de_io_store_mem_resp_i_2);,1
cva6_lsu_formal.v,208,assert (de_io_instr_ready_o_1 == de_io_instr_ready_o_2);,1
cva6_wbuffer_equiv.v,553,assert(all_equal);,1
boxcar.v,329,assume(i_reset);,1
boxcar.v,334,assume(i_ce);,1
boxcar.v,338,assume(i_navg > 3);,1
boxcar.v,342,assert(f_sum == acc);,1
boxcar.v,345,assert(f_navg > 3);,1
boxcar.v,361,assert(f_rdaddr == rdaddr);,1
boxcar.v,379,assert(full);,1
boxcar.v,391,assert(f_sum == acc);,1
boxcar.v,393,assert(f_sum == acc);,1
wrapper.v,29,assert property(check_add);,1
wrapper.v,32,assert property(check_add);,1
wrapper.v,29,assert property(check_add);,1
wrapper.v,32,assert property(check_add);,1
NESGamepad.v,171,assert(f_valid_state);,1
VexRiscv.v,17305,"assert(1'b0); // core.scala:L521 `else if(!1'b0) begin $display(""NOTE input.value %x"", writeback_port_payload_data_value_mantissa); // core.scala:L521 end `endif `endif end end if(writeback_port_valid) begin `ifndef SYNTHESIS `ifdef FORMAL assert((! ((writeback_port_payload_data_value_exponent == 12'h0) && (! writeback_port_payload_data_value_special)))); // FpuCore.scala:L1714 `else if(!(! ((writeback_port_payload_data_value_exponent == 12'h0) && (! writeback_port_payload_data_value_special)))) begin $display(""FAILURE Special violation""); // FpuCore.scala:L1714 $finish;",17
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
cache.v,519,assert property (cache_read_hit) else $display("ERROR: Expected cache ready on read hit.");,2
axi2wb.v,371,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,372,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,373,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,377,assert(!o_wb_we);,1
axi2wb.v,378,assert(!o_wb_stb);,1
axi2wb.v,379,assert(!o_wb_cyc);,1
axi2wb.v,380,assert(!aw_req);,1
axi2wb.v,381,assert(!ar_req);,1
axi2wb.v,382,assert(!w_req);,1
axi2wb.v,383,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,384,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,385,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,388,assert(!o_wb_we);,1
axi2wb.v,389,assert(!o_wb_stb);,1
axi2wb.v,390,assert(!o_wb_cyc);,1
axi2wb.v,392,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,393,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,398,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,401,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,402,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,406,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,409,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,410,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,414,assert(0);,1
zipaxil.v,543,assert(!S_DBG_RVALID);,1
zipaxil.v,747,assert(!cmd_halt);,1
zipaxil.v,1451,assert(!dbg_read_valid || !S_DBG_RVALID);,1
zipaxi.v,496,assert(!S_DBG_RVALID);,1
zipaxi.v,700,assert(!cmd_halt);,1
zipaxi.v,1480,assert(!dbg_read_valid || !S_DBG_RVALID);,1
zipsystem.v,834,assert(!cmd_halt);,1
zipsystem.v,1502,assume(!cpu_gbl_cyc && !cpu_gbl_stb);,1
zipbones.v,474,assert(!cmd_halt);,1
zipbones.v,941,assert(!dbg_pre_ack);,1
zipbones.v,944,assert(fwb_outstanding == dbg_pre_ack + o_dbg_ack);,1
zipbones.v,949,assume(i_dbg_cyc);,1
zipdma_mm2s.v,369,assert(rdack_len == 0);,1
zipdma_mm2s.v,370,assert(fill == m_bytes);,1
zipdma_mm2s.v,899,assume(i_reset);,1
zipdma_mm2s.v,913,assume(!i_request);,1
zipdma_mm2s.v,916,assume(i_request);,1
zipdma_mm2s.v,926,assume(f_cfg_len > 0);,1
zipdma_mm2s.v,929,assume(i_inc == f_cfg_inc);,1
zipdma_mm2s.v,930,assume(i_size == f_cfg_size);,1
zipdma_mm2s.v,931,assume(i_addr == f_cfg_addr);,1
zipdma_mm2s.v,932,assume(i_transferlen == f_cfg_len);,1
zipdma_mm2s.v,935,assert(r_inc == f_cfg_inc);,1
zipdma_mm2s.v,936,assert(r_size == f_cfg_size);,1
zipdma_mm2s.v,937,assert(r_addr == f_cfg_addr);,1
zipdma_mm2s.v,938,assert(r_transferlen == f_cfg_len);,1
zipdma_mm2s.v,1013,assert(first_size == f_cfg_len);,1
zipdma_mm2s.v,1015,assert(first_size == f_cfg_len);,1
zipdma_mm2s.v,1020,assert(first_size == f_cfg_len);,1
zipdma_mm2s.v,1036,"assert({ o_rd_addr, subaddr } == f_cfg_addr);",1
zipdma_mm2s.v,1038,"assert({ o_rd_addr, subaddr } == f_cfg_addr + f_rcvd + f_outstanding_bytes);",1
zipdma_mm2s.v,1044,assert(subaddr == 0);,1
zipdma_mm2s.v,1088,assert(!o_rd_we);,1
zipdma_mm2s.v,1092,assert(!o_rd_cyc);,1
zipdma_mm2s.v,1104,assert(fwb_outstanding == wb_outstanding);,1
zipdma_mm2s.v,1139,assert(base_sel != 0);,1
zipdma_mm2s.v,1172,assert(base_sel == f_base_sel);,1
zipdma_mm2s.v,1193,assert(o_rd_sel != 0);,1
zipdma_mm2s.v,1203,assert(o_rd_sel != 0);,1
zipdma_mm2s.v,1327,assert(rdstb_size == f_cfg_len);,1
zipdma_mm2s.v,1330,assert(rdstb_size == rdstb_len);,1
zipdma_mm2s.v,1332,assert(rdstb_size == f_stb_size);,1
zipdma_mm2s.v,1338,assert(rdstb_size <= rdstb_len);,1
zipdma_mm2s.v,1374,assert(rdack_size == f_cfg_len);,1
zipdma_mm2s.v,1377,assert(rdack_size == rdack_len);,1
zipdma_mm2s.v,1379,assert(rdack_size == f_ack_size);,1
zipdma_mm2s.v,1416,assert(rdack_len[0] == (f_cfg_addr[0] ^ f_cfg_len[0]));,1
zipdma_mm2s.v,1417,assert(rdack_len[0] == (f_cfg_addr[0] ^ f_cfg_len[0]));,1
zipdma_mm2s.v,1418,assert(rdack_len[0] == (f_cfg_addr[0] ^ f_cfg_len[0]));,1
zipdma_mm2s.v,1433,assert(f_rcvd <= f_cfg_len + DW/8 - 1);,1
zipdma_mm2s.v,1434,assert(f_rcvd <= f_cfg_len + DW/8 - 1);,1
zipdma_mm2s.v,1435,assert(f_rcvd <= f_cfg_len + DW/8 - 1);,1
zipdma_mm2s.v,1446,assert(f_rcvd <= f_cfg_len + DW/8 - 1);,1
zipdma_mm2s.v,1448,assert(f_cfg_len == f_rcvd + f_outstanding_bytes + rdstb_len);,1
zipdma_mm2s.v,1454,assert(rdack_len <= f_cfg_len);,1
zipdma_mm2s.v,1455,assert(rdstb_len <= rdack_len);,1
zipdma_mm2s.v,1458,assert(rdack_len == rdstb_len + f_outstanding_bytes);,1
zipdma_mm2s.v,1468,assert(rdstb_len != 0 || !o_rd_stb);,1
zipdma_mm2s.v,1513,assert(f_rcvd == f_cfg_len - rdack_len);,1
zipdma_mm2s.v,1525,assert(!M_VALID);,1
zipdma_mm2s.v,1529,assert(fill == 0);,1
zipdma_mm2s.v,1534,assert(M_BYTES > 0);,1
zipdma_mm2s.v,1538,assert(!o_rd_stb);,1
zipdma_mm2s.v,1543,assert(f_sent <= r_transferlen);,1
zipdma_mm2s.v,1550,assert(f_rcvd == f_sent);,1
zipdma_mm2s.v,1552,assert(f_rcvd == f_sent + M_BYTES);,1
zipdma_mm2s.v,1557,assert(rdstb_len == 0);,1
zipdma_mm2s.v,1597,assert(pre_shift == r_addr[WBLSB-1:0]);,1
zipdma_mm2s.v,1616,assume(fwb_shifted[7:0] == fc_byte);,1
zipdma_mm2s.v,1618,assume(fwb_shifted[DW-1:DW-8] == fc_byte);,1
zipdma_mm2s.v,1643,assert(fm_shifted[7:0] == fc_byte);,1
zipdma_mm2s.v,1645,assert(fm_shifted[DW-1:DW-8] == fc_byte);,1
zipdma_mm2s.v,1662,cover(!i_reset && i_request);,1
zipdma_mm2s.v,1663,cover(o_busy);,1
zipdma_mm2s.v,1664,cover(o_rd_cyc);,1
zipdma_mm2s.v,1665,cover(o_rd_cyc && i_rd_ack);,1
zipdma_mm2s.v,1670,cover(!i_reset && fm_check);,1
zipdma_mm2s.v,1689,assume(M_READY);,1
zipdma_mm2s.v,1690,assume(M_READY);,1
zipdma_mm2s.v,1691,assume(M_READY);,1
zipdma_mm2s.v,1696,assume(M_READY);,1
zipdma_fsm.v,146,assert(fsm_state == S_IDLE);,1
zipdma.v,445,assume(i_reset);,1
zipdma_s2mm.v,263,assert(!o_wr_stb);,1
zipdma_s2mm.v,348,assert(!S_READY);,1
zipdma_s2mm.v,351,assert(S_VALID && S_READY);,1
zipdma_s2mm.v,353,assert(!S_VALID || !S_READY);,1
zipdma_s2mm.v,356,assert(!S_READY);,1
zipdma_s2mm.v,360,assert(!S_READY);,1
zipdma_s2mm.v,365,assert(!o_wr_cyc);,1
zipdma_s2mm.v,432,assume(i_reset);,1
zipdma_s2mm.v,444,assume(!i_request);,1
zipdma_s2mm.v,447,assume(i_request);,1
zipdma_s2mm.v,464,assume(i_inc == f_cfg_inc);,1
zipdma_s2mm.v,465,assume(i_inc == f_cfg_inc);,1
zipdma_s2mm.v,466,assume(i_inc == f_cfg_inc);,1
zipdma_s2mm.v,472,assume(i_inc == f_cfg_inc);,1
zipdma_s2mm.v,473,assume(i_size == f_cfg_size);,1
zipdma_s2mm.v,474,assume(i_addr == f_cfg_addr);,1
zipdma_s2mm.v,480,assert(r_addr == f_cfg_addr);,1
zipdma_s2mm.v,481,assert(r_size == f_cfg_size);,1
zipdma_s2mm.v,482,assert(r_inc == f_cfg_inc);,1
zipdma_s2mm.v,487,assume(!S_VALID);,1
zipdma_s2mm.v,488,assume(!S_VALID);,1
zipdma_s2mm.v,489,assume(!S_VALID);,1
zipdma_s2mm.v,505,assume(!S_VALID);,1
zipdma_s2mm.v,508,assume(S_VALID);,1
zipdma_s2mm.v,517,assume(S_BYTES <= DW/8);,1
zipdma_s2mm.v,518,assume(S_BYTES > 0);,1
zipdma_s2mm.v,596,assert(|o_wr_sel);,1
zipdma_s2mm.v,600,assert(fwb_outstanding == wb_outstanding);,1
zipdma_s2mm.v,642,"assert({ 1'b0, o_wr_addr } == fwb_addr[ADDRESS_WIDTH:WBLSB]);",1
zipdma_s2mm.v,644,assert(subaddr == fwb_addr[WBLSB-1:0]);,1
zipdma_s2mm.v,645,assert(subaddr == fwb_addr[WBLSB-1:0]);,1
zipdma_s2mm.v,646,assert(subaddr == fwb_addr[WBLSB-1:0]);,1
zipdma_s2mm.v,648,assert(subaddr == fwb_addr[WBLSB-1:0]);,1
zipdma_s2mm.v,655,assert(o_err);,1
zipdma_s2mm.v,661,assert(!o_wr_cyc);,1
zipdma_s2mm.v,670,assert(o_wr_stb);,1
zipdma_s2mm.v,671,assert(o_wr_stb);,1
zipdma_s2mm.v,674,assert(o_wr_stb);,1
zipdma_s2mm.v,675,assert(o_wr_stb);,1
zipdma_s2mm.v,676,assert(o_wr_stb);,1
zipdma_s2mm.v,690,assert(o_wr_stb);,1
zipdma_s2mm.v,699,assert(!o_wr_cyc);,1
zipdma_s2mm.v,702,assert(r_sel == 0);,1
zipdma_s2mm.v,703,assert(!o_wr_cyc);,1
zipdma_s2mm.v,704,assert(wb_outstanding == 0);,1
zipdma_s2mm.v,707,assert(r_sel[DW/8-1:1] == 0);,1
zipdma_s2mm.v,711,assert(r_sel[DW/8-1:1] == 0);,1
zipdma_s2mm.v,713,assert(r_sel[DW/8-2:0] == 0);,1
zipdma_s2mm.v,719,assert(r_sel == 0);,1
zipdma_s2mm.v,729,assert(r_sel[DW/8-1:3] == 0);,1
zipdma_s2mm.v,731,assert(r_sel[DW/8-4:0] == 0);,1
zipdma_s2mm.v,737,assert(r_sel == 0);,1
zipdma_s2mm.v,749,assert(r_sel == 0);,1
zipdma_s2mm.v,757,assert(!r_sel[0]);,1
zipdma_s2mm.v,760,assert(!r_sel[DW/8-1]);,1
zipdma_s2mm.v,768,assert(!r_sel[ik]);,1
zipdma_s2mm.v,770,assert(!r_sel[ik]);,1
zipdma_s2mm.v,776,assert(!r_sel[DW/8-1-ik]);,1
zipdma_s2mm.v,784,assert(!r_sel[DW/5-1-ik-subaddr]);,1
zipdma_s2mm.v,790,assert(!r_sel[ik]);,1
zipdma_s2mm.v,800,assert(r_sel == 0);,1
zipdma_s2mm.v,868,assume(fc_partial[7:0] == fc_byte);,1
zipdma_s2mm.v,870,assume(fc_partial[DW-1:DW-8] == fc_byte);,1
zipdma_s2mm.v,911,assert(fwb_posn <= f_posn);,1
zipdma_s2mm.v,918,assert(fc_partial_wb[7:0] == fc_byte);,1
zipdma_s2mm.v,919,assert(fc_partial_sel[0]);,1
zipdma_s2mm.v,921,assert(fc_partial_wb[2*DW-1:2*DW-8] == fc_byte);,1
zipdma_s2mm.v,922,assert(fc_partial_sel[2*DW/8-1]);,1
zipdma_s2mm.v,937,cover(i_request);,1
zipdma_s2mm.v,941,cover(o_busy);,1
zipdma_s2mm.v,946,cover(!o_busy);,1
zipdma_txgears.v,152,assert(m_bytes <= fill);,1
zipdma_txgears.v,215,assert(m_bytes > 0);,1
zipdma_txgears.v,216,assert(m_bytes <= fill);,1
zipdma_txgears.v,218,assert(m_bytes == fill);,1
zipdma_txgears.v,221,assert(m_bytes <= 2);,1
zipdma_txgears.v,223,assert(m_bytes <= 2);,1
zipdma_txgears.v,225,assert(M_LAST && m_bytes == fill);,1
zipdma_txgears.v,228,assert(m_bytes <= 4);,1
zipdma_txgears.v,230,assert(M_LAST && m_bytes == fill);,1
zipdma_txgears.v,233,assert(m_bytes <= DW/8);,1
zipdma_txgears.v,235,assert(M_LAST && m_bytes == fill);,1
zipdma_txgears.v,328,assert(f_mid_packet != 2'b11);,1
zipdma_txgears.v,338,assert(!r_next);,1
zipdma_txgears.v,429,"assert({ r_last, m_last } == 2'b00);",1
zipdma_txgears.v,460,assume(i_reset);,1
zipdma_txgears.v,464,assume(i_size == f_cfg_size);,1
zipdma_txgears.v,478,assume(!S_VALID);,1
zipdma_txgears.v,481,assume(S_VALID);,1
zipdma_txgears.v,493,assume(S_BYTES > 0);,1
zipdma_txgears.v,515,assume(!f_rcvd[F_LGCOUNT-1]);,1
zipdma_txgears.v,520,assert(f_rcvd == 0);,1
zipdma_txgears.v,522,assert(f_rcvd > 0);,1
zipdma_txgears.v,538,assert(!M_VALID);,1
zipdma_txgears.v,541,assert(M_VALID);,1
zipdma_txgears.v,553,assert(M_BYTES > 0);,1
zipdma_txgears.v,558,assert(!r_last || !M_LAST);,1
zipdma_txgears.v,559,assert(!r_last || !M_LAST);,1
zipdma_txgears.v,560,assert(!r_last || !M_LAST);,1
zipdma_txgears.v,565,assert(!r_last || !M_LAST);,1
zipdma_txgears.v,566,assert(!r_last || !M_LAST);,1
zipdma_txgears.v,567,assert(!r_last || !M_LAST);,1
zipdma_txgears.v,578,assert(!r_last || !M_LAST);,1
zipdma_txgears.v,580,assert(M_VALID);,1
zipdma_txgears.v,584,assert(fill > 0);,1
zipdma_txgears.v,585,assert(fill > 0);,1
zipdma_txgears.v,586,assert(fill > 0);,1
zipdma_txgears.v,587,assert(fill > 0);,1
zipdma_txgears.v,592,assert(fill > 0);,1
zipdma_txgears.v,596,assert(fill <= (DW/8));,1
zipdma_txgears.v,597,assert(fill <= (DW/8));,1
zipdma_txgears.v,610,assert(fill == M_BYTES);,1
zipdma_txgears.v,638,assume(!f_sent[F_LGCOUNT-1]);,1
zipdma_txgears.v,642,assert(f_sent + fill == f_rcvd);,1
zipdma_txgears.v,643,assert(f_sent <= f_rcvd);,1
zipdma_txgears.v,650,assert(f_sent == 0);,1
zipdma_txgears.v,652,assert(M_VALID || f_sent > 0);,1
zipdma_txgears.v,690,assume(fs_shifted[7:0] == fc_byte);,1
zipdma_txgears.v,692,assume(fs_shifted[DW-1:DW-8] == fc_byte);,1
zipdma_txgears.v,715,assert(fm_shifted[7:0] == fc_byte);,1
zipdma_txgears.v,717,assert(fm_shifted[DW-1:DW-8] == fc_byte);,1
zipdma_txgears.v,734,cover(i_size == SZ_BYTE && f_sent > DW/8);,1
zipdma_txgears.v,735,cover(i_size == SZ_16B && f_sent > DW/8);,1
zipdma_txgears.v,736,cover(i_size == SZ_32B && f_sent > DW/8);,1
zipdma_txgears.v,737,cover(i_size == SZ_BUS && f_sent > DW/8);,1
zipdma_txgears.v,739,cover(i_size == SZ_BYTE && f_sent > 2*DW/8+1);,1
zipdma_txgears.v,740,cover(i_size == SZ_16B && f_sent > 2*DW/8+1);,1
zipdma_txgears.v,741,cover(i_size == SZ_32B && f_sent > 2*DW/8+1);,1
zipdma_txgears.v,742,cover(i_size == SZ_BUS && f_sent > 2*DW/8+1);,1
zipdma_txgears.v,744,cover(i_size == SZ_BUS && f_sent > 2*DW/8+2);,1
zipdma_txgears.v,745,cover(i_size == SZ_BUS && f_sent > 2*DW/8+3);,1
zipdma_txgears.v,746,cover(i_size == SZ_BUS && f_sent > 2*DW/8+4);,1
zipdma_rxgears.v,129,assert(fill < 2*DW/8);,1
zipdma_rxgears.v,164,assert(m_valid);,1
zipdma_rxgears.v,168,assert(m_bytes == fill);,1
zipdma_rxgears.v,295,assume(i_reset);,1
zipdma_rxgears.v,307,assume(!S_VALID);,1
zipdma_rxgears.v,310,assume(S_VALID);,1
zipdma_rxgears.v,320,assume(S_BYTES > 0);,1
zipdma_rxgears.v,337,assume(!f_rcvd[F_LGCOUNT-1]);,1
zipdma_rxgears.v,354,assert(!M_VALID);,1
zipdma_rxgears.v,355,assert(!r_last);,1
zipdma_rxgears.v,356,assert(!M_LAST);,1
zipdma_rxgears.v,359,assert(M_VALID);,1
zipdma_rxgears.v,369,assert(M_BYTES > 0);,1
zipdma_rxgears.v,393,assert(!f_sent[F_LGCOUNT-1]);,1
zipdma_rxgears.v,394,assert(!f_buffered[F_LGCOUNT-1]);,1
zipdma_rxgears.v,396,assert(f_buffered >= f_sent);,1
zipdma_rxgears.v,398,assert(f_sent[WBLSB-1:0] == 0);,1
zipdma_rxgears.v,406,assert(f_sent + fill == f_rcvd);,1
zipdma_rxgears.v,407,assert(f_sent <= f_rcvd);,1
zipdma_rxgears.v,422,assert(!r_last || !M_LAST);,1
zipdma_rxgears.v,434,assert(M_BYTES == fill);,1
zipdma_rxgears.v,439,assert(f_rcvd == 0);,1
zipdma_rxgears.v,441,assert(fill[WBLSB-1:0] == f_rcvd[WBLSB-1:0]);,1
zipdma_rxgears.v,478,assume(frx_shifted[7:0] == fc_byte);,1
zipdma_rxgears.v,480,assume(frx_shifted[DW-1:DW-8] == fc_byte);,1
zipdma_rxgears.v,504,assert(ftx_shifted[7:0] == fc_byte);,1
zipdma_rxgears.v,506,assert(ftx_shifted[2*DW-1:2*DW-8] == fc_byte);,1
zipdma_rxgears.v,517,assert(sreg[8*ik +: 8] == 8'h00);,1
zipdma_rxgears.v,519,assert(sreg[2*DW-8-8*ik +: 8] == 8'h00);,1
wbdmac.v,700,assume(i_reset);,1
wbdmac.v,704,assert(dma_state == DMA_IDLE);,1
wbdmac.v,733,assert(o_swb_stall == 0);,1
wbdmac.v,743,assert(f_swb_outstanding == 0);,1
wbdmac.v,746,assert(f_swb_outstanding == 1);,1
wbdmac.v,749,assert(f_swb_outstanding == 1);,1
wbdmac.v,751,assert(f_swb_outstanding == 2);,1
wbdmac.v,782,assert(o_mwb_cyc == 1'b0);,1
wbdmac.v,787,assert(nracks == f_mwb_nreqs);,1
wbdmac.v,788,assert(nread == f_mwb_nacks);,1
wbdmac.v,794,assert(nwacks == f_mwb_nacks);,1
wbdmac.v,795,assert(nwritten == f_mwb_nreqs);,1
wbdmac.v,802,assert(dma_state == DMA_IDLE);,1
wbdmac.v,819,assert(cfg_waddr == o_mwb_addr);,1
wbdmac.v,835,assert(o_mwb_addr == cfg_waddr);,1
wbdmac.v,837,assert(o_mwb_addr == cfg_raddr);,1
wbdmac.v,846,assert(cfg_len == 0);,1
wbdmac.v,847,assert(!cfg_len_nonzero);,1
wbdmac.v,864,assert(cfg_len == 0);,1
wbdmac.v,870,assert(!o_mwb_stb);,1
wbdmac.v,889,assert(bus_nracks <= cfg_len);,1
wbdmac.v,893,assert(nread <= nracks);,1
wbdmac.v,911,assert(cfg_len > 0);,1
wbdmac.v,915,assert(nread == nracks);,1
wbdmac.v,919,assert(nwritten <= cfg_blocklen_sub_one);,1
wbdmac.v,922,assert(nwritten <= f_cfg_blocklen);,1
wbdmac.v,927,assert(nracks < f_cfg_blocklen);,1
wbdmac.v,929,assert(nracks <= f_cfg_blocklen);,1
wbdmac.v,933,assert(nread < f_cfg_blocklen);,1
wbdmac.v,936,assert(nread <= nracks);,1
wbdmac.v,940,assert(nread == nracks);,1
wbdmac.v,944,assert(nwritten >= nwacks);,1
wbdmac.v,951,assert(nwritten >= nwacks);,1
wbdmac.v,954,assert(nread >= nwritten);,1
wbdmac.v,957,assert(nracks >= nread);,1
wbdmac.v,969,assert(cfg_len == 0);,1
zipjiffies.v,253,assert(!o_wb_stall);,1
zipjiffies.v,259,assert(o_wb_ack);,1
zipjiffies.v,261,assert(!o_wb_ack);,1
zipjiffies.v,273,assert(!o_wb_ack);,1
zipjiffies.v,285,assert(new_set);,1
zipjiffies.v,287,assert(!new_set);,1
zipjiffies.v,295,assert(!o_int);,1
zipjiffies.v,300,assert(!int_set);,1
zipjiffies.v,301,assert(!new_set);,1
zipjiffies.v,308,assert(int_set);,1
zipjiffies.v,320,assert(!int_set);,1
zipjiffies.v,325,assert(!o_int);,1
zipjiffies.v,327,assert(o_int);,1
zipmmu.v,584,assert(s_pending);,1
zipmmu.v,834,assume(i_reset);,1
zipmmu.v,838,assume(!i_wbs_cyc_stb);,1
zipmmu.v,843,assert(o_wbs_stall == 1'b0);,1
zipmmu.v,906,assume(fv_nreqs < F_MAX_REQ);,1
zipmmu.v,909,assert(fv_nreqs == fp_nreqs);,1
zipmmu.v,913,assert(fp_nreqs <= fv_nreqs);,1
zipmmu.v,914,assert(fp_nacks >= fv_nacks);,1
zipmmu.v,960,assume(!i_wbm_cyc);,1
zipmmu.v,965,assume(!o_cyc);,1
zipmmu.v,966,assume(!i_wbm_cyc);,1
zipmmu.v,977,assert(fp_outstanding == 0);,1
zipmmu.v,978,assert(fv_outstanding == 1);,1
zipmmu.v,979,assert(fv_is_one);,1
zipmmu.v,980,assert(fp_is_zero);,1
zipmmu.v,982,assert(fv_nreqs == f_ex_nreqs);,1
zipmmu.v,983,assert(fv_nacks == f_ex_nacks);,1
zipmmu.v,984,assert(fv_outstanding >= fp_outstanding);,1
zipmmu.v,985,assert(fv_outstanding == f_expected);,1
zipmmu.v,995,assume(!i_wbm_cyc);,1
zipmmu.v,998,assume(!i_wbm_cyc);,1
zipmmu.v,1012,assert(r_tlb_match[s_tlb_addr]);,1
zipmmu.v,1020,assert(!simple_miss);,1
zipmmu.v,1021,assert(!ro_miss);,1
zipmmu.v,1022,assert(!exe_miss);,1
zipmmu.v,1023,assert(!table_err);,1
zipmmu.v,1025,assert(!ro_miss);,1
zipmmu.v,1054,assert(tlb_valid[f_last_page]);,1
zipmmu.v,1055,assert(last_tlb == f_last_page);,1
zipmmu.v,1056,assert(last_ppage == tlb_pdata[f_last_page]);,1
zipmmu.v,1057,assert(last_vpage == tlb_vdata[f_last_page]);,1
zipmmu.v,1058,assert(last_ro == tlb_flag_last_page[`ROFLAG]);,1
zipmmu.v,1059,assert(last_exe == tlb_flag_last_page[`EXEFLG]);,1
zipmmu.v,1060,assert(r_context_word[LGCTXT-1:1] == tlb_cdata[f_last_page][LGCTXT-1:1]);,1
zipmmu.v,1062,assert(!tlb_cdata[f_last_page][0]);,1
zipmmu.v,1081,assert(last_page_valid);,1
zipmmu.v,1082,assert(r_ppage == last_ppage);,1
zipmmu.v,1110,assume(i_gie == f_past_gie);,1
zipmmu.v,1113,assume(i_gie == f_past_gie);,1
zipmmu.v,1120,assume(!i_gie);,1
zipmmu.v,1133,assert(last_page_valid);,1
zipmmu.v,1134,assert(!miss_pending);,1
zipmmu.v,1135,assert(tlb_accessed[s_tlb_addr]);,1
zipmmu.v,1138,assert(miss_pending);,1
zipmmu.v,1139,assert(last_page_valid);,1
zipmmu.v,1140,assert(status_word[3:0] == 4'h2);,1
zipmmu.v,1143,assert(miss_pending);,1
zipmmu.v,1144,assert(last_page_valid);,1
zipmmu.v,1145,assert(status_word[3:0] == 4'h4);,1
zipmmu.v,1148,assert(miss_pending);,1
zipmmu.v,1149,assert(last_page_valid);,1
zipmmu.v,1150,assert(status_word[3:0] == 4'h1);,1
zipmmu.v,1153,assert(!last_page_valid);,1
zipmmu.v,1172,assert(f_tlb_pipe != 5'h1f);,1
zipmmu.v,1188,assume(!i_wbs_cyc_stb);,1
zipmmu.v,1192,assume(!i_gie);,1
zipcounter.v,130,assume(i_reset);,1
zipcounter.v,150,assert(!o_wb_stall);,1
zipcounter.v,176,assert(f_outstanding==1);,1
zipcounter.v,178,assert(f_outstanding == 0);,1
zipcounter.v,215,assert(!o_int);,1
zipcounter.v,226,assert(o_int);,1
zipcounter.v,229,assert(!o_int);,1
zipcounter.v,238,assert(!o_int);,1
ziptimer.v,253,assume(i_reset);,1
ziptimer.v,258,assert(r_value == 0);,1
ziptimer.v,259,assert(r_running == 0);,1
ziptimer.v,260,assert(auto_reload == 0);,1
ziptimer.v,261,assert(r_zero == 1'b1);,1
ziptimer.v,267,assume(i_wb_cyc);,1
ziptimer.v,274,assert(r_running);,1
ziptimer.v,278,assert(r_running);,1
ziptimer.v,282,assert(auto_reload == 0);,1
ziptimer.v,286,assert(interval_count != 0);,1
ziptimer.v,291,assert(r_value == 0);,1
ziptimer.v,299,assert(r_value == interval_count);,1
ziptimer.v,324,assert(!auto_reload);,1
ziptimer.v,329,assert(!auto_reload);,1
ziptimer.v,339,assert(!o_int);,1
ziptimer.v,342,assert(!o_int);,1
ziptimer.v,349,assert(!o_wb_ack);,1
ziptimer.v,351,assert(o_wb_ack);,1
ziptimer.v,354,assert(!o_wb_stall);,1
ziptimer.v,356,assert(o_wb_data[BW-1] == auto_reload);,1
ziptimer.v,358,assert(o_wb_data[VW-1:0] == r_value);,1
axilperiphs.v,747,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
axilperiphs.v,758,assert(S_AXI_RDATA == 0);,1
wbwatchdog.v,109,assume(i_timeout > 1);,1
wbwatchdog.v,125,assert(o_int);,1
wbwatchdog.v,144,assert(!o_int);,1
icontrol.v,242,assert(r_int_state == 0);,1
icontrol.v,243,assert(r_int_enable == 0);,1
icontrol.v,244,assert(w_any == 0);,1
icontrol.v,245,assert(o_interrupt == 0);,1
icontrol.v,246,assert(r_mie == 0);,1
icontrol.v,271,assert(o_interrupt);,1
icontrol.v,278,assert(!o_interrupt);,1
icontrol.v,284,assert(!o_interrupt);,1
icontrol.v,324,assume(i_wb_cyc);,1
icontrol.v,328,assume(!i_wb_cyc);,1
icontrol.v,340,assert(f_outstanding == 0);,1
icontrol.v,361,assert(!o_interrupt);,1
icontrol.v,371,cover(o_interrupt);,1
axipipe.v,377,assert(!o_rdbusy);,1
axipipe.v,381,assert(o_rdbusy);,1
axipipe.v,384,assert(!o_rdbusy);,1
axipipe.v,388,assert(!o_rdbusy);,1
axipipe.v,428,assert(o_pipe_stalled);,1
axipipe.v,431,assert(r_pipe_stalled);,1
axipipe.v,433,assert(r_lock || !r_pipe_stalled);,1
axipipe.v,440,assert(r_pipe_stalled);,1
axipipe.v,443,assert(r_pipe_stalled);,1
axipipe.v,445,assert(!r_pipe_stalled && !OPT_LOWPOWER);,1
axipipe.v,496,assert(r_pipe_stalled);,1
axipipe.v,499,assert(r_pipe_stalled == o_busy);,1
axipipe.v,504,assert(!r_pipe_stalled);,1
axipipe.v,528,assert(M_AXI_WVALID || M_AXI_ARVALID);,1
axipipe.v,532,assert(M_AXI_AWVALID);,1
axipipe.v,536,assert(o_pipe_stalled);,1
axipipe.v,693,assert(!flush_request);,1
axipipe.v,698,assert(!misaligned_request);,1
axipipe.v,699,assert(!misaligned_aw_request);,1
axipipe.v,710,assert(beats_outstanding == flushcount);,1
axipipe.v,712,assert(beats_outstanding >= flushcount);,1
axipipe.v,911,assert(r_flushing || o_err);,1
axipipe.v,1428,assert(faxi_awr_nbursts == 0);,1
axipipe.v,1429,assert(!M_AXI_AWVALID);,1
axipipe.v,1430,assert(!M_AXI_WVALID);,1
axipipe.v,1435,assert(faxi_rd_outstanding == 0);,1
axipipe.v,1436,assert(!M_AXI_ARVALID);,1
axipipe.v,1457,"assert({ 5'h0, f_fifo_fill } == faxi_rd_outstanding);",1
axipipe.v,1463,"assert({ 5'h0, f_fifo_fill } == faxi_awr_nbursts);",1
axipipe.v,1465,"assert({ 5'h0, f_fifo_fill } == faxi_awr_nbursts-1);",1
axipipe.v,1469,assert(f_fifo_fill == 0);,1
axipipe.v,1478,assert(faxi_wrid_nbursts == faxi_awr_nbursts);,1
axipipe.v,1480,assert(faxi_wrid_nbursts == 0);,1
axipipe.v,1484,assert(M_AXI_WVALID);,1
axipipe.v,1487,assert(faxi_wr_pending == 1);,1
axipipe.v,1489,assert(faxi_wr_pending == 0);,1
axipipe.v,1497,assert(faxi_wr_burst == AXI_INCR);,1
axipipe.v,1499,assert(faxi_wr_len == 0);,1
axipipe.v,1500,assert(r_flushing || faxi_wr_lockd == r_lock);,1
axipipe.v,1511,assert(faxi_rd_checkid == AXI_ID);,1
axipipe.v,1515,assert(faxi_rd_ckburst == AXI_INCR);,1
axipipe.v,1517,assert(faxi_rd_ckarlen == 8'h00);,1
axipipe.v,1518,assert(r_flushing || faxi_rd_cklockd == r_lock);,1
axipipe.v,1523,assert(faxi_rd_nbursts == faxi_rdid_nbursts);,1
axipipe.v,1525,assert(faxi_rdid_nbursts == 0);,1
axipipe.v,1527,assert(faxi_rd_nbursts == faxi_rd_outstanding);,1
axipipe.v,1528,assert(faxi_rdid_nbursts == faxi_rdid_outstanding);,1
axipipe.v,1531,assert(!r_lock);,1
axipipe.v,1555,assert(next_wdata == 0);,1
axipipe.v,1556,assert(next_wstrb == 0);,1
axipipe.v,1629,cover(i_stb);,1
axipipe.v,1630,cover(o_valid);,1
axipipe.v,1631,cover(o_err);,1
axipipe.v,1633,cover(o_valid);,1
axipipe.v,1634,cover(o_err);,1
axipipe.v,1711,assert(rdaddr == wraddr);,1
axipipe.v,1866,assert(!M_AXI_AWVALID && !M_AXI_WVALID&& faxi_awr_nbursts == 0);,1
axipipe.v,1872,assert(!misaligned_request);,1
axipipe.v,1993,"assert(cpu_last_reg == { fifo_gie, 4'hf });",1
axipipe.v,1995,"assert(cpu_last_reg == { fifo_gie, ar_oreg });",1
axipipe.v,2000,"assert(cpu_last_reg == { fifo_gie, 4'hf });",1
axipipe.v,2003,assert(f_first_return_reg == cpu_last_reg);,1
axipipe.v,2009,assert(f_next_return_reg == cpu_last_reg);,1
axipipe.v,2043,assert(!M_AXI_WVALID && !M_AXI_ARVALID);,1
axipipe.v,2076,assert(f_exlock_addr == faxi_exreq_addr);,1
axipipe.v,2077,assert(f_exlock_len == faxi_exreq_len);,1
axipipe.v,2078,assert(f_exlock_size == faxi_exreq_size);,1
axipipe.v,2079,assert(f_exlock_burst == faxi_exreq_burst);,1
axipipe.v,2087,assert(M_AXI_ARLOCK);,1
axipipe.v,2088,assert(!M_AXI_AWVALID);,1
axipipe.v,2089,assert(faxi_rdid_bursts_to_lock == 0);,1
axipipe.v,2092,assert(!M_AXI_ARVALID);,1
axipipe.v,2093,assert(M_AXI_AWLOCK);,1
axipipe.v,2094,assert(faxi_rdid_bursts_to_lock == 0);,1
axipipe.v,2097,assert(faxi_rdid_bursts_to_lock == faxi_rd_nbursts);,1
axipipe.v,2099,assert(faxi_rdid_bursts_to_lock == 0);,1
axipipe.v,2102,assume(!M_AXI_RVALID || M_AXI_RRESP != EXOKAY);,1
axipipe.v,2104,assert(faxi_rdid_bursts_to_lock <= 1);,1
axipipe.v,2105,assert(faxi_wrid_bursts_to_exwrite <= 1);,1
axipipe.v,2107,assume(r_flushing || !M_AXI_RVALID || M_AXI_RRESP != EXOKAY);,1
axipipe.v,2108,assert(r_flushing || faxi_rdid_bursts_to_lock == 0);,1
axipipe.v,2109,assert(r_flushing || faxi_wrid_bursts_to_exwrite == 0);,1
axipipe.v,2185,assert(faxi_rd_outstanding == 0);,1
axipipe.v,2186,assert(!M_AXI_ARVALID);,1
axipipe.v,2191,assert(!o_rdbusy);,1
axipipe.v,2194,assert(o_rdbusy);,1
axipipe.v,2199,assert(cpu_read_cycle);,1
axipipe.v,2201,assert(!cpu_read_cycle);,1
axipipe.v,2250,cover(M_AXI_BVALID && !M_AXI_BRESP[1]);,1
axipipe.v,2252,cover(M_AXI_BVALID && M_AXI_BRESP[1]);,1
axipipe.v,2255,cover(M_AXI_RVALID && !M_AXI_RRESP[1]);,1
axipipe.v,2257,cover(M_AXI_RVALID && M_AXI_RRESP[1]);,1
axipipe.v,2263,cover(cvr_writes > 3);,1
axipipe.v,2264,cover(cvr_reads > 3);,1
axipipe.v,2265,cover(cvr_valids > 3);,1
axipipe.v,2298,cover(cvr_unaligned_writes > 3);,1
axipipe.v,2299,cover(cvr_unaligned_reads > 3);,1
axipipe.v,2357,assert(M_AXI_AWADDR[AXILSB-1:0] == 0);,1
axipipe.v,2358,assert(M_AXI_AWSIZE == AXILSB[2:0]);,1
axipipe.v,2363,assert(M_AXI_ARADDR[AXILSB-1:0] == 0);,1
axipipe.v,2364,assert(M_AXI_ARSIZE == AXILSB[2:0]);,1
axipipe.v,2371,assume(i_addr == f_exlock_addr);,1
axipipe.v,2372,assume(faxi_ex_state == 2'b10);,1
axipipe.v,2376,assume(f_exlock_size == AXILSB[2:0]);,1
axipipe.v,2377,assume(f_exlock_addr[AXILSB-1:0] == 0);,1
axipipe.v,2387,assume(faxi_wr_checkid == AXI_ID);,1
axipipe.v,2389,assume(faxi_rd_checkid == AXI_ID);,1
axipipe.v,2394,assume(!i_stb || !i_lock);,1
prefetch.v,275,assert(!o_wb_cyc);,1
prefetch.v,276,assert(r_shift == 0);,1
prefetch.v,278,assert(invalid || o_valid || o_wb_cyc);,1
prefetch.v,296,assert(!o_valid && !r_valid);,1
prefetch.v,326,assert(o_valid);,1
prefetch.v,327,assert(r_shift == 0);,1
prefetch.v,546,assert(f_address == o_pc);,1
prefetch.v,550,assert(!o_wb_cyc);,1
prefetch.v,589,assume(f_cpu_delay < F_CPU_DELAY);,1
prefetch.v,601,assert(!o_wb_we);,1
prefetch.v,618,assert(o_wb_cyc);,1
prefetch.v,624,assert(!o_valid);,1
prefetch.v,635,assert(!o_valid && !r_valid);,1
prefetch.v,646,assert(o_valid);,1
prefetch.v,651,assert(!o_valid);,1
prefetch.v,660,assert(!o_valid);,1
prefetch.v,720,assert(o_illegal || f_req_addr == o_wb_addr);,1
prefetch.v,722,assert(f_req_addr == f_next_wb_addr);,1
prefetch.v,728,assert(!invalid);,1
prefetch.v,758,assume(f_shifted_insn[IW-1:0] == f_const_insn);,1
prefetch.v,773,assume(f_const_bus_word == f_const_insn);,1
prefetch.v,799,assume(!i_wb_err);,1
prefetch.v,801,assume(!i_wb_ack);,1
prefetch.v,803,assume(f_this_data);,1
prefetch.v,808,assume(!i_wb_err);,1
prefetch.v,810,assume(!i_wb_ack);,1
prefetch.v,812,assume(f_this_data);,1
prefetch.v,832,assert(f_this_pc);,1
prefetch.v,840,assert(o_valid && f_this_pc);,1
prefetch.v,845,assert(!f_insn_pending);,1
prefetch.v,849,assert(f_addr_pending);,1
prefetch.v,853,assert(f_this_addr);,1
memops.v,484,assert(!i_stb);,1
memops.v,683,assert(cpu_outstanding <= 1);,1
memops.v,688,assert(o_wreg[3:1] == 3'h7);,1
memops.v,690,assert(o_wreg[3:1] != 3'h7);,1
memops.v,694,assert(o_wreg[4] == f_gie);,1
memops.v,698,assert(f_rdbusy == o_rdbusy);,1
memops.v,702,assert(o_wb_we == !f_read_cycle);,1
memops.v,706,assert(f_last_reg == o_wreg);,1
memops.v,882,assert(!o_valid && !f_cyc);,1
memops.v,889,assert(o_wb_stb_lcl);,1
memops.v,890,assert(o_wb_addr == fcpu_addr[AW+1:2]);,1
memops.v,892,assert(o_wb_stb_gbl);,1
memops.v,893,assert(o_wb_addr == fcpu_addr[WBLSB +: AW]);,1
memops.v,908,assert(o_wb_cyc_lcl == fcpu_local);,1
memops.v,942,assert(lock_gbl);,1
memops.v,951,assert(o_wb_cyc_gbl);,1
memops.v,960,assert(o_wb_cyc_lcl);,1
memops.v,970,cover(i_wb_ack);,1
memops.v,981,cover(f_done);,1
memops.v,984,cover(f_done && !o_busy);,1
zipcore.v,741,assert(!r_op_pipe);,1
zipcore.v,1148,assert(op_valid || clear_pipeline);,1
zipcore.v,1841,cover(op_valid && op_ce && op_lock);,1
zipcore.v,1876,assume(!dcd_early_branch);,1
zipcore.v,1877,assume(!dcd_ljmp);,1
zipcore.v,1884,assert(op_valid && dcd_valid && i_pf_valid);,1
zipcore.v,1887,assert(!prelock_stall);,1
zipcore.v,1890,assert(dcd_valid);,1
zipcore.v,1891,assert(op_valid + dcd_valid + i_pf_valid >= 2'b10);,1
zipcore.v,1894,assert(!prelock_stall);,1
zipcore.v,1905,assert(!prelock_stall);,1
zipcore.v,2275,assert(!dbgv && !i_mem_valid);,1
zipcore.v,2414,assert(!div_valid && !fpu_valid && (!alu_wF || !alu_valid));,2
zipcore.v,2521,assert(!op_break);,1
zipcore.v,2554,assert(!master_ce);,1
zipcore.v,2560,assert(ill_err_i);,1
zipcore.v,2564,assert(!dbgv || !alu_valid);,1
zipcore.v,2815,assert(!gie || r_pending_interrupt);,1
zipcore.v,3934,assume(i_reset);,1
zipcore.v,5496,assert(w_clken);,1
zipcore.v,5497,assert(o_clken);,1
zipcore.v,5502,assert(w_clken != OPT_START_HALTED);,1
zipcore.v,5505,assert(w_clken);,1
zipcore.v,5508,assert(w_clken);,1
zipcore.v,5511,assert(o_clken);,1
zipcore.v,5514,assert(o_clken);,1
zipcore.v,5517,assert(o_clken);,1
zipcore.v,5527,assert(o_clken);,1
zipcore.v,5532,assert(o_clken);,1
zipcore.v,5534,assert(o_clken);,1
zipcore.v,5540,assert(!wr_reg_ce || dbgv);,1
zipcore.v,5541,assert(!i_mem_rdbusy);,1
zipcore.v,5546,assert(!i_mem_rdbusy);,1
zipcore.v,5586,assert(r_op_F == 7'h00);,1
zipcore.v,5587,assert(!op_wR);,1
zipcore.v,5588,assert(!op_wF);,1
zipcore.v,5589,assert(!op_rA);,1
zipcore.v,5590,assert(!op_rB);,1
zipcore.v,5592,assert(r_op_Av == 0);,1
zipcore.v,5593,assert(r_op_Bv == 0);,1
zipcore.v,5609,assert(!stepped);,1
zipcore.v,5614,assert(!break_pending);,1
zipcore.v,5615,assert(!o_bus_lock);,1
zipcore.v,5636,assert(!r_halted);,1
zipcore.v,5645,assert(!adf_ce_unconditional);,1
zipcore.v,5646,assert(!div_ce);,1
zipcore.v,5647,assert(!mem_ce);,1
zipcore.v,5648,assert(!fpu_ce);,1
zipcore.v,5934,cover(!i_reset);,1
zipcore.v,5935,cover(!i_halt);,1
zipcore.v,5936,cover(!i_reset && !i_halt);,1
zipcore.v,5942,cover(i_pf_valid && i_pf_illegal);,1
zipcore.v,5943,cover(i_pf_valid && !i_pf_illegal);,1
zipcore.v,5945,cover(dcd_valid && dcd_illegal);,1
zipcore.v,5946,cover(dcd_valid && !dcd_illegal);,1
zipcore.v,5948,cover(op_valid && !op_illegal);,1
zipcore.v,5949,cover(op_valid && op_illegal);,1
zipcore.v,5950,cover(op_valid && !op_illegal && op_ce);,1
zipcore.v,5951,cover(op_valid && op_illegal && op_ce);,1
zipcore.v,5953,cover(alu_valid);,1
zipcore.v,5954,cover(div_valid);,1
zipcore.v,5955,cover(o_mem_ce);,1
zipcore.v,5956,cover(i_mem_valid);,1
zipcore.v,5958,cover(wr_reg_ce);,1
zipcore.v,5960,cover(gie);,1
zipcore.v,5966,cover(i_interrupt && !alu_phase && !o_bus_lock);,1
zipcore.v,5967,cover(alu_illegal);,1
zipcore.v,5968,cover( gie && w_switch_to_interrupt);,1
zipcore.v,5969,cover(!gie && w_release_from_interrupt);,1
zipcore.v,5972,cover(alu_illegal);,1
zipcore.v,5973,cover(alu_illegal && !clear_pipeline);,1
zipcore.v,5978,cover(o_break);,1
zipcore.v,5983,cover(gie);,1
zipcore.v,5984,cover(step);,1
zipcore.v,5985,cover(step && w_switch_to_interrupt);,1
zipcore.v,5986,cover(step && w_switch_to_interrupt && !i_interrupt);,1
zipcore.v,5992,cover(step);,1
zipcore.v,5993,cover(step && wr_reg_ce);,1
zipcore.v,5997,cover(!o_bus_lock && alu_ce && step);,1
zipcore.v,5998,cover(user_step && !gie);,1
zipcore.v,5999,cover(user_step && gie);,1
zipcore.v,6000,cover(user_step && gie && wr_reg_ce);,1
zipcore.v,6003,cover(!OPT_DIV || div_busy);,1
zipcore.v,6004,cover(!OPT_DIV || div_error);,1
zipcore.v,6005,cover(!OPT_DIV || div_valid);,1
zipcore.v,6014,cover(div_busy);,1
zipcore.v,6015,cover(div_error);,1
zipcore.v,6016,cover(div_valid);,1
zipcore.v,6049,cover(o_bus_lock);,1
zipcore.v,6052,cover(i_interrupt);,1
zipcore.v,6053,cover(i_interrupt && !alu_phase);,1
zipcore.v,6054,cover(i_interrupt && !o_bus_lock);,1
zipcore.v,6065,cover(i_bus_err);,1
zipcore.v,6072,cover(i_mem_valid && f_exwrite_cycle && !f_read_cycle);,1
zipcore.v,6083,cover(div_error);,1
zipcore.v,6085,cover(i_bus_err);,1
zipcore.v,6091,cover(pending_interrupt);,1
zipcore.v,6093,cover(i_interrupt);,1
zipcore.v,6095,cover(mem_ce && step);,1
zipcore.v,6096,cover(break_pending && !adf_ce_unconditional);,1
zipcore.v,6097,cover(adf_ce_unconditional && op_illegal);,1
zipcore.v,6098,cover(adf_ce_unconditional && step);,1
zipcore.v,6118,assume(i_interrupt);,1
dcache.v,672,assume(req_data[1+2+WBLSB +: 3] != 3'h7);,1
dcache.v,764,"assume({ gie, req_data[2+WBLSB +: 4] } != f_addr_reg);",1
dcache.v,865,assert(o_wreg == f_last_reg);,1
dcache.v,1534,assert(faxi_write == 0);,1
dcache.v,1538,assert(f_pc_pending == f_pc);,1
dcache.v,1554,assert(f_rdbusy == o_rdbusy);,1
dcache.v,1580,assert(gie == f_gie);,1
dcache.v,1588,assert(f_read_cycle);,1
dcache.v,1590,assert(!f_read_cycle);,1
dcache.v,1608,assert(f_cpu_outstanding == 1);,1
dcache.v,1675,assert(state == DC_WRITE);,1
dcache.v,1677,assert(state == DC_READS);,1
dcache.v,1767,assume(&f_const_addr[AW-1:DATA_WIDTH-8-2]);,1
dcache.v,1987,assert(r_addr[AW-1:LS] == o_wb_addr[AW-1:LS]);,1
dcache.v,2048,assume(!i_wb_ack);,1
dcache.v,2050,assume(!i_wb_err);,1
dcache.v,2051,assume(i_wb_data == f_const_data);,1
dcache.v,2073,assume(!i_wb_ack);,1
dcache.v,2542,cover(o_valid);,1
dcache.v,2577,cover(o_valid);,1
dcache.v,2581,cover(i_pipe_stb);,1
dcache.v,2585,cover(o_valid);,1
dcache.v,2704,assume(&i_addr[DATA_WIDTH-1:DATA_WIDTH-8]);,1
idecode.v,232,assert(!w_special || !w_fpu);,1
idecode.v,749,assert(r_branch_pc == 0);,1
idecode.v,954,assert(r_nxt_half == f_insn_word[14:0]);,1
idecode.v,990,assume(i_ce);,1
idecode.v,2111,assert(o_illegal);,1
axiops.v,1220,assert(faxi_wrid_nbursts == faxi_awr_nbursts);,1
axiops.v,1221,assert(faxi_rdid_nbursts == faxi_rd_nbursts);,1
axiops.v,1222,assert(faxi_rdid_outstanding == faxi_rd_outstanding);,1
axiops.v,1223,assert(faxi_rd_nbursts == faxi_rd_outstanding);,1
axiops.v,1225,assume(faxi_rd_checkid == faxi_wr_checkid);,1
axiops.v,1226,assume(faxi_rd_checkid == AXI_ID);,1
axiops.v,1230,assert(faxi_wr_burst == M_AXI_AWBURST);,1
axiops.v,1232,assert(faxi_wr_len == M_AXI_AWLEN); // == 0 assert(faxi_wr_lockd == axlock);,2
axiops.v,1238,assert(faxi_rd_ckburst == M_AXI_ARBURST);,1
axiops.v,1240,assert(faxi_rd_ckarlen == M_AXI_ARLEN); // == 0 assert(faxi_rd_cklockd == axlock);,2
axiops.v,1371,assert(!misaligned_aw_request);,1
axiops.v,1372,assert(!misaligned_request);,1
axiops.v,1373,assert(!misaligned_response_pending);,1
axiops.v,1374,assert(faxi_awr_nbursts == 0);,1
axiops.v,1375,assert(faxi_wr_pending == 0);,1
axiops.v,1376,assert(faxi_rd_outstanding == 0);,1
axiops.v,1381,assert(!OPT_ALIGNMENT_ERR);,1
axiops.v,1388,assert(faxi_awr_nbursts == 0);,1
axiops.v,1395,assert(faxi_awr_nbursts == 0);,1
axiops.v,1400,assert(faxi_rd_outstanding == 0);,1
axiops.v,1411,assert(faxi_rd_outstanding == 0);,1
axiops.v,1426,assert(M_AXI_RREADY);,1
axiops.v,1436,assert(!misaligned_aw_request);,1
axiops.v,1437,assert(!misaligned_request);,1
axiops.v,1438,assert(!misaligned_response_pending);,1
axiops.v,1439,assert(!pending_err);,1
axiops.v,1442,assert(faxi_rd_outstanding == 0);,1
axiops.v,1443,assert(!misaligned_read);,1
axiops.v,1447,assert(M_AXI_RREADY);,1
axiops.v,1448,assert(!misaligned_aw_request);,1
axiops.v,1449,assert(!misaligned_request);,1
axiops.v,1450,assert(!misaligned_response_pending);,1
axiops.v,1451,assert(!misaligned_read);,1
axiops.v,1452,assert(!pending_err);,1
axiops.v,1453,assert(faxi_awr_nbursts == 0);,1
axiops.v,1479,assert(next_wdata == 0);,1
axiops.v,1480,assert(next_wstrb == 0);,1
axiops.v,1517,assert(!axlock);,1
axiops.v,1533,assert(o_wreg[3:0] == 4'hf);,1
axiops.v,1578,cover(M_AXI_WVALID && M_AXI_WDATA[31:24] != 8'h00);,1
axiops.v,1647,assert(f_exwrite_cycle);,1
axiops.v,1648,assert(axlock);,1
axiops.v,1650,assert(!f_exwrite_cycle);,1
axiops.v,1655,assert(!pending_err);,1
axiops.v,1656,assert(!misaligned_response_pending);,1
axiops.v,1657,assert(M_AXI_AWLOCK && f_exwrite_cycle && axlock);,1
axiops.v,1661,assert(faxi_ex_state != 2'b11);,1
axiops.v,1665,assert(f_last_reg == o_wreg);,1
axiops.v,1670,assert(o_wreg[3:1] == 3'h7);,1
axiops.v,1672,assert(o_wreg[3:1] != 3'h7);,1
axiops.v,1676,assert(o_wreg[4] == f_gie);,1
axiops.v,1681,assert(f_read_cycle || r_flushing);,1
axiops.v,1683,assert(!f_read_cycle);,1
axiops.v,1687,assert(!axlock);,1
axiops.v,1695,assert(o_valid);,1
axiops.v,1696,assert(o_wreg[3:0] == 4'hf);,1
axiops.v,1700,assert(!o_valid);,1
axiops.v,1701,assert(!o_err);,1
axiops.v,1702,assert(!o_busy);,1
axiops.v,1703,assert(!o_rdbusy);,1
axiops.v,1705,assert(o_err);,1
axiops.v,1736,cover(M_AXI_BVALID && !M_AXI_BRESP[1]);,1
axiops.v,1738,cover(M_AXI_BVALID && M_AXI_BRESP[1]);,1
axiops.v,1741,cover(M_AXI_RVALID && !M_AXI_RRESP[1]);,1
axiops.v,1743,cover(M_AXI_RVALID && M_AXI_RRESP[1]);,1
axiops.v,1747,cover(cvr_writes > 3);,1
axiops.v,1750,cover(cvr_reads > 3);,1
axiops.v,1756,cover(axlock);,1
axiops.v,1762,cover(!o_valid && !o_err && faxi_ex_state == 2'b10);,1
axiops.v,1765,cover(i_stb && i_op[0] && i_lock && faxi_ex_state == 2'b10);,1
axiops.v,1768,cover(i_stb && i_op[0] && i_lock && faxi_ex_state == 2'b10 && !w_misalignment_err);,1
axiops.v,1775,cover(M_AXI_AWVALID && M_AXI_AWLOCK);,1
axiops.v,1777,cover(M_AXI_BVALID && axlock);,1
axiops.v,1796,assume(i_addr == f_exlock_addr);,1
axiops.v,1797,assume(faxi_ex_state == 2'b10);,1
axiops.v,1801,assert(f_exlock_size == DSZ);,1
axiops.v,1812,assert(f_exlock_addr == faxi_exreq_addr);,1
axiops.v,1813,assert(f_exlock_len == faxi_exreq_len);,1
axiops.v,1814,assert(f_exlock_size == faxi_exreq_size);,1
axiops.v,1815,assert(f_exlock_burst == faxi_exreq_burst);,1
axiops.v,1820,assume(!i_cpu_reset);,1
pipefetch.v,416,assume(!o_v || o_pc != fc_pc);,1
pipefetch.v,426,assume(!i_wb_err);,1
pipefetch.v,429,assert(!ill_valid);,1
axidcache.v,1306,assert(r_pipe_stalled);,1
axidcache.v,1333,assert(o_wreg[3:0] == 4'hf);,1
axidcache.v,1704,assume(faxi_rd_checkid == AXI_ID);,1
axidcache.v,1705,assert(faxi_rdid_nbursts == faxi_rd_nbursts);,1
axidcache.v,1706,assert(faxi_rdid_outstanding == faxi_rd_outstanding);,1
axidcache.v,1708,assume(faxi_wr_checkid == AXI_ID);,1
axidcache.v,1709,assert(faxi_wrid_nbursts == faxi_awr_nbursts);,1
axidcache.v,1718,assert(!M_AXI_AWVALID);,1
axidcache.v,1719,assert(!M_AXI_WVALID);,1
axidcache.v,1720,assert(faxi_awr_nbursts == 0);,1
axidcache.v,1721,assert(o_busy);,1
axidcache.v,1724,assert(o_rdbusy);,1
axidcache.v,1727,assert(!o_rdbusy);,1
axidcache.v,1728,assert(!locked_write_in_progress);,1
axidcache.v,1731,assert(!locked_read_in_progress);,1
axidcache.v,1732,assert(o_busy);,1
axidcache.v,1735,assert(o_rdbusy);,1
axidcache.v,1737,assert(!o_rdbusy); // || OPT_LOCK && LOCKD WRITE assert(!M_AXI_ARVALID);,2
axidcache.v,1753,assert(faxi_rd_nbursts == faxi_rd_outstanding);,1
axidcache.v,1757,assert(faxi_rd_nbursts == 0);,1
axidcache.v,1766,assert(faxi_wr_burst == M_AXI_AWBURST);,1
axidcache.v,1767,assert(faxi_wr_len == 8'h00);,1
axidcache.v,1768,assert(faxi_wr_lockd == locked_write_in_progress);,1
axidcache.v,1771,assert(faxi_wr_size == 3'd2);,1
axidcache.v,1787,assert(!r_rd_pending);,1
axidcache.v,1789,assert(faxi_awr_nbursts == 0);,1
axidcache.v,1801,assert(faxi_awr_nbursts == 0);,1
axidcache.v,1811,assert(!M_AXI_ARVALID);,1
axidcache.v,1812,assert(flushing || faxi_rd_outstanding == 0);,1
axidcache.v,1815,assert(faxi_rd_outstanding == 0);,1
axidcache.v,1819,assert(!M_AXI_ARLOCK);,1
axidcache.v,1823,assert(M_AXI_ARADDR[AW-1:CS+AXILSB] == r_ctag);,1
axidcache.v,1824,assert(axi_tag == r_ctag);,1
axidcache.v,1825,assert(M_AXI_ARADDR[CS+AXILSB-1:LS+AXILSB] == r_cline);,1
axidcache.v,1826,assert(axi_line == r_cline);,1
axidcache.v,1828,assert(M_AXI_ARADDR[AXILSB-1:0] == 0);,1
axidcache.v,1831,assert(read_addr[LS-1:0] == 0);,1
axidcache.v,1836,assert(state == DC_READS);,1
axidcache.v,1837,assert(M_AXI_ARBURST == INCR);,1
axidcache.v,1838,assert(M_AXI_ARLEN == 0);,1
axidcache.v,1839,assert(M_AXI_ARLOCK == locked_read_in_progress);,1
axidcache.v,1867,assert(faxi_rd_nbursts == 1);,1
axidcache.v,1868,assert(faxi_rd_cksize == AXILSB[2:0]);,1
axidcache.v,1871,assert(faxi_rd_lastaddr[AXILSB-1:0] == 0);,1
axidcache.v,1872,assert(&faxi_rd_lastaddr[AXILSB +: LS]);,1
axidcache.v,1875,assert(r_ctag == faxi_rd_ckaddr[AW-1:CS+AXILSB]);,1
axidcache.v,1876,assert(!faxi_rd_cklockd);,1
axidcache.v,1882,assert(faxi_rd_ckarlen == 0);,1
axidcache.v,1883,assert(locked_read_in_progress == faxi_rd_cklockd);,1
axidcache.v,1884,assert(faxi_rd_ckburst == INCR);,1
axidcache.v,1887,assert(faxi_rd_cksize == 3'b010);,1
axidcache.v,1891,assert(!locked_write_in_progress);,1
axidcache.v,1899,assert(!locked_write_in_progress);,1
axidcache.v,1951,assert(cpu_outstanding <= 1);,1
axidcache.v,1956,assert(o_pipe_stalled);,1
axidcache.v,1977,assert(!o_rdbusy);,1
axidcache.v,1982,assert(!cpu_lockd_write_cycle);,1
axidcache.v,1986,assert(cpu_gie == o_wreg[4]);,1
axidcache.v,1991,assert(cpu_gie == o_wreg[4]);,1
axidcache.v,1994,assert(o_wreg[3:0] == 4'hf);,1
axidcache.v,1996,assert(cpu_last_reg == o_wreg);,1
axidcache.v,2003,assert(OPT_LOCK);,1
axidcache.v,2004,assert(o_pipe_stalled);,1
axidcache.v,2011,assert(w_pipe_stalled);,1
axidcache.v,2016,assert(w_pipe_stalled);,1
axidcache.v,2020,assert(w_pipe_stalled);,1
axidcache.v,2026,assert(w_pipe_stalled);,1
axidcache.v,2028,assert(o_pipe_stalled);,1
axidcache.v,2034,assert(!w_pipe_stalled);,1
axidcache.v,2054,assert(!flushing);,1
axidcache.v,2055,assert(!M_AXI_AWVALID);,1
axidcache.v,2056,assert(!M_AXI_WVALID);,1
axidcache.v,2057,assert(!M_AXI_ARVALID);,1
axidcache.v,2058,assert(faxi_rd_nbursts == 0);,1
axidcache.v,2059,assert(faxi_awr_nbursts == 0);,1
axidcache.v,2060,assert(noutstanding == 0);,1
axidcache.v,2061,assert(cpu_outstanding <= 1);,1
axidcache.v,2063,assert(o_rdbusy);,1
axidcache.v,2067,assert(!r_rd_pending);,1
axidcache.v,2069,assert(f_done || o_err || r_svalid || r_dvalid);,1
axidcache.v,2079,assert(!r_rd_pending);,1
axidcache.v,2083,assert(o_rdbusy || o_valid);,1
axidcache.v,2084,assert(o_valid || r_rd_pending);,1
axidcache.v,2092,assert(!M_AXI_ARVALID);,1
axidcache.v,2093,assert(noutstanding == faxi_awr_nbursts);,1
axidcache.v,2099,assert(faxi_awr_nbursts == noutstanding);,1
axidcache.v,2101,assert(o_rdbusy == locked_write_in_progress);,1
axidcache.v,2102,assert(!cpu_read_cycle);,1
axidcache.v,2103,assert(o_busy);,1
axidcache.v,2104,assert(!r_rd_pending);,1
axidcache.v,2105,assert(!r_cache_miss);,1
axidcache.v,2109,assert(o_err || cpu_outstanding == 0);,1
axidcache.v,2114,assert(!M_AXI_AWVALID);,1
axidcache.v,2115,assert(!M_AXI_WVALID);,1
axidcache.v,2121,assert(faxi_awr_nbursts == 0);,1
axidcache.v,2123,assert(o_busy);,1
axidcache.v,2126,assert(OPT_WRAP || r_cache_miss || flushing);,1
axidcache.v,2127,assert(OPT_WRAP || !r_dvalid);,1
axidcache.v,2128,assert(!r_svalid);,1
axidcache.v,2129,assert(good_cache_read || flushing);,1
axidcache.v,2130,assert(wcache_addr[CS-1:LS] == r_cline);,1
axidcache.v,2131,assert(read_addr[CS-1:LS] == r_cline);,1
axidcache.v,2133,assert(r_rd_pending || flushing);,1
axidcache.v,2136,assert(!r_rd_pending);,1
axidcache.v,2139,assert(OPT_WRAP || r_rd_pending);,1
axidcache.v,2144,assert(!M_AXI_AWVALID);,1
axidcache.v,2145,assert(!M_AXI_WVALID);,1
axidcache.v,2147,assert(faxi_awr_nbursts == 0);,1
axidcache.v,2149,assert(faxi_rd_nbursts == faxi_rd_outstanding);,1
axidcache.v,2150,assert(faxi_rd_nbursts == noutstanding);,1
axidcache.v,2151,assert(flushing || o_rdbusy);,1
axidcache.v,2152,assert(o_busy);,1
axidcache.v,2153,assert(!r_rd_pending);,1
axidcache.v,2154,assert(!r_cache_miss);,1
axidcache.v,2157,assert(!o_rdbusy);,1
axidcache.v,2177,assume(!M_AXI_RVALID || !M_AXI_RRESP[1]);,1
axidcache.v,2189,assert(!r_rd_pending);,1
axidcache.v,2190,assert(!set_vflag);,1
axidcache.v,2193,assert(state == DC_IDLE || state == DC_WRITE);,1
axidcache.v,2194,assert(faxi_rd_nbursts == 0);,1
axidcache.v,2206,assert(r_svalid ^ r_rd_pending);,1
axidcache.v,2207,assert(state == DC_IDLE);,1
axidcache.v,2208,assert(r_check);,1
axidcache.v,2209,assert(!set_vflag);,1
axidcache.v,2210,assert(o_rdbusy);,1
axidcache.v,2211,assert(o_busy);,1
axidcache.v,2220,assert(!flushing);,1
axidcache.v,2221,assert(r_cachable);,1
axidcache.v,2222,assert(r_rd_pending ^ r_dvalid);,1
axidcache.v,2223,assert(o_rdbusy);,1
axidcache.v,2224,assert(!r_check);,1
axidcache.v,2225,assert(state == DC_IDLE);,1
axidcache.v,2226,assert(!set_vflag);,1
axidcache.v,2227,assert(o_busy);,1
axidcache.v,2231,assert(!r_rv || r_rtag != r_ctag); // !!! f_read_state <= 4'h3;,2
axidcache.v,2238,assert(!flushing);,1
axidcache.v,2239,assert(!r_svalid);,1
axidcache.v,2240,assert(!r_dvalid);,1
axidcache.v,2241,assert(!r_check);,1
axidcache.v,2242,assert(!r_rv || r_rtag != r_ctag);,1
axidcache.v,2243,assert(r_rd_pending);,1
axidcache.v,2244,assert(r_cachable);,1
axidcache.v,2245,assert(state == DC_READC);,1
axidcache.v,2246,assert(good_cache_read);,1
axidcache.v,2247,assert(!set_vflag);,1
axidcache.v,2248,assert(o_busy);,1
axidcache.v,2259,assert(!OPT_WRAP);,1
axidcache.v,2260,assert(!flushing);,1
axidcache.v,2261,assert(!r_svalid);,1
axidcache.v,2262,assert(r_cachable);,1
axidcache.v,2263,assert(r_rd_pending);,1
axidcache.v,2264,assert(r_rtag == r_ctag);,1
axidcache.v,2265,assert(state == DC_IDLE);,1
axidcache.v,2266,assert(set_vflag);,1
axidcache.v,2267,assert(o_busy);,1
axidcache.v,2277,assert(!OPT_WRAP);,1
axidcache.v,2278,assert(!flushing);,1
axidcache.v,2279,assert(r_cachable);,1
axidcache.v,2280,assert(r_rd_pending != r_dvalid);,1
axidcache.v,2283,assert(state == DC_IDLE);,1
axidcache.v,2284,assert(!set_vflag);,1
axidcache.v,2291,assert(!flushing);,1
axidcache.v,2294,assert(!flushing);,1
axidcache.v,2295,assert(state == DC_READS);,1
axidcache.v,2302,assert(faxi_rd_outstanding == 0);,1
axidcache.v,2304,assert(o_valid || o_err);,1
axidcache.v,2316,assert(OPT_WRAP);,1
axidcache.v,2317,assert(!flushing);,1
axidcache.v,2318,assert(faxi_rd_nbursts == 1);,1
axidcache.v,2319,assert(!r_rd_pending);,1
axidcache.v,2320,assert(!set_vflag);,1
axidcache.v,2321,assert(o_busy);,1
axidcache.v,2328,assert(OPT_WRAP);,1
axidcache.v,2329,assert(faxi_rd_nbursts == 0);,1
axidcache.v,2330,assert(!r_rd_pending);,1
axidcache.v,2331,assert(!flushing);,1
axidcache.v,2332,assert(state == DC_IDLE);,1
axidcache.v,2333,assert(o_busy);,1
axidcache.v,2335,assert(set_vflag || !good_cache_read);,1
axidcache.v,2345,assert(f_read_state != 0);,1
axidcache.v,2350,assert(f_read_state != 0);,1
axidcache.v,2363,assert(read_addr[CS-1:LS] == r_cline);,1
axidcache.v,2366,"assert(axi_araddr[AW-1:AXILSB+LS] == { r_ctag, r_cline });",1
axidcache.v,2369,assert(axi_araddr[AXILSB+LS-1:0] == 0);,1
axidcache.v,2371,assert(axi_araddr[AXILSB +: CS] == read_addr[CS-1:0]);,1
axidcache.v,2374,assert(read_addr[LS-1:0] == 0);,1
axidcache.v,2377,"assert(faxi_rd_ckaddr[AW-1:AXILSB+LS] == { r_ctag, r_cline });",1
axidcache.v,2378,assert(faxi_rd_ckaddr[AXILSB-1:0] == 0);,1
axidcache.v,2379,assert(faxi_rd_ckaddr[AXILSB +: CS] == read_addr[CS-1:0]);,1
axidcache.v,2389,assert(cache_tag[last_tag_line] == last_tag);,1
axidcache.v,2390,assert(cache_valid[last_tag_line]);,1
axidcache.v,2414,assert(cpu_lockd_write_cycle == locked_write_in_progress);,1
axidcache.v,2419,assert(state == DC_WRITE);,1
axidcache.v,2438,assert(axi_awaddr == 0);,1
axidcache.v,2444,assert(axi_wdata == 0);,1
axidcache.v,2445,assert(axi_wstrb == 0);,1
axidcache.v,2451,assert(axi_araddr == 0);,1
axidcache.v,2452,assert(axi_arlen == 0);,1
axidcache.v,2453,assert(axi_arsize == 3'd2);,1
axidcache.v,2487,assume(f_const_addr[AXILSB-1:0] == 0);,1
axidcache.v,2542,assert(read_addr[LS-1:0] == 0);,1
axidcache.v,2547,assert(read_addr[LS-1:0] == M_AXI_ARADDR[AXILSB+LS-1:AXILSB]);,1
axidcache.v,2574,assert(f_op == req_data);,1
axidcache.v,2580,assert(f_op[AXILSB-1:0] == f_request_addr[AXILSB-1:0]);,1
axidcache.v,2582,assert(f_request_addr[AW-1:AXILSB] == r_addr);,1
axidcache.v,2591,assert(!f_simple_return);,1
axidcache.v,2594,assert(!f_simple_return);,1
axidcache.v,2597,assert(f_request_addr[AW-1:AXILSB]== f_const_addr[AW-1:AXILSB]);,1
axidcache.v,2599,assert(f_request_addr[AW-1:AXILSB]!= f_const_addr[AW-1:AXILSB]);,1
axidcache.v,2629,assume(M_AXI_RRESP[1] == f_const_err);,1
axidcache.v,2631,assume(M_AXI_RDATA == f_mem_data);,1
axidcache.v,2635,assume(!M_AXI_RRESP[1]);,1
axidcache.v,2640,assume(M_AXI_BRESP[1] == f_const_err);,1
axidcache.v,2650,assert(good_cache_read);,1
axidcache.v,2652,assert(flushing);,1
axidcache.v,2696,assert(!f_const_err);,1
axidcache.v,2697,assert(f_return == o_data);,1
axidcache.v,2721,assert(f_special_cached_data == f_word_swapped_mem_data);// !!! assert(!f_const_err);,2
axidcache.v,2727,assert(!f_const_err);,1
axidcache.v,2815,cover(cvr_idle && cvr_simple_writes > 4);,1
axidcache.v,2833,cover(cvr_idle && cvr_simple_reads > 4);,1
axidcache.v,2851,cover(cvr_idle && cvr_cache_misses > 2);,1
axidcache.v,2868,cover(cvr_idle && cvr_cache_reads > 4);,1
axidcache.v,2886,cover(cvr_idle && cvr_cache_writes > 4);,1
axidcache.v,2902,assume(i_addr == faxi_exlock_addr);,1
axidcache.v,2903,assume(faxi_ex_state == 2'b10);,1
axidcache.v,2907,assert(faxi_exlock_size == DSZ);,1
axidcache.v,2918,assert(faxi_exreq_len == 0);,1
axidcache.v,2919,assert(faxi_exreq_size <= 3'd2);,1
axidcache.v,2923,assert(faxi_exreq_size == 3'd0);,1
axidcache.v,2925,assert(faxi_exreq_size <= 3'd1);,1
axidcache.v,2928,assert(faxi_exreq_size == 3'd2);,1
axidcache.v,2932,assert(faxi_exlock_addr == faxi_exreq_addr);,1
axidcache.v,2933,assert(faxi_exlock_len == faxi_exreq_len);,1
axidcache.v,2934,assert(faxi_exlock_size == faxi_exreq_size);,1
axidcache.v,2935,assert(faxi_exlock_burst == faxi_exreq_burst);,1
axidcache.v,2936,assert(faxi_exlock_size <= 3'd2);,1
axidcache.v,2939,assert(faxi_exlock_size == 3'd2);,1
axidcache.v,2942,assert(faxi_exlock_size == 3'd0);,1
axidcache.v,2944,assert(faxi_exlock_size <= 3'd1);,1
axidcache.v,2951,assume(!i_cpu_reset);,1
axidcache.v,2960,assume(M_AXI_RRESP[1] == !good_cache_read);,1
axidcache.v,2964,assume(!i_pipe_stb || !i_lock);,1
slowmpy.v,262,cover(o_done);,1
axiicache.v,546,assert(!r_valid && r_count == 0);,1
axiicache.v,550,assert(!r_poss);,1
axiicache.v,554,assert(r_count == 0);,1
axiicache.v,568,assert(last_pc[AW-1:LSB] == axi_araddr[AW-1:LSB]);,1
axiicache.v,802,assume(i_cpu_reset);,1
axiicache.v,828,assert(o_pc == f_address);,1
axiicache.v,852,assume(f_cpu_delay < F_CPU_DELAY);,1
axiicache.v,973,assert(faxi_awr_nbursts == 0);,1
axiicache.v,974,assert(faxi_wr_pending == 0);,1
axiicache.v,981,assert(faxi_rdid_nbursts == faxi_rd_nbursts);,1
axiicache.v,982,assert(faxi_rdid_outstanding == faxi_rd_outstanding);,1
axiicache.v,984,assert(faxi_rdid_nbursts == 0);,1
axiicache.v,985,assert(faxi_rdid_outstanding == 0);,1
axiicache.v,987,assert(faxi_rd_nbursts <= 1);,1
axiicache.v,989,assert(faxi_rd_nbursts == 0 || !M_AXI_ARVALID);,1
axiicache.v,1011,assert(faxi_rd_ckarlen == M_AXI_ARLEN);,1
axiicache.v,1012,assert(faxi_rd_cksize == M_AXI_ARSIZE);,1
axiicache.v,1013,assert(faxi_rd_ckburst == M_AXI_ARBURST);,1
axiicache.v,1014,assert(!faxi_rd_cklockd);,1
axiicache.v,1015,assert(faxi_rd_ckaddr[AW-1:LSB] == axi_araddr[AW-1:LSB]);,1
axiicache.v,1017,assert(write_posn == faxi_rd_ckaddr[LSB-1:ADDRLSB]);,1
axiicache.v,1021,assert(&f_cklast[LSB-1:ADDRLSB]);,1
axiicache.v,1032,assert(bus_abort || last_pc[AW-1:LSB] == axi_araddr[AW-1:LSB]);,1
axiicache.v,1042,assert(last_pc == o_pc);,1
axiicache.v,1046,assert(next_addr == i_pc);,1
axiicache.v,1068,assert(cache_valid == 0);,1
axiicache.v,1069,assert(!o_valid);,1
axiicache.v,1070,assert(!illegal_valid);,1
axiicache.v,1081,assert(pc_valid);,1
axiicache.v,1082,assert(pc_tag == o_pc[AW-1:LSB]);,1
axiicache.v,1084,assert(last_valid);,1
axiicache.v,1085,assert(last_tag == o_pc[AW-1:LSB]);,1
axiicache.v,1106,assume(fc_line == f_const_insn);,1
axiicache.v,1114,assume(shifted_line[INSN_WIDTH-1:0] == f_const_insn);,1
axiicache.v,1120,assume(f_const_illegal == M_AXI_RRESP[1]);,1
axiicache.v,1139,assume(M_AXI_RDATA == fc_line);,1
axiicache.v,1153,assert(cache[f_const_addr[CWB-1:ADDRLSB]] == fc_line);,1
axiicache.v,1177,assert(cache[f_const_addr[CWB-1:ADDRLSB]] == fc_line);,1
axiicache.v,1188,assert(!illegal_valid || illegal_tag != f_const_addr[AW-1:LSB]);,1
axiicache.v,1195,assert(o_illegal);,1
axiicache.v,1243,cover(f_valid_legal);,1
axiicache.v,1278,cover(cvr_valids == 4'b0101);,1
axiicache.v,1325,assume(faxi_rd_ckvalid);,1
axiicache.v,1339,assume(!f_never_illegal || !f_always_illegal);,1
axiicache.v,1344,assume(!f_never_illegal || !M_AXI_RRESP[1]);,1
axiicache.v,1345,assume(!f_always_illegal || M_AXI_RRESP[1]);,1
axiicache.v,1350,assert(o_illegal);,1
axiicache.v,1354,assert(cache_valid == 0);,1
axiicache.v,1358,assert(!illegal_valid);,1
axiicache.v,1362,assert(!o_illegal);,1
pipemem.v,198,assert(fifo_full == 0);,1
pipemem.v,204,assert(fifo_fill == OPT_MAXDEPTH);,1
pipemem.v,635,assert(f_pc == f_pc_check);,1
pipemem.v,639,assert(f_gie == fifo_gie);,1
pipemem.v,643,assert(f_read_cycle == !o_wb_we);,1
pipemem.v,699,assume(i_addr[31:24] == 8'hff);,1
pipemem.v,701,assume(i_addr[31:24] != 8'hff);,1
pipemem.v,708,assert(!r_wb_cyc_lcl);,1
pipemem.v,709,assert(!o_wb_cyc_lcl);,1
pipemem.v,710,assert(!o_wb_stb_lcl);,1
pipemem.v,742,assert(!o_wb_cyc_lcl);,1
pipemem.v,743,assert(!o_wb_stb_lcl);,1
pipemem.v,878,"assert({ fifo_gie, fifo_mem[lastaddr][2+WBLSB +: 4] } == f_last_reg);",1
pipemem.v,890,cover(cyc && !fifo_full);,1
pipemem.v,906,cover(o_valid);,1
axilops.v,1036,assert(!misaligned_aw_request);,1
axilops.v,1037,assert(!misaligned_request);,1
axilops.v,1038,assert(!misaligned_response_pending);,1
axilops.v,1039,assert(faxil_awr_outstanding == 0);,1
axilops.v,1040,assert(faxil_wr_outstanding == 0);,1
axilops.v,1041,assert(faxil_rd_outstanding == 0);,1
axilops.v,1046,assert(!OPT_ALIGNMENT_ERR);,1
axilops.v,1053,assert(faxil_awr_outstanding == 0);,1
axilops.v,1060,assert(faxil_awr_outstanding == 0);,1
axilops.v,1064,assert(faxil_wr_outstanding == 0);,1
axilops.v,1065,assert(faxil_rd_outstanding == 0);,1
axilops.v,1071,assert(faxil_wr_outstanding == 0);,1
axilops.v,1076,assert(faxil_rd_outstanding == 0);,1
axilops.v,1091,assert(M_AXI_RREADY);,1
axilops.v,1101,assert(!misaligned_aw_request);,1
axilops.v,1102,assert(!misaligned_request);,1
axilops.v,1103,assert(!misaligned_response_pending);,1
axilops.v,1104,assert(!pending_err);,1
axilops.v,1107,assert(faxil_rd_outstanding == 0);,1
axilops.v,1108,assert(!misaligned_read);,1
axilops.v,1112,assert(M_AXI_RREADY);,1
axilops.v,1113,assert(!misaligned_aw_request);,1
axilops.v,1114,assert(!misaligned_request);,1
axilops.v,1115,assert(!misaligned_response_pending);,1
axilops.v,1116,assert(!misaligned_read);,1
axilops.v,1117,assert(!pending_err);,1
axilops.v,1118,assert(faxil_awr_outstanding == 0);,1
axilops.v,1119,assert(faxil_wr_outstanding == 0);,1
axilops.v,1146,assert(next_wdata == 0);,1
axilops.v,1147,assert(next_wstrb == 0);,1
axilops.v,1305,assert(o_wreg[3:1] != 3'h7);,1
axilops.v,1309,assert(o_wreg == f_last_reg);,1
axilops.v,1313,assert(o_wreg[4] == f_gie);,1
axilops.v,1318,assert(f_read_cycle || r_flushing);,1
axilops.v,1320,assert(!f_read_cycle);,1
axilops.v,1350,cover(M_AXI_BVALID && !M_AXI_BRESP[1]);,1
axilops.v,1352,cover(M_AXI_BVALID && M_AXI_BRESP[1]);,1
axilops.v,1355,cover(M_AXI_RVALID && !M_AXI_RRESP[1]);,1
axilops.v,1357,cover(M_AXI_RVALID && M_AXI_RRESP[1]);,1
axilops.v,1361,cover(cvr_writes > 3);,1
axilops.v,1364,cover(cvr_reads > 3);,1
dblfetch.v,284,assert(!r_valid);,1
dblfetch.v,289,assert(!cache_valid || !o_wb_cyc);,1
dblfetch.v,290,assert(r_shift == 0);,1
dblfetch.v,292,assert(invalid_bus_cycle || o_valid || o_wb_cyc);,1
dblfetch.v,310,assert(!o_valid && !r_valid);,1
dblfetch.v,337,assert(i_clear_cache || i_new_pc || o_valid);,1
dblfetch.v,338,assert(r_shift == 0);,1
dblfetch.v,443,assert(!i_wb_ack && !i_wb_err);,1
dblfetch.v,630,assume(f_cpu_delay < F_CPU_DELAY);,1
dblfetch.v,666,assert(o_pc == f_address);,1
dblfetch.v,670,assert(o_pc == f_address);,1
dblfetch.v,683,assert(o_valid);,1
dblfetch.v,687,assert(!o_wb_cyc);,1
dblfetch.v,691,assert(!o_valid);,1
dblfetch.v,739,assert(o_illegal);,1
dblfetch.v,741,assert(f_this_insn);,1
dblfetch.v,751,assume(i_wb_data == f_const_bus_word);,1
dblfetch.v,755,assume(!i_wb_ack);,1
dblfetch.v,757,assume(!i_wb_err);,1
dblfetch.v,764,assume(f_const_bus_word == f_const_insn);,1
dblfetch.v,776,assume(f_shifted_insn[IW-1:0] == f_const_insn);,1
dblfetch.v,799,assert(cache_word == f_const_bus_word);,1
dblfetch.v,802,assert(cache_illegal);,1
dblfetch.v,804,assert(o_illegal || !cache_illegal);,1
dblfetch.v,822,assert(!cache_valid || i_ready);,1
dblfetch.v,830,assert(f_outstanding < 2);,1
dblfetch.v,834,assert(f_outstanding <= 2);,1
dblfetch.v,842,assert(!cache_valid);,1
dblfetch.v,846,assert(inflight == f_outstanding);,1
dblfetch.v,876,assert(o_wb_addr == pc_bus_addr);,1
dblfetch.v,877,assert(pc_bus_addr == this_return_address);,1
dblfetch.v,881,assert(o_wb_addr == pc_bus_addr_dbl);,1
dblfetch.v,883,assert(o_wb_addr == pc_bus_addr_next);,1
dblfetch.v,896,assert(o_wb_addr == pc_bus_addr_dbl);,1
dblfetch.v,897,assert(f_outstanding == 0);,1
dblfetch.v,901,assert(o_illegal || o_wb_addr == pc_bus_addr_next);,1
dblfetch.v,903,assert(o_illegal || o_wb_addr == pc_bus_addr_dbl);,1
dblfetch.v,905,assert(o_wb_addr == pc_bus_addr_dbl);,1
dblfetch.v,913,assert(!o_wb_cyc);,1
dblfetch.v,914,assert(cache_illegal);,1
dblfetch.v,928,assert(pc_bus_addr_next == o_wb_addr);,1
dblfetch.v,958,assert(o_wb_addr == next_pc_address);,1
dblfetch.v,963,assert(!o_wb_cyc);,1
dblfetch.v,967,assert(o_valid);,1
div.v,415,assert(!o_busy);,1
div.v,416,assert(!o_valid);,1
div.v,417,assert(!o_err);,1
div.v,419,assert(!r_busy);,1
div.v,421,assert(r_bit==0);,1
div.v,422,assert(!last_bit);,1
div.v,423,assert(!pre_sign);,1
div.v,426,assert(o_quotient==0);,1
div.v,427,assert(!r_c);,1
div.v,428,assert(r_divisor==0);,1
div.v,439,assert(o_busy);,1
div.v,444,assert(o_valid);,1
div.v,455,assert(o_valid);,1
div.v,459,assert(!pre_sign);,1
div.v,463,assert(pre_sign);,1
div.v,472,assert(o_busy);,1
div.v,476,assert(!o_valid);,1
div.v,487,assert(w_n == o_quotient[BW-1]);,1
div.v,491,assert(!o_busy);,1
div.v,497,assert(o_busy);,1
div.v,523,assert(o_err);,1
div.v,532,assert(r_divisor[BW-2:0] == 0);,1
div.v,542,assert(r_divisor[2*BW-2]==0);,1
div.v,547,assert(o_quotient[0]);,1
div.v,549,assert(!o_quotient[0]);,1
axilpipe.v,274,assert(!o_rdbusy);,1
axilpipe.v,276,assert(!o_rdbusy);,1
axilpipe.v,278,assert(!o_rdbusy);,1
axilpipe.v,314,assert(r_pipe_stalled || r_flushing);,1
axilpipe.v,316,assert(!r_pipe_stalled);,1
axilpipe.v,360,assert(r_pipe_stalled);,1
axilpipe.v,365,assert(!r_pipe_stalled);,1
axilpipe.v,388,assert(M_AXI_WVALID || M_AXI_ARVALID);,1
axilpipe.v,392,assert(M_AXI_AWVALID);,1
axilpipe.v,549,assert(!flush_request);,1
axilpipe.v,554,assert(!misaligned_request);,1
axilpipe.v,555,assert(!misaligned_aw_request);,1
axilpipe.v,566,assert(beats_outstanding == flushcount);,1
axilpipe.v,568,assert(beats_outstanding >= flushcount);,1
axilpipe.v,753,assert(r_flushing || o_err);,1
axilpipe.v,1113,assert(!M_AXI_AWVALID);,1
axilpipe.v,1114,assert(!M_AXI_WVALID);,1
axilpipe.v,1120,assert(faxil_rd_outstanding == 0);,1
axilpipe.v,1121,assert(!M_AXI_ARVALID);,1
axilpipe.v,1140,assert(f_fifo_fill == faxil_rd_outstanding);,1
axilpipe.v,1143,assert(f_fifo_fill == faxil_wr_outstanding);,1
axilpipe.v,1146,assert(f_fifo_fill == 0);,1
axilpipe.v,1165,assert(next_wdata == 0);,1
axilpipe.v,1166,assert(next_wstrb == 0);,1
axilpipe.v,1236,cover(i_stb);,1
axilpipe.v,1237,cover(o_valid);,1
axilpipe.v,1238,cover(o_err);,1
axilpipe.v,1240,cover(o_valid);,1
axilpipe.v,1241,cover(o_err);,1
axilpipe.v,1318,assert(rdaddr == wraddr);,1
axilpipe.v,1472,assert(!M_AXI_AWVALID && !M_AXI_WVALID && faxil_awr_outstanding == 0);,1
axilpipe.v,1478,assert(!misaligned_request);,1
axilpipe.v,1596,assert(cpu_last_reg == ar_oreg);,1
axilpipe.v,1600,assert(f_first_return_reg == cpu_last_reg);,1
axilpipe.v,1602,assert(f_next_return_reg == cpu_last_reg);,1
axilpipe.v,1634,assert(!M_AXI_WVALID && !M_AXI_ARVALID);,1
axilpipe.v,1711,assert(cpu_read_cycle);,1
axilpipe.v,1714,assert(!cpu_read_cycle);,1
axilpipe.v,1765,cover(M_AXI_BVALID && !M_AXI_BRESP[1]);,1
axilpipe.v,1767,cover(M_AXI_BVALID && M_AXI_BRESP[1]);,1
axilpipe.v,1770,cover(M_AXI_RVALID && !M_AXI_RRESP[1]);,1
axilpipe.v,1772,cover(M_AXI_RVALID && M_AXI_RRESP[1]);,1
axilpipe.v,1778,cover(cvr_writes > 3);,1
axilpipe.v,1779,cover(cvr_reads > 3);,1
axilpipe.v,1780,cover(cvr_valids > 3);,1
axilpipe.v,1813,cover(cvr_unaligned_writes > 3);,1
axilpipe.v,1814,cover(cvr_unaligned_reads > 3);,1
axilfetch.v,342,assert(!o_valid);,1
axilfetch.v,574,assume(!S_AXI_ARESETN);,1
axilfetch.v,578,assume(i_cpu_reset);,1
axilfetch.v,618,assume(f_cpu_delay < F_CPU_DELAY);,1
axilfetch.v,683,assert(pending_new_pc || i_new_pc);,1
axilfetch.v,687,assert(!flush_request);,1
axilfetch.v,728,assert(f_req_offset <= f_word_count);,1
axilfetch.v,732,assert(f_ret_offset <= f_req_offset);,1
axilfetch.v,738,assert(M_AXI_ARADDR[AXILLSB-1:0] == 0);,1
axilfetch.v,745,assert(f_word_count <= FETCH_LIMIT);,1
axilfetch.v,747,assert(f_word_count - flushcount <= FETCH_LIMIT);,1
axilfetch.v,755,assert(f_req_addr[AW-1:AXILLSB] == M_AXI_ARADDR[AW-1:AXILLSB]);,1
axilfetch.v,761,assert(f_ret_addr[AW-1:AXILLSB] == f_return_addr[AW-1:AXILLSB]);,1
axilfetch.v,788,"assert(faxil_outstanding == { 1'b0, outstanding });",1
axilfetch.v,796,assert(!o_valid);,1
axilfetch.v,825,assert(o_pc == f_address);,1
axilfetch.v,840,assert(o_valid);,1
axilfetch.v,848,assert(!o_valid);,1
axilfetch.v,851,assert(out_fill <= INSNS_PER_WORD);,1
axilfetch.v,860,assert(out_fill == INSNS_PER_WORD - o_pc[AXILLSB-1:INSN_LSB]);,1
axilfetch.v,864,assert(out_fill <= 1);,1
axilfetch.v,891,assert(endian_swapped_rdata == M_AXI_RDATA);,1
axilfetch.v,931,assert(f_out_addr[INSN_LSB-1:0] == 0);,1
axilfetch.v,935,assert(f_out_addr[AW-1:INSN_LSB] == pending_pc[AW-1:INSN_LSB]);,1
axilfetch.v,940,assert(f_out_addr[AW-1:AXILLSB] == o_pc[AW-1:AXILLSB]);,1
axilfetch.v,941,assert(f_subout_addr[AW-1:INSN_LSB] == o_pc[AW-1:INSN_LSB]);,1
axilfetch.v,945,assert(f_out_addr[AW-1:INSN_LSB] == o_pc[AW-1:INSN_LSB]);,1
axilfetch.v,982,assume(M_AXI_RRESP[1] == fc_illegal);,1
axilfetch.v,983,assume(f_bus_word == fc_insn);,1
axilfetch.v,1048,assert(f_cache_insn[INSN_WIDTH-1:0] == fc_insn);,1
axilfetch.v,1049,assert(f_cache_illegal == fc_illegal);,1
axilfetch.v,1121,assert(f_cache_subdata[INSN_WIDTH-1:0] == fc_insn);,1
axilfetch.v,1122,assert(f_cache_illegal == fc_illegal);,1
axilfetch.v,1142,assume(f_fifo_subdata[INSN_WIDTH-1:0] == fc_insn);,1
axilfetch.v,1143,assume(fifo_data[C_AXI_DATA_WIDTH] == fc_illegal);,1
axilfetch.v,1157,assert(o_illegal);,1
axilfetch.v,1159,assert(f_out_data == fc_insn);,1
axilfetch.v,1164,assert(i_new_pc || flush_request);,1
axilfetch.v,1168,assert(o_pc == pending_pc);,1
axilfetch.v,1173,assert(flushcount == faxil_outstanding + 1);,1
axilfetch.v,1178,assert(!o_illegal);,1
axilfetch.v,1183,assert(f_out_addr[AW-1:AXILLSB] == pending_pc[AW-1:AXILLSB]);,1
axilfetch.v,1184,assert(o_pc == pending_pc);,1
axilfetch.v,1202,assume(M_AXI_ARREADY);,1
axilfetch.v,1213,cover(cvr_returns == 4'b0100);,1
axilfetch.v,1214,cover(cvr_returns == 4'b0101);,1
axilfetch.v,1215,cover(cvr_returns == 4'b0110 && cvr_always_ready);,1
pfcache.v,601,assume(i_reset);,1
pfcache.v,630,assume(f_const_word == f_const_insn);,1
pfcache.v,649,assume(f_insn_check == f_const_insn);,1
pfcache.v,676,assume(f_cpu_delay < F_CPU_DELAY);,1
pfcache.v,688,assert(!o_valid);,1
pfcache.v,719,assert(!o_wb_we);,1
pfcache.v,750,assert(!valid_mask[o_wb_addr[CW-1:LS]]);,1
pfcache.v,754,assert(o_wb_addr[AW-1:LS] != illegal_cache);,1
pfcache.v,821,assert(o_insn == f_insn);,1
pfcache.v,830,assert(o_pc == f_address);,1
pfcache.v,834,assert(o_illegal || o_pc == f_address);,1
pfcache.v,847,assert(lastpc == r_pc);,1
pfcache.v,878,assert(!o_valid);,1
pfcache.v,879,assert(!o_illegal);,1
pfcache.v,884,assert(o_valid);,1
pfcache.v,885,assert(!o_illegal);,1
pfcache.v,888,assert(o_illegal);,1
pfcache.v,925,assert(o_illegal == f_const_illegal);,1
pfcache.v,928,assert(f_this_insn);,1
pfcache.v,929,assert(f_this_tag);,1
pfcache.v,937,assert(f_const_word == cache[f_const_addr[WBLSB +: CW]]);,1
pfcache.v,941,assert(f_const_word == cache[f_const_addr[WBLSB +: CW]]);,1
pfcache.v,946,assert(wraddr[CW-1:LS] == o_wb_addr[CW-1:LS]);,1
pfcache.v,960,assume(!i_wb_ack);,1
pfcache.v,962,assume(!i_wb_err);,1
pfcache.v,965,assume(f_this_data);,1
pfcache.v,982,cover(f_valid_legal);,1
pffifo.v,339,assert(first_shift == 0);,1
pffifo.v,341,assert(first_shift == o_pc[WBLSB-1:INLSB]);,1
pffifo.v,452,assume(i_reset);,1
pffifo.v,481,assume(f_address[INLSB-1:0] == 0);,1
pffifo.v,494,assume(!i_wb_ack);,1
pffifo.v,496,assume(!i_wb_err);,1
pffifo.v,499,assume(i_wb_data == f_const_word);,1
pffifo.v,507,assume(f_const_word == f_const_insn);,1
pffifo.v,539,assume(f_insn_check == f_const_insn);,1
pffifo.v,543,assert(f_insn_now == f_const_insn);,1
pffifo.v,572,assume(f_cpu_delay < F_CPU_DELAY);,1
pffifo.v,625,assert(o_pc == f_address);,1
pffifo.v,629,assert(o_pc[WBLSB +: AW] == fifo_addr - f_fifo_extra);,1
pffifo.v,638,assert(f_first_data[BUS_WIDTH]);,1
pffifo.v,640,"assert(f_first_data== { 1'b0,f_const_word });",1
pffifo.v,647,assert(f_second_data[BUS_WIDTH]);,1
pffifo.v,649,"assert(f_second_data=={ 1'b0,f_const_word });",1
pffifo.v,653,assert(!f_first_data[BUS_WIDTH]);,1
pffifo.v,655,assert(!f_second_data[BUS_WIDTH]);,1
pffifo.v,659,assume(!pf_err);,1
pffifo.v,661,assume(!pf_err);,1
pffifo.v,665,assume(pf_err);,1
pffifo.v,667,assume(!pf_err && sfifo_word == f_const_word);,1
pffifo.v,672,assert(!o_illegal);,1
pffifo.v,676,assert(o_illegal);,1
pffifo.v,683,assert(f_first_data[BUS_WIDTH]);,1
pffifo.v,686,assert(f_second_data[BUS_WIDTH]);,1
pffifo.v,688,assume(pf_err);,1
pffifo.v,691,assert(!f_first_data[BUS_WIDTH]);,1
pffifo.v,693,assert(!f_second_data[BUS_WIDTH]);,1
pffifo.v,729,assume(!i_wb_err);,1
pffifo.v,734,assert(!pending_err);,1
pffifo.v,735,assert(!o_illegal);,1
pffifo.v,741,assert(!o_wb_we);,1
pffifo.v,745,assert(f_outstanding == wb_pending);,1
pffifo.v,746,assert(pipe_fill >= wb_pending);,1
pffifo.v,749,assert(pipe_fill >= sfifo_fill);,1
pffifo.v,750,assert(pipe_fill == sfifo_fill + wb_pending + f_fifo_extra);,1
pffifo.v,766,assert(o_illegal || o_pc == f_address);,1
pffifo.v,786,assert(!o_valid);,1
pffifo.v,787,assert(!o_illegal);,1
pffifo.v,792,assert(o_valid);,1
pffifo.v,793,assert(!o_illegal);,1
pffifo.v,796,assert(o_illegal);,1
pffifo.v,813,cover(f_valid_legal);,1
busdelay.v,216,assert(r_we == 0);,1
busdelay.v,217,assert(r_addr == 0);,1
busdelay.v,218,assert(r_data == 0);,1
busdelay.v,219,assert(r_sel == 0);,1
busdelay.v,221,assert(r_we == o_dly_we);,1
busdelay.v,432,assert(!o_dly_stb);,1
busdelay.v,434,assert(!o_dly_stb);,1
busdelay.v,436,assert(o_wb_stall);,1
busdelay.v,440,assert(!f_pending[STB_BIT]);,1
busdelay.v,442,assert(!f_pending[STB_BIT]);,1
busdelay.v,446,assert(!f_pending[STB_BIT]);,1
busdelay.v,470,assert(f_pending == f_wpending);,1
busdelay.v,472,assert(f_pending == f_wpending);,1
busdelay.v,483,assert(f_pending[STB_BIT] == f_wpending[STB_BIT]);,1
busdelay.v,498,assert(!o_dly_stb);,1
busdelay.v,508,assert(!o_dly_stb);,1
busdelay.v,510,assert(o_dly_stb);,1
busdelay.v,546,assert(f_dly_outstanding <= f_wb_outstanding);,1
busdelay.v,550,assert(f_expected == f_wb_outstanding);,1
busdelay.v,555,assert(f_exp_nreqs == f_wb_nreqs);,1
busdelay.v,556,assert(f_exp_nacks == f_wb_nacks);,1
busdelay.v,562,assert(i_wb_we == o_dly_we);,1
busdelay.v,582,assert(f_pending != f_nvr_request);,1
busdelay.v,586,assert(f_dly_request != f_nvr_request);,1
busdelay.v,603,assert(o_dly_addr == 0);,1
busdelay.v,604,assert(o_dly_data == 0);,1
busdelay.v,605,assert(o_dly_sel == 0);,1
busdelay.v,610,assert(o_wb_data == 0);,1
wbpriarbiter.v,206,assert(r_a_owner);,1
wbpriarbiter.v,208,assert(!r_a_owner);,1
wbpriarbiter.v,217,assert(f_reset);,1
wbpriarbiter.v,281,assert(f_b_nreqs == 0);,1
wbpriarbiter.v,282,assert(f_b_nacks == 0);,1
wbpriarbiter.v,283,assert(f_a_outstanding == f_outstanding);,1
wbpriarbiter.v,285,assert(f_a_nreqs == 0);,1
wbpriarbiter.v,286,assert(f_a_nacks == 0);,1
wbpriarbiter.v,287,assert(f_b_outstanding == f_outstanding);,1
wbpriarbiter.v,293,assume(i_b_stb);,1
wbpriarbiter.v,297,assume(i_a_stb);,1
sfifo.v,271,assert(o_fill == f_fill);,1
sfifo.v,278,assert(o_full == r_full);,1
sfifo.v,285,assert(o_empty == r_empty);,1
sfifo.v,296,assert(r_empty);,1
sfifo.v,300,assert(!r_empty);,1
sfifo.v,302,assert(!r_empty);,1
sfifo.v,309,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,311,assert(o_data == i_data);,1
sfifo.v,367,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,373,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,380,assert(o_data == f_first_data);,1
sfifo.v,384,assert(o_data == f_second_data);,1
sfifo.v,394,assert(f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,405,assert(!f_first_in_fifo);,1
sfifo.v,410,assert(f_second_in_fifo);,1
sfifo.v,417,assert(f_second_in_fifo);,1
sfifo.v,419,assert(!f_second_in_fifo);,1
sfifo.v,422,assert(f_first_in_fifo);,1
sfifo.v,425,assert(f_second_in_fifo);,1
sfifo.v,428,assert(f_first_in_fifo);,1
sfifo.v,430,assert(o_data == f_first_data);,1
sfifo.v,432,assert(!f_first_in_fifo);,1
sfifo.v,433,assert(o_data == f_second_data);,1
sfifo.v,460,cover(f_was_full && f_empty);,1
fwb_master.v,433,assert(f_outstanding < MAX_OUTSTANDING);,1
fwb_master.v,435,assume(f_outstanding < MAX_OUTSTANDING);,1
fwb_master.v,528,assume(!i_wb_stall);,1
skidbuffer.v,264,assume(i_reset);,1
skidbuffer.v,282,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,286,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,292,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,294,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,312,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,335,assert(o_ready);,1
skidbuffer.v,366,assert(o_valid == i_valid);,1
skidbuffer.v,376,assert(o_valid);,1
skidbuffer.v,379,assert(!o_valid);,1
skidbuffer.v,390,assert(o_ready);,1
skidbuffer.v,400,assert(o_data == 0);,1
skidbuffer.v,404,assert(w_data == 0);,1
skidbuffer.v,472,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,478,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
wbarbiter.v,357,assert(f_b_nreqs == 0);,1
wbarbiter.v,358,assert(f_b_nacks == 0);,1
wbarbiter.v,359,assert(f_a_outstanding == f_outstanding);,1
wbarbiter.v,361,assert(f_a_nreqs == 0);,1
wbarbiter.v,362,assert(f_a_nacks == 0);,1
wbarbiter.v,363,assert(f_b_outstanding == f_outstanding);,1
wbarbiter.v,370,assert(r_a_owner);,1
wbarbiter.v,375,assert(!r_a_owner);,1
axi2axilite.v,1059,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1064,assert(m_axi_awvalid);,1
axi2axilite.v,1067,assert(!skids_awready);,1
axi2axilite.v,1070,assert(!skids_awready);,1
axi2axilite.v,1072,assert(!skids_awready);,1
axi2axilite.v,1077,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1097,assert(rid == S_AXI_RID);,1
axi2axilite.v,1101,assert(rid == S_AXI_RID);,1
axi2axilite.v,1105,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1110,assert(m_axi_arvalid);,1
axi2axilite.v,1111,assert(!skids_arready);,1
axi2axilite.v,1129,assume(!skids_awvalid);,1
axi2axilite.v,1130,assume(!skids_wvalid);,1
axi2axilite.v,1131,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1132,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1133,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1134,assert(!skidm_bvalid);,1
axi2axilite.v,1135,assert(!S_AXI_BVALID);,1
axi2axilite.v,1144,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1145,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1146,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1178,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1180,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1204,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1206,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
demofull.v,1007,assume(!S_AXI_ARESETN);,1
demofull.v,1095,assert(S_AXI_BVALID);,1
demofull.v,1102,assert(!S_AXI_WREADY);,1
demofull.v,1126,assert(S_AXI_ARREADY);,1
demofull.v,1129,assert(axi_rlen <= 256);,1
demofull.v,1144,assert(!rskd_lock);,1
demofull.v,1147,assert(S_AXI_BRESP == 2'b00);,1
demofull.v,1153,assert(S_AXI_RID == 0);,1
demofull.v,1154,assert(S_AXI_RDATA == 0);,1
demofull.v,1155,assert(S_AXI_RRESP == 2'b00);,1
demofull.v,1160,assert(o_waddr == 0);,1
demofull.v,1161,assert(o_wdata == 0);,1
demofull.v,1162,assert(o_wstrb == 0);,1
demofull.v,1205,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
axiempty.v,278,assume(!S_AXI_ARESETN);,1
axiempty.v,385,assert(S_AXI_ARREADY);,1
axiempty.v,429,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
memdev.v,211,assume(i_reset);,1
memdev.v,241,assert(f_outstanding <= 2);,1
memdev.v,247,assert(o_wb_ack);,1
memdev.v,250,assert(f_outstanding <= 1);,1
memdev.v,253,assert(f_outstanding == 1);,1
memdev.v,258,assert(!o_wb_stall);,1
memdev.v,300,assume(mem[f_addr] == f_data);,1
memdev.v,301,assume(f_data == f_first);,1
memdev.v,303,assert(mem[f_addr] == f_data);,1
axilscope.v,493,assert(bw_reset_request);,1
axilscope.v,557,assert(counter <= br_holdoff+1'b1);,1
axilscope.v,562,assert(counter == 0);,1
axilscope.v,700,assert(q_oflags[0] && dr_primed);,1
axilscope.v,702,assert(dr_primed);,1
axilscope.v,705,assert(q_oflags[1] && dr_triggered);,1
axilscope.v,707,assert(dr_triggered);,1
axilscope.v,710,assert(q_oflags[2] && dr_stopped);,1
axilscope.v,712,assert(dr_stopped);,1
axilscope.v,818,assume(i_data_clk == S_AXI_ACLK);,1
axilscope.v,831,assume(f_data_step > 0);,1
axilscope.v,832,assume(f_bus_step > 0);,1
axilscope.v,833,assume(f_data_step <= MAX_STEP);,1
axilscope.v,834,assume(f_bus_step <= MAX_STEP);,1
axilscope.v,845,assume(i_data_clk == f_data_count[CKSTEP_BITS-1]);,1
axilscope.v,846,assume(bus_clock == f_bus_count[CKSTEP_BITS-1]);,1
axilscope.v,891,assert(dr_triggered);,1
axilscope.v,893,assert(dr_primed);,1
axilscope.v,895,assert(dr_stopped);,1
axilscope.v,998,assert(dr_primed);,1
axilscope.v,1026,assert(f_filled);,1
axilscope.v,1030,assert(!dr_primed);,1
axilscope.v,1038,assert(mem[f_addr] == f_data);,1
axilscope.v,1042,assert(raddr == 0);,1
axilscope.v,1057,assert(f_axi_addr[0] && rvalid[0]);,1
axilscope.v,1062,assert(f_axi_addr[0] == read_address[1]);,1
axilscope.v,1066,assert(!read_from_data);,1
axilscope.v,1068,assert(!read_from_data);,1
axilscope.v,1070,assert(read_from_data == read_address[0]);,1
axilscope.v,1072,assert(read_from_data == S_AXI_ARADDR[ADDR_LSBS]);,1
axilscope.v,1074,assert(!read_from_data);,1
axilscope.v,1093,assert(bw_stopped);,1
axilscope.v,1097,assert(bw_stopped && f_nxtstopped);,1
axilscope.v,1117,assert(nxt_mem == mem[f_nxtaddr]);,1
axilscope.v,1130,assert(S_AXI_RDATA == f_data);,1
axilscope.v,1135,assert(S_AXI_RDATA[24:20] == bw_lgmem);,1
axilscope.v,1139,assert(dr_primed);,1
axilscope.v,1143,assert(dr_triggered);,1
axilempty.v,128,assert(awskd_unused == 0);,1
axilempty.v,142,assert(wskd_unused == 0);,1
axilempty.v,211,assert(arskd_unused == 0);,1
axilempty.v,342,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
axilempty.v,352,assert(S_AXI_RDATA == 0);,1
axilempty.v,354,assert(S_AXI_RRESP == 2'b11);,1
axilempty.v,356,assert(S_AXI_BRESP == 2'b11);,1
axilite2axi.v,317,assert(faxi_awr_nbursts == faxil_awr_outstanding);,1
axilite2axi.v,337,assert(faxil_wr_outstanding == 0);,1
axilite2axi.v,372,assume(S_AXI_AWVALID || !S_AXI_WVALID);,1
axilite2axi.v,374,assume(!S_AXI_AWVALID);,1
axilite2axi.v,384,assume(!S_AXI_ARVALID);,1
axilite2axi.v,388,assume(!S_AXI_AWVALID);,1
wbxbar.v,1137,assume(i_reset);,1
wbxbar.v,1157,assert(grant[N][M-1:0] == 0);,1
wbxbar.v,1163,assert(o_merr[N] || m_stall[N]);,1
wbxbar.v,1175,assert(checkgrant == mgrant[N]);,1
wbxbar.v,1189,assert(mgrant[N]);,1
wbxbar.v,1190,assert(mindex[N] == M);,1
wbxbar.v,1191,assert(sgrant[M]);,1
wbxbar.v,1192,assert(sindex[M] == N);,1
wbxbar.v,1205,assert(grant[sindex[M]][M]);,1
wbxbar.v,1216,assert(sgrant[M] == f_sgrant);,1
wbxbar.v,1241,assume(sgrant == 0);,1
wbxbar.v,1248,assume(o_scyc[M] == 0);,1
wbxbar.v,1249,assume(o_sstb[M] == 0);,1
wbxbar.v,1250,assume(sgrant[M] == 0);,1
wbxbar.v,1259,assume(grant[N] == 0);,1
wbxbar.v,1260,assume(mgrant[N] == 0);,1
wbxbar.v,1293,assert(f_moutstanding[N] <= 1);,1
wbxbar.v,1297,assert(m_stall[N] || o_merr[N]);,1
wbxbar.v,1334,assert(m_stall[N]);,1
wbxbar.v,1372,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1374,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1376,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1378,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1380,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1382,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1390,assert(i_mwe[N] == m_we[N]);,1
wbxbar.v,1400,assert(!o_scyc[M]);,1
wbxbar.v,1445,assume(special_master == 0);,1
wbxbar.v,1448,assume(special_slave == 0);,1
wbxbar.v,1481,assert(address_found == 0);,1
wbxbar.v,1500,assume(special_value == 0);,1
wbxbar.v,1510,assume(i_sack[special_slave]);,1
wbxbar.v,1517,assume(!i_sack[special_slave]);,1
wbxbar.v,1518,assume(!i_serr[special_slave]);,1
wbxbar.v,1566,assert(grant[special_master][special_slave]);,1
wbxbar.v,1567,assert(mgrant[special_master]);,1
wbxbar.v,1568,assert(sgrant[special_slave]);,1
wbxbar.v,1569,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1570,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1571,assert(!o_merr[special_master]);,1
wbxbar.v,1576,assert(o_scyc[special_slave]);,1
wbxbar.v,1577,assert(o_sstb[special_slave]);,1
wbxbar.v,1578,assert(!o_swe[special_slave]);,1
wbxbar.v,1579,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1586,assert(!m_we[special_master]);,1
wbxbar.v,1587,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1594,assert(o_scyc[special_slave]);,1
wbxbar.v,1595,assert(o_sstb[special_slave]);,1
wbxbar.v,1596,assert(!o_swe[special_slave]);,1
wbxbar.v,1597,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1601,assert(i_sack[special_slave]);,1
wbxbar.v,1609,assert(o_mack[special_master]);,1
wbxbar.v,1617,cover(i_mcyc[special_master] && f_read_ack);,1
wbxbar.v,1654,assert(grant[special_master][special_slave]);,1
wbxbar.v,1655,assert(mgrant[special_master]);,1
wbxbar.v,1656,assert(sgrant[special_slave]);,1
wbxbar.v,1657,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1658,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1659,assert(!o_merr[special_master]);,1
wbxbar.v,1664,assert(o_scyc[special_slave]);,1
wbxbar.v,1665,assert(o_sstb[special_slave]);,1
wbxbar.v,1666,assert(o_swe[special_slave]);,1
wbxbar.v,1667,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1678,assert(m_we[special_master]);,1
wbxbar.v,1679,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1688,assert(o_scyc[special_slave]);,1
wbxbar.v,1689,assert(o_sstb[special_slave]);,1
wbxbar.v,1690,assert(o_swe[special_slave]);,1
wbxbar.v,1691,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1704,assert(i_sack[special_slave]);,1
wbxbar.v,1711,assert(o_mack[special_master]);,1
wbxbar.v,1716,cover(i_mcyc[special_master] && f_write_ack);,1
axixbar.v,2126,assert(rerr_id[N] == 0);,1
axixbar.v,2198,assert(mwgrant[N]);,1
axixbar.v,2199,assert(mwindex[N] == iM);,1
axixbar.v,2202,assert(swgrant[iM]);,1
axixbar.v,2203,assert(swindex[iM] == N);,1
axixbar.v,2210,assert(wgrant[N] != 0);,1
axixbar.v,2214,assert(wrequest[N][NS-1:0] == 0);,1
axixbar.v,2234,assert(mrgrant[N]);,1
axixbar.v,2235,assert(mrindex[N] == iM);,1
axixbar.v,2238,assert(srgrant[iM]);,1
axixbar.v,2239,assert(srindex[iM] == N);,1
axixbar.v,2246,assert(rgrant[N] != 0);,1
axixbar.v,2254,assert(!mrempty[N]);,1
axixbar.v,2339,assert(mwfull[N] == &w_mawpending[N]);,1
axixbar.v,2345,assert(mrfull[N] == &w_mrpending[N]);,1
axixbar.v,2545,assume(S_AXI_AWVALID[N] == 0);,1
axixbar.v,2547,assert(wgrant[N] == 0);,1
axixbar.v,2549,assert(mwgrant[N] == 0);,1
axixbar.v,2551,assert(S_AXI_BVALID[N]== 0);,1
axixbar.v,2557,assume(S_AXI_ARVALID [N]== 0);,1
axixbar.v,2559,assert(rgrant[N] == 0);,1
axixbar.v,2561,assert(S_AXI_RVALID[N] == 0);,1
axixbar.v,2567,assert(OPT_READS | OPT_WRITES);,1
addrdecode.v,300,assume(i_reset);,1
addrdecode.v,304,assert(i_reset);,1
addrdecode.v,310,assert(!o_valid);,1
addrdecode.v,311,assert(o_decode == 0);,1
addrdecode.v,340,assert(!o_decode[iM]);,1
addrdecode.v,349,assert(o_addr == 0);,1
addrdecode.v,350,assert(o_decode == 0);,1
addrdecode.v,351,assert(o_data == 0);,1
addrdecode.v,375,assert(onehot_request);,1
addrdecode.v,393,cover(i_valid);,1
addrdecode.v,396,cover(o_valid);,1
addrdecode.v,399,cover(o_valid && !i_stall);,1
addrdecode.v,413,cover(f_reached[0]);,1
addrdecode.v,422,cover(&f_reached);,1
wbscope.v,270,assert(bw_reset_request);,1
wbscope.v,334,assert(counter <= br_holdoff+1'b1);,1
wbscope.v,339,assert(counter == 0);,1
wbscope.v,477,assert(q_oflags[0] && dr_primed);,1
wbscope.v,479,assert(dr_primed);,1
wbscope.v,482,assert(q_oflags[1] && dr_triggered);,1
wbscope.v,484,assert(dr_triggered);,1
wbscope.v,487,assert(q_oflags[2] && dr_stopped);,1
wbscope.v,489,assert(dr_stopped);,1
axi2axilsub.v,507,assert(slv_wlen > 0);,1
axi2axilsub.v,635,assert(mst_awaddr == 0);,1
axi2axilsub.v,733,assert(skids_wvalid && skids_wready);,1
axi2axilsub.v,1079,assert(faxi_rd_nbursts == 0);,1
axi2axilsub.v,1153,assert(faxil_rd_outstanding == 0);,1
axi2axilsub.v,1192,assert(f_bfifo_packets <= wfifo_count);,1
axi2axilsub.v,1611,assert(mst_arid == 0);,1
axi2axilsub.v,1612,assert(mst_araddr == 0);,1
axi2axilsub.v,1613,assert(mst_arprot == 0);,1
axi2axilsub.v,1900,assert(faxi_awr_nbursts == 0);,1
axi2axilsub.v,1901,assert(faxi_wr_pending == 0);,1
axi2axilsub.v,1902,assert(faxi_wr_ckvalid == 0);,1
axi2axilsub.v,1973,assert(faxil_awr_outstanding == 0);,1
axi2axilsub.v,1974,assert(faxil_wr_outstanding == 0);,1
axi2axilsub.v,2060,assume(!S_AXI_AWVALID);,1
axi2axilsub.v,2061,assume(!S_AXI_WVALID);,1
axi2axilsub.v,2062,assert(!M_AXI_AWVALID);,1
axi2axilsub.v,2063,assert(!M_AXI_WVALID);,1
axi2axilsub.v,2064,assume(!M_AXI_BVALID);,1
axi2axilsub.v,2065,assert(!S_AXI_BVALID);,1
axi2axilsub.v,2074,assume(!S_AXI_ARVALID);,1
axi2axilsub.v,2075,assert(!M_AXI_ARVALID);,1
axi2axilsub.v,2109,assert(M_AXI_ARADDR == 0);,1
axi2axilsub.v,2110,assert(M_AXI_ARPROT == 0);,1
axilxbar.v,1155,assert(axi_awaddr == 0);,1
axilxbar.v,1156,assert(axi_awprot == 0);,1
axilxbar.v,1162,assert(axi_wdata == 0);,1
axilxbar.v,1163,assert(axi_wstrb == 0);,1
axilxbar.v,1259,assert(axi_araddr == 0);,1
axilxbar.v,1260,assert(axi_arprot == 0);,1
axilxbar.v,1358,assert(r_bresp[N] != 2'b01);,1
axilxbar.v,1361,assert(m_axi_bready[swindex[N]] == !r_bvalid[N]);,1
axilxbar.v,1363,assert(!r_bvalid[N]);,1
axilxbar.v,1366,assert(r_bresp[N] == 0);,1
axilxbar.v,1370,assert(axi_bresp == 0);,1
axilxbar.v,1499,assert(r_rresp[N] != 2'b01);,1
axilxbar.v,1502,assert(m_axi_rready[srindex[N]] == !r_rvalid[N]);,1
axilxbar.v,1504,assert(!r_rvalid[N]);,1
axilxbar.v,1508,assert(r_rresp[N] == 0);,1
axilxbar.v,1509,assert(r_rdata[N] == 0);,1
axilxbar.v,1515,assert(axi_rresp == 0);,1
axilxbar.v,1516,assert(axi_rdata == 0);,1
axilxbar.v,1624,assert(missing_wdata == awpending - wpending);,1
axilxbar.v,1628,assert(awpending >= wpending);,1
axilxbar.v,1707,assume(swindex[iN] == 0);,1
axilxbar.v,1710,assume(srindex[iN] == 0);,1
axilxbar.v,1741,assert(swgrant[N]);,1
axilxbar.v,1742,assert(swindex[N] == iM);,1
axilxbar.v,1745,assert(mwgrant[iM]);,1
axilxbar.v,1746,assert(mwindex[iM] == N);,1
axilxbar.v,1753,assert(wgrant[N] != 0);,1
axilxbar.v,1757,assert(wrequest[N][NS-1:0] == 0);,1
axilxbar.v,1770,assert(srgrant[N]);,1
axilxbar.v,1771,assert(srindex[N] == iM);,1
axilxbar.v,1774,assert(mrgrant[iM]);,1
axilxbar.v,1775,assert(mrindex[iM] == N);,1
axilxbar.v,1782,assert(rgrant[N] != 0);,1
axilxbar.v,1786,assert(rrequest[N][NS-1:0] == 0);,1
axilxbar.v,1873,assert(!S_AXI_BVALID[N]);,1
axilxbar.v,1878,assert(w_sawpending[N] == 0);,1
axilxbar.v,1879,assert(w_swpending[N] == 0);,1
axilxbar.v,1914,assert(!S_AXI_RVALID[N]);,1
axilxbar.v,1917,assert(w_srpending[N] == 0);,1
axilxbar.v,1927,assert(swfull[N] == &w_sawpending[N]);,1
axilxbar.v,1933,assert(srfull[N] == &w_srpending[N]);,1
axilxbar.v,1987,assert(fs_awr_outstanding[M] == 0);,1
axilxbar.v,1988,assert(fs_wr_outstanding[M] == 0);,1
axilxbar.v,1993,assert(fs_rd_outstanding[M] == 0);,1
axilxbar.v,2140,cover(!swgrant[N] && whsreturn);,1
axilxbar.v,2142,cover(!swgrant[N] && was_wevery);,1
axilxbar.v,2145,cover(S_AXI_ARESETN && wrequest[N][NS]);,1
axilxbar.v,2147,cover(S_AXI_ARESETN && wrequest[N][NS] && slave_awaccepts[N]);,1
axilxbar.v,2149,cover(err_wr_return);,1
axilxbar.v,2151,cover(!swgrant[N] && err_wr_return);,1
axilxbar.v,2156,assert(swgrant[N]);,1
axilxbar.v,2216,cover(!srgrant[N] && rhsreturn); // @26 always @(*) cover(!srgrant[N] && was_revery); // @26 always @(*) cover(S_AXI_ARVALID[N] && rrequest[N][NS]);,6
axilxbar.v,2223,cover(rgrant[N][NS]);,1
axilxbar.v,2225,cover(err_rd_return);,1
axilxbar.v,2227,cover(!srgrant[N] && err_rd_return); //@! `endif always @(*) if (S_AXI_BVALID[N] && wgrant[N][NS]) assert(S_AXI_BRESP[2*N+:2]==INTERCONNECT_ERROR);,6
axilxbar.v,2235,assert(S_AXI_RRESP[2*N+:2]==INTERCONNECT_ERROR);,1
axilxbar.v,2255,cover(multi_write_hit);,1
axilxbar.v,2258,cover(multi_read_hit);,1
axilxbar.v,2261,cover(S_AXI_ARESETN && multi_write_hit & mwgrant == 0 && M_AXI_BVALID == 0);,1
axilxbar.v,2264,cover(S_AXI_ARESETN && multi_read_hit & mrgrant == 0 && M_AXI_RVALID == 0);,1
axilxbar.v,2289,assume(f_const_source < NM);,1
axilxbar.v,2300,assume(f_const_slave < NS);,1
axilxbar.v,2316,assume(f_awaddr != f_const_addr_n);,1
axilxbar.v,2317,assume(S_AXI_AWPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2321,assume(m_wdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2322,assume(m_wstrb[f_const_source] != f_const_strb_n);,1
axilxbar.v,2326,assume(f_araddr != f_const_addr_n);,1
axilxbar.v,2327,assume(S_AXI_ARPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2332,assume(m_axi_bresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2337,assume(m_axi_rdata[f_const_slave] != f_const_data_n);,1
axilxbar.v,2338,assume(m_axi_rresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2347,assert(skd_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2348,assert(skd_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2352,assert(m_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2353,assert(m_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2357,assert(M_AXI_AWADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2358,assert(M_AXI_AWPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2362,assert(M_AXI_WDATA[f_const_slave*DW+:DW] != f_const_data_n);,1
axilxbar.v,2367,assert(skd_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2368,assert(skd_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2372,assert(m_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2373,assert(m_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2377,assert(M_AXI_ARADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2378,assert(M_AXI_ARPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2382,assert(r_bresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2384,assert(S_AXI_BRESP[f_const_source*2+:2] != f_const_resp_n);,1
axilxbar.v,2387,assert(r_rresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2388,assert(r_rdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2392,assert(S_AXI_RRESP[f_const_source*2+:2]!=f_const_resp_n);,1
axilxbar.v,2393,assert(S_AXI_RDATA[f_const_source*DW+:DW]!=f_const_data_n);,1
wbdown.v,307,assume(i_reset);,1
wbdown.v,346,assert(s_count > 0);,1
wbdown.v,348,assert(s_count == 0);,1
wbdown.v,353,assert(ign_fifo_fill == fmst_outstanding);,1
wbdown.v,357,assert(ign_fifo_fill == 0);,1
wbdown.v,361,assert(!r_stb);,1
wbdown.v,365,assert(o_we == i_wwe);,1
wbdown.v,369,assert(o_cyc);,1
wbdown.v,388,assert(f_acks_in_fifo > 0);,1
wbdown.v,421,assert(f_acks_in_fifo <= ign_fifo_fill);,1
wbdown.v,422,assert(!ign_fifo_empty || f_acks_in_fifo == 0);,1
wbdown.v,431,assert(f_first_ack || s_count > 0);,1
wbdown.v,433,assert(f_second_ack || s_count > 0);,1
wbdown.v,436,assert(f_acks_in_fifo > 0);,1
wbdown.v,472,assume(!fifo_ack);,1
wbdown.v,810,assume(i_reset);,1
wbdown.v,849,assert(s_count > 0);,1
wbdown.v,850,assert(o_sel != 0);,1
wbdown.v,852,assert(s_sel == 0);,1
wbdown.v,853,assert(s_count == 0);,1
wbdown.v,857,assert(!r_stb || !s_null);,1
wbdown.v,862,assert(o_sel != 0);,1
wbdown.v,874,assert(ign_fifo_fill == fmst_outstanding);,1
wbdown.v,878,assert(ign_fifo_fill == 0);,1
wbdown.v,882,assert(!r_stb);,1
wbdown.v,886,assert(o_we == i_wwe);,1
wbdown.v,890,assert(o_cyc);,1
wbdown.v,894,assert(r_data == 0);,1
wbdown.v,914,assert(f_acks_in_fifo > 0);,1
wbdown.v,925,assert(f_acks_in_fifo <= ign_fifo_fill);,1
wbdown.v,926,assert(!fifo_empty || f_acks_in_fifo == 0);,1
wbdown.v,935,assert(f_first_ack || s_count > 0);,1
wbdown.v,937,assert(f_second_ack || s_count > 0);,1
wbdown.v,940,assert(f_acks_in_fifo > 0);,1
wbdown.v,976,assume(!fifo_ack);,1
memdev.v,211,assume(i_reset);,1
memdev.v,241,assert(f_outstanding <= 2);,1
memdev.v,247,assert(o_wb_ack);,1
memdev.v,250,assert(f_outstanding <= 1);,1
memdev.v,253,assert(f_outstanding == 1);,1
memdev.v,258,assert(!o_wb_stall);,1
memdev.v,279,assert(mem[f_addr] == f_data);,1
f_idecode.v,174,assert(!w_special || !w_fpu);,1
fdebug.v,121,assume(i_reset);,1
fmem.v,222,assume(i_sys_reset);,1
fmem.v,226,assume(i_cpu_reset);,1
fmem.v,269,assert(f_outstanding <= OPT_MAXDEPTH);,1
fmem.v,491,assert(f_outstanding == 1);,1
fmem.v,555,assert(!f_pc || f_axi_write_cycle);,1
fmem.v,557,assert(f_pc);,1
fmem.v,565,assert(f_check_axi_lock);,1
fmem.v,609,assume(f_check_axi_lock == 1'b0);,1
fmem.v,611,assume(f_check_axi_lock == 1'b1);,1
fmem.v,624,assert(f_axi_write_cycle == 0);,1
fmem.v,632,assert(f_pc);,1
fmem.v,731,cover(cvr_returns > 4);,1
fmem.v,741,cover(cvr_returns > 2);,1
abs_div.v,142,assume(wait_time > 5'h1);,1
abs_div.v,212,assume(o_valid);,1
abs_div.v,216,assume(o_valid);,1
abs_div.v,220,assert(o_busy);,1
abs_div.v,224,assume(!o_valid);,1
abs_div.v,232,assume(o_flags[1] == o_quotient[BW-1]);,1
abs_div.v,236,assume(!o_busy);,1
ffetch.v,225,assert(need_new_pc);,1
ffetch.v,235,assert(!need_new_pc);,1
ffetch.v,276,assume(fc_pc[1:0] == 2'b00);,1
abs_mpy.v,103,assume(next_delay_to_valid == OPT_MPY-1);,1
project.v,106,assume(reset);,1
project.v,236,assume(reset);,1
project.v,424,assume(reset);,1
project.v,1294,assume(reset);,1
fnv_1a_32_formal.v,34,assert (in != out);,1
lzc_formal.v,18,cover (out == 32'h0);,1
project.v,106,assume(reset);,1
project.v,244,assume(reset);,1
project.v,751,assume(reset);,1
project.v,1305,assume(reset);,1
button_pulse.v,51,cover property (comp < MAX_COUNT - 1);,1
button_pulse.v,54,assert property (button && count == 0 |-> pulse);,1
button_pulse.v,55,assert property (pulse |=> !pulse);,1
jtag.v,314,cover (current_state <= UpdateIr);,1
jtag.v,319,assert (current_state == 5'b0_0000);,1
jtag.v,320,assert (r_output_selector_transmitter == 1'b1);,1
jtag.v,321,assert (transmitter_channel == 1'b0);,1
jtag.v,322,assert (tdo == 1'b0);,1
jtag.v,323,assert (byte_transmitter_enable == 1'b0);,1
jtag.v,330,assert (current_state == TestLogicReset);,1
jtag.v,331,assert (tdo != 1'bX);,1
jtag.v,336,assert (tdo != 1'bX);,1
jtag.v,337,assert (tdo != 1'bX);,1
jtag.v,338,assert (r_output_selector_transmitter != 1'bX);,1
byte_transmitter.v,43,assert (r_out != 1'bX);,1
byte_transmitter.v,44,assert (byte_count != 5'bX_XXXX);,1
byte_transmitter.v,45,assert (byte_count[0] != 1'bX);,1
byte_transmitter.v,46,assert (byte_count[1] != 1'bX);,1
byte_transmitter.v,47,assert (byte_count[2] != 1'bX);,1
byte_transmitter.v,48,assert (byte_count[3] != 1'bX);,1
byte_transmitter.v,49,assert (byte_count[4] != 1'bX);,1
byte_transmitter.v,76,assume (reset);,1
byte_transmitter.v,79,assert (f_total_written == 32); // We've drained the entire buffer. assert (byte_count == 0);,2
byte_transmitter.v,81,assert (r_out != 1'bX);,1
byte_transmitter.v,82,assert (done != 1'bX);,1
byte_transmitter.v,86,assert (f_total_written == 32);,1
byte_transmitter.v,87,assert (done);,1
byte_transmitter.v,88,assert (r_out != 1'bX);,1
assertion_LM.sv,24,property WRITE_CM_ERROR; @(posedge clk) disable iff (!rst_n) ~UART_data_debug_switch & ~CM_errors_valid |=> leds[3:0] == $past(CM_errors); endproperty : WRITE_CM_ERROR,4
assertion_LM.sv,29,property WRITE_UART_ERROR; @(posedge clk) disable iff (!rst_n) ~UART_data_debug_switch & ~UART_errors_valid |=> leds[5:4] == $past(UART_errors); endproperty : WRITE_UART_ERROR,4
assertion_LM.sv,34,property WRITE_UART_DATA; @(posedge clk) disable iff (!rst_n) UART_data_debug_switch & ~UART_data_valid |=> leds[7:0] == $past(UART_data); endproperty : WRITE_UART_DATA,4
assertion_LM.sv,39,property WRITE_RESET; @(posedge clk) ~UART_data_debug_switch |-> leds[7] == ~rst_n; endproperty : WRITE_RESET,3
assertion_LM.sv,43,property WRITE_SWITCH; @(posedge clk) disable iff (!rst_n) ~UART_data_debug_switch |-> leds[6] == ~UART_data_debug_switch; endproperty : WRITE_SWITCH,4
assertion_VGA.sv,23,property POS_HS; @(posedge clk) disable iff (!rst_n) $fell(HSync) ##0 ~HSync [*96] |=> $rose(HSync); endproperty : POS_HS,4
assertion_VGA.sv,28,property NEG_HS; @(posedge clk) disable iff (!rst_n) $rose(HSync) ##0 HSync [*705] |=> $fell(HSync); endproperty : NEG_HS,4
assertion_VGA.sv,33,property INACTIVE_DATA; @(posedge clk) disable iff (!rst_n) $rose(HSync) | $fell(HSync) |=> ( RED | GREEN | BLUE ) == 'b0; endproperty : INACTIVE_DATA,4
assertion_VGA.sv,38,property POS_VS; @(posedge clk) disable iff (!rst_n) $fell(VSync) ##0 ~VSync [*1602] |=> $rose(VSync); endproperty : POS_VS,4
assertion_VGA.sv,43,property NEG_VS; @(posedge clk) disable iff (!rst_n) $rose(VSync) ##0 VSync [*418923] |=> $fell(VSync); endproperty : NEG_VS,4
assertion_DB.sv,19,property ENABLE_btnHS; @(posedge clk) disable iff (!rst_n) btnHS [*LIMIT] |=> ##1 HS; endproperty : ENABLE_btnHS,4
assertion_DB.sv,24,property DISABLE_btnHS; @(posedge clk) disable iff (!rst_n) ~btnHS [*LIMIT] |=> ##1 ~HS; endproperty : DISABLE_btnHS,4
assertion_DB.sv,29,property ENABLE_btnVS; @(posedge clk) disable iff (!rst_n) btnVS [*LIMIT] |=> ##1 VS; endproperty : ENABLE_btnVS,4
assertion_DB.sv,34,property DISABLE_btnVS; @(posedge clk) disable iff (!rst_n) ~btnVS [*LIMIT] |=> ##1 ~VS; endproperty : DISABLE_btnVS,4
assertion_DB.sv,39,property ENABLE_btnDF_UART; @(posedge clk) disable iff (!rst_n) btnDF_UART [*LIMIT] |=> ##1 DF_UART; endproperty : ENABLE_btnDF_UART,4
assertion_DB.sv,44,property DISABLE_btnDF_UART; @(posedge clk) disable iff (!rst_n) ~btnDF_UART [*LIMIT] |=> ##1 ~DF_UART; endproperty : DISABLE_btnDF_UART,4
assertion_DB.sv,49,property ENABLE_btnDF_VGA; @(posedge clk) disable iff (!rst_n) btnDF_VGA [*LIMIT] |=> ##1 DF_VGA; endproperty : ENABLE_btnDF_VGA,4
assertion_DB.sv,54,property DISABLE_btnDF_VGA; @(posedge clk) disable iff (!rst_n) ~btnDF_VGA [*LIMIT] |=> ##1 ~DF_VGA; endproperty : DISABLE_btnDF_VGA,4
assertion_UART.sv,94,property VALID_OUT; @(posedge clk) disable iff (!rst_n || (c_valid === 1'b1)) $rose(done_ff) |=> ##[20:40] $rose(valid_out); endproperty : VALID_OUT,4
assertion_UART.sv,99,property VALID_ERROR; @(posedge clk) disable iff (!rst_n || (c_valid === 1'b1)) $rose(error_ff) |=> ##[20:40] $rose(valid_error); endproperty : VALID_ERROR,4
CHECKER_iclab015.sv,184,property op_latency; @(posedge clk) (make_n_check_valid_latency or supply_latency); endproperty property make_n_check_valid_latency; @(posedge clk) (inf.box_no_valid && (act === Make_drink || act === Check_Valid_Date )) |-> (##[1:1000] inf.out_valid); endproperty:make_n_check_valid_latency,7
uvmt_cv32e40s_interrupt_assert.sv,125,"property p_irq_ack_o_pulse; irq_ack_o |=> !irq_ack_o; endproperty a_irq_ack_o_pulse: assert property(p_irq_ack_o_pulse) else `uvm_error(info_tag, ""Interrupt ack was asserted for more than one cycle""); // irq_id_o is never a reserved irq property p_irq_id_o_not_reserved; irq_ack_o |-> VALID_IRQ_MASK[irq_id_o]; endproperty a_irq_id_o_not_reserved: assert property(p_irq_id_o_not_reserved) else `uvm_error(info_tag, $sformatf(""int_id_o output is 0x%0x which is reserved"", irq_id_o)); // irq_id_o is never a disabled irq property p_irq_id_o_mie_enabled; irq_ack_o |-> mie_q[irq_id_o]; endproperty a_irq_id_o_mie_enabled: assert property(p_irq_id_o_mie_enabled) else `uvm_error(info_tag, $sformatf(""irq_id_o output is 0x%0x which is disabled in MIE: 0x%08x"", irq_id_o, mie_q)); // irq_ack_o cannot be asserted if mstatus_mie is deasserted property p_irq_id_o_mstatus_mie_enabled; irq_ack_o |-> mstatus_mie; endproperty a_irq_id_o_mstatus_mie_enabled: assert property(p_irq_id_o_mstatus_mie_enabled) else `uvm_error(info_tag, $sformatf(""int_id_o output is 0x%0x but MSTATUS.MIE is disabled"", irq_id_o)); // --------------------------------------------------------------------------- // Interrupt CSR checks // --------------------------------------------------------------------------- // Coverage for individual interupt assertions sequence s_irq_taken(irq); irq_i[irq] ##0 mie_q[irq] ##0 mstatus_mie ##0 irq_ack_o ##0 irq_id_o == irq; endsequence : s_irq_taken // Interrupt fired, global interrupts enabled, but not taken due to global MSTATUS.MIE setting property p_irq_masked(irq); irq_i[irq] ##0 !mie_q[irq] ##0 mstatus_mie; endproperty : p_irq_masked",48
uvmt_cv32e40p_interrupt_assert.sv,118,"property p_irq_ack_o_pulse; irq_ack_o |=> !irq_ack_o; endproperty a_irq_ack_o_pulse: assert property(p_irq_ack_o_pulse) else `uvm_error(info_tag, ""Interrupt ack was asserted for more than one cycle""); // irq_id_o is never a reserved irq property p_irq_id_o_not_reserved; irq_ack_o |-> VALID_IRQ_MASK[irq_id_o]; endproperty a_irq_id_o_not_reserved: assert property(p_irq_id_o_not_reserved) else `uvm_error(info_tag, $sformatf(""int_id_o output is 0x%0x which is reserved"", irq_id_o)); // irq_id_o is never a disabled irq property p_irq_id_o_mie_enabled; irq_ack_o |-> mie_n[irq_id_o]; endproperty a_irq_id_o_mie_enabled: assert property(p_irq_id_o_mie_enabled) else `uvm_error(info_tag, $sformatf(""irq_id_o output is 0x%0x which is disabled in MIE: 0x%08x"", irq_id_o, mie_n)); // irq_ack_o cannot be asserted if mstatus_mie is deasserted property p_irq_id_o_mstatus_mie_enabled; irq_ack_o |-> mstatus_mie; endproperty a_irq_id_o_mstatus_mie_enabled: assert property(p_irq_id_o_mstatus_mie_enabled) else `uvm_error(info_tag, $sformatf(""int_id_o output is 0x%0x but MSTATUS.MIE is disabled"", irq_id_o)); // --------------------------------------------------------------------------- // Interrupt CSR checks // --------------------------------------------------------------------------- // Coverage for individual interupt assertions sequence s_irq_taken(irq); irq_i[irq] ##0 mie_q[irq] ##0 mstatus_mie ##0 irq_ack_o ##0 irq_id_o == irq; endsequence : s_irq_taken // Interrupt fired, global interrupts enabled, but not taken due to global MSTATUS.MIE setting property p_irq_masked(irq); irq_i[irq] ##0 !mie_q[irq] ##0 mstatus_mie; endproperty : p_irq_masked",48
uvma_fencei_assert.sv,45,property p_req_until_ack; flush_req ##0 !flush_ack |=> flush_req; endproperty : p_req_until_ack,3
uvma_rvfi_assert.sv,56,property p_req_until_gnt; req ##0 !gnt |=> req; endproperty : p_req_until_gnt,3
uvma_rvfi_assert.sv,77,property p_req_until_gnt; req ##0 !gnt |=> req; endproperty : p_req_until_gnt,3
uvma_rvfi_assert.sv,85,property p_be_not_zero; req |-> be != 0; endproperty : p_be_not_zero,3
uvma_rvfi_assert.sv,109,property p_be_contiguous; req |-> be_inside_contiguous_be; endproperty : p_be_contiguous,3
uvma_rvfi_assert.sv,126,property p_addr_be_consistent; req |-> addr[1:0] == get_addr_lsb(be); endproperty : p_addr_be_consistent,3
uvma_obi_memory_1p2_assert.sv,122,property p_req_until_gnt; req ##0 !gnt |=> req; endproperty : p_req_until_gnt,3
uvma_obi_memory_1p2_assert.sv,155,property p_req_until_gnt; req ##0 !gnt |=> req; endproperty : p_req_until_gnt,3
uvma_obi_memory_1p2_assert.sv,163,property p_rvalid_until_rready; rvalid ##0 !rready |=> rvalid; endproperty : p_rvalid_until_rready,3
uvma_obi_memory_1p2_assert.sv,192,property p_rvalid_until_rready; rvalid ##0 !rready |=> rvalid; endproperty : p_rvalid_until_rready,3
uvma_obi_memory_1p2_assert.sv,203,property p_rready_assert_no_rvalid; !rvalid ##0 !rready ##1 !rvalid ##0 rready; endproperty : p_rready_assert_no_rvalid,3
uvma_obi_memory_1p2_assert.sv,209,property p_rready_deassert_no_rvalid; !rvalid ##0 rready ##1 !rvalid ##0 !rready; endproperty : p_rready_deassert_no_rvalid,3
uvma_obi_memory_1p2_assert.sv,234,"property p_rid_follows_aid; rvalid |-> rid == aid_q[aid_rptr].aid; endproperty a_rid_follows_aid: assert property(p_rid_follows_aid) else `uvm_error(info_tag, $sformatf(""rid of 0x%0x does not follow expected aid of 0x%0x"", rid, aid_q[aid_rptr].aid)) // R-10.4 An atomic transaction must use a naturally aligned address property p_atomic_addr_aligned; req ##0 atop |-> addr & (ADDR_ALIGN_MASK) == 0; endproperty a_atomic_addr_aligned : assert property(p_atomic_addr_aligned) else `uvm_error(info_tag, $sformatf(""Atomic transaction does not use aligned address: 0x%08x"", addr)) // R-11 If an exclusive transaction is executing another may not be emitted property p_one_atomic_trn; req |-> !atomic_in_flight; endproperty : p_one_atomic_trn",19
uvma_obi_memory_1p2_assert.sv,258,"property p_exokay_lr_sc; rvalid && exokay |-> aid_q[aid_rptr].atop inside {ATOP_LR, ATOP_SC}; endproperty : p_exokay_lr_sc",3
uvma_obi_memory_assert.sv,114,property p_req_until_gnt; req ##0 !gnt |=> req; endproperty : p_req_until_gnt,3
uvma_obi_memory_assert.sv,135,property p_req_until_gnt; req ##0 !gnt |=> req; endproperty : p_req_until_gnt,3
uvma_obi_memory_assert.sv,146,property p_gnt_assert_no_req; !req ##0 !gnt ##1 !req ##0 gnt; endproperty : p_gnt_assert_no_req,3
uvma_obi_memory_assert.sv,152,property p_gnt_deassert_no_req; !req ##0 gnt ##1 !req ##0 !gnt; endproperty : p_gnt_deassert_no_req,3
uvma_obi_memory_assert.sv,172,property p_r_after_a; rvalid |-> outstanding_trn_cnt != 0; endproperty : p_r_after_a,3
uvma_obi_memory_assert.sv,180,property p_be_not_zero; req ##0 we |-> be != 0; endproperty : p_be_not_zero,3
uvma_obi_memory_assert.sv,204,property p_be_contiguous; req ##0 we |-> be_inside_contiguous_be; endproperty : p_be_contiguous,3
uvma_obi_memory_assert.sv,221,property p_addr_be_consistent; req |-> addr[1:0] == get_addr_lsb(be); endproperty : p_addr_be_consistent,3
uvmt_cv32e40x_interrupt_assert.sv,125,"property p_irq_ack_o_pulse; irq_ack_o |=> !irq_ack_o; endproperty a_irq_ack_o_pulse: assert property(p_irq_ack_o_pulse) else `uvm_error(info_tag, ""Interrupt ack was asserted for more than one cycle""); // irq_id_o is never a reserved irq property p_irq_id_o_not_reserved; irq_ack_o |-> VALID_IRQ_MASK[irq_id_o]; endproperty a_irq_id_o_not_reserved: assert property(p_irq_id_o_not_reserved) else `uvm_error(info_tag, $sformatf(""int_id_o output is 0x%0x which is reserved"", irq_id_o)); // irq_id_o is never a disabled irq property p_irq_id_o_mie_enabled; irq_ack_o |-> mie_q[irq_id_o]; endproperty a_irq_id_o_mie_enabled: assert property(p_irq_id_o_mie_enabled) else `uvm_error(info_tag, $sformatf(""irq_id_o output is 0x%0x which is disabled in MIE: 0x%08x"", irq_id_o, mie_q)); // irq_ack_o cannot be asserted if mstatus_mie is deasserted property p_irq_id_o_mstatus_mie_enabled; irq_ack_o |-> mstatus_mie; endproperty a_irq_id_o_mstatus_mie_enabled: assert property(p_irq_id_o_mstatus_mie_enabled) else `uvm_error(info_tag, $sformatf(""int_id_o output is 0x%0x but MSTATUS.MIE is disabled"", irq_id_o)); // --------------------------------------------------------------------------- // Interrupt CSR checks // --------------------------------------------------------------------------- // Coverage for individual interupt assertions sequence s_irq_taken(irq); irq_i[irq] ##0 mie_q[irq] ##0 mstatus_mie ##0 irq_ack_o ##0 irq_id_o == irq; endsequence : s_irq_taken // Interrupt fired, global interrupts enabled, but not taken due to global MSTATUS.MIE setting property p_irq_masked(irq); irq_i[irq] ##0 !mie_q[irq] ##0 mstatus_mie; endproperty : p_irq_masked",48
CHECKER_iclab104.sv,194,property property_2_1; @(negedge clk) ( (act == Make_drink) && (inf.box_no_valid === 1) ) |-> (##[1:1000] inf.out_valid); endproperty: property_2_1,5
CHECKER_iclab104.sv,202,property property_2_2; @(negedge clk) ( (act == Supply) && (inf.box_sup_valid === 1) && (cnt_4 == 3) ) |-> (##[1:1000] inf.out_valid); endproperty: property_2_2,5
CHECKER_iclab104.sv,210,property property_2_3; @(negedge clk) ( (act == Check_Valid_Date) && (inf.box_no_valid === 1) ) |-> (##[1:1000] inf.out_valid); endproperty: property_2_3,5
CHECKER_iclab104.sv,226,property property_3; @(negedge clk) ( inf.complete === 1 ) |-> (inf.err_msg === No_Err); endproperty: property_3,5
CHECKER_iclab104.sv,240,property property_4_1_1; @(negedge clk) ( (act == Make_drink) && (inf.sel_action_valid === 1) ) |=> (##[0:3] inf.type_valid === 1); endproperty: property_4_1_1,5
CHECKER_iclab104.sv,248,property property_4_1_2; @(negedge clk) ( (act == Make_drink) && (inf.type_valid === 1) ) |=> (##[0:3] inf.size_valid === 1); endproperty: property_4_1_2,5
CHECKER_iclab104.sv,256,property property_4_1_3; @(negedge clk) ( (act == Make_drink) && (inf.size_valid === 1) ) |=> (##[0:3] inf.date_valid === 1); endproperty: property_4_1_3,5
CHECKER_iclab104.sv,264,property property_4_1_4; @(negedge clk) ( (act == Make_drink) && (inf.date_valid === 1) ) |=> (##[0:3] inf.box_no_valid === 1); endproperty: property_4_1_4,5
CHECKER_iclab104.sv,274,property property_4_2_1; @(negedge clk) ( (act == Supply) && (inf.sel_action_valid === 1) ) |=> (##[0:3] inf.date_valid === 1); endproperty: property_4_2_1,5
CHECKER_iclab104.sv,282,property property_4_2_2; @(negedge clk) ( (act == Supply) && (inf.date_valid === 1) ) |=> (##[0:3] inf.box_no_valid === 1); endproperty: property_4_2_2,5
CHECKER_iclab104.sv,290,property property_4_2_3; @(negedge clk) ( (act == Supply) && (inf.box_no_valid === 1) ) |=> (##[0:3] inf.box_sup_valid === 1); endproperty: property_4_2_3,5
CHECKER_iclab104.sv,298,property property_4_2_4; @(negedge clk) ( (act == Supply) && (inf.box_sup_valid === 1) && (cnt_4 != 3) ) |=> (##[0:3] inf.box_sup_valid === 1); endproperty: property_4_2_4,5
CHECKER_iclab104.sv,308,property property_4_3_1; @(negedge clk) ( (act == Check_Valid_Date) && (inf.sel_action_valid === 1) ) |=> (##[0:3] inf.date_valid === 1); endproperty: property_4_3_1,5
CHECKER_iclab104.sv,316,property property_4_3_2; @(negedge clk) ( (act == Check_Valid_Date) && (inf.date_valid === 1) ) |=> (##[0:3] inf.box_no_valid === 1); endproperty: property_4_3_2,5
CHECKER_iclab104.sv,328,property property_5_1; @(posedge clk iff inf.sel_action_valid) ( !((inf.type_valid) || (inf.size_valid) || (inf.date_valid) || (inf.box_no_valid) || (inf.box_sup_valid)) ); endproperty: property_5_1,5
CHECKER_iclab104.sv,336,property property_5_2; @(posedge clk iff inf.type_valid) ( !((inf.size_valid) || (inf.date_valid) || (inf.box_no_valid) || (inf.box_sup_valid)) ); endproperty: property_5_2,5
CHECKER_iclab104.sv,344,property property_5_3; @(posedge clk iff inf.size_valid) ( !((inf.date_valid) || (inf.box_no_valid) || (inf.box_sup_valid)) ); endproperty: property_5_3,5
CHECKER_iclab104.sv,352,property property_5_4; @(posedge clk iff inf.date_valid) ( !((inf.box_no_valid) || (inf.box_sup_valid)) ); endproperty: property_5_4,5
CHECKER_iclab104.sv,360,property property_5_5; @(posedge clk iff inf.box_no_valid) ( !(inf.box_sup_valid) ); endproperty: property_5_5,5
CHECKER_iclab104.sv,372,property property_6; @(posedge clk) ( inf.out_valid === 1 ) |=> inf.out_valid === 0; endproperty: property_6,5
CHECKER_iclab104.sv,384,property property_7; @(posedge clk) ( inf.out_valid === 1 ) |=> (##[0:3] inf.sel_action_valid === 1); endproperty: property_7,5
CHECKER_iclab104.sv,396,property property_8_1; @(negedge clk iff inf.date_valid) ( (date.M >= 1) && (date.M <= 12) ); endproperty: property_8_1,5
CHECKER_iclab104.sv,404,property property_8_2; @(negedge clk iff inf.date_valid) ( (date.D >= 1) && (date.D <= day[date.M - 1]) ); endproperty: property_8_2,5
CHECKER_iclab104.sv,437,property property_9_1; @(posedge clk) ( inf.C_in_valid === 1 ) |=> (inf.C_in_valid === 0); endproperty: property_9_1,5
CHECKER_iclab104.sv,445,property property_9_2; @(posedge clk iff busy == 1) ( inf.C_in_valid === 0 ); endproperty: property_9_2,5
CHECKER_other.sv,184,property op_latency; @(posedge clk) (make_n_check_valid_latency or supply_latency); endproperty property make_n_check_valid_latency; @(posedge clk) (inf.box_no_valid && (act === Make_drink || act === Check_Valid_Date )) |-> (##[1:1000] inf.out_valid); endproperty:make_n_check_valid_latency,7
CHECKER_iclab064.sv,210,property assert_4; @(posedge clk) ( ( (inf.sel_action === 1'b1) |-> (##[1:4] (inf.type_valid === 1'b1 || inf.date_valid === 1'b1 ) ) ) && ( (inf.type_valid === 1'b1) |-> (##[1:4] (inf.size_valid === 1'b1 ) ) ) && ( (inf.size_valid === 1'b1) |-> (##[1:4] (inf.date_valid === 1'b1 ) ) ) && ( (inf.date_valid === 1'b1) |-> (##[1:4] (inf.box_no_valid === 1'b1 ) ) ) && ( (inf.box_no_valid === 1'b1 && sel_action == Supply) |-> (##[1:4] (inf.box_sup_valid === 1'b1 ) ) ) && ( (inf.box_sup_valid === 1'b1 && &sup_valid_flag !==1) |-> (##[1:4] (inf.box_sup_valid === 1'b1 ) ) ) ); endproperty : assert_4*/,9
Normal_Transaction_TB.sv,263,property check_sys_in_rst_mode ; @(negedge i_sys_clk_tb)disable iff (i_sys_rst_tb)(!i_sys_rst_tb)-> (o_scl_tb)-> (o_sdahnd_serial_data_tb && (dut.dut0.current_state ==0)); endproperty:check_sys_in_rst_mode,5
Normal_Transaction_TB.sv,278,property regular_write_odd_bytes_with_no_more_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (i_regf_toc_tb) && (!i_regf_cmd_attr_tb) && (i_regf_DATA_LEN_tb[0]) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre |-> ##60 zeros_byte_w |-> ##6 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d17) ; endproperty:regular_write_odd_bytes_with_no_more_config,12
Normal_Transaction_TB.sv,299,property regular_write_even_bytes_with_no_more_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (i_regf_toc_tb) && (!i_regf_cmd_attr_tb) && (!(i_regf_DATA_LEN_tb[0])) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre |-> ##80 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d17) ; endproperty:regular_write_even_bytes_with_no_more_config,12
Normal_Transaction_TB.sv,319,property regular_write_odd_bytes_with_coming_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (!i_regf_toc_tb) && (!i_regf_cmd_attr_tb) && (i_regf_DATA_LEN_tb[0]) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre |-> ##60 zeros_byte_w |-> ##6 fourth_stage_crc_pre_w |-> ##2 token_crc ##12 (dut.dut0.current_state =='d16) ; endproperty:regular_write_odd_bytes_with_coming_config,12
Normal_Transaction_TB.sv,340,property regular_write_even_bytes_with_coming_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (!i_regf_toc_tb) && (!i_regf_cmd_attr_tb) && (!(i_regf_DATA_LEN_tb[0])) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre |-> ##80 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d16) ; endproperty:regular_write_even_bytes_with_coming_config,12
Normal_Transaction_TB.sv,360,property regular_read_odd_bytes_with_no_more_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (i_regf_toc_tb) && (!i_regf_cmd_attr_tb) && (i_regf_DATA_LEN_tb[0]) && (i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_read |-> ##22 sec_stage_data_pre |-> ##58 zeros_byte_r |-> ##6 fourth_stage_crc_pre_r |-> ##22 (dut.dut0.current_state =='d17) ; endproperty:regular_read_odd_bytes_with_no_more_config,12
Normal_Transaction_TB.sv,380,property regular_read_even_bytes_with_no_more_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (i_regf_toc_tb) && (!i_regf_cmd_attr_tb) && (!(i_regf_DATA_LEN_tb[0])) && (i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_read |-> ##22 sec_stage_data_pre |-> ##78 fourth_stage_crc_pre_r |-> ##22 (dut.dut0.current_state =='d17) ; endproperty:regular_read_even_bytes_with_no_more_config,12
Normal_Transaction_TB.sv,400,property regular_read_odd_bytes_with_coming_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (!i_regf_toc_tb) && (!i_regf_cmd_attr_tb) && (i_regf_DATA_LEN_tb[0]) && (i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_read |-> ##22 sec_stage_data_pre |-> ##58 zeros_byte_r |-> ##6 fourth_stage_crc_pre_r ##22 (dut.dut0.current_state =='d16) ; endproperty:regular_read_odd_bytes_with_coming_config,13
Normal_Transaction_TB.sv,421,property regular_read_even_bytes_with_coming_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (!i_regf_toc_tb) && (!i_regf_cmd_attr_tb) && (!(i_regf_DATA_LEN_tb[0])) && (i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_read |-> ##22 sec_stage_data_pre |-> ##78 fourth_stage_crc_pre_r |-> ##22 (dut.dut0.current_state =='d16) ; endproperty:regular_read_even_bytes_with_coming_config,12
Normal_Transaction_TB.sv,441,property immidiate_write_one_byte_with_no_more_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (i_regf_toc_tb) && (i_regf_cmd_attr_tb) && (i_regf_dtt_tb == 'd1) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre |-> ##18 zeros_byte_w |-> ##6 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d17) ; endproperty:immidiate_write_one_byte_with_no_more_config,12
Normal_Transaction_TB.sv,461,property immidiate_write_one_byte_with_coming_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (!i_regf_toc_tb) && (i_regf_cmd_attr_tb) && (i_regf_dtt_tb == 'd1) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre |-> ##18 zeros_byte_w |-> ##6 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d16) ; endproperty:immidiate_write_one_byte_with_coming_config,12
Normal_Transaction_TB.sv,481,property immidiate_write_two_bytes_with_no_more_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (i_regf_toc_tb) && (i_regf_cmd_attr_tb) && (i_regf_dtt_tb == 'd2) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre /*|-> ##34 zeros_byte_w */ |-> ##38 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d17) ; endproperty:immidiate_write_two_bytes_with_no_more_config,12
Normal_Transaction_TB.sv,502,property immidiate_write_two_bytes_with_coming_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (!i_regf_toc_tb) && (i_regf_cmd_attr_tb) && (i_regf_dtt_tb == 'd2) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0)&& (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre /*|-> ##34 zeros_byte_w */ |-> ##38 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d16) ; endproperty:immidiate_write_two_bytes_with_coming_config,12
Normal_Transaction_TB.sv,522,property immidiate_write_three_bytes_with_no_more_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (i_regf_toc_tb) && (i_regf_cmd_attr_tb) && (i_regf_dtt_tb == 'd3) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0) && (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre /* |-> ##60 zeros_byte_w */ |-> ##80 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d17) ; endproperty:immidiate_write_three_bytes_with_no_more_config,12
Normal_Transaction_TB.sv,542,property immidiate_write_three_bytes_with_coming_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (!i_regf_toc_tb) && (i_regf_cmd_attr_tb) && (i_regf_dtt_tb == 'd3) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0) && (!(check_error == 'b1) ) ) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre |-> ##60 zeros_byte_w |-> ##6 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d16) ; endproperty:immidiate_write_three_bytes_with_coming_config,12
Normal_Transaction_TB.sv,562,property immidiate_write_four_bytes_with_no_more_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (i_regf_toc_tb) && (i_regf_cmd_attr_tb) && (i_regf_dtt_tb == 'd4) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0) && (!(check_error == 'b1))) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre /* |-> ##60 zeros_byte_w */ |-> ##80 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d17) ; endproperty:immidiate_write_four_bytes_with_no_more_config,12
Normal_Transaction_TB.sv,582,property immidiate_write_four_bytes_with_coming_config ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (!i_regf_toc_tb) && (i_regf_cmd_attr_tb) && (i_regf_dtt_tb == 'd4) && (!i_regf_wr_rd_bit_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0) && (!(check_error == 'b1))) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##22 sec_stage_data_pre /* |-> ##60 zeros_byte_w */ |-> ##80 fourth_stage_crc_pre_w |-> ##2 token_crc |-> ##12 (dut.dut0.current_state =='d16) ; endproperty:immidiate_write_four_bytes_with_coming_config,12
Normal_Transaction_TB.sv,603,property nack_error_r ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0) && (check_error == 'b1) && (nack_error == 'b1) && (i_regf_wr_rd_bit_tb)) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_read |-> ##26 (dut.dut0.current_state =='d15) ; endproperty:nack_error_r,11
Normal_Transaction_TB.sv,622,property nack_error_w ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0) && (check_error == 'b1) && (nack_error == 'b1) && (!i_regf_wr_rd_bit_tb)) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##26 (dut.dut0.current_state =='d15) ; endproperty:nack_error_w,11
Normal_Transaction_TB.sv,641,property aborting ; @( posedge i_sys_clk_tb) ((i_sys_rst_tb) && (dut.dut0.current_state =='d1) && (dut.dut4.o_cnt_bit_count =='d0) && (dut.dut3.o_scl_pos_edge ==0) && (dut.dut3.o_scl_neg_edge ==0) && (check_error == 'b1) && (abort_error == 'b1) && (!i_regf_wr_rd_bit_tb)) |-> o_sdahnd_serial_data_tb |-> ##3 command_word_write |-> ##66 (dut.dut0.current_state =='d15) ; endproperty:aborting,11
CHECKER_iclab012.sv,225,property p_last_invalid ; @ (posedge clk) last_invalid |-> (##[1:1000] inf.out_valid) ; endproperty : p_last_invalid,3
CHECKER_iclab012.sv,242,property p_complete ; @ (negedge clk) inf.complete |-> (inf.err_msg == No_Err) ; endproperty : p_complete,3
CHECKER_iclab012.sv,290,property p_begin ; @ (posedge clk) inf.sel_action_valid |-> (##[1:4] (inf.type_valid | inf.date_valid)) ; endproperty : p_begin,3
CHECKER_iclab012.sv,294,property p_make_drink ; @ (posedge clk) inf.type_valid |-> (##[1:4] inf.size_valid ##[1:4] inf.date_valid ##[1:4] inf.box_no_valid) ; endproperty : p_make_drink,3
CHECKER_iclab012.sv,298,property p_supply ; @ (posedge clk) inf.date_valid |-> (##[1:4] inf.box_no_valid ##[1:4] inf.box_sup_valid ##[1:4] inf.box_sup_valid ##[1:4] inf.box_sup_valid ##[1:4] inf.box_sup_valid) ; endproperty : p_supply,3
CHECKER_iclab012.sv,302,property p_check_date ; @ (posedge clk) inf.date_valid |-> (##[1:4] inf.box_no_valid) ; endproperty : p_check_date,3
CHECKER_iclab012.sv,355,property p_action_overlap ; @ (posedge clk) inf.sel_action_valid |-> ((inf.type_valid | inf.size_valid | inf.date_valid | inf.box_no_valid | inf.box_sup_valid) == 0) ; endproperty : p_action_overlap,3
CHECKER_iclab012.sv,359,property p_type_overlap ; @ (posedge clk) inf.type_valid |-> ((inf.sel_action_valid | inf.size_valid | inf.date_valid | inf.box_no_valid | inf.box_sup_valid) == 0) ; endproperty : p_type_overlap,3
CHECKER_iclab012.sv,363,property p_size_overlap ; @ (posedge clk) inf.size_valid |-> ((inf.sel_action_valid | inf.type_valid | inf.date_valid | inf.box_no_valid | inf.box_sup_valid) == 0) ; endproperty : p_size_overlap,3
CHECKER_iclab012.sv,367,property p_date_overlap ; @ (posedge clk) inf.date_valid |-> ((inf.sel_action_valid | inf.type_valid | inf.size_valid | inf.box_no_valid | inf.box_sup_valid) == 0) ; endproperty : p_date_overlap,3
CHECKER_iclab012.sv,371,property p_boxno_overlap ; @ (posedge clk) inf.box_no_valid |-> ((inf.sel_action_valid | inf.type_valid | inf.size_valid | inf.date_valid | inf.box_sup_valid) == 0) ; endproperty : p_boxno_overlap,3
CHECKER_iclab012.sv,375,property p_boxsup_overlap ; @ (posedge clk) inf.box_sup_valid |-> ((inf.sel_action_valid | inf.type_valid | inf.size_valid | inf.date_valid | inf.box_no_valid) == 0) ; endproperty : p_boxsup_overlap,3
CHECKER_iclab012.sv,392,property p_outvalid ; @ (posedge clk) inf.out_valid |-> (##1 (inf.out_valid == 0)) ; endproperty : p_outvalid,3
CHECKER_iclab012.sv,409,property p_gap ; @ (posedge clk) inf.out_valid |-> (##[1:4] inf.sel_action_valid) ; endproperty : p_gap,3
CHECKER_iclab012.sv,449,property p_check_month ; @ (posedge clk) inf.date_valid |-> (inf.D.d_date[0].M <= 12 && inf.D.d_date[0].M >= 1) ; endproperty : p_check_month ;,3
CHECKER_iclab012.sv,453,property p_big_month ; @ (posedge clk) (inf.date_valid && (inf.D.d_date[0].M == 1 | inf.D.d_date[0].M == 3 |inf.D.d_date[0].M == 5 |inf.D.d_date[0].M == 7 |inf.D.d_date[0].M == 8 |inf.D.d_date[0].M == 10 | inf.D.d_date[0].M == 12)) |-> (inf.D.d_date[0].D <= 31 && inf.D.d_date[0].D >= 1) ; endproperty : p_big_month,3
CHECKER_iclab012.sv,457,property p_small_month ; @ (posedge clk) (inf.date_valid && (inf.D.d_date[0].M == 4 | inf.D.d_date[0].M == 6 |inf.D.d_date[0].M == 9 |inf.D.d_date[0].M == 11)) |-> (inf.D.d_date[0].D <= 30 && inf.D.d_date[0].D >= 1) ; endproperty : p_small_month,3
CHECKER_iclab012.sv,461,property p_February ; @ (posedge clk) (inf.date_valid && (inf.D.d_date[0].M == 2)) |-> (inf.D.d_date[0].D <= 28 && inf.D.d_date[0].D >= 1) ; endproperty : p_February,3
CHECKER_iclab012.sv,486,property p_cinvalid_only_one ; @ (posedge clk) inf.C_in_valid |-> (##1 inf.C_in_valid == 0) ; endproperty : p_cinvalid_only_one,3
CHECKER_iclab012.sv,490,property p_cinvalid_high_again ; @ (posedge clk) store_cinvalid |-> (inf.C_in_valid == 0) ; endproperty : p_cinvalid_high_again,3
CHECKER_hsu.sv,240,property Reset; @(negedge clk) !inf.rst_n |=> (inf.out_valid =='b0 && inf.complete =='b0 && inf.err_msg =='b0 && inf.C_in_valid =='b0 && inf.C_addr =='b0 && inf.C_r_wb =='b0 && inf.AR_VALID =='b0 && inf.AR_ADDR =='b0 && inf.R_READY =='b0 && inf.AW_VALID =='b0 && inf.AW_ADDR =='b0 && inf.W_VALID =='b0 && inf.W_DATA ==0 && inf.B_READY =='b0 && inf.C_out_valid =='b0 && inf.C_data_r =='b0 && inf.C_data_w =='b0); endproperty: Reset,3
CHECKER_hsu.sv,366,property input_overlap; @(negedge clk) 1'b1 ##1 ($onehot(input_seq) || input_seq==0); endproperty: input_overlap,3
CHECKER.sv,113,property SPEC_1; @(posedge inf.rst_n) 1 |-> @(posedge clk) (inf.complete === 1'b0) && (inf.out_valid === 1'b0) && (inf.warn_msg === No_Warn) && (inf.AR_VALID === 1'b0) && (inf.AR_ADDR === 17'b0) && (inf.R_READY === 1'b0) && (inf.AW_VALID === 1'b0) && (inf.AW_ADDR === 17'b0) && (inf.W_VALID === 1'b0) && (inf.W_DATA === 64'b0); endproperty: SPEC_1,6
CHECKER.sv,113,property SPEC_1; @(posedge inf.rst_n) 1 |-> @(posedge clk) (inf.complete === 1'b0) && (inf.out_valid === 1'b0) && (inf.warn_msg === No_Warn) && (inf.AR_VALID === 1'b0) && (inf.AR_ADDR === 17'b0) && (inf.R_READY === 1'b0) && (inf.AW_VALID === 1'b0) && (inf.AW_ADDR === 17'b0) && (inf.W_VALID === 1'b0) && (inf.W_DATA === 64'b0); endproperty: SPEC_1,6
CHECKER.sv,190,property rst_check; @(posedge clk) (inf.out_valid !== 0 || inf.err_msg !== No_Err || inf.complete !== 0 || inf.C_addr !== 0 || inf.C_data_w !== 0 || inf.C_in_valid !== 0 || inf.C_r_wb !== 0 || inf.C_out_valid !== 0 || inf.C_data_r !== 0 || inf.AR_VALID !== 0 || inf.AR_ADDR !== 0 || inf.R_READY !== 0 || inf.AW_VALID !== 0 || inf.AW_ADDR !== 0 || inf.W_VALID !== 0 || inf.W_DATA !== 0|| inf.B_READY !== 0 ); endproperty: rst_check,5
