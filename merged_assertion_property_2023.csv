file_name,line_number,assertion_code,line_count
sar_adc_ideal_conv.sv,62,assume (sys_counter == 0); // Equivalent to ?Q กล P assume (cycles == 0);,3
sar_adc_ideal_conv.sv,66,assume (sys_clk == 0);,1
sar_adc_ideal_conv.sv,67,assume (eoc_high_counter == 0);,1
sar_adc_ideal_conv.sv,68,assume (hit_eoc == 0);,1
sar_adc_ideal_conv.sv,69,assume (held_value == 0);,1
sar_adc_nonideal_conv.sv,62,assume (sys_counter == 0); // Equivalent to ?Q กล P assume (cycles == 0);,3
sar_adc_nonideal_conv.sv,66,assume (sys_clk == 0);,1
sar_adc_nonideal_conv.sv,67,assume (eoc_high_counter == 0);,1
sar_adc_nonideal_conv.sv,68,assume (hit_eoc == 0);,1
sar_adc_nonideal_conv.sv,69,assume (held_value == 0);,1
sar_adc_ideal_conv.sv,62,assume (sys_counter == 0); // Equivalent to ?Q กล P assume (cycles == 0);,3
sar_adc_ideal_conv.sv,66,assume (sys_clk == 0);,1
sar_adc_ideal_conv.sv,67,assume (eoc_high_counter == 0);,1
sar_adc_ideal_conv.sv,68,assume (hit_eoc == 0);,1
sar_adc_ideal_conv.sv,69,assume (held_value == 0);,1
sar_adc_nonideal_conv.sv,62,assume (sys_counter == 0); // Equivalent to ?Q กล P assume (cycles == 0);,3
sar_adc_nonideal_conv.sv,66,assume (sys_clk == 0);,1
sar_adc_nonideal_conv.sv,67,assume (eoc_high_counter == 0);,1
sar_adc_nonideal_conv.sv,68,assume (hit_eoc == 0);,1
sar_adc_nonideal_conv.sv,69,assume (held_value == 0);,1
sar_adc_ideal_conv.sv,62,assume (sys_counter == 0); // Equivalent to ?Q กล P assume (cycles == 0);,3
sar_adc_ideal_conv.sv,66,assume (sys_clk == 0);,1
sar_adc_ideal_conv.sv,67,assume (eoc_high_counter == 0);,1
sar_adc_ideal_conv.sv,68,assume (hit_eoc == 0);,1
sar_adc_ideal_conv.sv,69,assume (held_value == 0);,1
axi_lite_to_axi.sv,109,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,110,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,111,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
uvmc_common.sv,367,assert(port_name != "");,1
uvmc_commands.sv,294,assert(info != null);,1
uvmc_commands.sv,443,assert(info != null);,1
FSM.sv,185,assert(currentState == 4'h7 && RF_Ra_addr == 4'h5 && RF_Rb_addr == 4'h3 && RF_W_addr == 4'h6 && RF_W_en == 1'b1);,1
FSM.sv,200,assert(currentState == 4'h9 && RF_Ra_addr == 4'h1 && RF_Rb_addr == 4'h2 && RF_W_addr == 4'h5 && RF_W_en == 1'b1);,1
Datapath.sv,241,assert(DUT.RegUnit.wrData == 16'h0000 && RF_W_en == 1'b0);,1
PC.sv,43,assert(addr == k); //Throws error if something is wrong. #10;,2
FSM.sv,175,assert(currentState == 4'h7 && RF_Ra_addr == 4'h5 && RF_Rb_addr == 4'h3 && RF_W_addr == 4'h6 && RF_W_en == 1'b1);,1
FSM.sv,190,assert(currentState == 4'h9 && RF_Ra_addr == 4'h1 && RF_Rb_addr == 4'h2 && RF_W_addr == 4'h5 && RF_W_en == 1'b1);,1
Datapath.sv,241,assert(DUT.RegUnit.wrData == 16'h0000 && RF_W_en == 1'b0);,1
tb_cvi_ciris.sv,138,assert property (check_pix_out_sum) $display("line out is full");,2
vortex_afu.sv,764,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
model_100gbe.sv,89,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,774,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,809,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1398,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1416,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1431,assert (resp==OKAY);,1
x4xx_qsfp_wrapper_tb.sv,1440,assert (resp==OKAY);,1
vortex_afu.sv,763,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
tb_labTwo.sv,24,assert(result == inA + inB);,1
tb_labTwo.sv,27,assert(result == inA << inB);,1
tb_labTwo.sv,24,assert(result == inA + inB);,1
tb_labTwo.sv,27,assert(result == inA << inB);,1
TB_FIFO.sv,70,assert(read_empty === 1);,1
TB_FIFO.sv,71,assert(write_full === 0);,1
TB_FIFO.sv,72,assert(read_data === 0);,1
TB_FIFO.sv,84,assert(read_empty === 0);,1
TB_FIFO.sv,85,assert(write_full === 0);,1
TB_FIFO.sv,86,assert(read_data === 1);,1
TB_FIFO.sv,92,assert(read_empty === 0);,1
TB_FIFO.sv,93,assert(write_full === 1);,1
TB_FIFO.sv,94,assert(read_data === 1);,1
TB_FIFO.sv,101,assert(read_empty === 0);,1
TB_FIFO.sv,102,assert(write_full === 1);,1
TB_FIFO.sv,103,assert(read_data === 1);,1
TB_FIFO.sv,111,assert(read_data === i);,1
tb_testprogs.sv,115,"assert property (pc_jump) else $display( ""\n\n Error OP: %s , PC is [%d], address is [%d] \n\n"", $past( opcode ), (dut.program_counter), $past( dut.idu_code_address, 1 ) );",12
tb_testprogs.sv,134,"assert property (opcode_check) else $display( ""\n\n Error OP: %s , inst is [%d] operation is [%d] \n\n"", $past( opcode ), $past( dut.instruction[17:13] ), $past( dut.idu_operation ) );",14
tb_testprogs.sv,153,"assert property (reset_check) else $display( ""\n\n Error: PC is [%d] RESET_VECTOR is [%d] \n\n"", $past( dut.program_counter ), (RESET_VECTOR) );",9
tb_testprogs.sv,167,"assert property (rollover_check) else $display( ""\n\n Error: PC is [%d] Instruction is [%s] \n\n"", dut.program_counter, dut.instruction[17:13] );",7
tb_testprogs.sv,181,"assert property (zero_flag) else $display( ""\n\n ALU Result was 0; Error OP: %s , Zero flag was not set [ %h ], FAIL \n\n"", opcode, dut.zero );",7
tb_testprogs.sv,193,"assert property (carry_flag) else $display( ""\n\n ALU was Result > FF ; Error OP: %s , ALU Carry Out was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,205,"assert property (addcy_carry_flag) else $display( ""\n\n ALU Result > FF; Error OP: %s , ALU Carry Out was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,217,"assert property (sub_zero_flag) else $display( ""\n\n ALU Result < 0; Error OP: %s , Zero Flag was not set [ %h ], FAIL \n\n"", opcode, dut.zero );",7
tb_testprogs.sv,229,"assert property (sub_carry_flag) else $display( ""\n\n ALU Result < 0; Error OP: %s , ALU Carry Out was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,241,"assert property (subcy_carry_flag) else $display( ""\n\n Subcy ALU Result < 0; Error OP: %s , Zero Flag was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,255,"assert property (clear_carry_flag) else $display( ""\n\n AND sX, sX should clear Carry Flag; Error OP: %s , Carry Flag should has de-asserted but it is [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,269,"assert property (set_carry_flag) else $display( ""\n\n COMPARE sX, sX should set Zero flag but not Carry Flag; Error OP: %s , Carry Flag should has de-asserted but it is [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,284,"assert property (test_ADD_SUB) else $display( ""\n\n Error: OP1 %h +/- OP2 %h should NOT equal %h, you should ignore the error if OP1 == FF && OP2 == 1 \n\n"", dut.alu.operand_a, dut.alu.operand_b, dut.alu.addsub_result[7:0] );",8
tb_testprogs.sv,300,"assert property (test_STORE) else $display( ""\n\n Error: STORE after SUB S2,01 operand_a [OP1] is %h the next result should be %h , but is %h, FAIL \n\n"", dut.alu.operand_a, (dut.alu.operand_a - 2'h01), dut.alu.result );",9
tb_testprogs.sv,115,"assert property (pc_jump) else $display( ""\n\n Error OP: %s , PC is [%d], address is [%d] \n\n"", $past( opcode ), (dut.program_counter), $past( dut.idu_code_address, 1 ) );",12
tb_testprogs.sv,134,"assert property (opcode_check) else $display( ""\n\n Error OP: %s , inst is [%d] operation is [%d] \n\n"", $past( opcode ), $past( dut.instruction[17:13] ), $past( dut.idu_operation ) );",14
tb_testprogs.sv,153,"assert property (reset_check) else $display( ""\n\n Error: PC is [%d] RESET_VECTOR is [%d] \n\n"", $past( dut.program_counter ), (RESET_VECTOR) );",9
tb_testprogs.sv,167,"assert property (rollover_check) else $display( ""\n\n Error: PC is [%d] Instruction is [%s] \n\n"", dut.program_counter, dut.instruction[17:13] );",7
tb_testprogs.sv,181,"assert property (zero_flag) else $display( ""\n\n ALU Result was 0; Error OP: %s , Zero flag was not set [ %h ], FAIL \n\n"", opcode, dut.zero );",7
tb_testprogs.sv,193,"assert property (carry_flag) else $display( ""\n\n ALU was Result > FF ; Error OP: %s , ALU Carry Out was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,205,"assert property (addcy_carry_flag) else $display( ""\n\n ALU Result > FF; Error OP: %s , ALU Carry Out was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,217,"assert property (sub_zero_flag) else $display( ""\n\n ALU Result < 0; Error OP: %s , Zero Flag was not set [ %h ], FAIL \n\n"", opcode, dut.zero );",7
tb_testprogs.sv,229,"assert property (sub_carry_flag) else $display( ""\n\n ALU Result < 0; Error OP: %s , ALU Carry Out was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,241,"assert property (subcy_carry_flag) else $display( ""\n\n Subcy ALU Result < 0; Error OP: %s , Zero Flag was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,255,"assert property (clear_carry_flag) else $display( ""\n\n AND sX, sX should clear Carry Flag; Error OP: %s , Carry Flag should has de-asserted but it is [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,269,"assert property (set_carry_flag) else $display( ""\n\n COMPARE sX, sX should set Zero flag but not Carry Flag; Error OP: %s , Carry Flag should has de-asserted but it is [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,284,"assert property (test_ADD_SUB) else $display( ""\n\n Error: OP1 %h +/- OP2 %h should NOT equal %h, you should ignore the error if OP1 == FF && OP2 == 1 \n\n"", dut.alu.operand_a, dut.alu.operand_b, dut.alu.addsub_result[7:0] );",8
tb_testprogs.sv,300,"assert property (test_STORE) else $display( ""\n\n Error: STORE after SUB S2,01 operand_a [OP1] is %h the next result should be %h , but is %h, FAIL \n\n"", dut.alu.operand_a, (dut.alu.operand_a - 2'h01), dut.alu.result );",9
tb_testprogs.sv,115,"assert property (pc_jump) else $display( ""\n\n Error OP: %s , PC is [%d], address is [%d] \n\n"", $past( opcode ), (dut.program_counter), $past( dut.idu_code_address, 1 ) );",12
tb_testprogs.sv,134,"assert property (opcode_check) else $display( ""\n\n Error OP: %s , inst is [%d] operation is [%d] \n\n"", $past( opcode ), $past( dut.instruction[17:13] ), $past( dut.idu_operation ) );",14
tb_testprogs.sv,153,"assert property (reset_check) else $display( ""\n\n Error: PC is [%d] RESET_VECTOR is [%d] \n\n"", $past( dut.program_counter ), (RESET_VECTOR) );",9
tb_testprogs.sv,167,"assert property (rollover_check) else $display( ""\n\n Error: PC is [%d] Instruction is [%s] \n\n"", dut.program_counter, dut.instruction[17:13] );",7
tb_testprogs.sv,181,"assert property (zero_flag) else $display( ""\n\n ALU Result was 0; Error OP: %s , Zero flag was not set [ %h ], FAIL \n\n"", opcode, dut.zero );",7
tb_testprogs.sv,193,"assert property (carry_flag) else $display( ""\n\n ALU was Result > FF ; Error OP: %s , ALU Carry Out was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,205,"assert property (addcy_carry_flag) else $display( ""\n\n ALU Result > FF; Error OP: %s , ALU Carry Out was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,217,"assert property (sub_zero_flag) else $display( ""\n\n ALU Result < 0; Error OP: %s , Zero Flag was not set [ %h ], FAIL \n\n"", opcode, dut.zero );",7
tb_testprogs.sv,229,"assert property (sub_carry_flag) else $display( ""\n\n ALU Result < 0; Error OP: %s , ALU Carry Out was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,241,"assert property (subcy_carry_flag) else $display( ""\n\n Subcy ALU Result < 0; Error OP: %s , Zero Flag was not set [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,255,"assert property (clear_carry_flag) else $display( ""\n\n AND sX, sX should clear Carry Flag; Error OP: %s , Carry Flag should has de-asserted but it is [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,269,"assert property (set_carry_flag) else $display( ""\n\n COMPARE sX, sX should set Zero flag but not Carry Flag; Error OP: %s , Carry Flag should has de-asserted but it is [ %h ], FAIL \n\n"", opcode, dut.alu.carry_out );",7
tb_testprogs.sv,284,"assert property (test_ADD_SUB) else $display( ""\n\n Error: OP1 %h +/- OP2 %h should NOT equal %h, you should ignore the error if OP1 == FF && OP2 == 1 \n\n"", dut.alu.operand_a, dut.alu.operand_b, dut.alu.addsub_result[7:0] );",8
tb_testprogs.sv,300,"assert property (test_STORE) else $display( ""\n\n Error: STORE after SUB S2,01 operand_a [OP1] is %h the next result should be %h , but is %h, FAIL \n\n"", dut.alu.operand_a, (dut.alu.operand_a - 2'h01), dut.alu.result );",9
composite_video_encoder.sv,236,assert (luma_filtered == luma_filtered_check);,1
pal_ntsc_encoder.sv,138,assert (chroma_filtered == chroma_filtered_check_q2);,1
secam_encoder.sv,208,assert (carrier_period_filtered == carrier_period_filtered_check_q2);,1
secam_encoder.sv,211,assert (carrier_period_deemphasis == carrier_period_emphasis_check_q2);,1
secam_encoder.sv,214,assert (enabled_amplitude_filtered == enabled_amplitude_filtered_check_q2);,1
complete.sv,76,assert(spec_valid && !spec_trap);,1
imemcheck.sv,35,assume(mem_rdata[15:0] == imem_data);,1
imemcheck.sv,37,assume(mem_rdata[31:16] == imem_data);,1
wrapper.sv,42,assume (~mem_wait || trap);,1
wrapper.sv,52,assume (rvfi_insn[19:15] == 0);,1
wrapper.sv,54,assume (rvfi_insn[14:12] != 3'b001);,1
wrapper.sv,55,assume (rvfi_insn[14:12] != 3'b011);,1
wrapper.sv,56,assume (rvfi_insn[14:12] != 3'b101);,1
wrapper.sv,57,assume (rvfi_insn[14:12] != 3'b110);,1
wrapper.sv,58,assume (rvfi_insn[14:12] != 3'b111);,1
honest.sv,48,assume (mem_rdata == monitor_insn);,1
cover.sv,59,cover property (count_dmemrd);,1
cover.sv,60,cover property (count_dmemwr);,1
cover.sv,61,cover property (count_longinsn);,1
cover.sv,62,cover property (count_comprinsn);,1
cover.sv,64,cover property (count_dmemrd >= 1 && count_dmemwr >= 1 && count_longinsn >= 1 && count_comprinsn >= 1);,1
cover.sv,65,cover property (count_dmemrd >= 2 && count_dmemwr >= 2 && count_longinsn >= 2 && count_comprinsn >= 2);,1
cover.sv,66,cover property (count_dmemrd >= 3 && count_dmemwr >= 2 && count_longinsn >= 2 && count_comprinsn >= 2);,1
cover.sv,67,cover property (count_dmemrd >= 2 && count_dmemwr >= 3 && count_longinsn >= 2 && count_comprinsn >= 2);,1
cover.sv,68,cover property (count_dmemrd >= 2 && count_dmemwr >= 2 && count_longinsn >= 3 && count_comprinsn >= 2);,1
cover.sv,69,cover property (count_dmemrd >= 2 && count_dmemwr >= 2 && count_longinsn >= 2 && count_comprinsn >= 3);,1
dmemcheck.sv,42,assume(dmem_data == mem_rdata);,1
vortex_afu.sv,795,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
registers_tb.sv,25,assert(regs.rd1 === 0);,1
registers_tb.sv,26,assert(regs.rd2 === 0);,1
registers_tb.sv,37,assert(regs.rd1 === 0);,1
registers_tb.sv,67,assert(regs.rd1 === 0);,1
pc_tb.sv,18,assert(pc === 32'h8000_0000);,1
pc_tb.sv,22,assert(pc === 1000);,1
ibex_icache_core_if.sv,136,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,162,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,167,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,188,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,363,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,479,assert (addr_lo < address);,1
formal_tb.sv,67,assume (multdiv_ready_id_i);,1
formal_tb.sv,73,assert (checked);,1
cpld_if.sv,188,cover property(button_power_on);,1
cpld_if.sv,191,cover property(button_power_on);,1
cpld_if.sv,194,cover property(button_power_on);,1
cpld_if.sv,197,cover property(button_power_on);,1
cpld_if.sv,200,cover property(button_power_on);,1
cpld_if.sv,203,cover property(button_power_on);,1
cpld_if.sv,207,cover property(button_power_on);,1
cpld_if.sv,208,cover property(button_power_off);,1
cpld_if.sv,209,cover property(button_reset);,1
cpld_if.sv,210,cover property(btn_on_iic_reset);,1
cpld_if.sv,211,cover property(btn_on_iic_off);,1
cpld_if.sv,212,cover property(btn_on_iic_ctrl_beep);,1
cpld_if.sv,213,cover property(btn_on_tele_reset);,1
cpld_if.sv,214,cover property(btn_on_tele_off);,1
cpld_if.sv,215,cover property(iic_on_btn_reset);,1
cpld_if.sv,216,cover property(iic_on_btn_off);,1
cpld_if.sv,217,cover property(iic_on_lpc_soft_reset);,1
cpld_if.sv,218,cover property(iic_on_lpc_mt_reset);,1
cpld_if.sv,219,cover property(iic_on_lpc_off);,1
cpld_if.sv,220,cover property(iic_on_lpc_ctrl_beep);,1
cpld_if.sv,221,cover property(iic_on_tele_reset);,1
cpld_if.sv,222,cover property(iic_on_tele_off);,1
cpld_if.sv,223,cover property(tele_on_btn_reset);,1
cpld_if.sv,224,cover property(tele_on_btn_off);,1
cpld_if.sv,225,cover property(tele_on_iic_reset);,1
cpld_if.sv,226,cover property(tele_on_iic_off);,1
cpld_if.sv,227,cover property(tele_on_lpc_reset);,1
cpld_if.sv,228,cover property(tele_on_lpc_off);,1
cpld_if.sv,188,cover property(button_power_on);,1
cpld_if.sv,191,cover property(button_power_on);,1
cpld_if.sv,194,cover property(button_power_on);,1
cpld_if.sv,197,cover property(button_power_on);,1
cpld_if.sv,200,cover property(button_power_on);,1
cpld_if.sv,203,cover property(button_power_on);,1
cpld_if.sv,207,cover property(button_power_on);,1
cpld_if.sv,208,cover property(button_power_off);,1
cpld_if.sv,209,cover property(button_reset);,1
cpld_if.sv,210,cover property(btn_on_iic_reset);,1
cpld_if.sv,211,cover property(btn_on_iic_off);,1
cpld_if.sv,212,cover property(btn_on_iic_ctrl_beep);,1
cpld_if.sv,213,cover property(btn_on_tele_reset);,1
cpld_if.sv,214,cover property(btn_on_tele_off);,1
cpld_if.sv,215,cover property(iic_on_btn_reset);,1
cpld_if.sv,216,cover property(iic_on_btn_off);,1
cpld_if.sv,217,cover property(iic_on_lpc_soft_reset);,1
cpld_if.sv,218,cover property(iic_on_lpc_mt_reset);,1
cpld_if.sv,219,cover property(iic_on_lpc_off);,1
cpld_if.sv,220,cover property(iic_on_lpc_ctrl_beep);,1
cpld_if.sv,221,cover property(iic_on_tele_reset);,1
cpld_if.sv,222,cover property(iic_on_tele_off);,1
cpld_if.sv,223,cover property(tele_on_btn_reset);,1
cpld_if.sv,224,cover property(tele_on_btn_off);,1
cpld_if.sv,225,cover property(tele_on_iic_reset);,1
cpld_if.sv,226,cover property(tele_on_iic_off);,1
cpld_if.sv,227,cover property(tele_on_lpc_reset);,1
cpld_if.sv,228,cover property(tele_on_lpc_off);,1
ibex_icache_core_if.sv,136,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,162,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,167,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,188,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,363,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,479,assert (addr_lo < address);,1
formal_tb.sv,67,assume (multdiv_ready_id_i);,1
formal_tb.sv,73,assert (checked);,1
cdc_fifo_gray.sv,48,assert(LOG_DEPTH > 0);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,79,assert(tck_src > 0);,1
cdc_2phase_tb.sv,105,assert(tck_dst > 0);,1
cdc_fifo_tb.sv,83,assert(tck_src > 0);,1
cdc_fifo_tb.sv,109,assert(tck_dst > 0);,1
graycode_tb.sv,26,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
ibex_icache_core_if.sv,136,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,162,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,167,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,188,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,363,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,479,assert (addr_lo < address);,1
tb_jtag_dmi.sv,208,assert(idcode == i_jtag_sime2.IDCODEval_sig);,1
tb_jtag_dmi.sv,210,assert(idcode == IDCode);,1
tb_jtag_dmi.sv,216,assert(dtmcs.version == 1);,1
tb_jtag_dmi.sv,217,assert(dtmcs.abits == 7);,1
tb_jtag_dmi.sv,223,assert(dtmcs.version == 1);,1
tb_jtag_dmi.sv,224,assert(dtmcs.abits == 7);,1
tb_jtag_dmi.sv,293,assert(rsp_mon.data == rsp);,1
tb_jtag_dmi.sv,295,assert(req.data == req_mon.data);,1
usbdev_bfm.sv,508,assert(ep != InvalidEP && ep < NEndpoints);,1
usbdev_bfm.sv,509,assert(in_iso[ep] & !rxenable_setup[ep]);,1
usbdev_bfm.sv,614,assert(token.m_ev_type == EvPacket);,1
usbdev_bfm.sv,615,assert(token.m_pkt_type == PktTypeToken);,1
usbdev_bfm.sv,702,assert(token.m_ev_type == EvPacket);,1
usbdev_bfm.sv,703,assert(data.m_ev_type == EvPacket);,1
usbdev_bfm.sv,704,assert(token.m_pkt_type == PktTypeToken);,1
usbdev_bfm.sv,705,assert(data.m_pkt_type == PktTypeData);,1
spid_status_tb.sv,123,assert(data[1] == 1'b 1);,1
spid_status_tb.sv,134,assert(data[1] == 1'b 0);,1
spid_status_tb.sv,149,assert(data[1] == 1'b 0);,1
spid_status_tb.sv,155,assert(data[1] == 1'b 1);,1
spid_common.sv,607,assert(mode == IoSingle);,1
spid_common.sv,751,"assert(opcode inside {8'h 05, 8'h 35, 8'h 15});",1
spid_common.sv,813,assert(opcode == 8'h 9F);,1
spid_common.sv,1049,assert(m2l.rerror == '0);,1
spid_upload_tb.sv,369,assert(payload_start_idx == '0);,1
otbn_core_model.sv,68,assert(model_handle != null);,1
Create Assertions_Concurrent_Test2.sv,6,assert property(aa);,1
Create Assertions_Concurrent_Test2.sv,10,assert property(aa);,1
Assertions_Concurrent_Test1.sv,5,"assert property(prp) $info(""You got it: "", $time);",1
ariane_pkg.sv,86,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,89,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,90,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,91,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
find_first_one.sv,33,assert(WIDTH >= 0);,1
pmp_entry.sv,73,assert(size >= 2);,1
pmp_entry.sv,75,assert(size > 2);,1
pmp_entry.sv,79,assert(conf_addr_i[i] == 1); // check that all the rest are ones end end end if (size < XLEN-1) begin if (base + 2**size > base) begin // check for overflow if (match_o == 0) begin assert(addr_i >= base + 2**size || addr_i < base);,9
pmp_entry.sv,89,assert(addr_i < base + 2**size && addr_i >= base);,1
pmp_entry.sv,93,assert(addr_i - 2**size >= base || addr_i < base);,1
pmp_entry.sv,95,assert(addr_i - 2**size < base && addr_i >= base);,1
cdc_fifo_gray.sv,48,assert(LOG_DEPTH > 0);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,79,assert(tck_src > 0);,1
cdc_2phase_tb.sv,105,assert(tck_dst > 0);,1
cdc_fifo_tb.sv,83,assert(tck_src > 0);,1
cdc_fifo_tb.sv,109,assert(tck_dst > 0);,1
graycode_tb.sv,26,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
axi_id_remap.sv,79,assert(ADDR_WIDTH >= 0);,1
axi_id_remap.sv,80,assert(DATA_WIDTH >= 0);,1
axi_id_remap.sv,81,assert(ID_WIDTH_IN >= 0);,1
axi_id_remap.sv,82,assert(ID_WIDTH_OUT >= 0);,1
axi_id_remap.sv,83,assert(USER_WIDTH >= 0);,1
axi_id_remap.sv,84,assert(in.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_id_remap.sv,85,assert(in.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_id_remap.sv,86,assert(in.AXI_ID_WIDTH == ID_WIDTH_IN);,1
axi_id_remap.sv,87,assert(in.AXI_USER_WIDTH == USER_WIDTH);,1
axi_id_remap.sv,88,assert(out.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_id_remap.sv,89,assert(out.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_id_remap.sv,90,assert(out.AXI_ID_WIDTH == ID_WIDTH_OUT);,1
axi_id_remap.sv,91,assert(out.AXI_USER_WIDTH == USER_WIDTH);,1
axi_lite_xbar.sv,103,assert(NUM_MASTER > 0);,1
axi_lite_xbar.sv,104,assert(NUM_SLAVE > 0);,1
axi_lite_xbar.sv,105,assert(NUM_RULES > 0);,1
axi_lite_xbar.sv,106,assert(rules.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_xbar.sv,107,assert(rules.NUM_SLAVE == NUM_SLAVE);,1
axi_lite_xbar.sv,113,assert(master[i].AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_xbar.sv,114,assert(master[i].AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_lite_xbar.sv,121,assert(slave[i].AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_xbar.sv,122,assert(slave[i].AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_join.sv,23,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,24,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,25,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,26,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_cut.sv,35,assert(ADDR_WIDTH >= 0);,1
axi_lite_cut.sv,36,assert(DATA_WIDTH >= 0);,1
axi_lite_cut.sv,37,assert(in.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_cut.sv,38,assert(in.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_lite_cut.sv,39,assert(out.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_lite_cut.sv,40,assert(out.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_lite_join.sv,23,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,24,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_to_axi_lite.sv,36,assert(NUM_PENDING_RD > 0);,1
axi_to_axi_lite.sv,37,assert(NUM_PENDING_WR > 0);,1
axi_to_axi_lite.sv,38,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_to_axi_lite.sv,39,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_multicut.sv,37,assert(NUM_CUTS >= 0);,1
axi_cut.sv,48,assert(ADDR_WIDTH >= 0);,1
axi_cut.sv,49,assert(DATA_WIDTH >= 0);,1
axi_cut.sv,50,assert(ID_WIDTH >= 0);,1
axi_cut.sv,51,assert(USER_WIDTH >= 0);,1
axi_cut.sv,52,assert(in.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_cut.sv,53,assert(in.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_cut.sv,54,assert(in.AXI_ID_WIDTH == ID_WIDTH);,1
axi_cut.sv,55,assert(in.AXI_USER_WIDTH == USER_WIDTH);,1
axi_cut.sv,56,assert(out.AXI_ADDR_WIDTH == ADDR_WIDTH);,1
axi_cut.sv,57,assert(out.AXI_DATA_WIDTH == DATA_WIDTH);,1
axi_cut.sv,58,assert(out.AXI_ID_WIDTH == ID_WIDTH);,1
axi_cut.sv,59,assert(out.AXI_USER_WIDTH == USER_WIDTH);,1
axi_modify_address.sv,30,assert(ADDR_WIDTH_IN > 0);,1
axi_modify_address.sv,31,assert(ADDR_WIDTH_OUT > 0);,1
axi_multicut.sv,41,assert(NUM_CUTS >= 0);,1
axi_arbiter.sv,27,assert(NUM_REQ >= 0);,1
axi_arbiter.sv,28,assert(arb.NUM_REQ == NUM_REQ);,1
axi_arbiter.sv,78,assert(NUM_REQ >= 0);,1
axi_arbiter.sv,79,assert(ID_WIDTH >= 0);,1
axi_lite_to_axi.sv,22,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,23,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
tb_axi_lite_xbar.sv,137,assert(rand_success);,1
tb_axi_lite_xbar.sv,160,assert(rand_success);,1
tb_axi_atop_filter.sv,471,assert (downstream.aw_atop == '0);,1
tb_axi_atop_filter.sv,569,assert (downstream.ar_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,570,assert (downstream.ar_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,571,assert (downstream.ar_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,572,assert (downstream.ar_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,573,assert (downstream.ar_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,574,assert (downstream.ar_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,575,assert (downstream.ar_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,576,assert (downstream.ar_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,577,assert (downstream.ar_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,578,assert (downstream.ar_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,585,assert (downstream.aw_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,586,assert (downstream.aw_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,587,assert (downstream.aw_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,588,assert (downstream.aw_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,589,assert (downstream.aw_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,590,assert (downstream.aw_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,591,assert (downstream.aw_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,592,assert (downstream.aw_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,593,assert (downstream.aw_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,594,assert (downstream.aw_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,601,assert (downstream.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,602,assert (downstream.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,603,assert (downstream.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,604,assert (downstream.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,616,assert (upstream.r_id == exp_beat.r_id);,1
tb_axi_atop_filter.sv,617,assert (upstream.r_data == exp_beat.r_data);,1
tb_axi_atop_filter.sv,618,assert (upstream.r_resp == exp_beat.r_resp);,1
tb_axi_atop_filter.sv,619,assert (upstream.r_last == exp_beat.r_last);,1
tb_axi_atop_filter.sv,620,assert (upstream.r_user == exp_beat.r_user);,1
tb_axi_atop_filter.sv,632,assert (upstream.b_id == exp_beat.b_id);,1
tb_axi_atop_filter.sv,633,assert (upstream.b_resp == exp_beat.b_resp);,1
tb_axi_atop_filter.sv,634,assert (upstream.b_user == exp_beat.b_user);,1
axi_lite_to_reg.sv,32,assert(ADDR_WIDTH > 0);,1
axi_lite_to_reg.sv,33,assert(DATA_WIDTH > 0);,1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,79,assert(tck_src > 0);,1
cdc_2phase_tb.sv,105,assert(tck_dst > 0);,1
cdc_fifo_tb.sv,83,assert(tck_src > 0);,1
cdc_fifo_tb.sv,109,assert(tck_dst > 0);,1
graycode_tb.sv,26,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
crc_tb.sv,37,assert(tb_res == crc_o);,1
mac_tb.sv,55,assert(~valid_o);,1
ATMmoduleTB.sv,77,assert property(deposit_balance_0);,1
ATMmoduleTB.sv,81,assert property(deposit_balance_0);,1
ATMmoduleTB.sv,85,assert property(deposit_balance_0);,1
ATMmoduleTB.sv,89,assert property(deposit_balance_0);,1
ATMmoduleTB.sv,93,assert property(deposit_balance_0);,1
ATMmoduleTB.sv,94,assert property(deposit_balance_1);,1
ATMmoduleTB.sv,95,assert property(withdraw_balance_0);,1
ATMmoduleTB.sv,96,assert property(withdraw_balance_1);,1
hyperram.sv,861,assert( fixed_latency_r == $past(fixed_latency_i) );,1
hyperram.sv,874,assert( fixed_latency_r == $past(fixed_latency_i) );,1
hyperram.sv,879,assert( fixed_latency_r == $past(fixed_latency_i) );,1
hyperram.sv,889,assert( hb_dq_o == CA_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
hyperram.sv,891,assert( hb_dq_o == CA_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
hyperram.sv,894,assert( hb_dq_o == CA_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
hyperram.sv,897,assert( hb_dq_o == dataw_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
hyperram.sv,898,assert( hb_dq_o == dataw_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
hyperram.sv,899,assert( hb_dq_o == dataw_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
hyperram.sv,900,assert( hb_dq_o == dataw_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
hyperram.sv,901,assert( hb_dq_o == dataw_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
hyperram.sv,902,assert( hb_dq_o == dataw_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
hyperram.sv,908,assert( hb_dq_o == dataw_r[8*cycle_cnt_r+7:8*cycle_cnt_r] );,1
wb_hyperram.sv,286,assume(!rst_i);,1
wb_hyperram.sv,288,assume(!wb_rst_i);,1
wb_hyperram.sv,327,assume(!wbs_stb_i);,1
wb_hyperram.sv,328,assume(!wbs_cyc_i);,1
wb_hyperram.sv,332,assume(wbs_cyc_i);,1
wb_hyperram.sv,333,assume(wbs_stb_i);,1
wb_hyperram.sv,341,assume(!wbs_stb_i);,1
wb_hyperram.sv,529,assert(!wbs_ack_o);,1
ibex_core.sv,215,assume property (data_rdata_i==32'b0);,1
ibex_core.sv,216,assume property (data_rvalid_i==1'b0);,1
ibex_icache_core_if.sv,136,cover property (cancelled_valid);,1
ibex_icache_core_if.sv,142,cover property (cancelled_valid);,1
ibex_icache_scoreboard.sv,162,assert(invalidate_seed < mem_states.size);,1
ibex_icache_scoreboard.sv,167,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,188,assert(mem_states.size > 0);,1
ibex_icache_scoreboard.sv,363,assert(seen_insn_data[1:0] == 2'b11);,1
ibex_icache_scoreboard.sv,479,assert (addr_lo < address);,1
formal_tb.sv,67,assume (multdiv_ready_id_i);,1
formal_tb.sv,73,assert (checked);,1
perfect_memory.sv,271,assert(0);,1
l1d_verif_pkg.sv,194,assert(0);,1
l1d_verif_pkg.sv,222,assert(0);,1
picorv32_tcm.sv,119,assume(mem_valid == 1'b1);,1
picorv32_tcm.sv,123,assume(mem_valid == 1'b0);,1
picorv32_tcm.sv,128,assume(mem_addr == mem_la_addr);,1
picorv32_tcm.sv,132,assume(mem_valid == 1'b0);,1
picorv32_tcm.sv,139,assert(mem_rdata == ram[mem_addr[ADDR_WIDTH-1:2]]);,1
picorv32_tcm.sv,161,assert(mem_ready);,1
picorv32_tcm.sv,165,assert(!mem_ready);,1
picorv32_tcm.sv,169,assert(mem_ready);,1
picorv32_tcm.sv,174,assert(mem_ready);,1
tb.sv,270,assert (a_count <= max_transfers);,1
tb.sv,283,assert (b_count <= max_transfers);,1
tb.sv,272,assert (a_count <= max_transfers);,1
tb.sv,285,assert (b_count <= max_transfers);,1
testbench.sv,72,assert(itf.valid_o == 1'b1);,1
testbench.sv,95,assert (itf.rdy == 1'b1);,1
testbench.sv,100,assert(itf.rdy == 1'b1);,1
testbench.sv,101,assert(itf.valid_o == 1'b1);,1
my_assertion .sv,26,assert property (enable_pulse_prop);,1
my_assertion .sv,30,assert property (enable_pulse_prop);,1
my_assertion .sv,31,cover property (enable_pulse_prop);,1
my_assertion .sv,35,assert property (sync_bus_prop);,1
my_assertion .sv,39,assert property (sync_bus_prop);,1
my_assertion .sv,40,cover property (sync_bus_prop);,1
my_assertion .sv,45,assert property (alu_en_prop);,1
my_assertion .sv,49,assert property (alu_en_prop);,1
my_assertion .sv,50,cover property (alu_en_prop);,1
my_assertion .sv,56,assert property (rst_sync1_assertion_prop);,1
my_assertion .sv,60,assert property (rst_sync1_assertion_prop);,1
my_assertion .sv,61,cover property (rst_sync1_assertion_prop);,1
my_assertion .sv,67,assert property (rst_sync1_deassertion_prop);,1
my_assertion .sv,71,assert property (rst_sync1_deassertion_prop);,1
my_assertion .sv,72,cover property (rst_sync1_deassertion_prop);,1
APB_TB.sv,74,assert(tr.randomize);,1
APB_TB.sv,101,assert(tr.randomize);,1
APB_TB.sv,131,assert(tr.randomize);,1
APB_TB.sv,136,assert(tr.randomize);,1
APB_TB.sv,164,assert(tr.randomize);,1
APB_TB.sv,175,assert(tr.randomize);,1
APB_TB.sv,203,assert(tr.randomize);,1
APB_TB.sv,232,assert(tr.randomize);,1
APB_TB.sv,260,assert(tr.randomize);,1
generator.sv,18,assert(gen.randomize);,1
tb_vga_avalon.sv,35,assert (vga_avalon.writedata[23:16] == 8'd83);,1
tb_vga_avalon.sv,36,assert (vga_avalon.writedata[30:24] == 7'd1);,1
tb_vga_avalon.sv,37,assert (vga_avalon.writedata[7:0] == 8'd255);,1
tb_vga_avalon.sv,42,assert (vga_avalon.writedata[23:16] == 8'd25);,1
tb_vga_avalon.sv,43,assert (vga_avalon.writedata[30:24] == 7'd5);,1
tb_vga_avalon.sv,44,assert (vga_avalon.writedata[7:0] == 8'd255);,1
tb_vga_avalon.sv,49,assert (vga_avalon.writedata[23:16] == 8'd89);,1
tb_vga_avalon.sv,50,assert (vga_avalon.writedata[30:24] == 7'd123);,1
tb_vga_avalon.sv,51,assert (vga_avalon.writedata[7:0] == 8'd122);,1
tb_vga_avalon.sv,56,assert (vga_avalon.writedata[23:16] == 8'd11);,1
tb_vga_avalon.sv,57,assert (vga_avalon.writedata[30:24] == 7'd34);,1
tb_vga_avalon.sv,58,assert (vga_avalon.writedata[7:0] == 8'd0);,1
tb_rtl_task3.sv,91,assert(DUT.rdy == 1);,1
bistable_domain_cross_tb.sv,93,assert(out == 2'b11);,1
bistable_domain_cross_tb.sv,96,assert(out == 2'b11);,1
bistable_domain_cross_tb.sv,105,assert(out == 2'b00);,1
monostable_domain_cross_tb.sv,105,assert(out0 == 0);,1
monostable_domain_cross_tb.sv,121,assert(out1 == 0);,1
sd_data_serial_host_tb.sv,142,assert(busy == 1);,1
sd_data_serial_host_tb.sv,143,assert(crc_ok == !crc_failure);,1
sd_data_serial_host_tb.sv,192,assert(DAT_oe_o == 1);,1
sd_data_serial_host_tb.sv,200,assert(DAT_oe_o == 1);,1
sd_data_serial_host_tb.sv,215,assert(aligned_data == received_data);,1
sd_data_serial_host_tb.sv,223,assert(DAT_oe_o == 1);,1
sd_data_serial_host_tb.sv,228,assert(crc_in[i] == crc[i]);,1
sd_data_serial_host_tb.sv,231,assert(DAT_oe_o == 1);,1
sd_data_serial_host_tb.sv,232,assert(DAT_dat_o == DATA_END);,1
sd_data_serial_host_tb.sv,234,assert(DAT_oe_o == 0);,1
sd_data_serial_host_tb.sv,248,assert(sd_data_busy == 0);,1
sd_data_serial_host_tb.sv,252,assert(sd_data_busy == 1);,1
sd_data_serial_host_tb.sv,254,assert(busy == 1);,1
sd_data_serial_host_tb.sv,256,assert(crc_ok == 1);,1
sd_data_serial_host_tb.sv,258,assert(crc_ok == 0);,1
sd_data_serial_host_tb.sv,334,assert(we == 0);,1
sd_data_serial_host_tb.sv,337,assert(we == 1);,1
sd_data_serial_host_tb.sv,351,assert(we == 0);,1
sd_data_serial_host_tb.sv,354,assert(we == 1);,1
sd_data_serial_host_tb.sv,379,assert(rd == 1);,1
sd_data_serial_host_tb.sv,390,assert(rd == 1);,1
sd_data_serial_host_tb.sv,392,assert(rd == 0);,1
sd_data_serial_host_tb.sv,395,assert(rd == 0);,1
sd_data_serial_host_tb.sv,403,assert(rd == 0);,1
sd_data_serial_host_tb.sv,416,assert(rd == 0);,1
sd_data_serial_host_tb.sv,426,assert(rd == 0);,1
sd_data_serial_host_tb.sv,438,assert(bsize > 0 && bcnt > 0);,1
sd_data_serial_host_tb.sv,453,assert(busy == 1);,1
sd_data_serial_host_tb.sv,476,assert(busy == 0);,1
sd_data_serial_host_tb.sv,488,assert(bsize > 0 && bcnt > 0);,1
sd_data_serial_host_tb.sv,503,assert(busy == 1);,1
sd_data_serial_host_tb.sv,524,assert(busy == 0);,1
sd_data_serial_host_tb.sv,534,assert(busy == 0);,1
sd_data_serial_host_tb.sv,581,assert(rd == 0);,1
sd_data_serial_host_tb.sv,582,assert(we == 0);,1
sd_data_serial_host_tb.sv,583,assert(DAT_oe_o == 0);,1
sd_data_serial_host_tb.sv,584,assert(busy == 0);,1
sd_data_serial_host_tb.sv,758,assert(busy == 1);,1
sd_fifo_filler_tb.sv,132,assert(test_mem[wb_idx] == wbm_dat_o);,1
sd_fifo_filler_tb.sv,133,assert(wbm_adr_o == adr_i + 4*wb_idx);,1
sd_fifo_filler_tb.sv,142,assert(wbm_adr_o == adr_i + 4*wb_idx);,1
sd_fifo_filler_tb.sv,174,assert(dat_o == test_mem[fifo_drv_idx]);,1
sd_fifo_filler_tb.sv,210,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,211,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,212,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,213,assert(wb_full_o == 0);,1
sd_fifo_filler_tb.sv,215,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,216,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,217,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,218,assert(wb_full_o == 0);,1
sd_fifo_filler_tb.sv,219,assert(sd_empty_o == 1);,1
sd_fifo_filler_tb.sv,230,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,231,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,232,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,233,assert(wb_full_o == 0);,1
sd_fifo_filler_tb.sv,242,assert(sd_full_o == 1);,1
sd_fifo_filler_tb.sv,243,assert(wb_empty_o == 0);,1
sd_fifo_filler_tb.sv,248,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,249,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,250,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,254,assert(sd_full_o == 0);,1
sd_fifo_filler_tb.sv,266,assert(sd_full_o == 0);,1
sd_fifo_filler_tb.sv,267,assert(wb_empty_o == 0);,1
sd_fifo_filler_tb.sv,273,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,274,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,275,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,276,assert(sd_full_o == 0);,1
sd_fifo_filler_tb.sv,284,assert(sd_empty_o == 0);,1
sd_fifo_filler_tb.sv,285,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,286,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,287,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,289,assert(sd_empty_o == 0);,1
sd_fifo_filler_tb.sv,290,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,291,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,292,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,303,assert(wb_full_o == 0);,1
sd_cmd_master_tb.sv,122,assert(setting_o == 0);,1
sd_cmd_master_tb.sv,123,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,124,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,126,assert(setting_o == 0);,1
sd_cmd_master_tb.sv,127,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,128,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,141,assert(start_xfr_o == 1);,1
sd_cmd_master_tb.sv,142,assert(setting_o == 2'b00);,1
sd_cmd_master_tb.sv,143,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,144,assert(cmd_o == 40'h4101234567);,1
sd_cmd_master_tb.sv,149,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,150,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,151,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,156,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,168,assert(start_xfr_o == 1);,1
sd_cmd_master_tb.sv,169,assert(setting_o == 2'b01);,1
sd_cmd_master_tb.sv,170,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,171,assert(cmd_o == 40'h45deadbeef);,1
sd_cmd_master_tb.sv,178,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,179,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,180,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,181,assert(response_0_o == 32'h01020304);,1
sd_cmd_master_tb.sv,182,assert(response_1_o == 32'h05060708);,1
sd_cmd_master_tb.sv,183,assert(response_2_o == 32'h090a0b0c);,1
sd_cmd_master_tb.sv,184,assert(response_3_o == 32'h0d0e0f00);,1
sd_cmd_master_tb.sv,197,assert(int_status_o == 0); //status should be reset by ne command assert(start_xfr_o == 1);,2
sd_cmd_master_tb.sv,199,assert(setting_o == 2'b11);,1
sd_cmd_master_tb.sv,200,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,201,assert(cmd_o == 40'h55bad0dad0);,1
sd_cmd_master_tb.sv,208,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,209,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,210,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,211,assert(response_0_o == 32'h11121314);,1
sd_cmd_master_tb.sv,212,assert(response_1_o == 32'h15161718);,1
sd_cmd_master_tb.sv,213,assert(response_2_o == 32'h191a1b1c);,1
sd_cmd_master_tb.sv,214,assert(response_3_o == 32'h1d1e1f00);,1
sd_cmd_master_tb.sv,219,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,239,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,253,assert(int_status_o == 5'b01011);,1
sd_cmd_master_tb.sv,269,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,283,assert(int_status_o == 5'b10011);,1
sd_cmd_master_tb.sv,301,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,315,assert(int_status_o == 5'b11011);,1
sd_cmd_master_tb.sv,327,assert(int_status_o == 5'b00110);,1
sd_cmd_master_tb.sv,328,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,330,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,342,assert(start_xfr_o == 1);,1
sd_cmd_master_tb.sv,343,assert(setting_o == 2'b01);,1
sd_cmd_master_tb.sv,344,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,345,assert(cmd_o == 40'h45deadbeef);,1
sd_cmd_master_tb.sv,352,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,353,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,354,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,355,assert(response_0_o == 32'h01020304);,1
sd_cmd_master_tb.sv,356,assert(response_1_o == 32'h05060708);,1
sd_cmd_master_tb.sv,357,assert(response_2_o == 32'h090a0b0c);,1
sd_cmd_master_tb.sv,358,assert(response_3_o == 32'h0d0e0f00);,1
sd_cmd_master_tb.sv,376,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,378,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,381,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,394,assert(start_xfr_o == 1);,1
sd_cmd_master_tb.sv,395,assert(setting_o == 2'b01);,1
sd_cmd_master_tb.sv,396,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,397,assert(cmd_o == 40'h45deadbeef);,1
sd_cmd_master_tb.sv,404,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,405,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,406,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,407,assert(response_0_o == 32'h01020304);,1
sd_cmd_master_tb.sv,408,assert(response_1_o == 32'h05060708);,1
sd_cmd_master_tb.sv,409,assert(response_2_o == 32'h090a0b0c);,1
sd_cmd_master_tb.sv,410,assert(response_3_o == 32'h0d0e0f00);,1
sd_controller_top_tb.sv,246,assert(wb_s_mon_log_file_desc >= 2);,1
sd_controller_top_tb.sv,253,assert(wb_m_mon_log_file_desc >= 2);,1
sd_controller_top_tb.sv,355,assert(0); \ x = 0; \ return; \ end `define ASSERT_DATA_STATUS(x) assert(x == 1) \ else begin \ assert(0); \ x = 0; \ return; \ end `define ASSERT_TEST(x) assert(x == 1) passed_tests++; \ else begin \ failed_tests++; \ assert(0); \ return; \ end `define ASSERT(x) assert(x) else return;,20
sd_controller_top_tb.sv,381,assert(reg_num >= 0 && reg_num < 4);,1
sd_controller_top_tb.sv,734,assert(write_status`CYC_ACTUAL_TRANSFER == size_i);,1
sd_controller_top_tb.sv,779,assert(read_status`CYC_ACTUAL_TRANSFER == size_i);,1
edge_detect_tb.sv,82,assert(rise == 1);,1
edge_detect_tb.sv,83,assert(fall == 0);,1
edge_detect_tb.sv,87,assert(rise == 0);,1
edge_detect_tb.sv,88,assert(fall == 1);,1
edge_detect_tb.sv,91,assert(rise == 0);,1
edge_detect_tb.sv,92,assert(fall == 0);,1
edge_detect_tb.sv,94,assert(rise == 0);,1
edge_detect_tb.sv,95,assert(fall == 0);,1
edge_detect_tb.sv,100,assert(rise == 1);,1
edge_detect_tb.sv,101,assert(fall == 0);,1
edge_detect_tb.sv,103,assert(rise == 0);,1
edge_detect_tb.sv,104,assert(fall == 0);,1
edge_detect_tb.sv,106,assert(rise == 0);,1
edge_detect_tb.sv,107,assert(fall == 0);,1
edge_detect_tb.sv,111,assert(rise == 0);,1
edge_detect_tb.sv,112,assert(fall == 1);,1
edge_detect_tb.sv,114,assert(rise == 0);,1
edge_detect_tb.sv,115,assert(fall == 0);,1
edge_detect_tb.sv,117,assert(rise == 0);,1
edge_detect_tb.sv,118,assert(fall == 0);,1
sd_controller_wb_tb.sv,147,assert(wb_ack_o == 0);,1
sd_controller_wb_tb.sv,203,assert(wb_dat_o == 0);,1
sd_controller_wb_tb.sv,204,assert(wb_ack_o == 0);,1
sd_controller_wb_tb.sv,205,assert(cmd_start == 0);,1
sd_controller_wb_tb.sv,206,assert(argument_reg == 0);,1
sd_controller_wb_tb.sv,207,assert(command_reg == 0);,1
sd_controller_wb_tb.sv,208,assert(software_reset_reg == 0);,1
sd_controller_wb_tb.sv,209,assert(cmd_timeout_reg == 0);,1
sd_controller_wb_tb.sv,210,assert(data_timeout_reg == 0);,1
sd_controller_wb_tb.sv,211,assert(block_size_reg == `RESET_BLOCK_SIZE);,1
sd_controller_wb_tb.sv,212,assert(controll_setting_reg == 0);,1
sd_controller_wb_tb.sv,213,assert(cmd_int_status_reg == 0);,1
sd_controller_wb_tb.sv,214,assert(cmd_int_enable_reg == 0);,1
sd_controller_wb_tb.sv,215,assert(clock_divider_reg == `RESET_CLK_DIV);,1
sd_controller_wb_tb.sv,216,assert(data_int_enable_reg == 0);,1
sd_controller_wb_tb.sv,217,assert(data_int_rst == 0);,1
sd_controller_wb_tb.sv,218,assert(cmd_int_rst == 0);,1
sd_controller_wb_tb.sv,219,assert(block_count_reg == 0);,1
sd_controller_wb_tb.sv,220,assert(dma_addr_reg == 0);,1
sd_controller_wb_tb.sv,226,assert(argument_reg == 32'h01020304);,1
sd_controller_wb_tb.sv,227,assert(command_reg != `CMD_REG_SIZE'h0304);,1
sd_controller_wb_tb.sv,232,assert(cmd_start == 0);,1
sd_controller_wb_tb.sv,238,assert(command_reg == `CMD_REG_SIZE'h0405);,1
sd_controller_wb_tb.sv,258,assert(controll_setting_reg == 1'h1);,1
sd_controller_wb_tb.sv,262,assert(cmd_timeout_reg == `CMD_TIMEOUT_W'h0b0c);,1
sd_controller_wb_tb.sv,266,assert(data_timeout_reg == `DATA_TIMEOUT_W'h0c0b);,1
sd_controller_wb_tb.sv,270,assert(clock_divider_reg == 8'h0d);,1
sd_controller_wb_tb.sv,274,assert(software_reset_reg == 1'h1);,1
sd_controller_wb_tb.sv,290,assert(cmd_int_rst == 0);,1
sd_controller_wb_tb.sv,299,assert(cmd_int_enable_reg == 5'h15);,1
sd_controller_wb_tb.sv,309,assert(data_int_rst == 0);,1
sd_controller_wb_tb.sv,318,assert(data_int_enable_reg == 3'h5);,1
sd_controller_wb_tb.sv,322,assert(block_size_reg == 12'habc);,1
sd_controller_wb_tb.sv,326,assert(block_count_reg == 16'h1011);,1
sd_controller_wb_tb.sv,330,assert(dma_addr_reg == 32'h11121314);,1
sd_controller_wb_tb.sv,337,assert(dma_addr_reg == 32'hffffff04);,1
sd_controller_wb_tb.sv,342,assert(block_count_reg == `BLKCNT_W'h00ff);,1
byte_en_reg_tb.sv,104,assert(q == 0);,1
byte_en_reg_tb.sv,113,assert(q == 0);,1
sd_cmd_serial_host_tb.sv,94,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,97,assert(cmd == command);,1
sd_cmd_serial_host_tb.sv,100,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,103,assert(crc_in == crc);,1
sd_cmd_serial_host_tb.sv,104,assert(cmd_out_o == CMD_END);,1
sd_cmd_serial_host_tb.sv,105,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,107,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,122,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,127,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,131,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,176,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,178,assert(crc_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,179,assert(index_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,180,assert(cmd_out_o == 1);,1
sd_cmd_serial_host_tb.sv,181,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,183,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,185,assert(crc_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,186,assert(index_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,187,assert(cmd_out_o == 1);,1
sd_cmd_serial_host_tb.sv,188,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,190,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,192,assert(crc_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,193,assert(index_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,194,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,212,assert(crc_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,213,assert(index_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,229,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,235,assert(response_o[119:88] == response[119:88]);,1
sd_cmd_serial_host_tb.sv,236,assert(crc_ok_o == 1);,1
sd_cmd_serial_host_tb.sv,237,assert(index_ok_o == 1);,1
sd_cmd_serial_host_tb.sv,253,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,259,assert(response_o == response[119:0]);,1
sd_cmd_serial_host_tb.sv,260,assert(crc_ok_o == 1);,1
sd_cmd_serial_host_tb.sv,261,assert(index_ok_o == 1);,1
sd_data_master_tb.sv,77,assert(int_status_o == 0);,1
sd_data_master_tb.sv,90,assert(d_write_o == 0);,1
sd_data_master_tb.sv,91,assert(d_read_o == 0);,1
sd_data_master_tb.sv,92,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,98,assert(d_read_o == 0);,1
sd_data_master_tb.sv,99,assert(start_tx_fifo_o == 1);,1
sd_data_master_tb.sv,100,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,103,assert(d_write_o == 0);,1
sd_data_master_tb.sv,112,assert(d_write_o == 0);,1
sd_data_master_tb.sv,113,assert(d_read_o == 0);,1
sd_data_master_tb.sv,116,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,117,assert(int_status_o == expected_status);,1
sd_data_master_tb.sv,164,assert(d_write_o == 0);,1
sd_data_master_tb.sv,165,assert(start_tx_fifo_o == 0);,1
sd_data_master_tb.sv,168,assert(d_read_o == 0);,1
sd_data_master_tb.sv,177,assert(d_write_o == 0);,1
sd_data_master_tb.sv,178,assert(d_read_o == 0);,1
sd_data_master_tb.sv,181,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,182,assert(int_status_o == expected_status);,1
sd_data_master_tb.sv,223,assert(d_write_o == 1);,1
sd_data_master_tb.sv,224,assert(d_read_o == 1);,1
sd_data_master_tb.sv,228,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,229,assert(int_status_o == expected_status);,1
sd_data_master_tb.sv,240,assert(d_write_o == 1);,1
sd_data_master_tb.sv,241,assert(d_read_o == 1);,1
sd_data_master_tb.sv,245,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,246,assert(int_status_o == expected_status);,1
sd_data_master_tb.sv,297,assert(d_write_o == 0);,1
sd_data_master_tb.sv,298,assert(d_read_o == 0);,1
sd_data_master_tb.sv,299,assert(start_tx_fifo_o == 0);,1
sd_data_master_tb.sv,300,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,301,assert(int_status_o == 0);,1
sd_data_master_tb.sv,303,assert(d_write_o == 0);,1
sd_data_master_tb.sv,304,assert(d_read_o == 0);,1
sd_data_master_tb.sv,305,assert(start_tx_fifo_o == 0);,1
sd_data_master_tb.sv,306,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,307,assert(int_status_o == 0);,1
sd_data_xfer_trig_tb.sv,88,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,89,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,92,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,93,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,100,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,101,assert(start_rx_o == 1);,1
sd_data_xfer_trig_tb.sv,106,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,107,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,111,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,112,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,115,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,116,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,122,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,123,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,129,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,130,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,134,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,135,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,139,assert(start_tx_o == 1);,1
sd_data_xfer_trig_tb.sv,140,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,143,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,144,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,150,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,151,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,158,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,159,assert(start_rx_o == 1);,1
sd_data_xfer_trig_tb.sv,164,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,165,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,169,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,170,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,173,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,174,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,180,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,181,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,187,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,188,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,192,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,193,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,197,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,198,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,201,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,202,assert(start_rx_o == 0);,1
easyprops.sv,172,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
easyprops.sv,183,assert(S_AXI_RDATA == 0);,1
easyprops.sv,323,assert property (IDATA_HELD_WHEN_NOT_READY);,1
easyprops.sv,327,assert property (IDATA_HELD_WHEN_NOT_READY);,1
easyprops.sv,332,assert property (IDATA_HELD_WHEN_NOT_READY);,1
easyaxil_tb.sv,229,assert(S_AXI_AWREADY == uut_AWREADY);,1
easyaxil_tb.sv,232,assert(S_AXI_WREADY == uut_WREADY);,1
easyaxil_tb.sv,235,assert(S_AXI_ARREADY == uut_ARREADY);,1
easyaxil_tb.sv,237,assert(S_AXI_BVALID == uut_BVALID);,1
easyaxil_tb.sv,238,assert(S_AXI_RVALID == uut_RVALID);,1
easyaxil_tb.sv,241,assert( S_AXI_BRESP == uut_BRESP );,1
axi_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,31,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,32,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_test.sv,1784,assert (b_beat.b_id == id);,1
axi_test.sv,1842,assert (r_beat.r_id == id);,1
axi_test.sv,1843,assert (r_beat.r_resp == axi_pkg::RESP_OKAY);,1
axi_test.sv,1844,assert (r_beat.r_last);,1
axi_modify_address.sv,157,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,159,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,160,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,86,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,109,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,110,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,111,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
tb_axi_cdc.sv,212,assert (mst_b == exp_b);,1
tb_axi_cdc.sv,220,assert (mst_r == exp_r);,1
tb_axi_cdc.sv,241,assert (slv_aw == exp_aw);,1
tb_axi_cdc.sv,245,assert (slv_w == exp_w);,1
tb_axi_cdc.sv,252,assert (slv_ar == exp_ar);,1
tb_axi_lite_regs.sv,203,assert (master.r_resp == axi_pkg::RESP_OKAY);,1
tb_axi_lite_regs.sv,258,assert (master.w_strb[i] == wr_active[aw_idx+i]);,1
tb_axi_to_axi_lite.sv,169,assert (aw_cnt == w_cnt && w_cnt == b_cnt);,1
tb_axi_to_axi_lite.sv,170,assert (ar_cnt == r_cnt);,1
tb_axi_modify_address.sv,177,assert(rand_success);,1
tb_axi_modify_address.sv,181,assert(rand_success);,1
tb_axi_atop_filter.sv,212,assert (downstream.aw_atop == '0);,1
tb_axi_atop_filter.sv,304,assert (downstream.ar_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,305,assert (downstream.ar_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,306,assert (downstream.ar_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,307,assert (downstream.ar_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,308,assert (downstream.ar_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,309,assert (downstream.ar_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,310,assert (downstream.ar_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,311,assert (downstream.ar_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,312,assert (downstream.ar_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,313,assert (downstream.ar_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,320,assert (downstream.aw_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,321,assert (downstream.aw_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,322,assert (downstream.aw_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,323,assert (downstream.aw_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,324,assert (downstream.aw_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,325,assert (downstream.aw_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,326,assert (downstream.aw_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,327,assert (downstream.aw_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,328,assert (downstream.aw_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,329,assert (downstream.aw_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,335,assert (act_beat.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,336,assert (act_beat.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,337,assert (act_beat.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,338,assert (act_beat.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,343,assert (downstream.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,344,assert (downstream.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,345,assert (downstream.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,346,assert (downstream.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,366,assert (upstream.r_id == exp_beat.r_id);,1
tb_axi_atop_filter.sv,367,assert (upstream.r_data == exp_beat.r_data);,1
tb_axi_atop_filter.sv,368,assert (upstream.r_resp == exp_beat.r_resp);,1
tb_axi_atop_filter.sv,369,assert (upstream.r_last == exp_beat.r_last);,1
tb_axi_atop_filter.sv,370,assert (upstream.r_user == exp_beat.r_user);,1
tb_axi_atop_filter.sv,382,assert (upstream.b_id == exp_beat.b_id);,1
tb_axi_atop_filter.sv,383,assert (upstream.b_resp == exp_beat.b_resp);,1
tb_axi_atop_filter.sv,384,assert (upstream.b_user == exp_beat.b_user);,1
tb_axi_sim_mem.sv,111,assert(b_beat.b_resp == axi_pkg::RESP_OKAY);,1
tb_axi_addr_test.sv,240,"assume (mode inside {axi_pkg::BURST_FIXED, axi_pkg::BURST_INCR, axi_pkg::BURST_WRAP});",1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,77,assert(tck_src > 0);,1
cdc_2phase_tb.sv,103,assert(tck_dst > 0);,1
rr_arb_tree_tb.sv,239,assert(exp_data === data_oup);,1
cdc_fifo_tb.sv,81,assert(tck_src > 0);,1
cdc_fifo_tb.sv,107,assert(tck_dst > 0);,1
graycode_tb.sv,24,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
Filter.sv,280,assert(!reset_n || oVGA_SYNC_N == 0);,1
Filter.sv,286,assert(oVGA_R == 0 && oVGA_G == 0 && oVGA_B == 0);,1
Filter.sv,291,assert(out_x <= WIDTH);,1
Filter.sv,292,assert(out_y <= HEIGHT);,1
tb_huffman.sv,86,assert(enc_fifo_i_ready === 1);,1
tb_huffman.sv,102,assert(fifo_i_ready === 1);,1
tb_huffman.sv,111,assert(fifo_o_valid === 1);,1
tb_huffman.sv,116,assert(fifo_o_ready === 0);,1
tb_huffman.sv,117,assert(fifo_o_valid === 0);,1
tb_concat.sv,124,assert(len_expected < OUT_WIDTH);,1
tb_concat.sv,125,assert(dout === result_expected_d);,1
tb_addr_gen.sv,46,assert(addr === 8'h01);,1
tb_addr_gen.sv,48,assert(addr === 8'h02);,1
tb_addr_gen.sv,50,assert(addr === 8'h03);,1
tb_addr_gen.sv,58,assert(addr === 8'h03);,1
tb_addr_gen.sv,60,assert(addr === 8'h03);,1
tb_addr_gen.sv,62,assert(addr === 8'h03);,1
FIFO_tb.sv,68,assert(!empty_w);,1
FIFO_tb.sv,77,assert(rd_dv_w);,1
FIFO_tb.sv,78,assert(empty_w);,1
FIFO_tb.sv,98,assert(full_w);,1
FIFO_tb.sv,109,assert(rd_dv_w);,1
FIFO_tb.sv,115,assert(empty_w);,1
FIFO_tb.sv,129,assert(full_w);,1
FIFO_tb.sv,132,assert(full_w);,1
FIFO_tb.sv,134,assert(full_w);,1
FIFO_tb.sv,140,assert(AE_flag_w);,1
FIFO_tb.sv,141,assert(~AF_flag_w);,1
FIFO_tb.sv,145,assert(AE_flag_w);,1
FIFO_tb.sv,146,assert(~AF_flag_w);,1
FIFO_tb.sv,148,assert(~AE_flag_w);,1
FIFO_tb.sv,149,assert(~AF_flag_w);,1
FIFO_tb.sv,151,assert(~AE_flag_w);,1
FIFO_tb.sv,152,assert(AF_flag_w);,1
FIFO_tb.sv,154,assert(~AE_flag_w);,1
FIFO_tb.sv,155,assert(AF_flag_w);,1
FIFO_tb.sv,156,assert(full_w);,1
ramtb.sv,73,cover property(check);,1
ramtb.sv,77,cover property(check);,1
ramtb.sv,78,cover property(check);,1
ysyx_cva6.sv,1110,assert(Cfg.RASDepth > 0);,1
ysyx_cva6.sv,1113,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ysyx_cva6.sv,1114,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ysyx_cva6.sv,1115,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
ysyx_cva6.sv,1116,assert(Cfg.NrPMPEntries <= 16);,1
ysyx_cva6.sv,35396,assert(size >= 2);,1
ysyx_cva6.sv,35398,assert(size > 2);,1
ysyx_cva6.sv,35402,assert(conf_addr_i[i] == 1); // check that all the rest are ones end end end if (size < PLEN-1) begin if (base + 2**size > base) begin // check for overflow if (match_o == 0) begin assert(addr_i >= base + 2**size || addr_i < base);,9
ysyx_cva6.sv,35412,assert(addr_i < base + 2**size && addr_i >= base);,1
ysyx_cva6.sv,35416,assert(addr_i - 2**size >= base || addr_i < base);,1
ysyx_cva6.sv,35418,assert(addr_i - 2**size < base && addr_i >= base);,1
ysyx_cva6.sv,48491,assert(NoCuts >= 0);,1
ysyx_cva6.sv,49236,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
ysyx_cva6.sv,49237,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
ysyx_cva6.sv,49238,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
ysyx_cva6.sv,49239,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
top_tb.sv,196,assert(DUT.top_btn_db.i_btn_in == 1'b1);,1
top_tb.sv,200,assert(DUT.top_btn_db.i_btn_in == 0);,1
top_tb.sv,207,assert(DUT.OV7670_cam.i_rstn_clk == 0) $display("100 MHz Multi-clock reset is 0.\n");,2
top_tb.sv,425,assert property(handshake_cam_top_to_vp_top_p);,1
top_tb.sv,431,assert property(handshake_cam_top_to_vp_top_p);,1
top_tb.sv,433,assert property (handshake_vp_top_to_mem_top_p);,1
top_tb.sv,439,assert property (handshake_vp_top_to_mem_top_p);,1
linebuffer_tb.sv,151,assert(DUT.wptr == 0);,1
linebuffer_tb.sv,157,assert(DUT.rptr == 0);,1
async_fifo_tb.sv,245,"assert(DUT.rbin_wbin_diff <= (1 << AW_TB)) else $fatal(1, ""rbin - wbin difference exceeds FIFO depth. rbin-wbin = %d\n"", DUT.rbin_wbin_diff);",4
alt_reset_ctrl_lego.sv,213,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
alt_reset_ctrl_lego.sv,219,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
alt_reset_ctrl_tgx_cdrauto.sv,185,assert property (rx_analogreset |-> rx_digitalreset);,1
alt_reset_ctrl_lego.sv,213,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
alt_reset_ctrl_lego.sv,219,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
alt_reset_ctrl_tgx_cdrauto.sv,185,assert property (rx_analogreset |-> rx_digitalreset);,1
testFIFObench.sv,101,"assert (!(f && e)) $display(""@%0t: Test Case 1 - Full and Empty flag must NEVER BOTH be 1: PASSED"", $time);",2
testFIFObench.sv,107,"assert (!(f && e)) $display(""@%0t: Test Case 1 - Full and Empty flag must NEVER BOTH be 1: PASSED"", $time);",2
testFIFObench.sv,113,"assert (!(f && e)) $display(""@%0t: Test Case 1 - Full and Empty flag must NEVER BOTH be 1: PASSED"", $time);",2
axi_stream_insert_header_burst_tb.sv,79,assert (valid_out && data_out == 64'h12345678_abcdef12 && keep_out == 8'hff && !last_out);,1
axi_stream_insert_header_burst_tb.sv,102,assert (valid_out && data_out == 64'h56789012_34567890 && keep_out == 8'h0f && !last_out);,1
axi_stream_insert_header_burst_tb.sv,124,assert (valid_out && data_out == 64'h34567890_12345678 && keep_out == 8'h0f && !last_out);,1
tb_labTwo.sv,24,assert(result == inA + inB);,1
tb_labTwo.sv,27,assert(result == inA << inB);,1
tb_labTwo.sv,24,assert(result == inA + inB);,1
tb_labTwo.sv,27,assert(result == inA << inB);,1
formal.sv,5,cover (finished == 1);,1
axi_id_remap.sv,566,assert (InpIdWidth > 0);,1
axi_id_remap.sv,567,assert (MaxUniqInpIds > 0);,1
axi_id_remap.sv,569,assert (MaxTxnsPerId > 0);,1
axi_id_remap.sv,570,assert (IdxWidth >= 1);,1
axi_id_remap.sv,650,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_remap.sv,651,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,652,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,653,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_remap.sv,654,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_remap.sv,655,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,656,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,657,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,339,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_iw_converter.sv,340,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,341,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,342,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,343,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_iw_converter.sv,344,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,345,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,346,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,31,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,32,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_test.sv,2019,assert (b_beat.b_id == id);,1
axi_test.sv,2087,assert (r_beat.r_id == id);,1
axi_test.sv,2088,assert (r_beat.r_last);,1
axi_id_serialize.sv,414,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_serialize.sv,415,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,416,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,417,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_serialize.sv,418,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_serialize.sv,419,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,420,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,421,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_modify_address.sv,157,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,159,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,160,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,86,assert(NoCuts >= 0);,1
axi_fifo.sv,157,assert (Depth >= 0);,1
axi_lite_to_axi.sv,109,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,110,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,111,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_id_remap.sv,566,assert (InpIdWidth > 0);,1
axi_id_remap.sv,567,assert (MaxUniqInpIds > 0);,1
axi_id_remap.sv,569,assert (MaxTxnsPerId > 0);,1
axi_id_remap.sv,570,assert (IdxWidth >= 1);,1
axi_id_remap.sv,650,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_remap.sv,651,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,652,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,653,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_remap.sv,654,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_remap.sv,655,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_remap.sv,656,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_remap.sv,657,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,339,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_iw_converter.sv,340,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,341,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,342,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_iw_converter.sv,343,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_iw_converter.sv,344,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_iw_converter.sv,345,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_iw_converter.sv,346,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,31,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,32,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_test.sv,2019,assert (b_beat.b_id == id);,1
axi_test.sv,2087,assert (r_beat.r_id == id);,1
axi_test.sv,2088,assert (r_beat.r_last);,1
axi_id_serialize.sv,414,assert (slv.AXI_ID_WIDTH == AXI_SLV_PORT_ID_WIDTH);,1
axi_id_serialize.sv,415,assert (slv.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,416,assert (slv.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,417,assert (slv.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_id_serialize.sv,418,assert (mst.AXI_ID_WIDTH == AXI_MST_PORT_ID_WIDTH);,1
axi_id_serialize.sv,419,assert (mst.AXI_ADDR_WIDTH == AXI_ADDR_WIDTH);,1
axi_id_serialize.sv,420,assert (mst.AXI_DATA_WIDTH == AXI_DATA_WIDTH);,1
axi_id_serialize.sv,421,assert (mst.AXI_USER_WIDTH == AXI_USER_WIDTH);,1
axi_modify_address.sv,157,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,159,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,160,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,86,assert(NoCuts >= 0);,1
axi_fifo.sv,157,assert (Depth >= 0);,1
axi_lite_to_axi.sv,109,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,110,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,111,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
cdc_fifo_2phase.sv,67,assert(LOG_DEPTH > 0);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
vortex_afu.sv,764,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
EasySDRAM.sv,341,assert(busy & ~full & ~readValid);,1
EasySDRAM.sv,343,assert(~full & ~readValid);,1
EasySDRAM.sv,346,assert(~busy & ~full & ~readValid);,1
SafeSDRAM.sv,95,assert(~error);,1
SafeSDRAM.sv,315,assert(~readValid);,1
SafeSDRAM.sv,320,assert(commandReady & prechargeReady);,1
SafeSDRAM.sv,324,assert(commandReady & ~rowOpen);,1
SafeSDRAM.sv,330,assert(commandReady & ~rowOpen);,1
SafeSDRAM.sv,336,assert(commandReady & ~rowOpen);,1
SafeSDRAM.sv,342,assert(commandReady & ~rowOpen);,1
SafeSDRAM.sv,349,"assert({DRAM_CKE, DRAM_CS_N, DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N} == 5'b10111);",1
SafeSDRAM.sv,354,"assert({DRAM_CKE, DRAM_CS_N, DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N} == 5'b10011);",1
SafeSDRAM.sv,359,"assert({DRAM_CKE, DRAM_CS_N, DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N, DRAM_ADDR[10]} == 6'b101000);",1
SafeSDRAM.sv,364,"assert({DRAM_CKE, DRAM_CS_N, DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N, DRAM_ADDR[10]} == 6'b101010);",1
SafeSDRAM.sv,369,"assert({DRAM_CKE, DRAM_CS_N, DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N, DRAM_ADDR[10]} == 6'b101011);",1
SafeSDRAM.sv,378,"assert({DRAM_CKE, DRAM_CS_N, DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N, DRAM_ADDR[10]} == 6'b101001);",1
SafeSDRAM.sv,384,"assert({DRAM_CKE, DRAM_CS_N, DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N} == 5'b10001);",1
SafeSDRAM.sv,393,"assert({DRAM_CKE, DRAM_CS_N, DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N, DRAM_ADDR[10]} == 6'b100100);",1
SafeSDRAM.sv,402,"assert({DRAM_CKE, DRAM_CS_N, DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N, DRAM_ADDR[10]} == 6'b100101);",1
SafeSDRAM.sv,413,assert(~readValid & commandReady & rowOpen);,1
SafeSDRAM.sv,418,assert(~readValid); @(posedge clk); #Tdiv4;,1
SafeSDRAM.sv,422,assert(readValid & ~writeReady); @(posedge clk); #Tdiv4;,1
SafeSDRAM.sv,423,assert(~readValid & ~writeReady); @(posedge clk); #Tdiv4;,1
SafeSDRAM.sv,426,assert(writeReady);,1
SafeSDRAM.sv,431,assert(DRAM_DQ == 16'hDEAD);,1
SafeSDRAM.sv,435,assert(prechargeReady & rowOpen);,1
SafeSDRAM.sv,443,assert(commandReady & ~rowOpen & readValid);,1
SafeSDRAM.sv,452,assert(~readValid & commandReady & rowOpen);,1
SafeSDRAM.sv,457,assert(writeReady);,1
SafeSDRAM.sv,462,assert(DRAM_DQ == 16'hBEEF);,1
SafeSDRAM.sv,467,assert(~rowOpen & ~prechargeReady & commandReady);,1
SafeSDRAM.sv,476,assert(~readValid);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
static_cast_simple.sv,36,assert(c == 8'b0000_0000);,1
static_cast_simple.sv,37,assert(d == 8'b0000_0001);,1
static_cast_simple.sv,42,assert(s0 == 8'b1111_1111);,1
static_cast_simple.sv,43,assert(s1 == 8'b1111_1111);,1
static_cast_simple.sv,44,assert(s2 == 8'b0000_1111);,1
static_cast_simple.sv,45,assert(u0 == 8'b1111_1111);,1
static_cast_simple.sv,46,assert(u1 == 8'b0000_1111);,1
static_cast_simple.sv,47,assert(u2 == 8'b1111_1111);,1
static_cast_simple.sv,48,assert(u3 == 8'b1111_1111);,1
static_cast_simple.sv,49,assert(u4 == 8'b0000_1111);,1
static_cast_simple.sv,50,assert(u5 == 8'b1111_1111);,1
static_cast_simple.sv,51,assert(u6 == 8'b0000_1111);,1
static_cast_simple.sv,53,assert(n0 == 9'b1_1111_1111);,1
static_cast_simple.sv,54,assert(n1 == 9'b0_0000_1111);,1
static_cast_simple.sv,55,assert(n2 == 9'b1_1111_1111);,1
static_cast_simple.sv,56,assert(n3 == 9'b0_0000_1111);,1
static_cast_simple.sv,57,assert(n4 == 9'b0_1111_1111);,1
static_cast_simple.sv,58,assert(n5 == 9'b0_0000_1111);,1
static_cast_simple.sv,59,assert(n6 == 9'b0_1111_1111);,1
static_cast_simple.sv,60,assert(n7 == 9'b0_0000_1111);,1
static_cast_simple.sv,61,assert(n8 == 9'b1_1111_1111);,1
static_cast_simple.sv,62,assert(n9 == 9'b0_0000_1111);,1
typedef_initial_and_assign.sv,11,assert property (var_1 == 0);,1
typedef_initial_and_assign.sv,15,assert property (var_2 == 0);,1
typedef_initial_and_assign.sv,19,assert property (var_3 == 0);,1
typedef_initial_and_assign.sv,23,assert property (var_4 == 0);,1
typedef_initial_and_assign.sv,27,assert property (var_5 == 0);,1
typedef_initial_and_assign.sv,30,assert property (var_6 == 0);,1
typedef_initial_and_assign.sv,34,assert property (var_7 == 0);,1
typedef_initial_and_assign.sv,37,assert property (var_8 == 0);,1
typedef_initial_and_assign.sv,41,assert property (var_9 == 0);,1
typedef_initial_and_assign.sv,44,assert property (var_10 == 0);,1
typedef_initial_and_assign.sv,48,assert property (var_11 == 0);,1
typedef_initial_and_assign.sv,52,assert property (wire_3 == 0);,1
typedef_initial_and_assign.sv,56,assert property (wire_2 == 0);,1
typedef_initial_and_assign.sv,59,assert property (wire_3 == 0);,1
typedef_initial_and_assign.sv,63,assert property (wire_4 == 0);,1
enum_simple.sv,27,assert(1'b0); //should be unreachable //state if (state == ts0) state <= ts1;,5
enum_simple.sv,37,assert(1'b0); //should be unreachable end end always @(*) begin assert(state != 2'h3);,6
enum_simple.sv,43,assert(s0 == '0);,1
enum_simple.sv,44,assert(ts0 == '0);,1
enum_simple.sv,45,assert(enum_const == ts1);,1
union_simple.sv,16,assert(w.y.d == 8'h42);,1
union_simple.sv,54,assert(ir1.u.opcode == 'h37);,1
union_simple.sv,55,assert(ir1.r.opcode == 'h37);,1
union_simple.sv,56,assert(ir1.u.rd == 'd29);,1
union_simple.sv,57,assert(ir1.r.rd == 'd29);,1
union_simple.sv,58,assert(ir1.u.imm == 'hAA01);,1
union_simple.sv,69,assert(u.byte4.d == 'h42);,1
typedef_struct.sv,34,assert(s.a == 1'b1);,1
typedef_struct.sv,35,assert(s.b == 8'hFF);,1
typedef_struct.sv,36,assert(s.t == 8'h55);,1
typedef_struct.sv,37,assert(s1.t == 8'h55);,1
typedef_struct.sv,38,assert(ps.a == 8'hAA);,1
typedef_struct.sv,39,assert(ps.b == 8'h55);,1
typedef_struct_port.sv,102,assert(8'hAA == ps.a);,1
typedef_struct_port.sv,103,assert(8'h55 == ps.b);,1
typedef_struct_port.sv,104,assert(8'hBB == body.a);,1
typedef_struct_port.sv,105,assert(8'h66 == body.b);,1
typedef_struct_port.sv,106,assert(32'hAAAAAAAA == l_s);,1
typedef_struct_port.sv,107,assert(16'hBBBB == sl_s);,1
typedef_struct_port.sv,108,assert(16'hCCCC == lsl_s);,1
typedef_struct_port.sv,109,assert(1'b1 == j);,1
const_arg_loop.sv,83,assert(a == 2);,1
const_arg_loop.sv,84,assert(A == 3);,1
const_arg_loop.sv,85,assert(x1 == 16);,1
const_arg_loop.sv,86,assert(x1b == 16);,1
const_arg_loop.sv,87,assert(x2 == 4);,1
const_arg_loop.sv,88,assert(x3 == 16);,1
const_arg_loop.sv,89,assert(x4 == a << 1);,1
const_arg_loop.sv,90,assert(x5 == 64);,1
const_func.sv,66,assert(a1 == 0);,1
const_func.sv,67,assert(a2 == 0);,1
const_func.sv,68,assert(a3 == "BAR");,1
const_func.sv,69,assert(a4 == 0);,1
const_func.sv,70,assert(b1 == "FOO");,1
const_func.sv,71,assert(b2 == "FOO");,1
const_func.sv,72,assert(b3 == 0);,1
const_func.sv,73,assert(b4 == "HI");,1
const_func.sv,74,assert(c1 == 1);,1
const_func.sv,75,assert(c2 == 1);,1
const_func.sv,76,assert(c3 == 0);,1
const_func.sv,77,assert(c4 == 0);,1
const_func.sv,78,assert(d1 == 0);,1
const_func.sv,79,assert(d2 == 0);,1
const_func.sv,80,assert(d3 == 1);,1
const_func.sv,81,assert(d4 == 1);,1
const_func.sv,83,assert(Y == 3);,1
const_func.sv,84,assert(Z == ~3);,1
countbits.sv,33,assert (one == 1);,1
countbits.sv,34,assert (two == 3);,1
countbits.sv,35,assert (four == 3);,1
inst_list.sv,21,assert(w0 == u0 ^ v0);,1
inst_list.sv,22,assert(w1 == u1 ^ v1);,1
basic.sv,18,assert(w == u ^ v);,1
hier.sv,16,assert(w == u ^ v);,1
param.sv,23,assert (w0 == '0);,1
param.sv,24,assert (w1 == u1 ^ v1);,1
toplevel.sv,16,assert(w == u ^ v);,1
cell_list.sv,23,assert(w0 == u0 ^ v0);,1
cell_list.sv,24,assert(w1 == u1 ^ v1);,1
int_types.sv,17,"assert (x == y); \ assert (a == b); \ assert (a == c); \ assert ((a == -1) == is_signed); \ end \ end `define TEST_INTEGER_ATOM(typ, width) \ `TEST(typ, width, 1) \ `TEST(typ signed, width, 1) \ `TEST(typ unsigned, width, 0) `define TEST_INTEGER_VECTOR(typ) \ `TEST(typ, 1, 0) \ `TEST(typ signed, 1, 1) \ `TEST(typ unsigned, 1, 0) \ `TEST(typ [1:0], 2, 0) \ `TEST(typ signed [1:0], 2, 1) \ `TEST(typ unsigned [1:0], 2, 0) module top;",21
struct_access.sv,84,assert (fail === 0);,1
net_types.sv,19,assert (wire_logic_0 == 0);,1
net_types.sv,20,assert (wire_logic_1 == 1);,1
net_types.sv,21,assert (wand_logic_0 == 0);,1
net_types.sv,22,assert (wand_logic_1 == 1);,1
net_types.sv,23,assert (wor_logic_0 == 0);,1
net_types.sv,24,assert (wor_logic_1 == 1);,1
net_types.sv,26,assert (wire_integer == 4'b1001);,1
net_types.sv,27,assert (wand_integer == 4'b1000);,1
net_types.sv,28,assert (wor_integer == 4'b1011);,1
net_types.sv,30,assert (wire_typename == 4'b1001);,1
net_types.sv,31,assert (wand_typename == 4'b1000);,1
net_types.sv,32,assert (wor_typename == 4'b1011);,1
unbased_unsized.sv,27,assert (o01 === {64 {1'b0}});,1
unbased_unsized.sv,28,assert (o02 === {64 {1'b1}});,1
unbased_unsized.sv,29,assert (o03 === {64 {1'bx}});,1
unbased_unsized.sv,30,assert (o04 === {64 {1'bz}});,1
unbased_unsized.sv,31,"assert (o05 === {61'b0, 3'b000});",1
unbased_unsized.sv,32,"assert (o06 === {61'b0, 3'b111});",1
unbased_unsized.sv,33,"assert (o07 === {61'b0, 3'bxxx});",1
unbased_unsized.sv,34,"assert (o08 === {61'b0, 3'bzzz});",1
unbased_unsized.sv,35,assert (o09 === {64 {1'b0}});,1
unbased_unsized.sv,36,assert (o10 === {64 {1'b1}});,1
unbased_unsized.sv,37,assert (o11 === {64 {1'bx}});,1
unbased_unsized.sv,38,assert (o12 === {64 {1'bz}});,1
prefix.sv,12,assert (1 == a);,1
prefix.sv,13,assert (1 == blk1.a);,1
prefix.sv,14,assert (1 == top.blk1.a);,1
prefix.sv,15,assert (i == b);,1
prefix.sv,16,assert (i == blk2[i].b);,1
prefix.sv,17,assert (i == blk1.blk2[i].b);,1
prefix.sv,18,assert (i == top.blk1.blk2[i].b);,1
prefix.sv,19,assert (i == blk2[x].b);,1
prefix.sv,20,assert (i == blk1.blk2[x].b);,1
prefix.sv,21,assert (i == top.blk1.blk2[x].b);,1
prefix.sv,22,assert (j == c);,1
prefix.sv,23,assert (j == blk3[j].c);,1
prefix.sv,24,assert (j == blk2[x].blk3[j].c);,1
prefix.sv,25,assert (j == blk1.blk2[x].blk3[j].c);,1
prefix.sv,26,assert (j == top.blk1.blk2[x].blk3[j].c);,1
prefix.sv,27,assert (j == c);,1
prefix.sv,28,assert (j == blk3[y].c);,1
prefix.sv,29,assert (j == blk2[x].blk3[y].c);,1
prefix.sv,30,assert (j == blk1.blk2[x].blk3[y].c);,1
prefix.sv,31,assert (j == top.blk1.blk2[x].blk3[y].c);,1
prefix.sv,32,assert (j == top.blk1.blk2[x].blk3[y].c[0]);,1
prefix.sv,33,assert (0 == top.blk1.blk2[x].blk3[y].c[1]);,1
prefix.sv,34,assert (0 == top.blk1.blk2[x].blk3[y].c[j]);,1
prefix.sv,38,assert (1 == a);,1
prefix.sv,39,assert (1 == blk1.a);,1
prefix.sv,40,assert (1 == top.blk1.a);,1
prefix.sv,41,assert (i == b);,1
prefix.sv,42,assert (i == blk2[i].b);,1
prefix.sv,43,assert (i == blk1.blk2[i].b);,1
prefix.sv,44,assert (i == top.blk1.blk2[i].b);,1
prefix.sv,45,assert (0 == blk3[0].c);,1
prefix.sv,46,assert (0 == blk2[i].blk3[0].c);,1
prefix.sv,47,assert (0 == blk1.blk2[i].blk3[0].c);,1
prefix.sv,48,assert (0 == top.blk1.blk2[i].blk3[0].c);,1
prefix.sv,49,assert (1 == blk3[1].c);,1
prefix.sv,50,assert (1 == blk2[i].blk3[1].c);,1
prefix.sv,51,assert (1 == blk1.blk2[i].blk3[1].c);,1
prefix.sv,52,assert (1 == top.blk1.blk2[i].blk3[1].c);,1
prefix.sv,56,assert (1 == a);,1
prefix.sv,57,assert (1 == blk1.a);,1
prefix.sv,58,assert (1 == top.blk1.a);,1
prefix.sv,59,assert (0 == blk2[0].b);,1
prefix.sv,60,assert (0 == blk1.blk2[0].b);,1
prefix.sv,61,assert (0 == top.blk1.blk2[0].b);,1
prefix.sv,62,assert (1 == blk2[1].b);,1
prefix.sv,63,assert (1 == blk1.blk2[1].b);,1
prefix.sv,64,assert (1 == top.blk1.blk2[1].b);,1
prefix.sv,65,assert (0 == blk2[0].blk3[0].c);,1
prefix.sv,66,assert (0 == blk1.blk2[0].blk3[0].c);,1
prefix.sv,67,assert (0 == top.blk1.blk2[0].blk3[0].c);,1
prefix.sv,68,assert (1 == blk2[0].blk3[1].c);,1
prefix.sv,69,assert (1 == blk1.blk2[0].blk3[1].c);,1
prefix.sv,70,assert (1 == top.blk1.blk2[0].blk3[1].c);,1
prefix.sv,71,assert (0 == blk2[1].blk3[0].c);,1
prefix.sv,72,assert (0 == blk1.blk2[1].blk3[0].c);,1
prefix.sv,73,assert (0 == top.blk1.blk2[1].blk3[0].c);,1
prefix.sv,74,assert (1 == blk2[1].blk3[1].c);,1
prefix.sv,75,assert (1 == blk1.blk2[1].blk3[1].c);,1
prefix.sv,76,assert (1 == top.blk1.blk2[1].blk3[1].c);,1
prefix.sv,80,assert (1 == blk1.a);,1
prefix.sv,81,assert (1 == top.blk1.a);,1
prefix.sv,82,assert (0 == blk1.blk2[0].b);,1
prefix.sv,83,assert (0 == top.blk1.blk2[0].b);,1
prefix.sv,84,assert (1 == blk1.blk2[1].b);,1
prefix.sv,85,assert (1 == top.blk1.blk2[1].b);,1
prefix.sv,86,assert (0 == blk1.blk2[0].blk3[0].c);,1
prefix.sv,87,assert (0 == top.blk1.blk2[0].blk3[0].c);,1
prefix.sv,88,assert (1 == blk1.blk2[0].blk3[1].c);,1
prefix.sv,89,assert (1 == top.blk1.blk2[0].blk3[1].c);,1
prefix.sv,90,assert (0 == blk1.blk2[1].blk3[0].c);,1
prefix.sv,91,assert (0 == top.blk1.blk2[1].blk3[0].c);,1
prefix.sv,92,assert (1 == blk1.blk2[1].blk3[1].c);,1
prefix.sv,93,assert (1 == top.blk1.blk2[1].blk3[1].c);,1
package_task_func.sv,26,assert property (a == 2);,1
package_task_func.sv,27,assert property (b == 9);,1
package_task_func.sv,28,assert property (c == 8);,1
package_task_func.sv,29,assert property (d == 16);,1
param_no_default.sv,32,assert (a1 == 0);,1
param_no_default.sv,33,assert (b1 == 1);,1
param_no_default.sv,34,assert (c1 == 2);,1
param_no_default.sv,35,assert (d1 == 3);,1
param_no_default.sv,37,assert (a2 == 1);,1
param_no_default.sv,38,assert (b2 == 1);,1
param_no_default.sv,39,assert (c2 == 4);,1
param_no_default.sv,40,assert (d3 == 3);,1
param_no_default.sv,42,assert (a3 == 1);,1
param_no_default.sv,43,assert (b3 == 0);,1
param_no_default.sv,44,assert (c3 == 5);,1
param_no_default.sv,45,assert (d3 == 3);,1
param_no_default.sv,47,assert (a4 == 1);,1
param_no_default.sv,48,assert (b4 == 0);,1
param_no_default.sv,49,assert (c4 == 9);,1
param_no_default.sv,50,assert (d4 == 10);,1
counter.sv,19,assume property (down |-> !up);,1
example.sv,15,assume (cnt != 10);,1
example.sv,16,assert (cnt != 15);,1
lvc_apb_if.sv,118,"assert property(p_paddr_no_x) else `uvm_error(""ASSERT"", ""PADDR is unknown when PSEL is high"") property p_psel_rose_next_cycle_penable_rise;",3
lvc_apb_if.sv,123,"assert property(p_psel_rose_next_cycle_penable_rise) else `uvm_error(""ASSERT"", ""PENABLE not rose after 1 cycle PSEL rose"") property p_penable_rose_next_cycle_fall;",3
lvc_apb_if.sv,128,"assert property(p_penable_rose_next_cycle_fall) else `uvm_error(""ASSERT"", ""PENABLE not fall after 1 cycle PENABLE rose"") property p_pwdata_stable_during_trans_phase;",3
lvc_apb_if.sv,133,"assert property(p_pwdata_stable_during_trans_phase) else `uvm_error(""ASSERT"", ""PWDATA not stable during transaction phase"") property p_paddr_stable_until_next_trans;",3
lvc_apb_if.sv,138,"assert property(p_paddr_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PADDR not stable until next transaction start"") property p_pwrite_stable_until_next_trans;",3
lvc_apb_if.sv,144,"assert property(p_pwrite_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PWRITE not stable until next transaction start"") property p_prdata_available_once_penable_rose;",3
lvc_apb_if.sv,150,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,159,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,162,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,164,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,167,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,169,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,173,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,175,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,179,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,181,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,184,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,186,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,189,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,191,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,195,cover property(p_read_write_read_burst_trans);,1
gcd.sv,166,assert(io_o == 8'h18); // @[gcd.scala 50:11] end // if (io_done & resetCounter_notChaos & _T_18) begin assert(io_done); // @[gcd.scala 59:11] end end endmodule,8
gcdtest.sv,152,"assert(io_done); // @[gcd.scala 59:11] end end endmodule module gcdtest( input clock, input reset );",8
gcdtest.sv,238,assert(dut_io_o == 8'hc); // @[gcd.scala 72:11] end // if (_T_2 & _T_4) begin assert(~dut_io_done); // @[gcd.scala 73:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h6 & _T_4) begin assert(dut_io_o == 8'h4); // @[gcd.scala 75:11] end // if (_T_14 & _T_4) begin assert(dut_io_done); // @[gcd.scala 76:11] end end endmodule,16
counter.sv,161,assert(count < 8'hb); // @[counter.scala 15:9] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h0 & _T_3) begin assert(count == 8'h0); // @[counter.scala 17:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h1 & _T_3) begin assert(count == 8'h1); // @[counter.scala 18:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h2 & _T_3) begin assert(count == 8'h2); // @[counter.scala 19:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h3 & _T_3) begin assert(count == 8'h3); // @[counter.scala 20:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h4 & _T_3) begin assert(count == 8'h4); // @[counter.scala 21:11],21
counter.sv,185,assert(_T_5); // @[counter.scala 22:11] end end endmodule,4
gcdtest.sv,152,"assert(io_done); // @[gcd.scala 59:11] end end endmodule module gcdtest( input clock, input reset );",8
gcdtest.sv,238,assert(dut_io_o == 8'hc); // @[gcd.scala 72:11] end // if (_T_2 & _T_4) begin assert(~dut_io_done); // @[gcd.scala 73:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h6 & _T_4) begin assert(dut_io_o == 8'h4); // @[gcd.scala 75:11] end // if (_T_14 & _T_4) begin assert(dut_io_done); // @[gcd.scala 76:11] end end endmodule,16
buffer.sv,274,assume(out_full & _T_3); // @[buffer.scala 51:9] end // if (_T_8) begin assume(out_empty & _T_1); // @[buffer.scala 52:9] end // if (mark_vld & _T_8) begin assume(io_in_wdata == 8'h1); // @[buffer.scala 74:11] end // if (_T_23 & io_in_wr & _T_8) begin assume(io_in_wdata == 8'h0); // @[buffer.scala 77:13] end // if (flag & _T_8) begin assume(~mark_vld); // @[buffer.scala 81:11] end // if (resetCounter_notChaos & _T_8) begin assert(check_vld & flag); // @[buffer.scala 84:9],21
memory.sv,186,assert(io_out_data == random_data); // @[memory.scala 62:11] end end endmodule,4
gcd.sv,166,assert(io_o == 8'h18); // @[gcd.scala 50:11] end // if (io_done & resetCounter_notChaos & _T_18) begin assert(io_done); // @[gcd.scala 59:11] end end endmodule,8
gcdtest.sv,152,"assert(io_done); // @[gcd.scala 59:11] end end endmodule module gcdtest( input clock, input reset );",8
gcdtest.sv,238,assert(dut_io_o == 8'hc); // @[gcd.scala 72:11] end // if (_T_2 & _T_4) begin assert(~dut_io_done); // @[gcd.scala 73:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h6 & _T_4) begin assert(dut_io_o == 8'h4); // @[gcd.scala 75:11] end // if (_T_14 & _T_4) begin assert(dut_io_done); // @[gcd.scala 76:11] end end endmodule,16
counter.sv,161,assert(count < 8'hb); // @[counter.scala 15:9] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h0 & _T_3) begin assert(count == 8'h0); // @[counter.scala 17:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h1 & _T_3) begin assert(count == 8'h1); // @[counter.scala 18:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h2 & _T_3) begin assert(count == 8'h2); // @[counter.scala 19:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h3 & _T_3) begin assert(count == 8'h3); // @[counter.scala 20:11] end // if (resetCounter_notChaos & resetCounter_timeSinceReset == 32'h4 & _T_3) begin assert(count == 8'h4); // @[counter.scala 21:11],21
counter.sv,185,assert(_T_5); // @[counter.scala 22:11] end end endmodule,4
memory.sv,186,assert(io_out_data == random_data); // @[memory.scala 62:11] end end endmodule,4
vortex_afu.sv,806,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
ifmap_buffer_tb.sv,202,assert(|uut.chosen_dequeue);,1
assert_cond.sv,21,"assert property(p) else $error(""ASSERT COND : %s"",MSG);",1
tb_counter.sv,41,assert (cnt == 17);,1
tb_counter.sv,50,assert (cnt <= 269);,1
tb_counter.sv,51,assert (cnt >= -263);,1
tb_counter.sv,52,assert (cnt != -47);,1
tb_counter.sv,41,assert (cnt == 17);,1
tb_counter.sv,50,assert (cnt <= 269);,1
tb_counter.sv,51,assert (cnt >= -263);,1
tb_counter.sv,52,assert (cnt != -47);,1
vortex_afu.sv,797,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
APB_TB.sv,74,assert(tr.randomize);,1
APB_TB.sv,101,assert(tr.randomize);,1
APB_TB.sv,131,assert(tr.randomize);,1
APB_TB.sv,136,assert(tr.randomize);,1
APB_TB.sv,164,assert(tr.randomize);,1
APB_TB.sv,175,assert(tr.randomize);,1
APB_TB.sv,203,assert(tr.randomize);,1
APB_TB.sv,232,assert(tr.randomize);,1
APB_TB.sv,260,assert(tr.randomize);,1
bistable_domain_cross_tb.sv,93,assert(out == 2'b11);,1
bistable_domain_cross_tb.sv,96,assert(out == 2'b11);,1
bistable_domain_cross_tb.sv,105,assert(out == 2'b00);,1
monostable_domain_cross_tb.sv,105,assert(out0 == 0);,1
monostable_domain_cross_tb.sv,121,assert(out1 == 0);,1
sd_data_serial_host_tb.sv,142,assert(busy == 1);,1
sd_data_serial_host_tb.sv,143,assert(crc_ok == !crc_failure);,1
sd_data_serial_host_tb.sv,192,assert(DAT_oe_o == 1);,1
sd_data_serial_host_tb.sv,200,assert(DAT_oe_o == 1);,1
sd_data_serial_host_tb.sv,215,assert(aligned_data == received_data);,1
sd_data_serial_host_tb.sv,223,assert(DAT_oe_o == 1);,1
sd_data_serial_host_tb.sv,228,assert(crc_in[i] == crc[i]);,1
sd_data_serial_host_tb.sv,231,assert(DAT_oe_o == 1);,1
sd_data_serial_host_tb.sv,232,assert(DAT_dat_o == DATA_END);,1
sd_data_serial_host_tb.sv,234,assert(DAT_oe_o == 0);,1
sd_data_serial_host_tb.sv,248,assert(sd_data_busy == 0);,1
sd_data_serial_host_tb.sv,252,assert(sd_data_busy == 1);,1
sd_data_serial_host_tb.sv,254,assert(busy == 1);,1
sd_data_serial_host_tb.sv,256,assert(crc_ok == 1);,1
sd_data_serial_host_tb.sv,258,assert(crc_ok == 0);,1
sd_data_serial_host_tb.sv,334,assert(we == 0);,1
sd_data_serial_host_tb.sv,337,assert(we == 1);,1
sd_data_serial_host_tb.sv,351,assert(we == 0);,1
sd_data_serial_host_tb.sv,354,assert(we == 1);,1
sd_data_serial_host_tb.sv,379,assert(rd == 1);,1
sd_data_serial_host_tb.sv,390,assert(rd == 1);,1
sd_data_serial_host_tb.sv,392,assert(rd == 0);,1
sd_data_serial_host_tb.sv,395,assert(rd == 0);,1
sd_data_serial_host_tb.sv,403,assert(rd == 0);,1
sd_data_serial_host_tb.sv,416,assert(rd == 0);,1
sd_data_serial_host_tb.sv,426,assert(rd == 0);,1
sd_data_serial_host_tb.sv,438,assert(bsize > 0 && bcnt > 0);,1
sd_data_serial_host_tb.sv,453,assert(busy == 1);,1
sd_data_serial_host_tb.sv,476,assert(busy == 0);,1
sd_data_serial_host_tb.sv,488,assert(bsize > 0 && bcnt > 0);,1
sd_data_serial_host_tb.sv,503,assert(busy == 1);,1
sd_data_serial_host_tb.sv,524,assert(busy == 0);,1
sd_data_serial_host_tb.sv,534,assert(busy == 0);,1
sd_data_serial_host_tb.sv,581,assert(rd == 0);,1
sd_data_serial_host_tb.sv,582,assert(we == 0);,1
sd_data_serial_host_tb.sv,583,assert(DAT_oe_o == 0);,1
sd_data_serial_host_tb.sv,584,assert(busy == 0);,1
sd_data_serial_host_tb.sv,758,assert(busy == 1);,1
sd_fifo_filler_tb.sv,132,assert(test_mem[wb_idx] == wbm_dat_o);,1
sd_fifo_filler_tb.sv,133,assert(wbm_adr_o == adr_i + 4*wb_idx);,1
sd_fifo_filler_tb.sv,142,assert(wbm_adr_o == adr_i + 4*wb_idx);,1
sd_fifo_filler_tb.sv,174,assert(dat_o == test_mem[fifo_drv_idx]);,1
sd_fifo_filler_tb.sv,210,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,211,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,212,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,213,assert(wb_full_o == 0);,1
sd_fifo_filler_tb.sv,215,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,216,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,217,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,218,assert(wb_full_o == 0);,1
sd_fifo_filler_tb.sv,219,assert(sd_empty_o == 1);,1
sd_fifo_filler_tb.sv,230,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,231,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,232,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,233,assert(wb_full_o == 0);,1
sd_fifo_filler_tb.sv,242,assert(sd_full_o == 1);,1
sd_fifo_filler_tb.sv,243,assert(wb_empty_o == 0);,1
sd_fifo_filler_tb.sv,248,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,249,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,250,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,254,assert(sd_full_o == 0);,1
sd_fifo_filler_tb.sv,266,assert(sd_full_o == 0);,1
sd_fifo_filler_tb.sv,267,assert(wb_empty_o == 0);,1
sd_fifo_filler_tb.sv,273,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,274,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,275,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,276,assert(sd_full_o == 0);,1
sd_fifo_filler_tb.sv,284,assert(sd_empty_o == 0);,1
sd_fifo_filler_tb.sv,285,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,286,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,287,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,289,assert(sd_empty_o == 0);,1
sd_fifo_filler_tb.sv,290,assert(wbm_we_o == 0);,1
sd_fifo_filler_tb.sv,291,assert(wbm_cyc_o == 0);,1
sd_fifo_filler_tb.sv,292,assert(wbm_stb_o == 0);,1
sd_fifo_filler_tb.sv,303,assert(wb_full_o == 0);,1
sd_cmd_master_tb.sv,122,assert(setting_o == 0);,1
sd_cmd_master_tb.sv,123,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,124,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,126,assert(setting_o == 0);,1
sd_cmd_master_tb.sv,127,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,128,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,141,assert(start_xfr_o == 1);,1
sd_cmd_master_tb.sv,142,assert(setting_o == 2'b00);,1
sd_cmd_master_tb.sv,143,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,144,assert(cmd_o == 40'h4101234567);,1
sd_cmd_master_tb.sv,149,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,150,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,151,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,156,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,168,assert(start_xfr_o == 1);,1
sd_cmd_master_tb.sv,169,assert(setting_o == 2'b01);,1
sd_cmd_master_tb.sv,170,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,171,assert(cmd_o == 40'h45deadbeef);,1
sd_cmd_master_tb.sv,178,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,179,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,180,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,181,assert(response_0_o == 32'h01020304);,1
sd_cmd_master_tb.sv,182,assert(response_1_o == 32'h05060708);,1
sd_cmd_master_tb.sv,183,assert(response_2_o == 32'h090a0b0c);,1
sd_cmd_master_tb.sv,184,assert(response_3_o == 32'h0d0e0f00);,1
sd_cmd_master_tb.sv,197,assert(int_status_o == 0); //status should be reset by ne command assert(start_xfr_o == 1);,2
sd_cmd_master_tb.sv,199,assert(setting_o == 2'b11);,1
sd_cmd_master_tb.sv,200,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,201,assert(cmd_o == 40'h55bad0dad0);,1
sd_cmd_master_tb.sv,208,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,209,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,210,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,211,assert(response_0_o == 32'h11121314);,1
sd_cmd_master_tb.sv,212,assert(response_1_o == 32'h15161718);,1
sd_cmd_master_tb.sv,213,assert(response_2_o == 32'h191a1b1c);,1
sd_cmd_master_tb.sv,214,assert(response_3_o == 32'h1d1e1f00);,1
sd_cmd_master_tb.sv,219,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,239,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,253,assert(int_status_o == 5'b01011);,1
sd_cmd_master_tb.sv,269,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,283,assert(int_status_o == 5'b10011);,1
sd_cmd_master_tb.sv,301,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,315,assert(int_status_o == 5'b11011);,1
sd_cmd_master_tb.sv,327,assert(int_status_o == 5'b00110);,1
sd_cmd_master_tb.sv,328,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,330,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,342,assert(start_xfr_o == 1);,1
sd_cmd_master_tb.sv,343,assert(setting_o == 2'b01);,1
sd_cmd_master_tb.sv,344,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,345,assert(cmd_o == 40'h45deadbeef);,1
sd_cmd_master_tb.sv,352,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,353,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,354,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,355,assert(response_0_o == 32'h01020304);,1
sd_cmd_master_tb.sv,356,assert(response_1_o == 32'h05060708);,1
sd_cmd_master_tb.sv,357,assert(response_2_o == 32'h090a0b0c);,1
sd_cmd_master_tb.sv,358,assert(response_3_o == 32'h0d0e0f00);,1
sd_cmd_master_tb.sv,376,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,378,assert(int_status_o == 0);,1
sd_cmd_master_tb.sv,381,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,394,assert(start_xfr_o == 1);,1
sd_cmd_master_tb.sv,395,assert(setting_o == 2'b01);,1
sd_cmd_master_tb.sv,396,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,397,assert(cmd_o == 40'h45deadbeef);,1
sd_cmd_master_tb.sv,404,assert(start_xfr_o == 0);,1
sd_cmd_master_tb.sv,405,assert(go_idle_o == 0);,1
sd_cmd_master_tb.sv,406,assert(int_status_o == 1);,1
sd_cmd_master_tb.sv,407,assert(response_0_o == 32'h01020304);,1
sd_cmd_master_tb.sv,408,assert(response_1_o == 32'h05060708);,1
sd_cmd_master_tb.sv,409,assert(response_2_o == 32'h090a0b0c);,1
sd_cmd_master_tb.sv,410,assert(response_3_o == 32'h0d0e0f00);,1
sd_controller_top_tb.sv,246,assert(wb_s_mon_log_file_desc >= 2);,1
sd_controller_top_tb.sv,253,assert(wb_m_mon_log_file_desc >= 2);,1
sd_controller_top_tb.sv,355,assert(0); \ x = 0; \ return; \ end `define ASSERT_DATA_STATUS(x) assert(x == 1) \ else begin \ assert(0); \ x = 0; \ return; \ end `define ASSERT_TEST(x) assert(x == 1) passed_tests++; \ else begin \ failed_tests++; \ assert(0); \ return; \ end `define ASSERT(x) assert(x) else return;,20
sd_controller_top_tb.sv,381,assert(reg_num >= 0 && reg_num < 4);,1
sd_controller_top_tb.sv,734,assert(write_status`CYC_ACTUAL_TRANSFER == size_i);,1
sd_controller_top_tb.sv,779,assert(read_status`CYC_ACTUAL_TRANSFER == size_i);,1
edge_detect_tb.sv,82,assert(rise == 1);,1
edge_detect_tb.sv,83,assert(fall == 0);,1
edge_detect_tb.sv,87,assert(rise == 0);,1
edge_detect_tb.sv,88,assert(fall == 1);,1
edge_detect_tb.sv,91,assert(rise == 0);,1
edge_detect_tb.sv,92,assert(fall == 0);,1
edge_detect_tb.sv,94,assert(rise == 0);,1
edge_detect_tb.sv,95,assert(fall == 0);,1
edge_detect_tb.sv,100,assert(rise == 1);,1
edge_detect_tb.sv,101,assert(fall == 0);,1
edge_detect_tb.sv,103,assert(rise == 0);,1
edge_detect_tb.sv,104,assert(fall == 0);,1
edge_detect_tb.sv,106,assert(rise == 0);,1
edge_detect_tb.sv,107,assert(fall == 0);,1
edge_detect_tb.sv,111,assert(rise == 0);,1
edge_detect_tb.sv,112,assert(fall == 1);,1
edge_detect_tb.sv,114,assert(rise == 0);,1
edge_detect_tb.sv,115,assert(fall == 0);,1
edge_detect_tb.sv,117,assert(rise == 0);,1
edge_detect_tb.sv,118,assert(fall == 0);,1
sd_controller_wb_tb.sv,147,assert(wb_ack_o == 0);,1
sd_controller_wb_tb.sv,203,assert(wb_dat_o == 0);,1
sd_controller_wb_tb.sv,204,assert(wb_ack_o == 0);,1
sd_controller_wb_tb.sv,205,assert(cmd_start == 0);,1
sd_controller_wb_tb.sv,206,assert(argument_reg == 0);,1
sd_controller_wb_tb.sv,207,assert(command_reg == 0);,1
sd_controller_wb_tb.sv,208,assert(software_reset_reg == 0);,1
sd_controller_wb_tb.sv,209,assert(cmd_timeout_reg == 0);,1
sd_controller_wb_tb.sv,210,assert(data_timeout_reg == 0);,1
sd_controller_wb_tb.sv,211,assert(block_size_reg == `RESET_BLOCK_SIZE);,1
sd_controller_wb_tb.sv,212,assert(controll_setting_reg == 0);,1
sd_controller_wb_tb.sv,213,assert(cmd_int_status_reg == 0);,1
sd_controller_wb_tb.sv,214,assert(cmd_int_enable_reg == 0);,1
sd_controller_wb_tb.sv,215,assert(clock_divider_reg == `RESET_CLK_DIV);,1
sd_controller_wb_tb.sv,216,assert(data_int_enable_reg == 0);,1
sd_controller_wb_tb.sv,217,assert(data_int_rst == 0);,1
sd_controller_wb_tb.sv,218,assert(cmd_int_rst == 0);,1
sd_controller_wb_tb.sv,219,assert(block_count_reg == 0);,1
sd_controller_wb_tb.sv,220,assert(dma_addr_reg == 0);,1
sd_controller_wb_tb.sv,226,assert(argument_reg == 32'h01020304);,1
sd_controller_wb_tb.sv,227,assert(command_reg != `CMD_REG_SIZE'h0304);,1
sd_controller_wb_tb.sv,232,assert(cmd_start == 0);,1
sd_controller_wb_tb.sv,238,assert(command_reg == `CMD_REG_SIZE'h0405);,1
sd_controller_wb_tb.sv,258,assert(controll_setting_reg == 1'h1);,1
sd_controller_wb_tb.sv,262,assert(cmd_timeout_reg == `CMD_TIMEOUT_W'h0b0c);,1
sd_controller_wb_tb.sv,266,assert(data_timeout_reg == `DATA_TIMEOUT_W'h0c0b);,1
sd_controller_wb_tb.sv,270,assert(clock_divider_reg == 8'h0d);,1
sd_controller_wb_tb.sv,274,assert(software_reset_reg == 1'h1);,1
sd_controller_wb_tb.sv,290,assert(cmd_int_rst == 0);,1
sd_controller_wb_tb.sv,299,assert(cmd_int_enable_reg == 5'h15);,1
sd_controller_wb_tb.sv,309,assert(data_int_rst == 0);,1
sd_controller_wb_tb.sv,318,assert(data_int_enable_reg == 3'h5);,1
sd_controller_wb_tb.sv,322,assert(block_size_reg == 12'habc);,1
sd_controller_wb_tb.sv,326,assert(block_count_reg == 16'h1011);,1
sd_controller_wb_tb.sv,330,assert(dma_addr_reg == 32'h11121314);,1
sd_controller_wb_tb.sv,337,assert(dma_addr_reg == 32'hffffff04);,1
sd_controller_wb_tb.sv,342,assert(block_count_reg == `BLKCNT_W'h00ff);,1
byte_en_reg_tb.sv,104,assert(q == 0);,1
byte_en_reg_tb.sv,113,assert(q == 0);,1
sd_cmd_serial_host_tb.sv,94,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,97,assert(cmd == command);,1
sd_cmd_serial_host_tb.sv,100,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,103,assert(crc_in == crc);,1
sd_cmd_serial_host_tb.sv,104,assert(cmd_out_o == CMD_END);,1
sd_cmd_serial_host_tb.sv,105,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,107,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,122,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,127,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,131,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,176,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,178,assert(crc_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,179,assert(index_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,180,assert(cmd_out_o == 1);,1
sd_cmd_serial_host_tb.sv,181,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,183,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,185,assert(crc_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,186,assert(index_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,187,assert(cmd_out_o == 1);,1
sd_cmd_serial_host_tb.sv,188,assert(cmd_oe_o == 1);,1
sd_cmd_serial_host_tb.sv,190,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,192,assert(crc_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,193,assert(index_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,194,assert(cmd_oe_o == 0);,1
sd_cmd_serial_host_tb.sv,212,assert(crc_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,213,assert(index_ok_o == 0);,1
sd_cmd_serial_host_tb.sv,229,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,235,assert(response_o[119:88] == response[119:88]);,1
sd_cmd_serial_host_tb.sv,236,assert(crc_ok_o == 1);,1
sd_cmd_serial_host_tb.sv,237,assert(index_ok_o == 1);,1
sd_cmd_serial_host_tb.sv,253,assert(finish_o == 0);,1
sd_cmd_serial_host_tb.sv,259,assert(response_o == response[119:0]);,1
sd_cmd_serial_host_tb.sv,260,assert(crc_ok_o == 1);,1
sd_cmd_serial_host_tb.sv,261,assert(index_ok_o == 1);,1
sd_data_master_tb.sv,77,assert(int_status_o == 0);,1
sd_data_master_tb.sv,90,assert(d_write_o == 0);,1
sd_data_master_tb.sv,91,assert(d_read_o == 0);,1
sd_data_master_tb.sv,92,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,98,assert(d_read_o == 0);,1
sd_data_master_tb.sv,99,assert(start_tx_fifo_o == 1);,1
sd_data_master_tb.sv,100,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,103,assert(d_write_o == 0);,1
sd_data_master_tb.sv,112,assert(d_write_o == 0);,1
sd_data_master_tb.sv,113,assert(d_read_o == 0);,1
sd_data_master_tb.sv,116,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,117,assert(int_status_o == expected_status);,1
sd_data_master_tb.sv,164,assert(d_write_o == 0);,1
sd_data_master_tb.sv,165,assert(start_tx_fifo_o == 0);,1
sd_data_master_tb.sv,168,assert(d_read_o == 0);,1
sd_data_master_tb.sv,177,assert(d_write_o == 0);,1
sd_data_master_tb.sv,178,assert(d_read_o == 0);,1
sd_data_master_tb.sv,181,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,182,assert(int_status_o == expected_status);,1
sd_data_master_tb.sv,223,assert(d_write_o == 1);,1
sd_data_master_tb.sv,224,assert(d_read_o == 1);,1
sd_data_master_tb.sv,228,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,229,assert(int_status_o == expected_status);,1
sd_data_master_tb.sv,240,assert(d_write_o == 1);,1
sd_data_master_tb.sv,241,assert(d_read_o == 1);,1
sd_data_master_tb.sv,245,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,246,assert(int_status_o == expected_status);,1
sd_data_master_tb.sv,297,assert(d_write_o == 0);,1
sd_data_master_tb.sv,298,assert(d_read_o == 0);,1
sd_data_master_tb.sv,299,assert(start_tx_fifo_o == 0);,1
sd_data_master_tb.sv,300,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,301,assert(int_status_o == 0);,1
sd_data_master_tb.sv,303,assert(d_write_o == 0);,1
sd_data_master_tb.sv,304,assert(d_read_o == 0);,1
sd_data_master_tb.sv,305,assert(start_tx_fifo_o == 0);,1
sd_data_master_tb.sv,306,assert(start_rx_fifo_o == 0);,1
sd_data_master_tb.sv,307,assert(int_status_o == 0);,1
sd_data_xfer_trig_tb.sv,88,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,89,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,92,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,93,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,100,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,101,assert(start_rx_o == 1);,1
sd_data_xfer_trig_tb.sv,106,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,107,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,111,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,112,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,115,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,116,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,122,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,123,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,129,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,130,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,134,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,135,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,139,assert(start_tx_o == 1);,1
sd_data_xfer_trig_tb.sv,140,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,143,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,144,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,150,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,151,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,158,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,159,assert(start_rx_o == 1);,1
sd_data_xfer_trig_tb.sv,164,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,165,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,169,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,170,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,173,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,174,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,180,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,181,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,187,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,188,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,192,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,193,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,197,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,198,assert(start_rx_o == 0);,1
sd_data_xfer_trig_tb.sv,201,assert(start_tx_o == 0);,1
sd_data_xfer_trig_tb.sv,202,assert(start_rx_o == 0);,1
easyprops.sv,172,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
easyprops.sv,183,assert(S_AXI_RDATA == 0);,1
easyprops.sv,323,assert property (IDATA_HELD_WHEN_NOT_READY);,1
easyprops.sv,327,assert property (IDATA_HELD_WHEN_NOT_READY);,1
easyprops.sv,332,assert property (IDATA_HELD_WHEN_NOT_READY);,1
easyaxil_tb.sv,229,assert(S_AXI_AWREADY == uut_AWREADY);,1
easyaxil_tb.sv,232,assert(S_AXI_WREADY == uut_WREADY);,1
easyaxil_tb.sv,235,assert(S_AXI_ARREADY == uut_ARREADY);,1
easyaxil_tb.sv,237,assert(S_AXI_BVALID == uut_BVALID);,1
easyaxil_tb.sv,238,assert(S_AXI_RVALID == uut_RVALID);,1
easyaxil_tb.sv,241,assert( S_AXI_BRESP == uut_BRESP );,1
axi_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_join.sv,31,assert(in.AXI_ID_WIDTH <= out.AXI_ID_WIDTH );,1
axi_join.sv,32,assert(in.AXI_USER_WIDTH == out.AXI_USER_WIDTH);,1
axi_lite_join.sv,29,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_join.sv,30,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_test.sv,1784,assert (b_beat.b_id == id);,1
axi_test.sv,1842,assert (r_beat.r_id == id);,1
axi_test.sv,1843,assert (r_beat.r_resp == axi_pkg::RESP_OKAY);,1
axi_test.sv,1844,assert (r_beat.r_last);,1
axi_modify_address.sv,157,assert(AXI_SLV_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,158,assert(AXI_MST_PORT_ADDR_WIDTH > 0);,1
axi_modify_address.sv,159,assert(AXI_DATA_WIDTH > 0);,1
axi_modify_address.sv,160,assert(AXI_ID_WIDTH > 0);,1
axi_multicut.sv,86,assert(NoCuts >= 0);,1
axi_lite_to_axi.sv,109,assert(in.AXI_ADDR_WIDTH == out.AXI_ADDR_WIDTH);,1
axi_lite_to_axi.sv,110,assert(in.AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
axi_lite_to_axi.sv,111,assert(AXI_DATA_WIDTH == out.AXI_DATA_WIDTH);,1
tb_axi_cdc.sv,212,assert (mst_b == exp_b);,1
tb_axi_cdc.sv,220,assert (mst_r == exp_r);,1
tb_axi_cdc.sv,241,assert (slv_aw == exp_aw);,1
tb_axi_cdc.sv,245,assert (slv_w == exp_w);,1
tb_axi_cdc.sv,252,assert (slv_ar == exp_ar);,1
tb_axi_lite_regs.sv,203,assert (master.r_resp == axi_pkg::RESP_OKAY);,1
tb_axi_lite_regs.sv,258,assert (master.w_strb[i] == wr_active[aw_idx+i]);,1
tb_axi_to_axi_lite.sv,169,assert (aw_cnt == w_cnt && w_cnt == b_cnt);,1
tb_axi_to_axi_lite.sv,170,assert (ar_cnt == r_cnt);,1
tb_axi_modify_address.sv,177,assert(rand_success);,1
tb_axi_modify_address.sv,181,assert(rand_success);,1
tb_axi_atop_filter.sv,212,assert (downstream.aw_atop == '0);,1
tb_axi_atop_filter.sv,304,assert (downstream.ar_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,305,assert (downstream.ar_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,306,assert (downstream.ar_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,307,assert (downstream.ar_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,308,assert (downstream.ar_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,309,assert (downstream.ar_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,310,assert (downstream.ar_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,311,assert (downstream.ar_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,312,assert (downstream.ar_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,313,assert (downstream.ar_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,320,assert (downstream.aw_id == exp_beat.ax_id);,1
tb_axi_atop_filter.sv,321,assert (downstream.aw_addr == exp_beat.ax_addr);,1
tb_axi_atop_filter.sv,322,assert (downstream.aw_len == exp_beat.ax_len);,1
tb_axi_atop_filter.sv,323,assert (downstream.aw_size == exp_beat.ax_size);,1
tb_axi_atop_filter.sv,324,assert (downstream.aw_burst == exp_beat.ax_burst);,1
tb_axi_atop_filter.sv,325,assert (downstream.aw_cache == exp_beat.ax_cache);,1
tb_axi_atop_filter.sv,326,assert (downstream.aw_prot == exp_beat.ax_prot);,1
tb_axi_atop_filter.sv,327,assert (downstream.aw_qos == exp_beat.ax_qos);,1
tb_axi_atop_filter.sv,328,assert (downstream.aw_region == exp_beat.ax_region);,1
tb_axi_atop_filter.sv,329,assert (downstream.aw_user == exp_beat.ax_user);,1
tb_axi_atop_filter.sv,335,assert (act_beat.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,336,assert (act_beat.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,337,assert (act_beat.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,338,assert (act_beat.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,343,assert (downstream.w_data == exp_beat.w_data);,1
tb_axi_atop_filter.sv,344,assert (downstream.w_strb == exp_beat.w_strb);,1
tb_axi_atop_filter.sv,345,assert (downstream.w_last == exp_beat.w_last);,1
tb_axi_atop_filter.sv,346,assert (downstream.w_user == exp_beat.w_user);,1
tb_axi_atop_filter.sv,366,assert (upstream.r_id == exp_beat.r_id);,1
tb_axi_atop_filter.sv,367,assert (upstream.r_data == exp_beat.r_data);,1
tb_axi_atop_filter.sv,368,assert (upstream.r_resp == exp_beat.r_resp);,1
tb_axi_atop_filter.sv,369,assert (upstream.r_last == exp_beat.r_last);,1
tb_axi_atop_filter.sv,370,assert (upstream.r_user == exp_beat.r_user);,1
tb_axi_atop_filter.sv,382,assert (upstream.b_id == exp_beat.b_id);,1
tb_axi_atop_filter.sv,383,assert (upstream.b_resp == exp_beat.b_resp);,1
tb_axi_atop_filter.sv,384,assert (upstream.b_user == exp_beat.b_user);,1
tb_axi_sim_mem.sv,111,assert(b_beat.b_resp == axi_pkg::RESP_OKAY);,1
tb_axi_addr_test.sv,240,"assume (mode inside {axi_pkg::BURST_FIXED, axi_pkg::BURST_INCR, axi_pkg::BURST_WRAP});",1
cdc_fifo_2phase.sv,44,assert(LOG_DEPTH > 0);,1
cdc_2phase_tb.sv,77,assert(tck_src > 0);,1
cdc_2phase_tb.sv,103,assert(tck_dst > 0);,1
rr_arb_tree_tb.sv,239,assert(exp_data === data_oup);,1
cdc_fifo_tb.sv,81,assert(tck_src > 0);,1
cdc_fifo_tb.sv,107,assert(tck_dst > 0);,1
graycode_tb.sv,24,assert(a == c);,1
find_first_one.sv,31,assert(WIDTH >= 0);,1
mem.sv,125,assert(proc2mem_addr[0] == 0);,1
mem.sv,129,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,143,assert(proc2mem_addr[0] == 0);,1
mem.sv,148,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,153,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,125,assert(proc2mem_addr[0] == 0);,1
mem.sv,129,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,143,assert(proc2mem_addr[0] == 0);,1
mem.sv,148,assert(proc2mem_addr[1:0] == 0);,1
mem.sv,153,assert(proc2mem_addr[1:0] == 0);,1
vortex_afu.sv,764,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
vortex_afu.sv,764,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
lab1_tb.sv,24,assert(HEX5 == 7'b1111111);,1
lab1_tb.sv,25,assert(HEX4 == 7'b1111111);,1
lab1_tb.sv,26,assert(HEX3 == 7'b1111111);,1
lab1_tb.sv,27,assert(HEX2 == 7'b1111111);,1
lab1_tb.sv,28,assert(HEX1 == 7'b1111000);,1
lab1_tb.sv,29,assert(HEX0 == 7'b0110000);,1
lab1_tb.sv,34,assert(HEX5 == 7'b0000011);,1
lab1_tb.sv,35,assert(HEX4 == 7'b0001000);,1
lab1_tb.sv,36,assert(HEX3 == 7'b0100001);,1
lab1_tb.sv,37,assert(HEX2 == 7'b1111111);,1
lab1_tb.sv,38,assert(HEX1 == 7'b1111111);,1
lab1_tb.sv,39,assert(HEX0 == 7'b0110000);,1
lab1_tb.sv,44,assert(HEX5 == 7'b0000011);,1
lab1_tb.sv,45,assert(HEX4 == 7'b0001000);,1
lab1_tb.sv,46,assert(HEX3 == 7'b0100001);,1
lab1_tb.sv,47,assert(HEX2 == 7'b1111111);,1
lab1_tb.sv,48,assert(HEX1 == 7'b1111000);,1
lab1_tb.sv,49,assert(HEX0 == 7'b1111111);,1
lab1_tb.sv,54,assert(HEX5 == 7'b0000011);,1
lab1_tb.sv,55,assert(HEX4 == 7'b0001000);,1
lab1_tb.sv,56,assert(HEX3 == 7'b0100001);,1
lab1_tb.sv,57,assert(HEX2 == 7'b1111111);,1
lab1_tb.sv,58,assert(HEX1 == 7'b1111111);,1
lab1_tb.sv,59,assert(HEX0 == 7'b1111111);,1
lab1_tb.sv,64,assert(HEX5 == 7'b0000011);,1
lab1_tb.sv,65,assert(HEX4 == 7'b0001000);,1
lab1_tb.sv,66,assert(HEX3 == 7'b0101011);,1
lab1_tb.sv,67,assert(HEX2 == 7'b0001000);,1
lab1_tb.sv,68,assert(HEX1 == 7'b0101011);,1
lab1_tb.sv,69,assert(HEX0 == 7'b0001000);,1
vortex_afu.sv,764,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
vortex_afu.sv,764,assert(!dbg_cci_rd_rsp_mask[cci_rd_rsp_tag]);,1
plusarg_file_mem.sv,43,assert(ADDR_BITS <= 64);,1
TB.sv,45,assert (out == total);,1
TB.sv,56,assert (out == total);,1
TB.sv,68,assert (out == total);,1
TB.sv,94,assert (out == total);,1
FSM.sv,175,assert(currentState == 4'h7 && RF_Ra_addr == 4'h5 && RF_Rb_addr == 4'h3 && RF_W_addr == 4'h6 && RF_W_en == 1'b1);,1
FSM.sv,190,assert(currentState == 4'h9 && RF_Ra_addr == 4'h1 && RF_Rb_addr == 4'h2 && RF_W_addr == 4'h5 && RF_W_en == 1'b1);,1
Datapath.sv,241,assert(DUT.RegUnit.wrData == 16'h0000 && RF_W_en == 1'b0);,1
PC.sv,43,assert(addr == k); //Throws error if something is wrong. #10;,2
FSM.sv,175,assert(currentState == 4'h7 && RF_Ra_addr == 4'h5 && RF_Rb_addr == 4'h3 && RF_W_addr == 4'h6 && RF_W_en == 1'b1);,1
FSM.sv,190,assert(currentState == 4'h9 && RF_Ra_addr == 4'h1 && RF_Rb_addr == 4'h2 && RF_W_addr == 4'h5 && RF_W_en == 1'b1);,1
Datapath.sv,241,assert(DUT.RegUnit.wrData == 16'h0000 && RF_W_en == 1'b0);,1
PC.sv,43,assert(addr == k); //Throws error if something is wrong. #10;,2
struct_dynamic_range.sv,50,assert(data_shift_mask1 === 8'h7e);,1
struct_dynamic_range.sv,51,assert(data_shift_mask2 === 8'hff);,1
struct_dynamic_range.sv,52,assert(data_shift_mask3 === 8'hxx);,1
struct_dynamic_range.sv,63,assert(data_case1 === 8'h7e);,1
struct_dynamic_range.sv,64,assert(data_case2 === 8'hff);,1
struct_dynamic_range.sv,65,assert(data_case3 === 8'hxx);,1
static_cast_simple.sv,36,assert(c == 8'b0000_0000);,1
static_cast_simple.sv,37,assert(d == 8'b0000_0001);,1
static_cast_simple.sv,42,assert(s0 == 8'b1111_1111);,1
static_cast_simple.sv,43,assert(s1 == 8'b1111_1111);,1
static_cast_simple.sv,44,assert(s2 == 8'b0000_1111);,1
static_cast_simple.sv,45,assert(u0 == 8'b1111_1111);,1
static_cast_simple.sv,46,assert(u1 == 8'b0000_1111);,1
static_cast_simple.sv,47,assert(u2 == 8'b1111_1111);,1
static_cast_simple.sv,48,assert(u3 == 8'b1111_1111);,1
static_cast_simple.sv,49,assert(u4 == 8'b0000_1111);,1
static_cast_simple.sv,50,assert(u5 == 8'b1111_1111);,1
static_cast_simple.sv,51,assert(u6 == 8'b0000_1111);,1
static_cast_simple.sv,53,assert(n0 == 9'b1_1111_1111);,1
static_cast_simple.sv,54,assert(n1 == 9'b0_0000_1111);,1
static_cast_simple.sv,55,assert(n2 == 9'b1_1111_1111);,1
static_cast_simple.sv,56,assert(n3 == 9'b0_0000_1111);,1
static_cast_simple.sv,57,assert(n4 == 9'b0_1111_1111);,1
static_cast_simple.sv,58,assert(n5 == 9'b0_0000_1111);,1
static_cast_simple.sv,59,assert(n6 == 9'b0_1111_1111);,1
static_cast_simple.sv,60,assert(n7 == 9'b0_0000_1111);,1
static_cast_simple.sv,61,assert(n8 == 9'b1_1111_1111);,1
static_cast_simple.sv,62,assert(n9 == 9'b0_0000_1111);,1
typedef_initial_and_assign.sv,11,assert property (var_1 == 0);,1
typedef_initial_and_assign.sv,15,assert property (var_2 == 0);,1
typedef_initial_and_assign.sv,19,assert property (var_3 == 0);,1
typedef_initial_and_assign.sv,23,assert property (var_4 == 0);,1
typedef_initial_and_assign.sv,27,assert property (var_5 == 0);,1
typedef_initial_and_assign.sv,30,assert property (var_6 == 0);,1
typedef_initial_and_assign.sv,34,assert property (var_7 == 0);,1
typedef_initial_and_assign.sv,37,assert property (var_8 == 0);,1
typedef_initial_and_assign.sv,41,assert property (var_9 == 0);,1
typedef_initial_and_assign.sv,44,assert property (var_10 == 0);,1
typedef_initial_and_assign.sv,48,assert property (var_11 == 0);,1
typedef_initial_and_assign.sv,52,assert property (wire_3 == 0);,1
typedef_initial_and_assign.sv,56,assert property (wire_2 == 0);,1
typedef_initial_and_assign.sv,59,assert property (wire_3 == 0);,1
typedef_initial_and_assign.sv,63,assert property (wire_4 == 0);,1
enum_simple.sv,26,assert(1'b0); //should be unreachable //state if (state == ts0) state <= ts1;,5
enum_simple.sv,36,assert(1'b0); //should be unreachable end end always @(*) begin assert(state != 2'h3);,6
enum_simple.sv,42,assert(s0 == '0);,1
enum_simple.sv,43,assert(ts0 == '0);,1
enum_simple.sv,44,assert(enum_const == ts1);,1
union_simple.sv,16,assert(w.y.d == 8'h42);,1
union_simple.sv,64,assert(ir1.u.opcode == 'h37);,1
union_simple.sv,65,assert(ir1.r.opcode == 'h37);,1
union_simple.sv,66,assert(ir1.u.rd == 'd29);,1
union_simple.sv,67,assert(ir1.r.rd == 'd29);,1
union_simple.sv,68,assert(ir1.u.imm == 'hAA01);,1
union_simple.sv,69,assert(s1.ir.u.opcode == 'h37);,1
union_simple.sv,70,assert(s1.ir.r.opcode == 'h37);,1
union_simple.sv,71,assert(s1.ir.u.rd == 'd29);,1
union_simple.sv,72,assert(s1.ir.r.rd == 'd29);,1
union_simple.sv,73,assert(s1.ir.u.imm == 'hAA01);,1
union_simple.sv,74,assert(s1.state == 4'b1111);,1
union_simple.sv,85,assert(u.byte4.d == 'h42);,1
typedef_struct.sv,36,assert(s.a == 1'b1);,1
typedef_struct.sv,37,assert(s.b == 8'hFF);,1
typedef_struct.sv,38,assert(s.t == 8'h55);,1
typedef_struct.sv,39,assert(s1.t == 8'h55);,1
typedef_struct.sv,40,assert(ps.a == 8'hAA);,1
typedef_struct.sv,41,assert(ps.b == 8'h55);,1
typedef_struct.sv,42,assert(s.ps.a == 8'hAA);,1
typedef_struct.sv,43,assert(s.ps.b == 8'h55);,1
typedef_struct_port.sv,102,assert(8'hAA == ps.a);,1
typedef_struct_port.sv,103,assert(8'h55 == ps.b);,1
typedef_struct_port.sv,104,assert(8'hBB == body.a);,1
typedef_struct_port.sv,105,assert(8'h66 == body.b);,1
typedef_struct_port.sv,106,assert(32'hAAAAAAAA == l_s);,1
typedef_struct_port.sv,107,assert(16'hBBBB == sl_s);,1
typedef_struct_port.sv,108,assert(16'hCCCC == lsl_s);,1
typedef_struct_port.sv,109,assert(1'b1 == j);,1
param_struct.sv,37,assert(d == 2'b10);,1
param_struct.sv,38,assert(e == 1'b1);,1
param_struct.sv,39,assert(f == 1'b0);,1
param_struct.sv,40,assert(j == 1'b1);,1
param_struct.sv,41,assert(k == 1'b0);,1
param_struct.sv,42,assert(l == 3'b111);,1
param_struct.sv,43,assert(m == 2'b10);,1
param_struct.sv,44,assert(u == 5'b11001);,1
smtlib2_module.sv,29,assert(add == add2);,1
smtlib2_module.sv,30,assert(sub == sub2);,1
const_arg_loop.sv,83,assert(a == 2);,1
const_arg_loop.sv,84,assert(A == 3);,1
const_arg_loop.sv,85,assert(x1 == 16);,1
const_arg_loop.sv,86,assert(x1b == 16);,1
const_arg_loop.sv,87,assert(x2 == 4);,1
const_arg_loop.sv,88,assert(x3 == 16);,1
const_arg_loop.sv,89,assert(x4 == a << 1);,1
const_arg_loop.sv,90,assert(x5 == 64);,1
const_func.sv,66,assert(a1 == 0);,1
const_func.sv,67,assert(a2 == 0);,1
const_func.sv,68,assert(a3 == "BAR");,1
const_func.sv,69,assert(a4 == 0);,1
const_func.sv,70,assert(b1 == "FOO");,1
const_func.sv,71,assert(b2 == "FOO");,1
const_func.sv,72,assert(b3 == 0);,1
const_func.sv,73,assert(b4 == "HI");,1
const_func.sv,74,assert(c1 == 1);,1
const_func.sv,75,assert(c2 == 1);,1
const_func.sv,76,assert(c3 == 0);,1
const_func.sv,77,assert(c4 == 0);,1
const_func.sv,78,assert(d1 == 0);,1
const_func.sv,79,assert(d2 == 0);,1
const_func.sv,80,assert(d3 == 1);,1
const_func.sv,81,assert(d4 == 1);,1
const_func.sv,83,assert(Y == 3);,1
const_func.sv,84,assert(Z == ~3);,1
countbits.sv,33,assert (one == 1);,1
countbits.sv,34,assert (two == 3);,1
countbits.sv,35,assert (four == 3);,1
func_upto.sv,24,assert (C_CONST == C_WIRE);,1
func_upto.sv,25,assert (C_CONST == C_FUNC);,1
struct_access.sv,83,assert (fail === 0);,1
bug2042_1.sv,14,assert property (b == ~a);,1
net_types.sv,19,assert (wire_logic_0 == 0);,1
net_types.sv,20,assert (wire_logic_1 == 1);,1
net_types.sv,21,assert (wand_logic_0 == 0);,1
net_types.sv,22,assert (wand_logic_1 == 1);,1
net_types.sv,23,assert (wor_logic_0 == 0);,1
net_types.sv,24,assert (wor_logic_1 == 1);,1
net_types.sv,26,assert (wire_integer == 4'b1001);,1
net_types.sv,27,assert (wand_integer == 4'b1000);,1
net_types.sv,28,assert (wor_integer == 4'b1011);,1
net_types.sv,30,assert (wire_typename == 4'b1001);,1
net_types.sv,31,assert (wand_typename == 4'b1000);,1
net_types.sv,32,assert (wor_typename == 4'b1011);,1
unbased_unsized.sv,27,assert (o01 === {64 {1'b0}});,1
unbased_unsized.sv,28,assert (o02 === {64 {1'b1}});,1
unbased_unsized.sv,29,assert (o03 === {64 {1'bx}});,1
unbased_unsized.sv,30,assert (o04 === {64 {1'bz}});,1
unbased_unsized.sv,31,"assert (o05 === {61'b0, 3'b000});",1
unbased_unsized.sv,32,"assert (o06 === {61'b0, 3'b111});",1
unbased_unsized.sv,33,"assert (o07 === {61'b0, 3'bxxx});",1
unbased_unsized.sv,34,"assert (o08 === {61'b0, 3'bzzz});",1
unbased_unsized.sv,35,assert (o09 === {64 {1'b0}});,1
unbased_unsized.sv,36,assert (o10 === {64 {1'b1}});,1
unbased_unsized.sv,37,assert (o11 === {64 {1'bx}});,1
unbased_unsized.sv,38,assert (o12 === {64 {1'bz}});,1
atom_type_signedness.sv,9,assert(-10 == uInteger);,1
atom_type_signedness.sv,10,assert(-11 == uInt);,1
atom_type_signedness.sv,11,assert(-12 == uShortInt);,1
atom_type_signedness.sv,12,assert(-13 == uByte);,1
prefix.sv,12,assert (1 == a);,1
prefix.sv,13,assert (1 == blk1.a);,1
prefix.sv,14,assert (1 == top.blk1.a);,1
prefix.sv,15,assert (i == b);,1
prefix.sv,16,assert (i == blk2[i].b);,1
prefix.sv,17,assert (i == blk1.blk2[i].b);,1
prefix.sv,18,assert (i == top.blk1.blk2[i].b);,1
prefix.sv,19,assert (i == blk2[x].b);,1
prefix.sv,20,assert (i == blk1.blk2[x].b);,1
prefix.sv,21,assert (i == top.blk1.blk2[x].b);,1
prefix.sv,22,assert (j == c);,1
prefix.sv,23,assert (j == blk3[j].c);,1
prefix.sv,24,assert (j == blk2[x].blk3[j].c);,1
prefix.sv,25,assert (j == blk1.blk2[x].blk3[j].c);,1
prefix.sv,26,assert (j == top.blk1.blk2[x].blk3[j].c);,1
prefix.sv,27,assert (j == c);,1
prefix.sv,28,assert (j == blk3[y].c);,1
prefix.sv,29,assert (j == blk2[x].blk3[y].c);,1
prefix.sv,30,assert (j == blk1.blk2[x].blk3[y].c);,1
prefix.sv,31,assert (j == top.blk1.blk2[x].blk3[y].c);,1
prefix.sv,32,assert (j == top.blk1.blk2[x].blk3[y].c[0]);,1
prefix.sv,33,assert (0 == top.blk1.blk2[x].blk3[y].c[1]);,1
prefix.sv,34,assert (0 == top.blk1.blk2[x].blk3[y].c[j]);,1
prefix.sv,38,assert (1 == a);,1
prefix.sv,39,assert (1 == blk1.a);,1
prefix.sv,40,assert (1 == top.blk1.a);,1
prefix.sv,41,assert (i == b);,1
prefix.sv,42,assert (i == blk2[i].b);,1
prefix.sv,43,assert (i == blk1.blk2[i].b);,1
prefix.sv,44,assert (i == top.blk1.blk2[i].b);,1
prefix.sv,45,assert (0 == blk3[0].c);,1
prefix.sv,46,assert (0 == blk2[i].blk3[0].c);,1
prefix.sv,47,assert (0 == blk1.blk2[i].blk3[0].c);,1
prefix.sv,48,assert (0 == top.blk1.blk2[i].blk3[0].c);,1
prefix.sv,49,assert (1 == blk3[1].c);,1
prefix.sv,50,assert (1 == blk2[i].blk3[1].c);,1
prefix.sv,51,assert (1 == blk1.blk2[i].blk3[1].c);,1
prefix.sv,52,assert (1 == top.blk1.blk2[i].blk3[1].c);,1
prefix.sv,56,assert (1 == a);,1
prefix.sv,57,assert (1 == blk1.a);,1
prefix.sv,58,assert (1 == top.blk1.a);,1
prefix.sv,59,assert (0 == blk2[0].b);,1
prefix.sv,60,assert (0 == blk1.blk2[0].b);,1
prefix.sv,61,assert (0 == top.blk1.blk2[0].b);,1
prefix.sv,62,assert (1 == blk2[1].b);,1
prefix.sv,63,assert (1 == blk1.blk2[1].b);,1
prefix.sv,64,assert (1 == top.blk1.blk2[1].b);,1
prefix.sv,65,assert (0 == blk2[0].blk3[0].c);,1
prefix.sv,66,assert (0 == blk1.blk2[0].blk3[0].c);,1
prefix.sv,67,assert (0 == top.blk1.blk2[0].blk3[0].c);,1
prefix.sv,68,assert (1 == blk2[0].blk3[1].c);,1
prefix.sv,69,assert (1 == blk1.blk2[0].blk3[1].c);,1
prefix.sv,70,assert (1 == top.blk1.blk2[0].blk3[1].c);,1
prefix.sv,71,assert (0 == blk2[1].blk3[0].c);,1
prefix.sv,72,assert (0 == blk1.blk2[1].blk3[0].c);,1
prefix.sv,73,assert (0 == top.blk1.blk2[1].blk3[0].c);,1
prefix.sv,74,assert (1 == blk2[1].blk3[1].c);,1
prefix.sv,75,assert (1 == blk1.blk2[1].blk3[1].c);,1
prefix.sv,76,assert (1 == top.blk1.blk2[1].blk3[1].c);,1
prefix.sv,80,assert (1 == blk1.a);,1
prefix.sv,81,assert (1 == top.blk1.a);,1
prefix.sv,82,assert (0 == blk1.blk2[0].b);,1
prefix.sv,83,assert (0 == top.blk1.blk2[0].b);,1
prefix.sv,84,assert (1 == blk1.blk2[1].b);,1
prefix.sv,85,assert (1 == top.blk1.blk2[1].b);,1
prefix.sv,86,assert (0 == blk1.blk2[0].blk3[0].c);,1
prefix.sv,87,assert (0 == top.blk1.blk2[0].blk3[0].c);,1
prefix.sv,88,assert (1 == blk1.blk2[0].blk3[1].c);,1
prefix.sv,89,assert (1 == top.blk1.blk2[0].blk3[1].c);,1
prefix.sv,90,assert (0 == blk1.blk2[1].blk3[0].c);,1
prefix.sv,91,assert (0 == top.blk1.blk2[1].blk3[0].c);,1
prefix.sv,92,assert (1 == blk1.blk2[1].blk3[1].c);,1
prefix.sv,93,assert (1 == top.blk1.blk2[1].blk3[1].c);,1
func_tern_hint.sv,27,assert(A == 31'h3F_FFFFFF);,1
func_tern_hint.sv,28,assert(B == 31'h0F_FFFFFF);,1
func_tern_hint.sv,29,assert(C == 31'h03_FFFFFF);,1
func_tern_hint.sv,30,assert(D == 31'h00_FFFFFF);,1
func_tern_hint.sv,31,assert(X == 0);,1
func_tern_hint.sv,32,assert(Y == 0);,1
func_tern_hint.sv,40,assert(x);,1
package_task_func.sv,26,assert property (a == 2);,1
package_task_func.sv,27,assert property (b == 9);,1
package_task_func.sv,28,assert property (c == 8);,1
package_task_func.sv,29,assert property (d == 16);,1
param_no_default.sv,32,assert (a1 == 0);,1
param_no_default.sv,33,assert (b1 == 1);,1
param_no_default.sv,34,assert (c1 == 2);,1
param_no_default.sv,35,assert (d1 == 3);,1
param_no_default.sv,37,assert (a2 == 1);,1
param_no_default.sv,38,assert (b2 == 1);,1
param_no_default.sv,39,assert (c2 == 4);,1
param_no_default.sv,40,assert (d3 == 3);,1
param_no_default.sv,42,assert (a3 == 1);,1
param_no_default.sv,43,assert (b3 == 0);,1
param_no_default.sv,44,assert (c3 == 5);,1
param_no_default.sv,45,assert (d3 == 3);,1
param_no_default.sv,47,assert (a4 == 1);,1
param_no_default.sv,48,assert (b4 == 0);,1
param_no_default.sv,49,assert (c4 == 9);,1
param_no_default.sv,50,assert (d4 == 10);,1
unbased_unsized_shift.sv,21,assert (s0c === 64'h0000_0000_0000_0000);,1
unbased_unsized_shift.sv,22,assert (s1c === 64'hFFFF_FFFF_FFFF_FF00);,1
unbased_unsized_shift.sv,23,assert (sxc === 64'hxxxx_xxxx_xxxx_xx00);,1
unbased_unsized_shift.sv,24,assert (s0d === 64'h0000_0000_0000_0000);,1
unbased_unsized_shift.sv,25,assert (s1d === 64'hFFFF_FFFF_FFFF_FF00);,1
unbased_unsized_shift.sv,26,assert (sxd === 64'hxxxx_xxxx_xxxx_xx00);,1
unreachable_case_sign_2.sv,7,assert (good);,1
unreachable_case_sign_1.sv,6,assert (good);,1
bug2042_2.sv,15,assert property (b == ~a);,1
bug2042_2.sv,16,assert property (c == a);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_sequencer.sv,161,assert property (rx_analogreset |-> rx_digitalreset);,1
altera_tse_reset_ctrl_lego.sv,211,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
altera_tse_reset_ctrl_lego.sv,217,assert property ($rose(start & ~aclr) |-> ##[0:1] reset);,1
struct_access.sv,30,assert(P == 4'b1100);,1
struct_access.sv,31,assert(f == 2'b11);,1
struct_access.sv,32,assert(g == 2'b00);,1
struct_access.sv,33,assert(h == 2'b11);,1
struct_access.sv,34,assert(i == 1'b1);,1
struct_access.sv,35,assert(j == 1'b1);,1
struct_access.sv,36,assert(x == 2'b00);,1
struct_access.sv,37,assert(y == 2'b00);,1
struct_access.sv,38,assert(x.c == 2'b00);,1
struct_access.sv,39,assert(y.b == 1'b0);,1
struct_access.sv,40,assert(n == 1'b1);,1
struct_access.sv,41,assert(z == 1'b0);,1
inst_list.sv,21,assert(w0 == u0 ^ v0);,1
inst_list.sv,22,assert(w1 == u1 ^ v1);,1
basic.sv,18,assert(w == u ^ v);,1
hier.sv,16,assert(w == u ^ v);,1
param.sv,23,assert (w0 == '0);,1
param.sv,24,assert (w1 == u1 ^ v1);,1
toplevel.sv,16,assert(w == u ^ v);,1
cell_list.sv,23,assert(w0 == u0 ^ v0);,1
cell_list.sv,24,assert(w1 == u1 ^ v1);,1
counter.sv,19,assume property (down |-> !up);,1
audio_clock_tb.sv,13,assert(hdmi_640x480_60Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.N == 6144);,1
audio_clock_tb.sv,14,assert(hdmi_640x480_60Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.CYCLE_TIME_STAMP_COUNTER_IDEAL == 25175);,1
audio_clock_tb.sv,15,assert(hdmi_640x480_59_94Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.N == 6144);,1
audio_clock_tb.sv,16,assert(hdmi_640x480_59_94Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.CYCLE_TIME_STAMP_COUNTER_IDEAL == 25200);,1
audio_clock_tb.sv,17,assert(hdmi_1280x720_59_94Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.N == 6144);,1
audio_clock_tb.sv,18,assert(hdmi_1280x720_59_94Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.CYCLE_TIME_STAMP_COUNTER_IDEAL == 74176);,1
audio_clock_tb.sv,19,assert(hdmi_1920x1080_60Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.N == 6144);,1
audio_clock_tb.sv,20,assert(hdmi_1920x1080_60Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.CYCLE_TIME_STAMP_COUNTER_IDEAL == 148500);,1
audio_clock_tb.sv,21,assert(hdmi_720x576_50Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.N == 6144);,1
audio_clock_tb.sv,22,assert(hdmi_720x576_50Hz.true_hdmi_output.packet_picker.audio_clock_regeneration_packet.CYCLE_TIME_STAMP_COUNTER_IDEAL == 27000);,1
int_types.sv,17,"assert (x == y); \ assert (a == b); \ assert (a == c); \ assert ((a == -1) == is_signed); \ end \ end `define TEST_INTEGER_ATOM(typ, width) \ `TEST(typ, width, 1) \ `TEST(typ signed, width, 1) \ `TEST(typ unsigned, width, 0) `define TEST_INTEGER_VECTOR(typ) \ `TEST(typ, 1, 0) \ `TEST(typ signed, 1, 1) \ `TEST(typ unsigned, 1, 0) \ `TEST(typ [1:0], 2, 0) \ `TEST(typ signed [1:0], 2, 1) \ `TEST(typ unsigned [1:0], 2, 0) module top;",21
spd_tb.sv,17,"assert(source_product_description_info_frame.product_description == '{8'h46, 8'h50, 8'h47, 8'h41, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00});",1
parameters_across_files_2.sv,7,assert (out == 1);,1
draw_rect_ctl_tb.sv,61,assert(screen_idle);,1
draw_rect_ctl_tb.sv,64,assert(!screen_idle && screen_single);,1
draw_rect_ctl_tb.sv,67,assert(mouse_ypos == 100);,1
draw_rect_ctl_tb.sv,70,assert(mouse_ypos == 200);,1
draw_rect_ctl_tb.sv,73,assert(!screen_idle && screen_single);,1
draw_rect_ctl_tb.sv,76,assert(mouse_ypos == 300);,1
draw_rect_ctl_tb.sv,79,assert(mouse_ypos == 400);,1
draw_rect_ctl_tb.sv,82,assert(screen_idle);,1
bats_parser_tb.sv,257,assert (ret == 0);,1
bats_parser_tb.sv,285,assert (out_ip_seconds_u64 == 32199);,1
bats_parser_tb.sv,289,assert (out_ip_orderbook_command_type == 0);,1
bats_parser_tb.sv,305,assert (out_ip_seconds_u64 == 64'h000000000006d219);,1
Top.sv,106,cover property (Check_Read_ADDR_Valid);,1
Top.sv,116,cover property (Check_Read_ADDR_Valid);,1
Top.sv,125,cover property (Check_Read_Valid);,1
Top.sv,135,cover property (Check_Read_Valid);,1
Top.sv,143,cover property (Check_Read_Response);,1
Top.sv,153,cover property (Check_Read_Response);,1
Top.sv,162,cover property (Check_Write_ADDR_Valid);,1
Top.sv,172,cover property (Check_Write_ADDR_Valid);,1
Top.sv,179,cover property (Check_Write_Ready);,1
Top.sv,189,cover property (Check_Write_Ready);,1
Top.sv,197,cover property (Check_Write_Response);,1
Top.sv,207,cover property (Check_Write_Response);,1
tb_Modulation.sv,26,assert(data_out == data_in);,1
tb_Modulation.sv,31,assert(data_out == data_in);,1
tb_System.sv,44,assert(data_out == data_in);,1
tb_Encoder_System_Medium_Decoder.sv,31,assert(data_out == data_in);,1
tb_Encoder_System_Medium_Decoder.sv,44,assert(data_out == data_in);,1
tb_AWGN_Channel.sv,28,assert(data_out1 == data_in1);,1
tb_AWGN_Channel.sv,29,assert(data_out2 == data_in2);,1
tb_AWGN_Channel.sv,30,assert(data_out3 == data_in3);,1
tb_AWGN_Channel.sv,31,assert(data_out4 == data_in4);,1
tb_AWGN_Channel.sv,37,assert(data_out1 == data_in1);,1
Hamming74_Encoder_tb.sv,27,assert(decoder_data_out == encoder_data_in);,1
Hamming74_Encoder_tb.sv,30,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,32,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,34,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,36,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,38,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,40,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,42,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,44,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,46,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,48,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,50,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,52,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,54,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,56,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,58,assert(decoder_data_out == encoder_data_in); #10;,1
tb_System_Medium.sv,26,assert(data_out == data_in);,1
tb_System_Medium.sv,39,assert(data_out == data_in);,1
tb_Modulation.sv,26,assert(data_out == data_in);,1
tb_Modulation.sv,31,assert(data_out == data_in);,1
tb_System.sv,44,assert(data_out == data_in);,1
tb_Encoder_System_Medium_Decoder.sv,31,assert(data_out == data_in);,1
tb_Encoder_System_Medium_Decoder.sv,44,assert(data_out == data_in);,1
tb_AWGN_Channel.sv,28,assert(data_out1 == data_in1);,1
tb_AWGN_Channel.sv,29,assert(data_out2 == data_in2);,1
tb_AWGN_Channel.sv,30,assert(data_out3 == data_in3);,1
tb_AWGN_Channel.sv,31,assert(data_out4 == data_in4);,1
tb_AWGN_Channel.sv,37,assert(data_out1 == data_in1);,1
Hamming74_Encoder_tb.sv,27,assert(decoder_data_out == encoder_data_in);,1
Hamming74_Encoder_tb.sv,30,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,32,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,34,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,36,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,38,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,40,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,42,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,44,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,46,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,48,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,50,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,52,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,54,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,56,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,58,assert(decoder_data_out == encoder_data_in); #10;,1
tb_System_Medium.sv,26,assert(data_out == data_in);,1
tb_System_Medium.sv,39,assert(data_out == data_in);,1
tb_Modulation.sv,26,assert(data_out == data_in);,1
tb_Modulation.sv,31,assert(data_out == data_in);,1
tb_System.sv,44,assert(data_out == data_in);,1
tb_Encoder_System_Medium_Decoder.sv,31,assert(data_out == data_in);,1
tb_Encoder_System_Medium_Decoder.sv,44,assert(data_out == data_in);,1
tb_AWGN_Channel.sv,28,assert(data_out1 == data_in1);,1
tb_AWGN_Channel.sv,29,assert(data_out2 == data_in2);,1
tb_AWGN_Channel.sv,30,assert(data_out3 == data_in3);,1
tb_AWGN_Channel.sv,31,assert(data_out4 == data_in4);,1
tb_AWGN_Channel.sv,37,assert(data_out1 == data_in1);,1
Hamming74_Encoder_tb.sv,27,assert(decoder_data_out == encoder_data_in);,1
Hamming74_Encoder_tb.sv,30,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,32,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,34,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,36,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,38,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,40,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,42,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,44,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,46,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,48,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,50,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,52,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,54,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,56,assert(decoder_data_out == encoder_data_in); #10;,1
Hamming74_Encoder_tb.sv,58,assert(decoder_data_out == encoder_data_in); #10;,1
tb_System_Medium.sv,26,assert(data_out == data_in);,1
tb_System_Medium.sv,39,assert(data_out == data_in);,1
pmp_entry.sv,73,assert(size >= 2);,1
pmp_entry.sv,75,assert(size > 2);,1
pmp_entry.sv,79,assert(conf_addr_i[i] == 1); // check that all the rest are ones end end end if (size < PLEN-1) begin if (base + 2**size > base) begin // check for overflow if (match_o == 0) begin assert(addr_i >= base + 2**size || addr_i < base);,9
pmp_entry.sv,89,assert(addr_i < base + 2**size && addr_i >= base);,1
pmp_entry.sv,93,assert(addr_i - 2**size >= base || addr_i < base);,1
pmp_entry.sv,95,assert(addr_i - 2**size < base && addr_i >= base);,1
ariane_pkg.sv,86,assert(Cfg.RASDepth > 0);,1
ariane_pkg.sv,89,assert(Cfg.NrNonIdempotentRules <= NrMaxRules);,1
ariane_pkg.sv,90,assert(Cfg.NrExecuteRegionRules <= NrMaxRules);,1
ariane_pkg.sv,91,assert(Cfg.NrCachedRegionRules <= NrMaxRules);,1
ariane_pkg.sv,92,assert(Cfg.NrPMPEntries <= 16);,1
prim_assert_yosys_macros.sv,10,"assert (__prop); \ end `define ASSERT_INIT(__name, __prop) \ initial begin : __name \ assert (__prop); \ end `define ASSERT_INIT_NET(__name, __prop) \ initial begin : __name \ #1ps assert (__prop); \ end // This doesn't make much sense for a formal tool (we never get to the final block!) `define ASSERT_FINAL(__name, __prop) `define ASSERT(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \ always_ff @(posedge __clk) begin \ if (! (__rst !== '0)) __name: assert (__prop); \ end",20
prim_assert_yosys_macros.sv,51,assume (__prop); \ end,2
cv32e40p_aligner.sv,243,assert property (p_hwlp_update_pc);,1
cv32e40p_aligner.sv,248,assert property (p_hwlp_update_pc);,1
cv32e40p_if_stage.sv,291,assert property (p_pc_mux_0);,1
cv32e40p_if_stage.sv,296,assert property (p_pc_mux_0);,1
cv32e40p_if_stage.sv,305,assert property (p_pc_mux_1);,1
cv32e40p_if_stage.sv,310,assert property (p_pc_mux_1);,1
cv32e40p_load_store_unit.sv,501,assert property (p_no_error);,1
cv32e40p_load_store_unit.sv,506,assert property (p_no_error);,1
cv32e40p_load_store_unit.sv,509,assert property (p_no_transaction_count_overflow_0);,1
cv32e40p_load_store_unit.sv,514,assert property (p_no_transaction_count_overflow_0);,1
cv32e40p_load_store_unit.sv,516,assert property (p_no_transaction_count_overflow_1);,1
cv32e40p_load_store_unit.sv,521,assert property (p_no_transaction_count_overflow_1);,1
cv32e40p_load_store_unit.sv,524,assert property (p_no_spurious_rvalid);,1
cv32e40p_load_store_unit.sv,529,assert property (p_no_spurious_rvalid);,1
cv32e40p_load_store_unit.sv,532,assert property (p_address_phase_signals_defined);,1
cv32e40p_load_store_unit.sv,545,assert property (p_address_phase_signals_defined);,1
cv32e40p_sleep_unit.sv,168,assert property (p_clock_en_0);,1
cv32e40p_sleep_unit.sv,173,assert property (p_clock_en_0);,1
cv32e40p_sleep_unit.sv,176,assert property (p_clock_en_1);,1
cv32e40p_sleep_unit.sv,181,assert property (p_clock_en_1);,1
cv32e40p_sleep_unit.sv,184,assert property (p_clock_en_2);,1
cv32e40p_sleep_unit.sv,189,assert property (p_clock_en_2);,1
cv32e40p_sleep_unit.sv,195,assert property (p_clock_en_3);,1
cv32e40p_sleep_unit.sv,200,assert property (p_clock_en_3);,1
cv32e40p_sleep_unit.sv,203,assert property (p_only_sleep_during_p_elw);,1
cv32e40p_sleep_unit.sv,208,assert property (p_only_sleep_during_p_elw);,1
cv32e40p_sleep_unit.sv,212,assert property (p_full_clock_en_control);,1
cv32e40p_sleep_unit.sv,217,assert property (p_full_clock_en_control);,1
cv32e40p_sleep_unit.sv,222,assert property (p_clock_en_4);,1
cv32e40p_sleep_unit.sv,227,assert property (p_clock_en_4);,1
cv32e40p_sleep_unit.sv,230,assert property (p_clock_en_5);,1
cv32e40p_sleep_unit.sv,235,assert property (p_clock_en_5);,1
cv32e40p_sleep_unit.sv,238,assert property (p_core_sleep);,1
cv32e40p_sleep_unit.sv,243,assert property (p_core_sleep);,1
cv32e40p_sleep_unit.sv,246,assert property (p_non_busy);,1
cv32e40p_sleep_unit.sv,251,assert property (p_non_busy);,1
cv32e40p_sleep_unit.sv,254,assert property (p_gate_clk_i);,1
cv32e40p_sleep_unit.sv,259,assert property (p_gate_clk_i);,1
cv32e40p_sleep_unit.sv,262,assert property (p_gate_clock_during_sleep);,1
cv32e40p_sleep_unit.sv,267,assert property (p_gate_clock_during_sleep);,1
cv32e40p_sleep_unit.sv,270,assert property (p_only_sleep_for_wfi);,1
cv32e40p_sleep_unit.sv,277,assert property (p_only_sleep_for_wfi);,1
cv32e40p_sleep_unit.sv,280,assert property (p_not_busy_during_sleep);,1
cv32e40p_sleep_unit.sv,285,assert property (p_not_busy_during_sleep);,1
cv32e40p_core.sv,1112,assume property (p_env_req_0);,1
cv32e40p_core.sv,1119,assume property (p_env_req_0);,1
cv32e40p_core.sv,1122,assume property (p_env_req_1);,1
cv32e40p_core.sv,1127,assume property (p_env_req_1);,1
cv32e40p_core.sv,1156,assert property (p_irq_enabled_0);,1
cv32e40p_core.sv,1162,assert property (p_irq_enabled_0);,1
cv32e40p_core.sv,1165,assert property (p_irq_enabled_1);,1
cv32e40p_core.sv,1171,assert property (p_irq_enabled_1);,1
cv32e40p_core.sv,1251,assert property (p_illegal_mepc);,1
cv32e40p_core.sv,1256,assert property (p_illegal_mepc);,1
cv32e40p_core.sv,1259,assert property (p_ecall_mepc);,1
cv32e40p_core.sv,1264,assert property (p_ecall_mepc);,1
cv32e40p_core.sv,1267,assert property (p_ebrk_mepc);,1
cv32e40p_core.sv,1272,assert property (p_ebrk_mepc);,1
cv32e40p_prefetch_buffer.sv,194,assert property (p_fifo_depth_gt_1);,1
cv32e40p_prefetch_buffer.sv,199,assert property (p_fifo_depth_gt_1);,1
cv32e40p_prefetch_buffer.sv,202,assert property (p_branch_halfword_aligned);,1
cv32e40p_prefetch_buffer.sv,207,assert property (p_branch_halfword_aligned);,1
cv32e40p_prefetch_buffer.sv,210,assert property (p_instr_addr_word_aligned);,1
cv32e40p_prefetch_buffer.sv,215,assert property (p_instr_addr_word_aligned);,1
cv32e40p_prefetch_buffer.sv,218,assert property (p_branch_implies_req);,1
cv32e40p_prefetch_buffer.sv,223,assert property (p_branch_implies_req);,1
cv32e40p_prefetch_buffer.sv,226,assert property (p_branch_invalidates_fifo);,1
cv32e40p_prefetch_buffer.sv,231,assert property (p_branch_invalidates_fifo);,1
cv32e40p_prefetch_buffer.sv,242,assert property (p_no_error);,1
cv32e40p_prefetch_buffer.sv,247,assert property (p_no_error);,1
cv32e40p_id_stage.sv,1687,assert property (p_branch_taken_ex);,1
cv32e40p_id_stage.sv,1696,assert property (p_branch_taken_ex);,1
cv32e40p_id_stage.sv,1700,assert property (p_irq_csr);,1
cv32e40p_id_stage.sv,1710,assert property (p_irq_csr);,1
cv32e40p_id_stage.sv,1715,assert property (p_xret_csr);,1
cv32e40p_id_stage.sv,1721,assert property (p_xret_csr);,1
cv32e40p_id_stage.sv,1727,assert property (p_illegal_0);,1
cv32e40p_id_stage.sv,1732,assert property (p_illegal_0);,1
cv32e40p_id_stage.sv,1741,assert property (p_illegal_1);,1
cv32e40p_id_stage.sv,1747,assert property (p_illegal_1);,1
cv32e40p_id_stage.sv,1773,assert property (p_alu_op);,1
cv32e40p_id_stage.sv,1776,assert property (p_vector_mode);,1
cv32e40p_id_stage.sv,1781,assert property (p_vector_mode);,1
cv32e40p_id_stage.sv,1784,assert property (p_mul_op);,1
cv32e40p_id_stage.sv,1791,assert property (p_mul_op);,1
cv32e40p_id_stage.sv,1797,assert property (p_illegal_2);,1
cv32e40p_id_stage.sv,1806,assert property (p_illegal_2);,1
test_16_03_00.sv,29,assert(req1 || req2);,1
screen.sv,132,"assert property(hdisp) else $error(""HDISP mismatch /= %0d\n"",X);",1
screen.sv,139,"assert property(hdisp) else $error(""HDISP mismatch /= %0d\n"",X);",1
screen.sv,193,"assert property(vdisp) else begin in_vdisp=0; $error(""VDISP mismatch /= %0d\n"",Y); end assert property(vfp) else begin $fatal(1,""VFP mismatch /= %0d\n"",vga_modes[mode][7]); end assert property(vp) else begin $fatal(1,""VP mismatch /= %0d\n"",vga_modes[mode][8]); end",3
screen.sv,200,"assert property(vdisp) else begin in_vdisp=0; $error(""VDISP mismatch /= %0d\n"",Y); end assert property(vfp) else begin $fatal(1,""VFP mismatch /= %0d\n"",vga_modes[mode][7]); end assert property(vp) else begin $fatal(1,""VP mismatch /= %0d\n"",vga_modes[mode][8]); end assert property(vbp) else begin $fatal(1,""VBP mismatch /= %0d\n"",vga_modes[mode][9]); end assert property(vbp_1) else begin $fatal(1,""DISPLAY within VBP /= %0d\n"",vga_modes[mode][9]); end //assert property(not hbp) $error(""HBP not right\n"");",6
Check whether clock is 100 MHz.sv,2,assert property p1;,1
tb_m00_axi.sv,220,assert (m_axi_rvalid_rready == 1);,1
tb_m00_axi.sv,233,assert (m_axi_wvalid_wready == 1);,1
controller_tb.sv,22,assert(controller_tb.DUT.state == init);,1
controller_tb.sv,29,assert(controller_tb.DUT.state == init);,1
controller_tb.sv,36,assert(controller_tb.DUT.state == startFSM0);,1
controller_tb.sv,43,assert(controller_tb.DUT.state == init);,1
controller_tb.sv,50,assert(controller_tb.DUT.state == startFSM0);,1
controller_tb.sv,55,assert(controller_tb.DUT.state == waitFSM0);,1
controller_tb.sv,60,assert(controller_tb.DUT.state == waitFSM0);,1
controller_tb.sv,67,assert(controller_tb.DUT.state == waituart0);,1
controller_tb.sv,74,assert(controller_tb.DUT.state == startFSM1);,1
controller_tb.sv,79,assert(controller_tb.DUT.state == waitFSM1);,1
controller_tb.sv,84,assert(controller_tb.DUT.state == waitFSM1);,1
controller_tb.sv,91,assert(controller_tb.DUT.state == finish);,1
postEntryFSM_tb.sv,22,assert (postEntryFSM_tb.DUT.state == init);,1
postEntryFSM_tb.sv,28,assert (postEntryFSM_tb.DUT.state == load0);,1
postEntryFSM_tb.sv,33,assert (postEntryFSM_tb.DUT.state == waitload0);,1
postEntryFSM_tb.sv,38,assert (postEntryFSM_tb.DUT.state == waitsend0);,1
postEntryFSM_tb.sv,43,assert (postEntryFSM_tb.DUT.state == waitsend0);,1
postEntryFSM_tb.sv,49,assert (postEntryFSM_tb.DUT.state == load1);,1
postEntryFSM_tb.sv,54,assert (postEntryFSM_tb.DUT.state == waitload1);,1
postEntryFSM_tb.sv,59,assert (postEntryFSM_tb.DUT.state == waitsend1);,1
postEntryFSM_tb.sv,64,assert (postEntryFSM_tb.DUT.state == waitsend1);,1
postEntryFSM_tb.sv,70,assert (postEntryFSM_tb.DUT.state == load2);,1
postEntryFSM_tb.sv,75,assert (postEntryFSM_tb.DUT.state == waitload2);,1
postEntryFSM_tb.sv,80,assert (postEntryFSM_tb.DUT.state == waitsend2);,1
postEntryFSM_tb.sv,85,assert (postEntryFSM_tb.DUT.state == waitsend2);,1
postEntryFSM_tb.sv,91,assert (postEntryFSM_tb.DUT.state == finish);,1
postEntryFSM_tb.sv,102,assert (postEntryFSM_tb.DUT.state == init);,1
postReqFSM_tb.sv,28,assert (postReqFSM_tb.DUT.state == init);,1
postReqFSM_tb.sv,34,assert (postReqFSM_tb.DUT.state == load0);,1
postReqFSM_tb.sv,39,assert (postReqFSM_tb.DUT.state == waitload0);,1
postReqFSM_tb.sv,44,assert (postReqFSM_tb.DUT.state == waitsend0);,1
postReqFSM_tb.sv,49,assert (postReqFSM_tb.DUT.state == waitsend0);,1
postReqFSM_tb.sv,55,assert (postReqFSM_tb.DUT.state == load1);,1
postReqFSM_tb.sv,60,assert (postReqFSM_tb.DUT.state == waitload1);,1
postReqFSM_tb.sv,65,assert (postReqFSM_tb.DUT.state == waitsend1);,1
postReqFSM_tb.sv,70,assert (postReqFSM_tb.DUT.state == waitsend1);,1
postReqFSM_tb.sv,76,assert (postReqFSM_tb.DUT.state == load2);,1
postReqFSM_tb.sv,81,assert (postReqFSM_tb.DUT.state == waitload2);,1
postReqFSM_tb.sv,86,assert (postReqFSM_tb.DUT.state == waitsend2);,1
postReqFSM_tb.sv,91,assert (postReqFSM_tb.DUT.state == waitsend2);,1
postReqFSM_tb.sv,97,assert (postReqFSM_tb.DUT.state == load3);,1
postReqFSM_tb.sv,102,assert (postReqFSM_tb.DUT.state == waitload3);,1
postReqFSM_tb.sv,107,assert (postReqFSM_tb.DUT.state == waitsend3);,1
postReqFSM_tb.sv,112,assert (postReqFSM_tb.DUT.state == waitsend3);,1
postReqFSM_tb.sv,118,assert (postReqFSM_tb.DUT.state == load4);,1
postReqFSM_tb.sv,123,assert (postReqFSM_tb.DUT.state == waitload4);,1
postReqFSM_tb.sv,128,assert (postReqFSM_tb.DUT.state == waitsend4);,1
postReqFSM_tb.sv,133,assert (postReqFSM_tb.DUT.state == waitsend4);,1
postReqFSM_tb.sv,139,assert (postReqFSM_tb.DUT.state == load5);,1
postReqFSM_tb.sv,144,assert (postReqFSM_tb.DUT.state == waitload5);,1
postReqFSM_tb.sv,149,assert (postReqFSM_tb.DUT.state == waitsend5);,1
postReqFSM_tb.sv,154,assert (postReqFSM_tb.DUT.state == waitsend5);,1
postReqFSM_tb.sv,160,assert (postReqFSM_tb.DUT.state == load6);,1
postReqFSM_tb.sv,165,assert (postReqFSM_tb.DUT.state == waitload6);,1
postReqFSM_tb.sv,170,assert (postReqFSM_tb.DUT.state == waitsend6);,1
postReqFSM_tb.sv,175,assert (postReqFSM_tb.DUT.state == waitsend6);,1
postReqFSM_tb.sv,181,assert (postReqFSM_tb.DUT.state == load7);,1
postReqFSM_tb.sv,186,assert (postReqFSM_tb.DUT.state == waitload7);,1
postReqFSM_tb.sv,191,assert (postReqFSM_tb.DUT.state == waitsend7);,1
postReqFSM_tb.sv,196,assert (postReqFSM_tb.DUT.state == waitsend7);,1
postReqFSM_tb.sv,202,assert (postReqFSM_tb.DUT.state == load8);,1
postReqFSM_tb.sv,207,assert (postReqFSM_tb.DUT.state == waitload8);,1
postReqFSM_tb.sv,212,assert (postReqFSM_tb.DUT.state == waitsend8);,1
postReqFSM_tb.sv,217,assert (postReqFSM_tb.DUT.state == waitsend8);,1
postReqFSM_tb.sv,223,assert (postReqFSM_tb.DUT.state == load9);,1
postReqFSM_tb.sv,228,assert (postReqFSM_tb.DUT.state == waitload9);,1
postReqFSM_tb.sv,233,assert (postReqFSM_tb.DUT.state == waitsend9);,1
postReqFSM_tb.sv,238,assert (postReqFSM_tb.DUT.state == waitsend9);,1
postReqFSM_tb.sv,244,assert (postReqFSM_tb.DUT.state == load10);,1
postReqFSM_tb.sv,249,assert (postReqFSM_tb.DUT.state == waitload10);,1
postReqFSM_tb.sv,254,assert (postReqFSM_tb.DUT.state == waitsend10);,1
postReqFSM_tb.sv,259,assert (postReqFSM_tb.DUT.state == waitsend10);,1
postReqFSM_tb.sv,265,assert (postReqFSM_tb.DUT.state == load11);,1
postReqFSM_tb.sv,270,assert (postReqFSM_tb.DUT.state == waitload11);,1
postReqFSM_tb.sv,275,assert (postReqFSM_tb.DUT.state == waitsend11);,1
postReqFSM_tb.sv,280,assert (postReqFSM_tb.DUT.state == waitsend11);,1
postReqFSM_tb.sv,286,assert (postReqFSM_tb.DUT.state == load12);,1
postReqFSM_tb.sv,291,assert (postReqFSM_tb.DUT.state == waitload12);,1
postReqFSM_tb.sv,296,assert (postReqFSM_tb.DUT.state == waitsend12);,1
postReqFSM_tb.sv,301,assert (postReqFSM_tb.DUT.state == waitsend12);,1
postReqFSM_tb.sv,307,assert (postReqFSM_tb.DUT.state == load13);,1
postReqFSM_tb.sv,312,assert (postReqFSM_tb.DUT.state == waitload13);,1
postReqFSM_tb.sv,317,assert (postReqFSM_tb.DUT.state == waitsend13);,1
postReqFSM_tb.sv,322,assert (postReqFSM_tb.DUT.state == waitsend13);,1
postReqFSM_tb.sv,328,assert (postReqFSM_tb.DUT.state == load14);,1
postReqFSM_tb.sv,333,assert (postReqFSM_tb.DUT.state == waitload14);,1
postReqFSM_tb.sv,338,assert (postReqFSM_tb.DUT.state == waitsend14);,1
postReqFSM_tb.sv,343,assert (postReqFSM_tb.DUT.state == waitsend14);,1
postReqFSM_tb.sv,349,assert (postReqFSM_tb.DUT.state == load15);,1
postReqFSM_tb.sv,354,assert (postReqFSM_tb.DUT.state == waitload15);,1
postReqFSM_tb.sv,359,assert (postReqFSM_tb.DUT.state == waitsend15);,1
postReqFSM_tb.sv,364,assert (postReqFSM_tb.DUT.state == waitsend15);,1
postReqFSM_tb.sv,370,assert (postReqFSM_tb.DUT.state == load16);,1
postReqFSM_tb.sv,375,assert (postReqFSM_tb.DUT.state == waitload16);,1
postReqFSM_tb.sv,380,assert (postReqFSM_tb.DUT.state == waitsend16);,1
postReqFSM_tb.sv,385,assert (postReqFSM_tb.DUT.state == waitsend16);,1
postReqFSM_tb.sv,391,assert (postReqFSM_tb.DUT.state == load17);,1
postReqFSM_tb.sv,396,assert (postReqFSM_tb.DUT.state == waitload17);,1
postReqFSM_tb.sv,401,assert (postReqFSM_tb.DUT.state == waitsend17);,1
postReqFSM_tb.sv,406,assert (postReqFSM_tb.DUT.state == waitsend17);,1
postReqFSM_tb.sv,412,assert (postReqFSM_tb.DUT.state == load18);,1
postReqFSM_tb.sv,417,assert (postReqFSM_tb.DUT.state == waitload18);,1
postReqFSM_tb.sv,422,assert (postReqFSM_tb.DUT.state == waitsend18);,1
postReqFSM_tb.sv,427,assert (postReqFSM_tb.DUT.state == waitsend18);,1
postReqFSM_tb.sv,433,assert (postReqFSM_tb.DUT.state == load19);,1
postReqFSM_tb.sv,438,assert (postReqFSM_tb.DUT.state == waitload19);,1
postReqFSM_tb.sv,443,assert (postReqFSM_tb.DUT.state == waitsend19);,1
postReqFSM_tb.sv,448,assert (postReqFSM_tb.DUT.state == waitsend19);,1
postReqFSM_tb.sv,454,assert (postReqFSM_tb.DUT.state == finish);,1
postReqFSM_tb.sv,465,assert (postReqFSM_tb.DUT.state == init);,1
tableEntryFSM_tb.sv,25,assert (tableEntryFSM_tb.DUT.state == init);,1
tableEntryFSM_tb.sv,31,assert (tableEntryFSM_tb.DUT.state == load0);,1
tableEntryFSM_tb.sv,36,assert (tableEntryFSM_tb.DUT.state == waitload0);,1
tableEntryFSM_tb.sv,41,assert (tableEntryFSM_tb.DUT.state == waitsend0);,1
tableEntryFSM_tb.sv,46,assert (tableEntryFSM_tb.DUT.state == waitsend0);,1
tableEntryFSM_tb.sv,52,assert (tableEntryFSM_tb.DUT.state == load1);,1
tableEntryFSM_tb.sv,57,assert (tableEntryFSM_tb.DUT.state == waitload1);,1
tableEntryFSM_tb.sv,62,assert (tableEntryFSM_tb.DUT.state == waitsend1);,1
tableEntryFSM_tb.sv,67,assert (tableEntryFSM_tb.DUT.state == waitsend1);,1
tableEntryFSM_tb.sv,73,assert (tableEntryFSM_tb.DUT.state == load2);,1
tableEntryFSM_tb.sv,78,assert (tableEntryFSM_tb.DUT.state == waitload2);,1
tableEntryFSM_tb.sv,83,assert (tableEntryFSM_tb.DUT.state == waitsend2);,1
tableEntryFSM_tb.sv,88,assert (tableEntryFSM_tb.DUT.state == waitsend2);,1
tableEntryFSM_tb.sv,94,assert (tableEntryFSM_tb.DUT.state == load3);,1
tableEntryFSM_tb.sv,99,assert (tableEntryFSM_tb.DUT.state == waitload3);,1
tableEntryFSM_tb.sv,104,assert (tableEntryFSM_tb.DUT.state == waitsend3);,1
tableEntryFSM_tb.sv,109,assert (tableEntryFSM_tb.DUT.state == waitsend3);,1
tableEntryFSM_tb.sv,115,assert (tableEntryFSM_tb.DUT.state == load4);,1
tableEntryFSM_tb.sv,120,assert (tableEntryFSM_tb.DUT.state == waitload4);,1
tableEntryFSM_tb.sv,125,assert (tableEntryFSM_tb.DUT.state == waitsend4);,1
tableEntryFSM_tb.sv,130,assert (tableEntryFSM_tb.DUT.state == waitsend4);,1
tableEntryFSM_tb.sv,136,assert (tableEntryFSM_tb.DUT.state == load5);,1
tableEntryFSM_tb.sv,141,assert (tableEntryFSM_tb.DUT.state == waitload5);,1
tableEntryFSM_tb.sv,146,assert (tableEntryFSM_tb.DUT.state == waitsend5);,1
tableEntryFSM_tb.sv,151,assert (tableEntryFSM_tb.DUT.state == waitsend5);,1
tableEntryFSM_tb.sv,157,assert (tableEntryFSM_tb.DUT.state == load6);,1
tableEntryFSM_tb.sv,162,assert (tableEntryFSM_tb.DUT.state == waitload6);,1
tableEntryFSM_tb.sv,167,assert (tableEntryFSM_tb.DUT.state == waitsend6);,1
tableEntryFSM_tb.sv,172,assert (tableEntryFSM_tb.DUT.state == waitsend6);,1
tableEntryFSM_tb.sv,178,assert (tableEntryFSM_tb.DUT.state == finish);,1
tableEntryFSM_tb.sv,189,assert (tableEntryFSM_tb.DUT.state == init);,1
dataFSM_tb.sv,23,assert (dataFSM_tb.DUT.state == idle);,1
dataFSM_tb.sv,29,assert (dataFSM_tb.DUT.state == ask);,1
dataFSM_tb.sv,35,assert (dataFSM_tb.DUT.state == ask);,1
dataFSM_tb.sv,41,assert (dataFSM_tb.DUT.state == nodata);,1
dataFSM_tb.sv,47,assert (dataFSM_tb.DUT.state == idle);,1
dataFSM_tb.sv,53,assert (dataFSM_tb.DUT.state == ask);,1
dataFSM_tb.sv,60,assert (dataFSM_tb.DUT.state == send);,1
dataFSM_tb.sv,65,assert (dataFSM_tb.DUT.state == waitsend);,1
dataFSM_tb.sv,70,assert (dataFSM_tb.DUT.state == waitsend);,1
dataFSM_tb.sv,76,assert (dataFSM_tb.DUT.state == ask);,1
dataFSM_tb.sv,83,assert (dataFSM_tb.DUT.state == full);,1
dataFSM_tb.sv,89,assert (dataFSM_tb.DUT.state == idle);,1
dataFSM_tb.sv,99,assert (dataFSM_tb.DUT.state == nodata);,1
dataFSM_tb.sv,111,assert (dataFSM_tb.DUT.state == full);,1
tableFSM_tb.sv,22,assert (tableFSM_tb.DUT.state == init);,1
tableFSM_tb.sv,28,assert (tableFSM_tb.DUT.state == load0);,1
tableFSM_tb.sv,33,assert (tableFSM_tb.DUT.state == waitload0);,1
tableFSM_tb.sv,38,assert (tableFSM_tb.DUT.state == waitsend0);,1
tableFSM_tb.sv,43,assert (tableFSM_tb.DUT.state == waitsend0);,1
tableFSM_tb.sv,49,assert (tableFSM_tb.DUT.state == load1);,1
tableFSM_tb.sv,54,assert (tableFSM_tb.DUT.state == waitload1);,1
tableFSM_tb.sv,59,assert (tableFSM_tb.DUT.state == waitsend1);,1
tableFSM_tb.sv,64,assert (tableFSM_tb.DUT.state == waitsend1);,1
tableFSM_tb.sv,70,assert (tableFSM_tb.DUT.state == finish);,1
tableFSM_tb.sv,81,assert (tableFSM_tb.DUT.state == init);,1
getReqFSM_tb.sv,27,assert (getReqFSM_tb.DUT.state == init);,1
getReqFSM_tb.sv,33,assert (getReqFSM_tb.DUT.state == load0);,1
getReqFSM_tb.sv,38,assert (getReqFSM_tb.DUT.state == waitload0);,1
getReqFSM_tb.sv,43,assert (getReqFSM_tb.DUT.state == waitsend0);,1
getReqFSM_tb.sv,48,assert (getReqFSM_tb.DUT.state == waitsend0);,1
getReqFSM_tb.sv,54,assert (getReqFSM_tb.DUT.state == load1);,1
getReqFSM_tb.sv,59,assert (getReqFSM_tb.DUT.state == waitload1);,1
getReqFSM_tb.sv,64,assert (getReqFSM_tb.DUT.state == waitsend1);,1
getReqFSM_tb.sv,69,assert (getReqFSM_tb.DUT.state == waitsend1);,1
getReqFSM_tb.sv,75,assert (getReqFSM_tb.DUT.state == load2);,1
getReqFSM_tb.sv,80,assert (getReqFSM_tb.DUT.state == waitload2);,1
getReqFSM_tb.sv,85,assert (getReqFSM_tb.DUT.state == waitsend2);,1
getReqFSM_tb.sv,90,assert (getReqFSM_tb.DUT.state == waitsend2);,1
getReqFSM_tb.sv,96,assert (getReqFSM_tb.DUT.state == load3);,1
getReqFSM_tb.sv,101,assert (getReqFSM_tb.DUT.state == waitload3);,1
getReqFSM_tb.sv,106,assert (getReqFSM_tb.DUT.state == waitsend3);,1
getReqFSM_tb.sv,111,assert (getReqFSM_tb.DUT.state == waitsend3);,1
getReqFSM_tb.sv,117,assert (getReqFSM_tb.DUT.state == load4);,1
getReqFSM_tb.sv,122,assert (getReqFSM_tb.DUT.state == waitload4);,1
getReqFSM_tb.sv,127,assert (getReqFSM_tb.DUT.state == waitsend4);,1
getReqFSM_tb.sv,132,assert (getReqFSM_tb.DUT.state == waitsend4);,1
getReqFSM_tb.sv,138,assert (getReqFSM_tb.DUT.state == load5);,1
getReqFSM_tb.sv,143,assert (getReqFSM_tb.DUT.state == waitload5);,1
getReqFSM_tb.sv,148,assert (getReqFSM_tb.DUT.state == waitsend5);,1
getReqFSM_tb.sv,153,assert (getReqFSM_tb.DUT.state == waitsend5);,1
getReqFSM_tb.sv,159,assert (getReqFSM_tb.DUT.state == load6);,1
getReqFSM_tb.sv,164,assert (getReqFSM_tb.DUT.state == waitload6);,1
getReqFSM_tb.sv,169,assert (getReqFSM_tb.DUT.state == waitsend6);,1
getReqFSM_tb.sv,174,assert (getReqFSM_tb.DUT.state == waitsend6);,1
getReqFSM_tb.sv,180,assert (getReqFSM_tb.DUT.state == load7);,1
getReqFSM_tb.sv,185,assert (getReqFSM_tb.DUT.state == waitload7);,1
getReqFSM_tb.sv,190,assert (getReqFSM_tb.DUT.state == waitsend7);,1
getReqFSM_tb.sv,195,assert (getReqFSM_tb.DUT.state == waitsend7);,1
getReqFSM_tb.sv,201,assert (getReqFSM_tb.DUT.state == load8);,1
getReqFSM_tb.sv,206,assert (getReqFSM_tb.DUT.state == waitload8);,1
getReqFSM_tb.sv,211,assert (getReqFSM_tb.DUT.state == waitsend8);,1
getReqFSM_tb.sv,216,assert (getReqFSM_tb.DUT.state == waitsend8);,1
getReqFSM_tb.sv,222,assert (getReqFSM_tb.DUT.state == load9);,1
getReqFSM_tb.sv,227,assert (getReqFSM_tb.DUT.state == waitload9);,1
getReqFSM_tb.sv,232,assert (getReqFSM_tb.DUT.state == waitsend9);,1
getReqFSM_tb.sv,237,assert (getReqFSM_tb.DUT.state == waitsend9);,1
getReqFSM_tb.sv,243,assert (getReqFSM_tb.DUT.state == load10);,1
getReqFSM_tb.sv,248,assert (getReqFSM_tb.DUT.state == waitload10);,1
getReqFSM_tb.sv,253,assert (getReqFSM_tb.DUT.state == waitsend10);,1
getReqFSM_tb.sv,258,assert (getReqFSM_tb.DUT.state == waitsend10);,1
getReqFSM_tb.sv,264,assert (getReqFSM_tb.DUT.state == load11);,1
getReqFSM_tb.sv,269,assert (getReqFSM_tb.DUT.state == waitload11);,1
getReqFSM_tb.sv,274,assert (getReqFSM_tb.DUT.state == waitsend11);,1
getReqFSM_tb.sv,279,assert (getReqFSM_tb.DUT.state == waitsend11);,1
getReqFSM_tb.sv,285,assert (getReqFSM_tb.DUT.state == load12);,1
getReqFSM_tb.sv,290,assert (getReqFSM_tb.DUT.state == waitload12);,1
getReqFSM_tb.sv,295,assert (getReqFSM_tb.DUT.state == waitsend12);,1
getReqFSM_tb.sv,300,assert (getReqFSM_tb.DUT.state == waitsend12);,1
getReqFSM_tb.sv,306,assert (getReqFSM_tb.DUT.state == load13);,1
getReqFSM_tb.sv,311,assert (getReqFSM_tb.DUT.state == waitload13);,1
getReqFSM_tb.sv,316,assert (getReqFSM_tb.DUT.state == waitsend13);,1
getReqFSM_tb.sv,321,assert (getReqFSM_tb.DUT.state == waitsend13);,1
getReqFSM_tb.sv,327,assert (getReqFSM_tb.DUT.state == load14);,1
getReqFSM_tb.sv,332,assert (getReqFSM_tb.DUT.state == waitload14);,1
getReqFSM_tb.sv,337,assert (getReqFSM_tb.DUT.state == waitsend14);,1
getReqFSM_tb.sv,342,assert (getReqFSM_tb.DUT.state == waitsend14);,1
getReqFSM_tb.sv,348,assert (getReqFSM_tb.DUT.state == load15);,1
getReqFSM_tb.sv,353,assert (getReqFSM_tb.DUT.state == waitload15);,1
getReqFSM_tb.sv,358,assert (getReqFSM_tb.DUT.state == waitsend15);,1
getReqFSM_tb.sv,363,assert (getReqFSM_tb.DUT.state == waitsend15);,1
getReqFSM_tb.sv,369,assert (getReqFSM_tb.DUT.state == load16);,1
getReqFSM_tb.sv,374,assert (getReqFSM_tb.DUT.state == waitload16);,1
getReqFSM_tb.sv,379,assert (getReqFSM_tb.DUT.state == waitsend16);,1
getReqFSM_tb.sv,384,assert (getReqFSM_tb.DUT.state == waitsend16);,1
getReqFSM_tb.sv,390,assert (getReqFSM_tb.DUT.state == load17);,1
getReqFSM_tb.sv,395,assert (getReqFSM_tb.DUT.state == waitload17);,1
getReqFSM_tb.sv,400,assert (getReqFSM_tb.DUT.state == waitsend17);,1
getReqFSM_tb.sv,405,assert (getReqFSM_tb.DUT.state == waitsend17);,1
getReqFSM_tb.sv,411,assert (getReqFSM_tb.DUT.state == load18);,1
getReqFSM_tb.sv,416,assert (getReqFSM_tb.DUT.state == waitload18);,1
getReqFSM_tb.sv,421,assert (getReqFSM_tb.DUT.state == waitsend18);,1
getReqFSM_tb.sv,426,assert (getReqFSM_tb.DUT.state == waitsend18);,1
getReqFSM_tb.sv,432,assert (getReqFSM_tb.DUT.state == finish);,1
getReqFSM_tb.sv,443,assert (getReqFSM_tb.DUT.state == init);,1
uartController_tb.sv,26,assert(uartController_tb.DUT.state == init);,1
uartController_tb.sv,33,assert(uartController_tb.DUT.state == init);,1
uartController_tb.sv,40,assert(uartController_tb.DUT.state == startFSM0);,1
uartController_tb.sv,47,assert(uartController_tb.DUT.state == init);,1
uartController_tb.sv,54,assert(uartController_tb.DUT.state == startFSM0);,1
uartController_tb.sv,59,assert(uartController_tb.DUT.state == waitFSM0);,1
uartController_tb.sv,64,assert(uartController_tb.DUT.state == waitFSM0);,1
uartController_tb.sv,71,assert(uartController_tb.DUT.state == waituart0);,1
uartController_tb.sv,78,assert(uartController_tb.DUT.state == startFSM1);,1
uartController_tb.sv,83,assert(uartController_tb.DUT.state == waitFSM1);,1
uartController_tb.sv,88,assert(uartController_tb.DUT.state == waitFSM1);,1
uartController_tb.sv,95,assert(uartController_tb.DUT.state == waituart1);,1
uartController_tb.sv,102,assert(uartController_tb.DUT.state == startFSM2);,1
uartController_tb.sv,107,assert(uartController_tb.DUT.state == waitFSM2);,1
uartController_tb.sv,112,assert(uartController_tb.DUT.state == waitFSM2);,1
uartController_tb.sv,119,assert(uartController_tb.DUT.state == startFSM3);,1
uartController_tb.sv,124,assert(uartController_tb.DUT.state == waitFSM3);,1
uartController_tb.sv,129,assert(uartController_tb.DUT.state == waitFSM3);,1
uartController_tb.sv,136,assert(uartController_tb.DUT.state == waituart3);,1
uartController_tb.sv,143,assert(uartController_tb.DUT.state == startFSM1);,1
uartController_tb.sv,156,assert(uartController_tb.DUT.state == startFSM4);,1
uartController_tb.sv,161,assert(uartController_tb.DUT.state == waitFSM4);,1
uartController_tb.sv,166,assert(uartController_tb.DUT.state == waitFSM4);,1
uartController_tb.sv,173,assert(uartController_tb.DUT.state == loopback);,1
uartController_tb.sv,180,assert(uartController_tb.DUT.state == startFSM1);,1
uartController_tb.sv,185,assert(uartController_tb.DUT.state == waitFSM1);,1
uartController_tb.sv,190,assert(uartController_tb.DUT.state == waitFSM1);,1
uartController_tb.sv,197,assert(uartController_tb.DUT.state == waituart1);,1
uartController_tb.sv,204,assert(uartController_tb.DUT.state == startFSM2);,1
uartController_tb.sv,209,assert(uartController_tb.DUT.state == waitFSM2);,1
uartController_tb.sv,214,assert(uartController_tb.DUT.state == waitFSM2);,1
uartController_tb.sv,221,assert(uartController_tb.DUT.state == startFSM3_2);,1
uartController_tb.sv,226,assert(uartController_tb.DUT.state == waitFSM3_2);,1
uartController_tb.sv,231,assert(uartController_tb.DUT.state == waitFSM3_2);,1
uartController_tb.sv,238,assert(uartController_tb.DUT.state == waituart3_2);,1
uartController_tb.sv,245,assert(uartController_tb.DUT.state == startFSM4_2);,1
uartController_tb.sv,250,assert(uartController_tb.DUT.state == waitFSM4_2);,1
uartController_tb.sv,255,assert(uartController_tb.DUT.state == waitFSM4_2);,1
uartController_tb.sv,262,assert(uartController_tb.DUT.state == waituart4_2);,1
uartController_tb.sv,269,assert(uartController_tb.DUT.state == finish);,1
readFSM_tb.sv,24,assert(readFSM_tb.DUT.state == init);,1
readFSM_tb.sv,31,assert(readFSM_tb.DUT.state == init);,1
readFSM_tb.sv,37,assert (readFSM_tb.DUT.state == load0);,1
readFSM_tb.sv,42,assert (readFSM_tb.DUT.state == waitload0);,1
readFSM_tb.sv,47,assert (readFSM_tb.DUT.state == waitsend0);,1
readFSM_tb.sv,52,assert (readFSM_tb.DUT.state == waitsend0);,1
readFSM_tb.sv,60,assert(readFSM_tb.DUT.state == finish);,1
readFSM_tb.sv,67,assert(readFSM_tb.DUT.state == init);,1
readFSM_tb.sv,77,assert (readFSM_tb.DUT.state == finish);,1
fillFSM_tb.sv,26,assert (fillFSM_tb.DUT.state == init);,1
fillFSM_tb.sv,32,assert (fillFSM_tb.DUT.state == load0);,1
fillFSM_tb.sv,37,assert (fillFSM_tb.DUT.state == waitload0);,1
fillFSM_tb.sv,42,assert (fillFSM_tb.DUT.state == waitsend0);,1
fillFSM_tb.sv,47,assert (fillFSM_tb.DUT.state == waitsend0);,1
fillFSM_tb.sv,53,assert (fillFSM_tb.DUT.state == load1);,1
fillFSM_tb.sv,58,assert (fillFSM_tb.DUT.state == waitload1);,1
fillFSM_tb.sv,63,assert (fillFSM_tb.DUT.state == waitsend1);,1
fillFSM_tb.sv,68,assert (fillFSM_tb.DUT.state == waitsend1);,1
fillFSM_tb.sv,74,assert (fillFSM_tb.DUT.state == load2);,1
fillFSM_tb.sv,79,assert (fillFSM_tb.DUT.state == waitload2);,1
fillFSM_tb.sv,84,assert (fillFSM_tb.DUT.state == waitsend2);,1
fillFSM_tb.sv,89,assert (fillFSM_tb.DUT.state == waitsend2);,1
fillFSM_tb.sv,95,assert (fillFSM_tb.DUT.state == load3);,1
fillFSM_tb.sv,100,assert (fillFSM_tb.DUT.state == waitload3);,1
fillFSM_tb.sv,105,assert (fillFSM_tb.DUT.state == waitsend3);,1
fillFSM_tb.sv,110,assert (fillFSM_tb.DUT.state == waitsend3);,1
fillFSM_tb.sv,116,assert (fillFSM_tb.DUT.state == load4);,1
fillFSM_tb.sv,121,assert (fillFSM_tb.DUT.state == waitload4);,1
fillFSM_tb.sv,126,assert (fillFSM_tb.DUT.state == waitsend4);,1
fillFSM_tb.sv,131,assert (fillFSM_tb.DUT.state == waitsend4);,1
fillFSM_tb.sv,137,assert (fillFSM_tb.DUT.state == load5);,1
fillFSM_tb.sv,142,assert (fillFSM_tb.DUT.state == waitload5);,1
fillFSM_tb.sv,147,assert (fillFSM_tb.DUT.state == waitsend5);,1
fillFSM_tb.sv,152,assert (fillFSM_tb.DUT.state == waitsend5);,1
fillFSM_tb.sv,158,assert (fillFSM_tb.DUT.state == finish);,1
fillFSM_tb.sv,169,assert (fillFSM_tb.DUT.state == init);,1
uart_tx_tb.sv,60,assert(cpu.tx ==1'b0);,1
uart_tx_tb.sv,62,assert(cpu.tx ==1'b0);,1
uart_tx_tb.sv,64,assert(cpu.tx == 1'b1);,1
uart_tx_tb.sv,66,assert(cpu.tx == 1'b1);,1
uart_tx_tb.sv,68,assert(cpu.tx == 1'b0);,1
uart_tx_tb.sv,70,assert(cpu.tx == 1'b0);,1
uart_tx_tb.sv,72,assert(cpu.tx == 1'b0);,1
uart_tx_tb.sv,74,assert(cpu.tx == 1'b1);,1
uart_tx_tb.sv,76,assert(cpu.tx == 1'b0);,1
uart_tx_tb.sv,78,assert(cpu.tx == 1'b0);,1
uart_tx_tb.sv,80,assert(cpu.tx == 1'b1);,1
uart_tx_tb.sv,82,assert(cpu.tx == 1'b1);,1
ram_3dlut.sv,38,assert(GSM1W + 1 == I_IDX_BIT);,1
ram_3dlut.sv,119,assert(cfg_count_3d[0] == GS - 1 && cfg_count_3d[1] == GS - 1 && cfg_count_3d[2] == GS - 1);,1
trilinear_interpolation.sv,44,assert(I_CD >= IN_CD);,1
trilinear_interpolation.sv,45,assert(OUT_CD <= IN_CD);,1
fractional_multiply.sv,20,assert(Q_BITS >= FRAC_BIT);,1
fractional_multiply.sv,21,assert(FRAC_BIT + OUT_BIT >= IN_BIT);,1
ovl_hold_value_logic.sv,118,"assert property (OVL_HOLD_VALUE_CASE1_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""A match occurred and the expression had the same value in the next cycle"");",3
ovl_hold_value_logic.sv,199,assume property (OVL_HOLD_VALUE_CASE1_P);,1
ovl_hold_value_logic.sv,204,assume property (OVL_HOLD_VALUE_CASE2_P);,1
ovl_hold_value_logic.sv,209,assume property (OVL_HOLD_VALUE_CASE3_P);,1
ovl_hold_value_logic.sv,214,assume property (OVL_HOLD_VALUE_CASE4_P);,1
ovl_hold_value_logic.sv,225,assume property (OVL_HOLD_VALUE_XZ_ON_TEST_EXPR_P);,1
ovl_hold_value_logic.sv,228,assume property (OVL_HOLD_VALUE_XZ_ON_VALUE_P);,1
assert_implication_logic.sv,64,assume property (ASSERT_IMPLICATION_XZ_ON_ANT_EXP_P);,1
assert_implication_logic.sv,73,assume property (ASSERT_IMPLICATION_XZ_ON_ANT_EXP_P);,1
assert_implication_logic.sv,76,assume property (ASSERT_IMPLICATION_XZ_ON_CON_EXP_P);,1
assert_frame_logic.sv,142,"assert property (ASSERT_FRAME_MIN0_MAX0_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression is not TRUE while start event is asserted when both parameters min_cks and max_cks are set to 0"");",2
assert_frame_logic.sv,237,assume property (ASSERT_FRAME_MIN0_MAX0_P);,1
assert_frame_logic.sv,243,assume property (ASSERT_FRAME_MIN_CHECK_P);,1
assert_frame_logic.sv,247,assume property (ASSERT_FRAME_MAX_CHECK_P);,1
assert_frame_logic.sv,253,assume property (ASSERT_FRAME_RESET_ON_START_MIN_CHECK_P);,1
assert_frame_logic.sv,257,assume property (ASSERT_FRAME_RESET_ON_START_MAX_CHECK_P);,1
assert_frame_logic.sv,262,assume property (ASSERT_FRAME_ERR_ON_START_P);,1
assert_frame_logic.sv,273,assume property (ASSERT_FRAME_XZ_ON_START_P);,1
assert_frame_logic.sv,277,assume property (ASSERT_FRAME_XZ_ON_TEST_EXPR_P);,1
assert_frame_logic.sv,281,assume property (ASSERT_FRAME_XZ_ON_NEW_START_P);,1
assert_frame_logic.sv,286,assume property (ASSERT_FRAME_MIN_XZ_CHECK_P);,1
assert_frame_logic.sv,290,assume property (ASSERT_FRAME_XZ_ON_NEW_START_P);,1
assert_frame_logic.sv,295,assume property (ASSERT_FRAME_XZ_MIN0_MAX0_P);,1
assert_next_logic.sv,57,"assert property (ASSERT_NEXT_START_WITHOUT_TEST_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression is not asserted after elapse of num_cks cycles from start event"");",2
assert_next_logic.sv,110,assume property (ASSERT_NEXT_START_WITHOUT_TEST_P);,1
assert_next_logic.sv,114,assume property (ASSERT_NEXT_TEST_WITHOUT_START_P);,1
assert_next_logic.sv,118,assume property (ASSERT_NEXT_NO_OVERLAP_P);,1
assert_next_logic.sv,129,assume property (ASSERT_NEXT_XZ_ON_START_EVENT_P);,1
assert_next_logic.sv,132,assume property (ASSERT_NEXT_XZ_ON_TEST_EXPR_P);,1
ovl_memory_sync_logic.sv,263,"assert property (OVL_MEMORY_SYNC_VALUE_CHK_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""data read is not same as data written"");",3
ovl_memory_sync_logic.sv,425,assume property (OVL_MEMORY_SYNC_VALUE_CHK_P);,1
ovl_memory_sync_logic.sv,430,assume property (OVL_MEMORY_SYNC_INIT_CHK_P);,1
ovl_memory_sync_logic.sv,435,assume property (OVL_MEMORY_SYNC_CONFLICT_CHK_P);,1
ovl_memory_sync_logic.sv,440,assume property (OVL_MEMORY_SYNC_WADDR_CHK_P);,1
ovl_memory_sync_logic.sv,443,assume property (OVL_MEMORY_SYNC_RADDR_CHK_P);,1
ovl_memory_sync_logic.sv,448,assume property (OVL_MEMORY_SYNC_WRITE1_CHK_P);,1
ovl_memory_sync_logic.sv,453,assume property (OVL_MEMORY_SYNC_READ1_CHK_P);,1
ovl_memory_sync_logic.sv,464,assume property (OVL_MEMORY_SYNC_XZ_ON_START_ADDR_RD_P);,1
ovl_memory_sync_logic.sv,467,assume property (OVL_MEMORY_SYNC_XZ_ON_END_ADDR_RD_P);,1
ovl_memory_sync_logic.sv,470,assume property (OVL_MEMORY_SYNC_XZ_ON_START_ADDR_WR_P);,1
ovl_memory_sync_logic.sv,473,assume property (OVL_MEMORY_SYNC_XZ_ON_END_ADDR_WR_P);,1
ovl_memory_sync_logic.sv,476,assume property (OVL_MEMORY_SYNC_XZ_ON_RADDR_P);,1
ovl_memory_sync_logic.sv,479,assume property (OVL_MEMORY_SYNC_XZ_ON_RDATA_P);,1
ovl_memory_sync_logic.sv,482,assume property (OVL_MEMORY_SYNC_XZ_ON_WADDR_P);,1
ovl_memory_sync_logic.sv,485,assume property (OVL_MEMORY_SYNC_XZ_ON_WDATA_P);,1
ovl_memory_sync_logic.sv,488,assume property (OVL_MEMORY_SYNC_XZ_ON_REN_P);,1
ovl_memory_sync_logic.sv,491,assume property (OVL_MEMORY_SYNC_XZ_ON_WEN_P);,1
ovl_range_logic.sv,28,"assert property (ASSERT_RANGE_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Test expression evaluates to a value outside the range specified by parameters min and max"");",3
ovl_range_logic.sv,67,assume property (ASSERT_RANGE_XZ_ON_TEST_EXPR_P);,1
ovl_range_logic.sv,76,assume property (ASSERT_RANGE_XZ_ON_TEST_EXPR_P);,1
ovl_xproduct_value_coverage_logic.sv,190,"assert property (OVL_XPRODUCT_VALUE_COVERAGE_CHECKED_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""All bits of the coverage matrix were covered"");",3
ovl_xproduct_value_coverage_logic.sv,256,assume property (OVL_XPRODUCT_VALUE_COVERAGE_CHECKED_P);,1
ovl_xproduct_value_coverage_logic.sv,266,assume property (OVL_XPRODUCT_VALUE_COVERAGE_XZ_IN_TEST_EXPR1_P);,1
ovl_xproduct_value_coverage_logic.sv,269,assume property (OVL_XPRODUCT_VALUE_COVERAGE_XZ_IN_TEST_EXPR2_P);,1
ovl_xproduct_value_coverage_logic.sv,272,assume property (OVL_XPRODUCT_VALUE_COVERAGE_XZ_IN_VAL1_P);,1
ovl_xproduct_value_coverage_logic.sv,275,assume property (OVL_XPRODUCT_VALUE_COVERAGE_XZ_IN_VAL2_P);,1
assert_no_transition_logic.sv,76,assume property (ASSERT_NO_TRANSITION_XZ_ON_TEST_EXPR_P);,1
assert_no_transition_logic.sv,86,assume property (ASSERT_NO_TRANSITION_XZ_ON_TEST_EXPR_P);,1
assert_no_transition_logic.sv,89,assume property (ASSERT_NO_TRANSITION_XZ_ON_START_STATE_P);,1
assert_no_transition_logic.sv,92,assume property (ASSERT_NO_TRANSITION_XZ_ON_NEXT_STATE_P);,1
assert_transition_logic.sv,76,assume property (ASSERT_TRANSITION_XZ_ON_TEST_EXPR_P);,1
assert_transition_logic.sv,86,assume property (ASSERT_TRANSITION_XZ_ON_TEST_EXPR_P);,1
assert_transition_logic.sv,89,assume property (ASSERT_TRANSITION_XZ_ON_START_STATE_P);,1
assert_transition_logic.sv,92,assume property (ASSERT_TRANSITION_XZ_ON_NEXT_STATE_P);,1
ovl_fifo_logic.sv,350,"assert property (OVL_FIFO_VALUE_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Dequeued FIFO value did not equal the corresponding enqueued value"");",3
ovl_fifo_logic.sv,460,assume property (OVL_FIFO_VALUE_P);,1
ovl_fifo_logic.sv,464,assume property (OVL_FIFO_OVERFLOW_P);,1
ovl_fifo_logic.sv,467,assume property (OVL_FIFO_UNDERFLOW_P);,1
ovl_fifo_logic.sv,470,assume property (OVL_FIFO_FULL_P);,1
ovl_fifo_logic.sv,473,assume property (OVL_FIFO_EMPTY_P);,1
ovl_fifo_logic.sv,483,assume property (OVL_FIFO_XZ_ON_ENQ_P);,1
ovl_fifo_logic.sv,486,assume property (OVL_FIFO_XZ_ON_DEQ_P);,1
ovl_fifo_logic.sv,489,assume property (OVL_FIFO_XZ_ON_FULL_P);,1
ovl_fifo_logic.sv,492,assume property (OVL_FIFO_XZ_ON_EMPTY_P);,1
ovl_fifo_logic.sv,495,assume property (OVL_FIFO_XZ_ON_ENQ_DATA_P);,1
ovl_fifo_logic.sv,498,assume property (OVL_FIFO_XZ_ON_DEQ_DATA_P);,1
ovl_reg_loaded_logic.sv,127,"assert property (OVL_REG_LOADED_CASE1_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Destination expression did not equal the value of the source expression in the specified time window"");",3
ovl_reg_loaded_logic.sv,204,assume property (OVL_REG_LOADED_CASE1_P);,1
ovl_reg_loaded_logic.sv,208,assume property (OVL_REG_LOADED_CASE2_P);,1
ovl_reg_loaded_logic.sv,219,assume property (OVL_REG_LOADED_XZ_ON_START_P);,1
ovl_reg_loaded_logic.sv,222,assume property (OVL_REG_LOADED_XZ_ON_STOP_P);,1
ovl_reg_loaded_logic.sv,225,assume property (OVL_REG_LOADED_XZ_ON_SRC_P);,1
ovl_reg_loaded_logic.sv,228,assume property (OVL_REG_LOADED_XZ_ON_DST_P);,1
assert_increment_logic.sv,25,"assert property (ASSERT_INCREMENT_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression is increased by a value other than specified"");",1
assert_increment_logic.sv,57,assume property (ASSERT_INCREMENT_XZ_ON_TEST_EXPR_P);,1
assert_increment_logic.sv,66,assume property (ASSERT_INCREMENT_XZ_ON_TEST_EXPR_P);,1
ovl_code_distance_logic.sv,63,assert property (OVL_CODE_DISTANCE_P),1
ovl_code_distance_logic.sv,69,"assert property (OVL_CODE_DISTANCE_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Code distance was not within specified limits"");",4
ovl_code_distance_logic.sv,121,assume property (OVL_CODE_DISTANCE_P);,1
ovl_code_distance_logic.sv,131,assume property (OVL_CODE_DISTANCE_XZ_ON_TEST_EXPR_P);,1
ovl_code_distance_logic.sv,134,assume property (OVL_CODE_DISTANCE_XZ_ON_test_expr2_P);,1
ovl_bits_logic.sv,122,assume property (OVL_BITS_MIN_P);,1
ovl_bits_logic.sv,127,assume property (OVL_BITS_MAX_P);,1
ovl_bits_logic.sv,138,assume property (OVL_BITS_XZ_ON_TEST_EXPR_P);,1
ovl_zero_one_hot_logic.sv,30,"assert property (ASSERT_ZERO_ONE_HOT_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Test expression contains more than 1 asserted bits"");",3
assert_delta_logic.sv,27,"assert property (ASSERT_DELTA_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression changed by a delta value not in the range specified by min and max"");",1
assert_delta_logic.sv,60,assume property (ASSERT_DELTA_XZ_ON_TEST_EXPR_P);,1
assert_delta_logic.sv,69,assume property (ASSERT_DELTA_XZ_ON_TEST_EXPR_P);,1
assert_no_underflow_logic.sv,54,assume property (ASSERT_NO_UNDERFLOW_XZ_ON_TEST_EXPR_P);,1
assert_no_underflow_logic.sv,63,assume property (ASSERT_NO_UNDERFLOW_XZ_ON_TEST_EXPR_P);,1
assert_unchange_logic.sv,69,assert property (ASSERT_UNCHANGE_P),1
assert_unchange_logic.sv,75,"assert property (ASSERT_UNCHANGE_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression changed value within num_cks from the start event asserted"");",2
assert_unchange_logic.sv,129,assume property (ASSERT_UNCHANGE_P);,1
assert_unchange_logic.sv,132,assume property (ASSERT_UNCHANGE_RESET_ON_START_P);,1
assert_unchange_logic.sv,135,assume property (ASSERT_UNCHANGE_ERR_ON_START_P);,1
assert_unchange_logic.sv,145,assume property (ASSERT_UNCHANGE_XZ_ON_START_P);,1
assert_unchange_logic.sv,148,assume property (ASSERT_UNCHANGE_XZ_ON_NEW_START_P);,1
assert_unchange_logic.sv,150,assume property (ASSERT_UNCHANGE_XZ_ON_TEST_EXPR_P);,1
ovl_win_unchange_logic.sv,57,"assert property (ASSERT_WIN_UNCHANGE_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Test expression has changed value before the event window closes"");",3
ovl_win_unchange_logic.sv,110,assume property (ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P);,1
ovl_win_unchange_logic.sv,119,assume property (ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P);,1
ovl_win_unchange_logic.sv,121,assume property (ASSERT_WIN_UNCHANGE_XZ_ON_TEST_EXPR_P);,1
ovl_win_unchange_logic.sv,123,assume property (ASSERT_WIN_UNCHANGE_XZ_ON_END_EVENT_P);,1
ovl_mutex_logic.sv,56,"assert property (OVL_MUTEX_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Expression's bits are not mutually exclusive"");",3
ovl_mutex_logic.sv,100,assume property (OVL_MUTEX_P);,1
ovl_mutex_logic.sv,110,assume property (OVL_MUTEX_XZ_ON_TEST_EXPR_P);,1
assert_handshake_logic.sv,86,"assert property (ASSERT_HANDSHAKE_ACK_MIN_CYCLE_P) else ovl_error_t(`OVL_FIRE_2STATE,""Acknowledge asserted before elapse of specified minimum min_ack_cycle cycles from request"");",2
assert_handshake_logic.sv,161,assume property (ASSERT_HANDSHAKE_ACK_MIN_CYCLE_P);,1
assert_handshake_logic.sv,165,assume property (ASSERT_HANDSHAKE_ACK_MAX_CYCLE_P);,1
assert_handshake_logic.sv,169,assume property (ASSERT_HANDSHAKE_ACK_MAX_LENGTH_P);,1
assert_handshake_logic.sv,173,assume property (ASSERT_HANDSHAKE_REQ_DEASSERT_P);,1
assert_handshake_logic.sv,177,assume property (ASSERT_HANDSHAKE_REQ_DROP_P);,1
assert_handshake_logic.sv,180,assume property (ASSERT_HANDSHAKE_MULTIPLE_REQ_P);,1
assert_handshake_logic.sv,182,assume property (ASSERT_HANDSHAKE_ACK_WITHOUT_REQ_FIRST_REQ_P);,1
assert_handshake_logic.sv,184,assume property (ASSERT_HANDSHAKE_ACK_WITHOUT_REQ_SUBSEQUENT_REQ_P);,1
assert_handshake_logic.sv,195,assume property (ASSERT_HANDSHAKE_REQ_XZ_P);,1
assert_handshake_logic.sv,200,assume property (ASSERT_HANDSHAKE_ACK_XZ_P);,1
assert_quiescent_state_logic.sv,132,assume property (ASSERT_QUIESCENT_STATE_XZ_ON_STATE_EXPR_P);,1
assert_quiescent_state_logic.sv,141,assume property (ASSERT_QUIESCENT_STATE_XZ_ON_STATE_EXPR_P);,1
assert_quiescent_state_logic.sv,144,assume property (ASSERT_QUIESCENT_STATE_XZ_ON_CHECK_VALUE_P);,1
assert_quiescent_state_logic.sv,147,assume property (ASSERT_QUIESCENT_STATE_XZ_ON_SAMPLE_EVENT_P);,1
assert_quiescent_state_logic.sv,151,assume property (ASSERT_QUIESCENT_STATE_XZ_ON_EOS_P);,1
assert_time_logic.sv,72,assert property (ASSERT_TIME_P),1
assert_time_logic.sv,78,"assert property (ASSERT_TIME_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression is not TRUE within specified num_cks cycles from the start_event"");",2
assert_time_logic.sv,132,assume property (ASSERT_TIME_P);,1
assert_time_logic.sv,135,assume property (ASSERT_TIME_RESET_ON_START_P);,1
assert_time_logic.sv,138,assume property (ASSERT_TIME_ERR_ON_START_P);,1
assert_time_logic.sv,148,assume property (ASSERT_TIME_XZ_ON_START_P);,1
assert_time_logic.sv,151,assume property (ASSERT_TIME_XZ_ON_NEW_START_P);,1
assert_time_logic.sv,153,assume property (ASSERT_TIME_XZ_ON_TEST_EXPR_P);,1
ovl_next_state_logic.sv,169,"assert property (OVL_NEXT_STATE_CHECK_P_1) else begin ovl_error_t(`OVL_FIRE_2STATE,""Match occurred but expression value was not a next value, or expression changed too soon"");",4
ovl_next_state_logic.sv,263,assume property (OVL_NEXT_STATE_CHECK_P_1);,1
ovl_next_state_logic.sv,266,assume property (OVL_NEXT_STATE_CHECK_P_2);,1
ovl_next_state_logic.sv,269,assume property (OVL_NEXT_STATE_CHECK_P_3);,1
ovl_next_state_logic.sv,272,assume property (OVL_NEXT_STATE_CHECK_P_4);,1
ovl_next_state_logic.sv,281,assume property (OVL_NEXT_STATE_XZ_ON_TEST_EXPR_P);,1
ovl_next_state_logic.sv,283,assume property (OVL_NEXT_STATE_XZ_ON_CURR_STATE_P);,1
ovl_next_state_logic.sv,285,assume property (OVL_NEXT_STATE_XZ_ON_NEXT_STATE_P);,1
ovl_no_contention_logic.sv,121,"assert property (OVL_NO_CONTENTION_SINGLE_DRIVER_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""More than 1 drivers are enabled"");",3
ovl_no_contention_logic.sv,208,assume property (OVL_NO_CONTENTION_SINGLE_DRIVER_P);,1
ovl_no_contention_logic.sv,211,assume property (OVL_NO_CONTENTION_NO_XZ_P);,1
ovl_no_contention_logic.sv,215,assume property (OVL_NO_CONTENTION_QUIET_CASE1_P);,1
ovl_no_contention_logic.sv,220,assume property (OVL_NO_CONTENTION_QUIET_CASE2_P);,1
ovl_no_contention_logic.sv,225,assume property (OVL_NO_CONTENTION_QUIET_CASE3_P);,1
ovl_no_contention_logic.sv,230,assume property (OVL_NO_CONTENTION_QUIET_CASE4_P);,1
ovl_no_contention_logic.sv,241,assume property (OVL_NO_CONTENTION_XZ_ON_DRIVER_ENABLES_P);,1
ovl_implication_logic.sv,81,assume property (ASSERT_IMPLICATION_XZ_ON_ANT_EXP_P);,1
ovl_implication_logic.sv,90,assume property (ASSERT_IMPLICATION_XZ_ON_ANT_EXP_P);,1
ovl_implication_logic.sv,93,assume property (ASSERT_IMPLICATION_XZ_ON_CON_EXP_P);,1
ovl_value_coverage_logic.sv,198,"assert property (OVL_VALUE_COVERAGE_CHECK_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""The value of the variable was covered"");",3
ovl_value_coverage_logic.sv,251,assume property (OVL_VALUE_COVERAGE_CHECK_P);,1
ovl_value_coverage_logic.sv,261,assume property (OVL_VALUE_COVERAGE_XZ_IN_TEST_EXPR_P);,1
ovl_value_coverage_logic.sv,264,assume property (OVL_VALUE_COVERAGE_XZ_IN_IS_NOT_P);,1
assert_never_logic.sv,23,"assert property (ASSERT_NEVER_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression is not FALSE"");",2
ovl_always_logic.sv,34,"assert property (ASSERT_ALWAYS_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Test expression is FALSE"");",3
ovl_always_logic.sv,74,assume property (ASSERT_ALWAYS_XZ_ON_TEST_EXPR_P);,1
ovl_always_logic.sv,83,assume property (ASSERT_ALWAYS_XZ_ON_TEST_EXPR_P);,1
ovl_xproduct_bit_coverage_logic.sv,150,"assert property (OVL_XPRODUCT_BIT_COVERAGE_CHECKED_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""All bits of the coverage matrix were covered"");",3
ovl_xproduct_bit_coverage_logic.sv,203,assume property (OVL_XPRODUCT_BIT_COVERAGE_CHECKED_P);,1
ovl_xproduct_bit_coverage_logic.sv,213,assume property (OVL_XPRODUCT_BIT_COVERAGE_XZ_IN_TEST_EXPR1_P);,1
ovl_xproduct_bit_coverage_logic.sv,216,assume property (OVL_XPRODUCT_BIT_COVERAGE_XZ_IN_TEST_EXPR2_P);,1
assert_no_overflow_logic.sv,56,assume property (ASSERT_NO_OVERFLOW_XZ_ON_TEST_EXPR_P);,1
assert_no_overflow_logic.sv,65,assume property (ASSERT_NO_OVERFLOW_XZ_ON_TEST_EXPR_P);,1
assert_width_logic.sv,63,assume property (ASSERT_WIDTH_XZ_ON_TEST_EXPR_P);,1
assert_width_logic.sv,66,assume property (ASSERT_WIDTH_XZ_ON_TEST_EXPR_P);,1
assert_width_logic.sv,77,assume property (ASSERT_WIDTH_XZ_ON_TEST_EXPR_P);,1
ovl_coverage_logic.sv,80,"assert property (OVL_COVERAGE_CHECK_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""The HDL statement was covered"");",3
ovl_coverage_logic.sv,125,assume property (OVL_COVERAGE_CHECK_P);,1
ovl_coverage_logic.sv,135,assume property (OVL_COVERAGE_XZ_IN_TEST_EXPR_P);,1
ovl_req_ack_unique_logic.sv,86,"assert property (OVL_REQ_ACK_UNIQUE_EXTRANEOUS_ACK_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""ack received without any outstanding req"");",3
ovl_req_ack_unique_logic.sv,90,"assert property (OVL_REQ_ACK_UNIQUE_EXTRANEOUS_ACK_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""ack received without any outstanding req"");",3
ovl_req_ack_unique_logic.sv,117,assume property (OVL_REQ_ACK_UNIQUE_EXTRANEOUS_ACK_P);,1
ovl_req_ack_unique_logic.sv,120,assume property (OVL_REQ_ACK_UNIQUE_MAX_OUTSTANDING_REQ_P);,1
ovl_req_ack_unique_logic.sv,127,"assert property (OVL_REQ_ACK_UNIQUE_ACK_TIMEOUT_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""ack not received within min to max time"");",3
ovl_req_ack_unique_logic.sv,144,assume property (OVL_REQ_ACK_UNIQUE_ACK_TIMEOUT_P);,1
ovl_req_ack_unique_logic.sv,154,"assert property (OVL_REQ_ACK_UNIQUE_ACK_TIMEOUT_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""ack not received within min to max time"");",3
ovl_req_ack_unique_logic.sv,171,assume property (OVL_REQ_ACK_UNIQUE_ACK_TIMEOUT_P);,1
ovl_req_ack_unique_logic.sv,267,"assert property (OVL_REQ_ACK_UNIQUE_EXTRANEOUS_ACK_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""ack received without any outstanding req"");",3
ovl_req_ack_unique_logic.sv,307,assume property (OVL_REQ_ACK_UNIQUE_EXTRANEOUS_ACK_P);,1
ovl_req_ack_unique_logic.sv,310,assume property (OVL_REQ_ACK_UNIQUE_MAX_OUTSTANDING_REQ_P);,1
ovl_req_ack_unique_logic.sv,313,assume property (OVL_REQ_ACK_UNIQUE_ACK_TIMEOUT_P);,1
ovl_req_ack_unique_logic.sv,509,assume property (OVL_REQ_ACK_UNIQUE_XZ_ON_REQ_P);,1
ovl_req_ack_unique_logic.sv,512,assume property (OVL_REQ_ACK_UNIQUE_XZ_ON_ACK_P);,1
ovl_never_unknown_logic.sv,14,"assert property (ASSERT_NEVER_UNKNOWN_P) else begin ovl_error_t(`OVL_FIRE_XCHECK,""test_expr contains X or Z"");",3
ovl_crc_logic.sv,515,"assert property (OVL_CRC_CHECK_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Input CRC value did not match the expected CRC value"");",3
ovl_crc_logic.sv,595,assume property (OVL_CRC_CHECK_P);,1
ovl_crc_logic.sv,605,assume property (OVL_CRC_XZ_IN_TEST_EXPR_P);,1
ovl_crc_logic.sv,608,assume property (OVL_CRC_XZ_IN_START_CRC_P);,1
ovl_crc_logic.sv,611,assume property (OVL_CRC_XZ_IN_VALID_P);,1
ovl_crc_logic.sv,614,assume property (OVL_CRC_XZ_IN_LATCH_CRC_P);,1
ovl_crc_logic.sv,617,assume property (OVL_CRC_XZ_IN_CRC_P);,1
ovl_crc_logic.sv,620,assume property (OVL_CRC_XZ_IN_COMPARE_P);,1
ovl_next_logic.sv,66,"assert property (ASSERT_NEXT_START_WITHOUT_TEST_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Test expression is not asserted after elapse of num_cks cycles from start event"");",3
ovl_next_logic.sv,135,assume property (ASSERT_NEXT_START_WITHOUT_TEST_P);,1
ovl_next_logic.sv,139,assume property (ASSERT_NEXT_TEST_WITHOUT_START_P);,1
ovl_next_logic.sv,143,assume property (ASSERT_NEXT_NO_OVERLAP_P);,1
ovl_next_logic.sv,154,assume property (ASSERT_NEXT_XZ_ON_START_EVENT_P);,1
ovl_next_logic.sv,157,assume property (ASSERT_NEXT_XZ_ON_TEST_EXPR_P);,1
assert_always_logic.sv,60,assume property (ASSERT_ALWAYS_XZ_ON_TEST_EXPR_P);,1
assert_always_logic.sv,69,assume property (ASSERT_ALWAYS_XZ_ON_TEST_EXPR_P);,1
ovl_one_hot_logic.sv,30,"assert property (ASSERT_ONE_HOT_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Test expression contains more or less than 1 asserted bits"");",3
ovl_req_requires_logic.sv,107,"assert property (OVL_REQ_REQUIRES_CASE1_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""After req_trigger asserted specified sequence did not occur within min to max latency"");",3
ovl_req_requires_logic.sv,124,"assert property (OVL_REQ_REQUIRES_CASE2_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""After req_trigger asserted specified sequence did not occur within min to max latency"");",3
ovl_req_requires_logic.sv,187,assume property (OVL_REQ_REQUIRES_CASE1_P);,1
ovl_req_requires_logic.sv,196,assume property (OVL_REQ_REQUIRES_CASE1_P);,1
ovl_req_requires_logic.sv,200,assume property (OVL_REQ_REQUIRES_CASE2_P);,1
ovl_req_requires_logic.sv,209,assume property (OVL_REQ_REQUIRES_CASE2_P);,1
ovl_req_requires_logic.sv,221,assume property (OVL_REQ_REQUIRES_XZ_ON_TRIG_REQ_P);,1
ovl_req_requires_logic.sv,224,assume property (OVL_REQ_REQUIRES_XZ_ON_FOLLOW_REQ_P);,1
ovl_req_requires_logic.sv,227,assume property (OVL_REQ_REQUIRES_XZ_ON_FOLLOW_RESP_P);,1
ovl_req_requires_logic.sv,230,assume property (OVL_REQ_REQUIRES_XZ_ON_TRIG_RESP_P);,1
assert_range_logic.sv,50,assume property (ASSERT_RANGE_XZ_ON_TEST_EXPR_P);,1
assert_range_logic.sv,59,assume property (ASSERT_RANGE_XZ_ON_TEST_EXPR_P);,1
assert_always_on_edge_logic.sv,113,"assert property (ASSERT_ALWAYS_ON_EDGE_NOEDGE_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression is FALSE irrespective of sampling event"");",2
assert_always_on_edge_logic.sv,249,assume property (ASSERT_ALWAYS_ON_EDGE_NOEDGE_P);,1
assert_always_on_edge_logic.sv,259,assume property (ASSERT_ALWAYS_ON_EDGE_NOEDGE_TEST_EXPR_XZ_P);,1
assert_always_on_edge_logic.sv,268,assume property (ASSERT_ALWAYS_ON_EDGE_POSEDGE_P);,1
assert_always_on_edge_logic.sv,278,assume property (ASSERT_ALWAYS_ON_EDGE_POSEDGE_TEST_EXPR_XZ_P);,1
assert_always_on_edge_logic.sv,281,assume property (ASSERT_ALWAYS_ON_EDGE_POSEDGE_SAMP_EVENT_0_XZ_P);,1
assert_always_on_edge_logic.sv,284,assume property (ASSERT_ALWAYS_ON_EDGE_POSEDGE_SAMP_EVENT_XZ_1_P);,1
assert_always_on_edge_logic.sv,287,assume property (ASSERT_ALWAYS_ON_EDGE_SAMP_EVENT_XZ_XZ_P);,1
assert_always_on_edge_logic.sv,296,assume property (ASSERT_ALWAYS_ON_EDGE_NEGEDGE_P);,1
assert_always_on_edge_logic.sv,306,assume property (ASSERT_ALWAYS_ON_EDGE_NEGEDGE_TEST_EXPR_XZ_P);,1
assert_always_on_edge_logic.sv,309,assume property (ASSERT_ALWAYS_ON_EDGE_NEGEDGE_SAMP_EVENT_1_XZ_P);,1
assert_always_on_edge_logic.sv,312,assume property (ASSERT_ALWAYS_ON_EDGE_NEGEDGE_SAMP_EVENT_XZ_0_P);,1
assert_always_on_edge_logic.sv,315,assume property (ASSERT_ALWAYS_ON_EDGE_SAMP_EVENT_XZ_XZ_P);,1
assert_always_on_edge_logic.sv,324,assume property (ASSERT_ALWAYS_ON_EDGE_ANYEDGE_P);,1
assert_always_on_edge_logic.sv,334,assume property (ASSERT_ALWAYS_ON_EDGE_ANYEDGE_TEST_EXPR_XZ_P);,1
assert_always_on_edge_logic.sv,337,assume property (ASSERT_ALWAYS_ON_EDGE_ANYEDGE_SAMP_EVENT_XZ_P);,1
assert_always_on_edge_logic.sv,340,assume property (ASSERT_ALWAYS_ON_EDGE_ANYEDGE_PREV_SAMP_EVENT_XZ_P);,1
assert_fifo_index_logic.sv,82,"assert property (ASSERT_FIFO_INDEX_OVERFLOW_P) else ovl_error_t(`OVL_FIRE_2STATE,""Fifo overflow detected"");",2
assert_fifo_index_logic.sv,133,assume property (ASSERT_FIFO_INDEX_OVERFLOW_P);,1
assert_fifo_index_logic.sv,136,assume property (ASSERT_FIFO_INDEX_UNDERFLOW_P);,1
assert_fifo_index_logic.sv,146,assume property (ASSERT_FIFO_INDEX_XZ_ON_PUSH_P);,1
assert_fifo_index_logic.sv,149,assume property (ASSERT_FIFO_INDEX_XZ_ON_POP_P);,1
assert_fifo_index_logic.sv,156,assume property (ASSERT_FIFO_INDEX_ILLEGAL_PUSH_POP_P);,1
assert_win_unchange_logic.sv,87,assume property (ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P);,1
assert_win_unchange_logic.sv,96,assume property (ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P);,1
assert_win_unchange_logic.sv,98,assume property (ASSERT_WIN_UNCHANGE_XZ_ON_TEST_EXPR_P);,1
assert_win_unchange_logic.sv,100,assume property (ASSERT_WIN_UNCHANGE_XZ_ON_END_EVENT_P);,1
assert_cycle_sequence_logic.sv,90,"assert property (ASSERT_SEQUENCE_TRIGGER_ON_MOST_P) else ovl_error_t(`OVL_FIRE_2STATE,""First num_cks-1 events occured but they are not followed by the last event in sequence"");",2
assert_cycle_sequence_logic.sv,164,assume property (ASSERT_SEQUENCE_TRIGGER_ON_MOST_P);,1
assert_cycle_sequence_logic.sv,168,assume property (ASSERT_SEQUENCE_TRIGGER_ON_FIRST_P);,1
assert_cycle_sequence_logic.sv,180,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC0_NC1_FIRST_EVENT_XZ_P);,1
assert_cycle_sequence_logic.sv,186,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC2_FIRST_EVENT_XZ_P);,1
assert_cycle_sequence_logic.sv,192,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC1_NC2_SUBSEQUENT_EVENTS_XZ_P);,1
assert_cycle_sequence_logic.sv,198,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC0_NON_LAST_EVENTS_XZ_P);,1
assert_cycle_sequence_logic.sv,201,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC0_LAST_EVENT_1_XZ_P);,1
assert_cycle_sequence_logic.sv,204,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC0_LAST_EVENT_XZ_1_XZ_P);,1
ovl_never_logic.sv,30,"assert property (ASSERT_NEVER_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Test expression is not FALSE"");",3
assert_window_logic.sv,86,assume property (ASSERT_WINDOW_XZ_ON_START_EVENT_P);,1
assert_window_logic.sv,96,assume property (ASSERT_WINDOW_XZ_ON_START_EVENT_P);,1
assert_window_logic.sv,98,assume property (ASSERT_WINDOW_XZ_ON_TEST_EXPR_P);,1
assert_window_logic.sv,100,assume property (ASSERT_WINDOW_XZ_ON_END_EVENT_P);,1
ovl_cycle_sequence_logic.sv,98,"assert property (ASSERT_SEQUENCE_TRIGGER_ON_MOST_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""First num_cks-1 events occured but they are not followed by the last event in sequence"");",3
ovl_cycle_sequence_logic.sv,197,assume property (ASSERT_SEQUENCE_TRIGGER_ON_MOST_P);,1
ovl_cycle_sequence_logic.sv,201,assume property (ASSERT_SEQUENCE_TRIGGER_ON_FIRST_P);,1
ovl_cycle_sequence_logic.sv,213,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC0_NC1_FIRST_EVENT_XZ_P);,1
ovl_cycle_sequence_logic.sv,219,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC2_FIRST_EVENT_XZ_P);,1
ovl_cycle_sequence_logic.sv,225,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC1_NC2_SUBSEQUENT_EVENTS_XZ_P);,1
ovl_cycle_sequence_logic.sv,231,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC0_NON_LAST_EVENTS_XZ_P);,1
ovl_cycle_sequence_logic.sv,234,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC0_LAST_EVENT_1_XZ_P);,1
ovl_cycle_sequence_logic.sv,237,assume property (ASSERT_SEQUENCE_TRIGGER_ON_NC0_LAST_EVENT_XZ_1_XZ_P);,1
ovl_multiport_fifo_logic.sv,650,assume property (OVL_MULTIPORT_FIFO_DEQUEUE_CHECK_P);,1
ovl_multiport_fifo_logic.sv,652,assume property (OVL_MULTIPORT_FIFO_ENQUEUE_CHECK_P);,1
ovl_multiport_fifo_logic.sv,656,assume property (OVL_MULTIPORT_FIFO_FULL_CHECK_P);,1
ovl_multiport_fifo_logic.sv,661,assume property (OVL_MULTIPORT_FIFO_EMPTY_CHECK_P);,1
ovl_multiport_fifo_logic.sv,681,assume property (OVL_MULTIPORT_FIFO_XZ_ON_ENQ_P);,1
ovl_multiport_fifo_logic.sv,683,assume property (OVL_MULTIPORT_FIFO_XZ_ON_DEQ_P);,1
ovl_multiport_fifo_logic.sv,687,assume property (OVL_MULTIPORT_FIFO_XZ_ON_FULL_P);,1
ovl_multiport_fifo_logic.sv,692,assume property (OVL_MULTIPORT_FIFO_XZ_ON_EMPTY_P);,1
assert_change_logic.sv,73,"assert property (ASSERT_CHANGE_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression did not change value within num_cks cycles after start event"");",2
assert_change_logic.sv,127,assume property (ASSERT_CHANGE_P);,1
assert_change_logic.sv,130,assume property (ASSERT_CHANGE_RESET_ON_START_P);,1
assert_change_logic.sv,133,assume property (ASSERT_CHANGE_ERR_ON_START_P);,1
assert_change_logic.sv,143,assume property (ASSERT_CHANGE_XZ_ON_START_P);,1
assert_change_logic.sv,146,assume property (ASSERT_CHANGE_XZ_ON_NEW_START_P);,1
assert_change_logic.sv,148,assume property (ASSERT_CHANGE_XZ_ON_TEST_EXPR_P);,1
assert_odd_parity_logic.sv,54,assume property (ASSERT_ODD_PARITY_XZ_ON_TEST_EXPR_P);,1
assert_odd_parity_logic.sv,63,assume property (ASSERT_ODD_PARITY_XZ_ON_TEST_EXPR_P);,1
assert_decrement_logic.sv,24,"assert property (ASSERT_DECREMENT_P) else ovl_error_t(`OVL_FIRE_2STATE,""Test expression is decreased by a value other than specified"");",1
assert_decrement_logic.sv,56,assume property (ASSERT_DECREMENT_XZ_ON_TEST_EXPR_P);,1
assert_decrement_logic.sv,65,assume property (ASSERT_DECREMENT_XZ_ON_TEST_EXPR_P);,1
assert_even_parity_logic.sv,53,assume property (ASSERT_EVEN_PARITY_XZ_ON_TEST_EXPR_P);,1
assert_even_parity_logic.sv,62,assume property (ASSERT_EVEN_PARITY_XZ_ON_TEST_EXPR_P);,1
assert_win_change_logic.sv,89,assume property (ASSERT_WIN_CHANGE_XZ_ON_START_EVENT_P);,1
assert_win_change_logic.sv,99,assume property (ASSERT_WIN_CHANGE_XZ_ON_START_EVENT_P);,1
assert_win_change_logic.sv,101,assume property (ASSERT_WIN_CHANGE_XZ_ON_TEST_EXPR_P);,1
assert_win_change_logic.sv,103,assume property (ASSERT_WIN_CHANGE_XZ_ON_END_EVENT_P);,1
ovl_value_logic.sv,96,"assert property (OVL_VALUE_VALUE_CHECK_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""test expr is not having value equal to one of the specified values"");",3
ovl_value_logic.sv,161,assume property (OVL_VALUE_VALUE_CHECK_P);,1
ovl_value_logic.sv,164,assume property (OVL_VALUE_INVERT_VALUE_CHECK_P);,1
ovl_value_logic.sv,174,assume property (OVL_VALUE_XZ_ON_TEST_EXPR_P);,1
ovl_value_logic.sv,177,assume property (OVL_VALUE_XZ_ON_VALS_P);,1
ovl_value_logic.sv,180,assume property (OVL_VALUE_XZ_ON_INVERT_MODE_P);,1
ovl_arbiter_logic.sv,259,"assert property (OVL_ARBITER_HIGHEST_PRIORITY_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Grant was issued for a request other than the highest priority request"");",3
ovl_arbiter_logic.sv,277,assume property (OVL_ARBITER_HIGHEST_PRIORITY_P);,1
ovl_arbiter_logic.sv,289,"assert property (OVL_ARBITER_GNT_IN_WINDOW_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Grant was not issued within the specified time window"");",3
ovl_arbiter_logic.sv,310,assume property (OVL_ARBITER_GNT_IN_WINDOW_P);,1
ovl_arbiter_logic.sv,316,"assert property (OVL_ARBITER_GNT_IN_WINDOW_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Grant was not issued within the specified time window"");",3
ovl_arbiter_logic.sv,335,assume property (OVL_ARBITER_GNT_IN_WINDOW_P);,1
ovl_arbiter_logic.sv,344,"assert property (OVL_ARBITER_GNT_IN_WINDOW_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Grant was not issued within the specified time window"");",3
ovl_arbiter_logic.sv,362,assume property (OVL_ARBITER_GNT_IN_WINDOW_P);,1
ovl_arbiter_logic.sv,369,"assert property (OVL_ARBITER_GNT_IN_WINDOW_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Grant was not issued within the specified time window"");",3
ovl_arbiter_logic.sv,387,assume property (OVL_ARBITER_GNT_IN_WINDOW_P);,1
ovl_arbiter_logic.sv,396,"assert property (OVL_ARBITER_ONE_CYCLE_GRANT_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Grant was asserted for longer than 1 cycle"");",3
ovl_arbiter_logic.sv,415,assume property (OVL_ARBITER_ONE_CYCLE_GRANT_P);,1
ovl_arbiter_logic.sv,418,"assert property (OVL_ARBITER_GNT_ONLY_IF_REQ_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Grant was issued without a request"");",3
ovl_arbiter_logic.sv,434,assume property (OVL_ARBITER_GNT_ONLY_IF_REQ_P);,1
ovl_arbiter_logic.sv,459,"assert property (OVL_ARBITER_FIFO_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Grant was issued for a request that was not the longest pending request"");",3
ovl_arbiter_logic.sv,479,assume property (OVL_ARBITER_FIFO_P);,1
ovl_arbiter_logic.sv,501,"assert property (OVL_ARBITER_FAIRNESS_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Two grants were issued to the same channel while another channel's request was pending"");",3
ovl_arbiter_logic.sv,519,assume property (OVL_ARBITER_FAIRNESS_P);,1
ovl_arbiter_logic.sv,531,"assert property (OVL_ARBITER_LRU_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Grant was issued to a channel that was more-recently used than another channel with a pending request"");",3
ovl_arbiter_logic.sv,548,assume property (OVL_ARBITER_LRU_P);,1
ovl_arbiter_logic.sv,558,"assert property (OVL_ARBITER_SINGLE_GRANT_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Multiple grants were issued in the same clock cycle"");",3
ovl_arbiter_logic.sv,574,assume property (OVL_ARBITER_SINGLE_GRANT_P);,1
ovl_arbiter_logic.sv,613,assume property (OVL_ARBITER_XZ_ON_REQS_P);,1
ovl_arbiter_logic.sv,616,assume property (OVL_ARBITER_XZ_ON_GNTS_P);,1
ovl_arbiter_logic.sv,620,assume property (OVL_ARBITER_XZ_ON_PRIORITIES_P);,1
ovl_memory_async_logic.sv,222,"assert property (OVL_MEMORY_ASYNC_VALUE_CHK_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""data read is not same as data written"");",3
ovl_memory_async_logic.sv,361,assume property (OVL_MEMORY_ASYNC_VALUE_CHK_P);,1
ovl_memory_async_logic.sv,366,assume property (OVL_MEMORY_ASYNC_INIT_CHK_P);,1
ovl_memory_async_logic.sv,371,assume property (OVL_MEMORY_ASYNC_WADDR_CHK_P);,1
ovl_memory_async_logic.sv,374,assume property (OVL_MEMORY_ASYNC_RADDR_CHK_P);,1
ovl_memory_async_logic.sv,379,assume property (OVL_MEMORY_ASYNC_WRITE1_CHK_P);,1
ovl_memory_async_logic.sv,384,assume property (OVL_MEMORY_ASYNC_READ1_CHK_P);,1
ovl_memory_async_logic.sv,395,assume property (OVL_MEMORY_ASYNC_XZ_ON_START_ADDR_REN_P);,1
ovl_memory_async_logic.sv,398,assume property (OVL_MEMORY_ASYNC_XZ_ON_END_ADDR_REN_P);,1
ovl_memory_async_logic.sv,401,assume property (OVL_MEMORY_ASYNC_XZ_ON_START_ADDR_WEN_P);,1
ovl_memory_async_logic.sv,404,assume property (OVL_MEMORY_ASYNC_XZ_ON_END_ADDR_WEN_P);,1
ovl_memory_async_logic.sv,407,assume property (OVL_MEMORY_ASYNC_XZ_ON_RADDR_P);,1
ovl_memory_async_logic.sv,410,assume property (OVL_MEMORY_ASYNC_XZ_ON_RDATA_P);,1
ovl_memory_async_logic.sv,413,assume property (OVL_MEMORY_ASYNC_XZ_ON_WADDR_P);,1
ovl_memory_async_logic.sv,416,assume property (OVL_MEMORY_ASYNC_XZ_ON_WDATA_P);,1
ovl_stack_logic.sv,209,"assert property (OVL_STACK_OVERFLOW_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""Data is pushed into the stack when the stack is full"");",3
ovl_stack_logic.sv,326,assume property (OVL_BITS_XZ_ON_PUSH_P);,1
ovl_stack_logic.sv,327,assume property (OVL_BITS_XZ_ON_PUSH_P);,1
ovl_stack_logic.sv,328,assume property (OVL_BITS_XZ_ON_PUSH_P);,1
ovl_stack_logic.sv,329,assume property (OVL_BITS_XZ_ON_PUSH_P);,1
ovl_stack_logic.sv,330,assume property (OVL_BITS_XZ_ON_PUSH_P);,1
ovl_stack_logic.sv,331,assume property (OVL_BITS_XZ_ON_PUSH_P);,1
ovl_stack_logic.sv,340,assume property (OVL_BITS_XZ_ON_PUSH_P);,1
ovl_stack_logic.sv,343,assume property (OVL_BITS_XZ_ON_POP_P);,1
ovl_stack_logic.sv,346,assume property (OVL_BITS_XZ_ON_FULL_P);,1
ovl_stack_logic.sv,349,assume property (OVL_BITS_XZ_ON_EMPTY_P);,1
ovl_stack_logic.sv,352,assume property (OVL_BITS_XZ_ON_PUSH_DATA_P);,1
ovl_stack_logic.sv,355,assume property (OVL_BITS_XZ_ON_POP_DATA_P);,1
ovl_valid_id_logic.sv,494,assert property(OVL_VALID_ID_MAX_LAT_P),1
ovl_valid_id_logic.sv,509,"assert property(OVL_VALID_ID_MAX_LAT_P) else begin ovl_error_t(`OVL_FIRE_2STATE,""OVL_VALID_ID_MAX_LAT check violated"");",3
ovl_valid_id_logic.sv,620,assume property(OVL_VALID_ID_MAX_LAT_P);,1
ovl_valid_id_logic.sv,625,assume property(OVL_VALID_ID_MAX_LAT_P);,1
ovl_valid_id_logic.sv,629,assume property (OVL_VALID_ID_MIN_LAT_P);,1
ovl_valid_id_logic.sv,632,assume property (OVL_VALID_ID_ISSUED_ID_OK_P);,1
ovl_valid_id_logic.sv,635,assume property (OVL_VALID_ID_RET_ID_OK_P);,1
ovl_valid_id_logic.sv,638,assume property (OVL_VALID_IDS_MAX_ISSUED_IDS_OK_P);,1
ovl_valid_id_logic.sv,641,assume property (OVL_VALID_ID_NB_RET_PER_ISSUED_0_P);,1
ovl_valid_id_logic.sv,651,assume property (OVL_VALID_ID_XZ_ISSUED_ID_P);,1
ovl_valid_id_logic.sv,654,assume property (OVL_VALID_ID_XZ_RET_ID_P);,1
ovl_valid_id_logic.sv,657,assume property (OVL_VALID_ID_XZ_ISSUED_SIG_P);,1
ovl_valid_id_logic.sv,660,assume property (OVL_VALID_ID_XZ_RET_SIG_P);,1
ovl_valid_id_logic.sv,663,assume property (OVL_VALID_ID_XZ_RESET_ID_P);,1
ovl_valid_id_logic.sv,666,assume property (OVL_VALID_ID_XZ_RESET_SIG_P);,1
axi_generator.sv,203,assert(artrans.araddr[2:0] == 3'b0);,1
apb_if.sv,28,"assert property(penable_rose_after_psel_rose) else `uvm_error(""ASSERT"", ""PENABLE not rose after PSEL rose"") property penable_fell_after_pready;",4
apb_if.sv,34,"assert property(penable_fell_after_pready) else `uvm_error(""ASSERT"", ""PENABLE not fell after pready rose"") property pwdata_stable_during_trans;",4
apb_if.sv,40,"assert property(pwdata_stable_during_trans) else `uvm_error(""ASSERT"", ""PWDATA not stable during transaction"") property paddr_stable_during_trans;",4
apb_if.sv,46,"assert property(paddr_stable_during_trans) else `uvm_error(""ASSERT"", ""PADDR not stable during transaction"") property pwrite_stable_during_trans;",4
apb_if.sv,52,"assert property(pwrite_stable_during_trans) else `uvm_error(""ASSERT"", ""PWRITE not stable during transaction"") endinterface `endif",10
lvc_apb_if.sv,118,"assert property(p_paddr_no_x) else `uvm_error(""ASSERT"", ""PADDR is unknown when PSEL is high"") property p_psel_rose_next_cycle_penable_rise;",3
lvc_apb_if.sv,123,"assert property(p_psel_rose_next_cycle_penable_rise) else `uvm_error(""ASSERT"", ""PENABLE not rose after 1 cycle PSEL rose"") property p_penable_rose_next_cycle_fall;",3
lvc_apb_if.sv,128,"assert property(p_penable_rose_next_cycle_fall) else `uvm_error(""ASSERT"", ""PENABLE not fall after 1 cycle PENABLE rose"") property p_pwdata_stable_during_trans_phase;",3
lvc_apb_if.sv,133,"assert property(p_pwdata_stable_during_trans_phase) else `uvm_error(""ASSERT"", ""PWDATA not stable during transaction phase"") property p_paddr_stable_until_next_trans;",3
lvc_apb_if.sv,138,"assert property(p_paddr_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PADDR not stable until next transaction start"") property p_pwrite_stable_until_next_trans;",3
lvc_apb_if.sv,144,"assert property(p_pwrite_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PWRITE not stable until next transaction start"") property p_prdata_available_once_penable_rose;",3
lvc_apb_if.sv,150,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,159,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,162,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,164,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,167,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,169,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,173,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,175,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,179,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,181,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,184,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,186,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,189,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,191,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,195,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,118,"assert property(p_paddr_no_x) else `uvm_error(""ASSERT"", ""PADDR is unknown when PSEL is high"") property p_psel_rose_next_cycle_penable_rise;",3
lvc_apb_if.sv,123,"assert property(p_psel_rose_next_cycle_penable_rise) else `uvm_error(""ASSERT"", ""PENABLE not rose after 1 cycle PSEL rose"") property p_penable_rose_next_cycle_fall;",3
lvc_apb_if.sv,128,"assert property(p_penable_rose_next_cycle_fall) else `uvm_error(""ASSERT"", ""PENABLE not fall after 1 cycle PENABLE rose"") property p_pwdata_stable_during_trans_phase;",3
lvc_apb_if.sv,133,"assert property(p_pwdata_stable_during_trans_phase) else `uvm_error(""ASSERT"", ""PWDATA not stable during transaction phase"") property p_paddr_stable_until_next_trans;",3
lvc_apb_if.sv,138,"assert property(p_paddr_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PADDR not stable until next transaction start"") property p_pwrite_stable_until_next_trans;",3
lvc_apb_if.sv,144,"assert property(p_pwrite_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PWRITE not stable until next transaction start"") property p_prdata_available_once_penable_rose;",3
lvc_apb_if.sv,150,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,159,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,162,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,164,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,167,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,169,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,173,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,175,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,179,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,181,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,184,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,186,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,189,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,191,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,195,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,118,"assert property(p_paddr_no_x) else `uvm_error(""ASSERT"", ""PADDR is unknown when PSEL is high"") property p_psel_rose_next_cycle_penable_rise;",3
lvc_apb_if.sv,123,"assert property(p_psel_rose_next_cycle_penable_rise) else `uvm_error(""ASSERT"", ""PENABLE not rose after 1 cycle PSEL rose"") property p_penable_rose_next_cycle_fall;",3
lvc_apb_if.sv,128,"assert property(p_penable_rose_next_cycle_fall) else `uvm_error(""ASSERT"", ""PENABLE not fall after 1 cycle PENABLE rose"") property p_pwdata_stable_during_trans_phase;",3
lvc_apb_if.sv,133,"assert property(p_pwdata_stable_during_trans_phase) else `uvm_error(""ASSERT"", ""PWDATA not stable during transaction phase"") property p_paddr_stable_until_next_trans;",3
lvc_apb_if.sv,138,"assert property(p_paddr_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PADDR not stable until next transaction start"") property p_pwrite_stable_until_next_trans;",3
lvc_apb_if.sv,144,"assert property(p_pwrite_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PWRITE not stable until next transaction start"") property p_prdata_available_once_penable_rose;",3
lvc_apb_if.sv,150,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,159,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,162,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,164,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,167,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,169,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,173,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,175,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,179,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,181,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,184,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,186,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,189,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,191,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,195,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,118,"assert property(p_paddr_no_x) else `uvm_error(""ASSERT"", ""PADDR is unknown when PSEL is high"") property p_psel_rose_next_cycle_penable_rise;",3
lvc_apb_if.sv,123,"assert property(p_psel_rose_next_cycle_penable_rise) else `uvm_error(""ASSERT"", ""PENABLE not rose after 1 cycle PSEL rose"") property p_penable_rose_next_cycle_fall;",3
lvc_apb_if.sv,128,"assert property(p_penable_rose_next_cycle_fall) else `uvm_error(""ASSERT"", ""PENABLE not fall after 1 cycle PENABLE rose"") property p_pwdata_stable_during_trans_phase;",3
lvc_apb_if.sv,133,"assert property(p_pwdata_stable_during_trans_phase) else `uvm_error(""ASSERT"", ""PWDATA not stable during transaction phase"") property p_paddr_stable_until_next_trans;",3
lvc_apb_if.sv,138,"assert property(p_paddr_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PADDR not stable until next transaction start"") property p_pwrite_stable_until_next_trans;",3
lvc_apb_if.sv,144,"assert property(p_pwrite_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PWRITE not stable until next transaction start"") property p_prdata_available_once_penable_rose;",3
lvc_apb_if.sv,150,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,159,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,162,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,164,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,167,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,169,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,173,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,175,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,179,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,181,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,184,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,186,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,189,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,191,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,195,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,118,"assert property(p_paddr_no_x) else `uvm_error(""ASSERT"", ""PADDR is unknown when PSEL is high"") property p_psel_rose_next_cycle_penable_rise;",3
lvc_apb_if.sv,123,"assert property(p_psel_rose_next_cycle_penable_rise) else `uvm_error(""ASSERT"", ""PENABLE not rose after 1 cycle PSEL rose"") property p_penable_rose_next_cycle_fall;",3
lvc_apb_if.sv,128,"assert property(p_penable_rose_next_cycle_fall) else `uvm_error(""ASSERT"", ""PENABLE not fall after 1 cycle PENABLE rose"") property p_pwdata_stable_during_trans_phase;",3
lvc_apb_if.sv,133,"assert property(p_pwdata_stable_during_trans_phase) else `uvm_error(""ASSERT"", ""PWDATA not stable during transaction phase"") property p_paddr_stable_until_next_trans;",3
lvc_apb_if.sv,138,"assert property(p_paddr_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PADDR not stable until next transaction start"") property p_pwrite_stable_until_next_trans;",3
lvc_apb_if.sv,144,"assert property(p_pwrite_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PWRITE not stable until next transaction start"") property p_prdata_available_once_penable_rose;",3
lvc_apb_if.sv,150,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,159,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,162,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,164,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,167,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,169,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,173,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,175,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,179,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,181,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,184,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,186,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,189,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,191,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,195,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,118,"assert property(p_paddr_no_x) else `uvm_error(""ASSERT"", ""PADDR is unknown when PSEL is high"") property p_psel_rose_next_cycle_penable_rise;",3
lvc_apb_if.sv,123,"assert property(p_psel_rose_next_cycle_penable_rise) else `uvm_error(""ASSERT"", ""PENABLE not rose after 1 cycle PSEL rose"") property p_penable_rose_next_cycle_fall;",3
lvc_apb_if.sv,128,"assert property(p_penable_rose_next_cycle_fall) else `uvm_error(""ASSERT"", ""PENABLE not fall after 1 cycle PENABLE rose"") property p_pwdata_stable_during_trans_phase;",3
lvc_apb_if.sv,133,"assert property(p_pwdata_stable_during_trans_phase) else `uvm_error(""ASSERT"", ""PWDATA not stable during transaction phase"") property p_paddr_stable_until_next_trans;",3
lvc_apb_if.sv,138,"assert property(p_paddr_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PADDR not stable until next transaction start"") property p_pwrite_stable_until_next_trans;",3
lvc_apb_if.sv,144,"assert property(p_pwrite_stable_until_next_trans) else `uvm_error(""ASSERT"", ""PWRITE not stable until next transaction start"") property p_prdata_available_once_penable_rose;",3
lvc_apb_if.sv,150,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,159,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,162,cover property(p_write_during_nonburst_trans);,1
lvc_apb_if.sv,164,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,167,cover property(p_write_during_burst_trans);,1
lvc_apb_if.sv,169,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,173,cover property(p_write_read_burst_trans);,1
lvc_apb_if.sv,175,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,179,cover property(p_write_twice_read_burst_trans);,1
lvc_apb_if.sv,181,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,184,cover property(p_read_during_nonburst_trans);,1
lvc_apb_if.sv,186,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,189,cover property(p_read_during_burst_trans);,1
lvc_apb_if.sv,191,cover property(p_read_write_read_burst_trans);,1
lvc_apb_if.sv,195,cover property(p_read_write_read_burst_trans);,1
CHECKER.sv,381,"assert (inf.D.d_date[0][4:0] !== 5'd0) else $fatal(0, ""\nAssertion 8 is violated\n"");",2
CHECKER.sv,391,"assert (inf.D.d_date[0][4:0] !== 5'd0) else $fatal(0, ""\nAssertion 8 is violated\n"");",2
CHECKER_iclab059.sv,381,"assert (inf.D.d_date[0][4:0] !== 5'd0) else $fatal(0, ""\nAssertion 8 is violated\n"");",2
CHECKER_iclab059.sv,391,"assert (inf.D.d_date[0][4:0] !== 5'd0) else $fatal(0, ""\nAssertion 8 is violated\n"");",2
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
DW_lp_fifoctl_1c_df.v,1147,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
DW_lp_fifoctl_1c_df.v,1152,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
DW_lp_fifoctl_1c_df.v,1147,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
DW_lp_fifoctl_1c_df.v,1152,assert property (DW_re_reset_empty_flags) else if (`DW_LOCAL_SVA_MODE == 1) $warning;,2
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
picorv32.v,2040,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2043,restrict property (resetn != $initstate);,1
picorv32.v,2053,assert (mem_wstrb == 0);,1
picorv32.v,2065,assert (ok);,1
picorv32.v,2083,assert(mem_valid);,1
picorv32.v,2084,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2085,assert(mem_wstrb == 0);,1
picorv32.v,2088,assert(mem_valid);,1
picorv32.v,2089,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2090,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2091,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2094,assert(!mem_valid || mem_ready);,1
axilxbar.v,914,assert(!M_AXI_AWREADY[N]);,1
axilxbar.v,915,assert(r_awprot[N] == 0);,1
axilxbar.v,919,assert(!M_AXI_AWREADY[N] == r_awvalid[N]);,1
axilxbar.v,922,assert(!M_AXI_WREADY[N] == r_wvalid[N]);,1
axilxbar.v,926,assert(r_arprot[N] == 0);,1
axilxbar.v,929,assert(!M_AXI_ARREADY[N] == r_arvalid[N]);,1
axilxbar.v,1129,assert(axi_awaddr == 0);,1
axilxbar.v,1130,assert(axi_awprot == 0);,1
axilxbar.v,1136,assert(axi_wdata == 0);,1
axilxbar.v,1137,assert(axi_wstrb == 0);,1
axilxbar.v,1220,assert(axi_araddr == 0);,1
axilxbar.v,1221,assert(axi_arprot == 0);,1
axilxbar.v,1345,assert(r_bresp[N] != 2'b01);,1
axilxbar.v,1348,assert(s_axi_bready[mwindex[N]] == !r_bvalid[N]);,1
axilxbar.v,1350,assert(!r_bvalid[N]);,1
axilxbar.v,1353,assert(r_bresp[N] == 0);,1
axilxbar.v,1357,assert(axi_bresp == 0);,1
axilxbar.v,1502,assert(r_rresp[N] != 2'b01);,1
axilxbar.v,1505,assert(s_axi_rready[mrindex[N]] == !r_rvalid[N]);,1
axilxbar.v,1507,assert(!r_rvalid[N]);,1
axilxbar.v,1511,assert(r_rresp[N] == 0);,1
axilxbar.v,1512,assert(r_rdata[N] == 0);,1
axilxbar.v,1518,assert(axi_rresp == 0);,1
axilxbar.v,1519,assert(axi_rdata == 0);,1
axilxbar.v,1626,assert(missing_wdata == awpending - wpending);,1
axilxbar.v,1653,assert(mwgrant[N]);,1
axilxbar.v,1654,assert(mwindex[N] == iM);,1
axilxbar.v,1657,assert(swgrant[iM]);,1
axilxbar.v,1658,assert(swindex[iM] == N);,1
axilxbar.v,1665,assert(wgrant[N] != 0);,1
axilxbar.v,1669,assert(wrequest[N][NS-1:0] == 0);,1
axilxbar.v,1679,assert(mrgrant[N]);,1
axilxbar.v,1680,assert(mrindex[N] == iM);,1
axilxbar.v,1683,assert(srgrant[iM]);,1
axilxbar.v,1684,assert(srindex[iM] == N);,1
axilxbar.v,1691,assert(rgrant[N] != 0);,1
axilxbar.v,1695,assert(rrequest[N][NS-1:0] == 0);,1
axilxbar.v,1779,assert(!M_AXI_BVALID[N]);,1
axilxbar.v,1783,assert(w_mawpending[N] == 0);,1
axilxbar.v,1784,assert(w_mwpending[N] == 0);,1
axilxbar.v,1815,assert(!M_AXI_RVALID[N]);,1
axilxbar.v,1817,assert(w_mrpending[N] == 0);,1
axilxbar.v,1827,assert(mwfull[N] == &w_mawpending[N]);,1
axilxbar.v,1834,assert(mrfull[N] == &w_mrpending[N]);,1
axilxbar.v,1893,assert(fs_awr_outstanding[M] == 0);,1
axilxbar.v,1894,assert(fs_wr_outstanding[M] == 0);,1
axilxbar.v,1899,assert(fs_rd_outstanding[M] == 0);,1
axilxbar.v,2031,cover(!mwgrant[N] && whsreturn); // @27 always @(*) cover(!mwgrant[N] && was_wevery); // @27 // err_wr_return is a test to make certain we can return a // bus error on the write channel. initial err_wr_return = 0;,7
axilxbar.v,2046,cover(err_wr_return);,1
axilxbar.v,2048,cover(!mwgrant[N] && err_wr_return);,1
axilxbar.v,2052,assert(mwgrant[N]);,1
axilxbar.v,2103,cover(!mrgrant[N] && rhsreturn); // @26 always @(*) cover(!mrgrant[N] && was_revery); // @26 initial err_rd_return = 0;,5
axilxbar.v,2116,cover(M_AXI_ARVALID[N] && rrequest[N][NS]);,1
axilxbar.v,2118,cover(rgrant[N][NS]);,1
axilxbar.v,2120,cover(err_rd_return);,1
axilxbar.v,2122,cover(!mrgrant[N] && err_rd_return); //@! always @(*) if (M_AXI_BVALID[N] && wgrant[N][NS]) assert(M_AXI_BRESP[2*N+:2]==INTERCONNECT_ERROR);,5
axilxbar.v,2129,assert(M_AXI_RRESP[2*N+:2]==INTERCONNECT_ERROR);,1
axilxbar.v,2155,assume(f_const_source < NM);,1
axilxbar.v,2166,assume(f_const_slave < NS);,1
axilxbar.v,2182,assume(f_awaddr != f_const_addr_n);,1
axilxbar.v,2183,assume(M_AXI_AWPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2187,assume(m_wdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2188,assume(m_wstrb[f_const_source] != f_const_strb_n);,1
axilxbar.v,2192,assume(f_araddr != f_const_addr_n);,1
axilxbar.v,2193,assume(M_AXI_ARPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2198,assume(s_axi_bresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2203,assume(s_axi_rdata[f_const_slave] != f_const_data_n);,1
axilxbar.v,2204,assume(s_axi_rresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2213,assert(r_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2214,assert(r_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2218,assert(S_AXI_AWADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2219,assert(S_AXI_AWPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2223,assert(S_AXI_WDATA[f_const_slave*DW+:DW] != f_const_data_n);,1
axilxbar.v,2228,assert(r_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2229,assert(r_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2233,assert(S_AXI_ARADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2234,assert(S_AXI_ARPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2238,assert(r_bresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2240,assert(M_AXI_BRESP[f_const_source*2+:2] != f_const_resp_n);,1
axilxbar.v,2243,assert(r_rresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2244,assert(r_rdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2248,assert(M_AXI_RRESP[f_const_source*2+:2]!=f_const_resp_n);,1
axilxbar.v,2249,assert(M_AXI_RDATA[f_const_source*DW+:DW]!=f_const_data_n);,1
picorv32.v,2049,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2052,restrict property (resetn != $initstate);,1
picorv32.v,2062,assert (mem_wstrb == 0);,1
picorv32.v,2074,assert (ok);,1
picorv32.v,2092,assert(mem_valid);,1
picorv32.v,2093,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2094,assert(mem_wstrb == 0);,1
picorv32.v,2097,assert(mem_valid);,1
picorv32.v,2098,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2099,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2100,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2103,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
mem_int_tb.v,22,assert(byteenable == 4'hf);,1
mem_int_tb.v,33,assert(read_out_mem == 32'h89674523);//reverse bytes. state = 3;,3
mem_int_tb.v,45,assert(read_out_mem == 32'hffffff89);,1
mem_int_tb.v,80,assert(byteenable == 4'hf);,1
mem_int_tb.v,83,assert(mem_out == 32'h88765432);// this worls quite succesfully. //No need to change instruction for next test mem_out = 32'h88888888;,4
mem_int_tb.v,95,assert(byteenable == 4'b1100);//we can see the change given by the modulo state = 5;,2
mem_int_tb.v,101,assert(read_out_mem == 32'h88885432);,1
mem_int_tb.v,113,assert(byteenable == 15);,1
mem_int_tb.v,120,assert(byteenable == 4'b1100);,1
mem_int_tb.v,124,assert(read_out_mem == 32'h00003412);//we know g_l is 2. //this is because byteenable is non-zero at 2 postions //also as byte[2][7] corresponding to the value h'34 0011 0100 is zero //we enter the stage where we initate everything as 0. mem_out = 32'h12F45678;//same LH instruction as above with bytes[2][7] == 1 state = 1;,7
mem_int_tb.v,136,assert(byteenable == 4'b1100);,1
mem_int_tb.v,140,assert(read_out_mem == 32'hFFFFF412);,1
mem_int_tb.v,156,assert(read_out_mem == 32'h000000F4);//done by tracing through code. //byteenable[2] != 0 as 2 = mem_addr %4. (Somehow this is offset+rs) //TESTING LHU mem_out = 32'h12345678;,5
mem_int_tb.v,166,assert(byteenable == 15);,1
mem_int_tb.v,173,assert(byteenable == 4'b1100);,1
mem_int_tb.v,176,assert(read_out_mem == 32'h00003412);,1
mem_int_tb.v,194,assert(read_out_mem == 32'h32547688);,1
fsm_tb.v,33,assert(state == 1);,1
fsm_tb.v,40,assert(state == 2);,1
fsm_tb.v,53,assert(state == 1);,1
fsm_tb.v,56,assert(state == 2);,1
fsm_tb.v,60,assert(state == 2);,1
fsm_tb.v,65,assert(state == 3);,1
fsm_tb.v,70,assert(state == 4);,1
fsm_tb.v,73,assert(state == 5);,1
fsm_tb.v,77,assert(state == 5);,1
fsm_tb.v,83,assert(state == 1);,1
fsm_tb.v,86,assert(state == 2);,1
fsm_tb.v,89,assert(state == 2);,1
fsm_tb.v,92,assert(state == 3);,1
tv_itch5_tb.v,107,assert( itch_end_of_snapshot_v_o );,1
tv_itch5_tb.v,108,assert( itch_end_of_snapshot_sequence_number_o == tb_eos_data );,1
tv_itch5_tb.v,111,assert( ~m_uut.itch_msg_sent );,1
tv_itch5_tb.v,142,assert( debug_id_o == tb_debug_id );,1
fftstage.v,406,assume(f_mpydelay > 1);,1
fftstage.v,416,assert(iaddr == 0);,1
fftstage.v,417,assert(wait_for_sync);,1
fftstage.v,418,assert(o_sync == 0);,1
fftstage.v,419,assert(oaddr == 0);,1
fftstage.v,420,assert(!b_started);,1
fftstage.v,421,assert(!o_sync);,1
fftstage.v,437,assume(!i_ce);,1
fftstage.v,440,assume(f_addr[LGSPAN]==1'b0);,1
fftstage.v,448,assert(iaddr == 0);,1
fftstage.v,454,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,464,assert(ib_a == f_left);,1
fftstage.v,465,assert(ib_b == f_right);,1
fftstage.v,466,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,491,assert(f_output_active == b_started);,1
fftstage.v,495,assert(!f_output_active);,1
fftstage.v,500,assert(oaddr == f_oaddr);,1
fftstage.v,502,assert(oaddr == 0);,1
fftstage.v,506,assume(!ob_sync);,1
fftstage.v,529,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
fftstage.v,534,assert(o_sync);,1
fftstage.v,536,assert(!o_sync);,1
fftstage.v,540,assert(o_data == f_oleft);,1
fftstage.v,545,assert(pre_ovalue == f_oright);,1
fftstage.v,550,assert(o_data == f_oright);,1
hwbfly.v,673,assume(i_ce);,1
hwbfly.v,685,assume(!i_ce);,1
hwbfly.v,692,assume(!i_ce);,1
hwbfly.v,729,assert(left_sr == f_sumrx);,1
hwbfly.v,730,assert(left_si == f_sumix);,1
hwbfly.v,731,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,735,assert(mpy_r == 0);,1
hwbfly.v,736,assert(mpy_i == 0);,1
hwbfly.v,740,assert(mpy_r == 0);,1
hwbfly.v,741,assert(mpy_i == 0);,1
hwbfly.v,746,assert(mpy_r == f_difrx);,1
hwbfly.v,747,assert(mpy_i == f_difix);,1
hwbfly.v,752,assert(mpy_r == -f_difix);,1
hwbfly.v,753,assert(mpy_i == f_difrx);,1
hwbfly.v,758,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,759,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,764,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,765,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,795,assert(p_one == 0);,1
hwbfly.v,797,assert(p_two == 0);,1
hwbfly.v,800,assert(p_one == f_predifrx);,1
hwbfly.v,802,assert(p_two == f_predifix);,1
hwbfly.v,805,assert(p_one == 0);,1
hwbfly.v,807,assert(p_two == 0);,1
hwbfly.v,811,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,813,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,817,assert(p_three == 0);,1
hwbfly.v,819,assert(p_three == 0);,1
hwbfly.v,822,assert(p_three == f_sumdiff);,1
hwbfly.v,824,assert(p_three == f_sumcoef);,1
hwbfly.v,827,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,828,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,829,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1007,assume(i_ce);,1
butterfly.v,1015,assume(i_ce);,1
butterfly.v,1025,assume(!i_ce);,1
butterfly.v,1030,assume(i_ce);,1
butterfly.v,1035,assume(i_ce);,1
butterfly.v,1044,assume(!i_ce);,1
butterfly.v,1051,assume(i_ce);,1
butterfly.v,1061,assume(i_ce);,1
butterfly.v,1100,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,1101,assert(left_sr == f_sumrx);,1
butterfly.v,1102,assert(left_si == f_sumix);,1
butterfly.v,1103,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,1107,assert(mpy_r == 0);,1
butterfly.v,1108,assert(mpy_i == 0);,1
butterfly.v,1112,assert(mpy_r == 0);,1
butterfly.v,1113,assert(mpy_i == 0);,1
butterfly.v,1118,assert(mpy_r == f_difrx);,1
butterfly.v,1119,assert(mpy_i == f_difix);,1
butterfly.v,1124,assert(mpy_r == -f_difix);,1
butterfly.v,1125,assert(mpy_i == f_difrx);,1
butterfly.v,1130,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,1131,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,1136,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,1137,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,1167,assert(p_one == 0);,1
butterfly.v,1169,assert(p_two == 0);,1
butterfly.v,1172,assert(p_one == f_predifrx);,1
butterfly.v,1174,assert(p_two == f_predifix);,1
butterfly.v,1177,assert(p_one == 0);,1
butterfly.v,1179,assert(p_two == 0);,1
butterfly.v,1183,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,1185,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,1189,assert(p_three == 0);,1
butterfly.v,1191,assert(p_three == 0);,1
butterfly.v,1194,assert(p_three == f_sumdiff);,1
butterfly.v,1196,assert(p_three == f_sumcoef);,1
butterfly.v,1201,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1202,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1203,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1223,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1224,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1225,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1226,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,197,assert(o_out == f_addr_value);,1
bitreverse.v,201,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,256,assume(i_ce);,1
longbimpy.v,447,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,449,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,458,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,459,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,466,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,472,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,279,assume(!i_sync);,1
qtrstage.v,282,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,290,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,291,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,292,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,293,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,295,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,296,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,302,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,303,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,304,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,305,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,312,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,313,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,319,assert(!o_sync);,1
qtrstage.v,320,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,321,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,327,assert(!o_sync);,1
qtrstage.v,328,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,329,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,334,assume(i_sync);,1
qtrstage.v,342,assert(!wait_for_sync);,1
qtrstage.v,347,assert(!o_sync);,1
qtrstage.v,350,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,351,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,353,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,354,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,213,assume(!i_sync);,1
laststage.v,216,assert(stage == f_state[0]);,1
laststage.v,221,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,222,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,228,assert(!o_sync);,1
laststage.v,229,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,230,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,236,assert(!f_rsyncd);,1
laststage.v,237,assert(!o_sync);,1
laststage.v,238,assert(f_state == 0);,1
simple_fifo.v,129,assert (rd_pos == wr_pos);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
Regfile.v,44,assert property (x0);,1
Regfile.v,47,assert property (x0);,1
Riscv151.v,342,assert property (pc_reset);,1
Riscv151.v,346,assert property (pc_reset);,1
Riscv151.v,349,assert property (sb);,1
Riscv151.v,353,assert property (sb);,1
Riscv151.v,355,assert property (sh);,1
Riscv151.v,359,assert property (sh);,1
Riscv151.v,361,assert property (sw);,1
Riscv151.v,365,assert property (sw);,1
Riscv151.v,368,assert property (lb);,1
Riscv151.v,372,assert property (lb);,1
Riscv151.v,374,assert property (lh);,1
Riscv151.v,378,assert property (lh);,1
synth_top_tb.v,112,assert(top.synth_mod_shift == 'd8);,1
synth_top_tb.v,127,assert(top.synth_mod_fcw == fcw);,1
synth_top_tb.v,136,assert(top.synth_carrier_fcws[0] == fcw);,1
synth_top_tb.v,137,assert(top.synth_note_en[0] == 1'b1);,1
synth_top_tb.v,158,assert(top.synth_note_en[0] == 1'b0);,1
bcm21.v,319,cover property (data_s_missample_cov);,1
bcm21.v,326,cover property (data_s_missample_cov);,1
bcm21.v,406,cover property (data_s_missample_cov);,1
bcm21.v,413,cover property (data_s_missample_cov);,1
bcm21.v,521,cover property (p_num_d_chng);,1
bcm21.v,525,cover property (p_num_d_chng);,1
bcm21.v,531,cover property (p_num_d_chng);,1
bcm21.v,538,cover property (p_num_d_chng);,1
bcm21.v,540,cover property (p_num_d_chng_hmux1);,1
bcm21.v,542,cover property (p_num_d_chng_smux1);,1
bcm21.v,544,cover property (p_hold_vio);,1
bcm21.v,546,cover property (p_setup_vio);,1
bcm21.v,806,cover property (LtoHMonitor);,1
bcm21.v,814,cover property (LtoHMonitor);,1
bcm21.v,816,cover property (HtoLMonitor);,1
bcm21.v,824,cover property (HtoLMonitor);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2106,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2109,restrict property (resetn != $initstate);,1
picorv32.v,2119,assert (mem_wstrb == 0);,1
picorv32.v,2131,assert (ok);,1
picorv32.v,2149,assert(mem_valid);,1
picorv32.v,2150,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2151,assert(mem_wstrb == 0);,1
picorv32.v,2154,assert(mem_valid);,1
picorv32.v,2155,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2156,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2157,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2160,assert(!mem_valid || mem_ready);,1
multiplexerTB.v,16,assert(o == 32'h0000_0000);,1
multiplexerTB.v,22,assert(o == 32'h1234_5678);,1
multiplexerTB.v,28,assert(o == 32'h5678_1234);,1
multiplexerTB.v,34,assert(o == 32'hffff_ffff);,1
picorv32.v,2039,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2042,restrict property (resetn != $initstate);,1
picorv32.v,2052,assert (mem_wstrb == 0);,1
picorv32.v,2064,assert (ok);,1
picorv32.v,2082,assert(mem_valid);,1
picorv32.v,2083,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2084,assert(mem_wstrb == 0);,1
picorv32.v,2087,assert(mem_valid);,1
picorv32.v,2088,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2089,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2090,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2093,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2155,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2158,restrict property (resetn != $initstate);,1
picorv32.v,2168,assert (mem_wstrb == 0);,1
picorv32.v,2180,assert (ok);,1
picorv32.v,2198,assert(mem_valid);,1
picorv32.v,2199,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2200,assert(mem_wstrb == 0);,1
picorv32.v,2203,assert(mem_valid);,1
picorv32.v,2204,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2205,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2206,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2209,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
udp_rx.v,182,assert ( ~( valid_o & ( len_o < i )) | ( valid_o & (len_o >= i) & ~$isunknown( data_o[i*8+7:i*8] )));,1
udp_rx.v,185,assert ( ~( valid_o & ( len_o < i )) | ( valid_o & (len_o >= i) & ~$isunknown( data_o[i*8+7:i*8] )));,1
button_pulse.v,51,cover property (comp < MAX_COUNT - 1);,1
button_pulse.v,54,assert property (button && count == 0 |-> pulse);,1
button_pulse.v,55,assert property (pulse |=> !pulse);,1
button_pulse.v,51,cover property (comp < MAX_COUNT - 1);,1
button_pulse.v,54,assert property (button && count == 0 |-> pulse);,1
button_pulse.v,55,assert property (pulse |=> !pulse);,1
power_ctrl.v,1391,assert property (p_power_down_urt);,1
power_ctrl.v,1398,assert property (p_power_down_urt);,1
power_ctrl.v,1404,assert property (p_power_down_urt);,1
power_ctrl.v,1413,assert property (p_power_up_urt);,1
power_ctrl.v,1419,assert property (p_power_up_urt);,1
power_ctrl.v,1426,assert property (p_power_up_urt);,1
power_ctrl.v,1438,assert property (p_power_down_smc);,1
power_ctrl.v,1445,assert property (p_power_down_smc);,1
power_ctrl.v,1451,assert property (p_power_down_smc);,1
power_ctrl.v,1460,assert property (p_power_up_smc);,1
power_ctrl.v,1466,assert property (p_power_up_smc);,1
power_ctrl.v,1473,assert property (p_power_up_smc);,1
power_ctrl.v,1391,assert property (p_power_down_urt);,1
power_ctrl.v,1398,assert property (p_power_down_urt);,1
power_ctrl.v,1404,assert property (p_power_down_urt);,1
power_ctrl.v,1413,assert property (p_power_up_urt);,1
power_ctrl.v,1419,assert property (p_power_up_urt);,1
power_ctrl.v,1426,assert property (p_power_up_urt);,1
power_ctrl.v,1438,assert property (p_power_down_smc);,1
power_ctrl.v,1445,assert property (p_power_down_smc);,1
power_ctrl.v,1451,assert property (p_power_down_smc);,1
power_ctrl.v,1460,assert property (p_power_up_smc);,1
power_ctrl.v,1466,assert property (p_power_up_smc);,1
power_ctrl.v,1473,assert property (p_power_up_smc);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
register_rw.v,45,cover(data_out && !rst);,1
reverse.v,9039,assume (w533);,1
reverse.v,9040,assume (w682);,1
reverse.v,9041,assume (w685);,1
reverse.v,9046,assert (~w542);,1
mriscvcore.v,40,assume property (Rdata==32'b0);,1
mriscvcore.v,42,assume property (Rdata==32'b0);,1
inst_constraints.v,120,assume property (ALLOWED_R || ALLOWED_I || ALLOWED_LW || ALLOWED_SW || ALLOWED_NOP);,1
inst_constraints.v,120,assume property (ALLOWED_R || ALLOWED_I || ALLOWED_LW || ALLOWED_SW || ALLOWED_NOP);,1
inst_constraints.v,120,assume property (ALLOWED_R || ALLOWED_I || ALLOWED_LW || ALLOWED_SW || ALLOWED_NOP);,1
tinyriscv.v,48,assume property (jtag_reg_we_i==0);,1
tinyriscv.v,49,assume property (rib_ex_data_i[`MemBus]==32'b0);,1
tinyriscv.v,50,assume property (jtag_halt_flag_i==`HoldDisable);,1
tinyriscv.v,51,assume property (rib_hold_flag_i==`HoldDisable);,1
inst_constraints.v,120,assume property (ALLOWED_R || ALLOWED_I || ALLOWED_LW || ALLOWED_SW || ALLOWED_NOP);,1
picorv32.v,2039,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2042,restrict property (resetn != $initstate);,1
picorv32.v,2052,assert (mem_wstrb == 0);,1
picorv32.v,2064,assert (ok);,1
picorv32.v,2082,assert(mem_valid);,1
picorv32.v,2083,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2084,assert(mem_wstrb == 0);,1
picorv32.v,2087,assert(mem_valid);,1
picorv32.v,2088,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2089,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2090,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2093,assert(!mem_valid || mem_ready);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
bus_mux.v,72,assert(ones < 2);,1
bus_mux.v,76,assert(selector[0] == 1'b1);,1
bus_mux.v,78,assert(selector[1] == 1'b1);,1
bus_mux.v,80,assert(selector[2] == 1'b1);,1
bus_mux.v,87,assert(o_rdata == i_slave_rdata[31:0]);,1
bus_mux.v,88,assert(o_ready == i_slave_ready[0]);,1
bus_mux.v,89,assert(o_slave_valid[0] == i_valid);,1
bus_mux.v,92,assert(o_rdata == i_slave_rdata[63:32]);,1
bus_mux.v,93,assert(o_ready == i_slave_ready[1]);,1
bus_mux.v,94,assert(o_slave_valid[1] == i_valid);,1
bus_mux.v,97,assert(o_rdata == i_slave_rdata[95:64]);,1
bus_mux.v,98,assert(o_ready == i_slave_ready[2]);,1
bus_mux.v,99,assert(o_slave_valid[2] == i_valid);,1
bus_mux.v,102,assert(o_rdata == 32'd0);,1
bus_mux.v,103,assert(o_ready == 1'b0);,1
bus_mux.v,104,assert(o_slave_valid == 3'd0);,1
mips_cpu_bus_tb.v,74,assert(active == 1);,1
bsg_nonsynth_clk_gen_tester.v,326,assert(bsg_clk_gen_i == ext_clk_i);,1
testbench.v,86,assert (test_data_lo == test_data_li);,1
testbench.v,87,assert (test_v_lo == 1'b1);,1
testbench.v,93,assert (fifo_v_lo == 1'b0);,1
testbench.v,103,assert (test_data_lo == test_data_li);,1
testbench.v,104,assert (test_v_lo == 1'b1);,1
testbench.v,109,assert (fifo_v_lo == 1'b1);,1
testbench.v,110,assert (fifo_data_lo == test_data_li);,1
testbench.v,120,assert (test_data_lo == fifo_data_lo);,1
testbench.v,121,assert (test_v_lo == 1'b1);,1
testbench.v,127,assert (test_data_lo == test_data_li);,1
testbench.v,128,assert (test_v_lo == 1'b1);,1
testbench.v,135,assert (test_data_lo == fifo_data_lo);,1
testbench.v,136,assert (test_v_lo == 1'b1);,1
testbench.v,142,assert (test_ready_lo == 1'b0);,1
testbench.v,143,assert (fifo_ready_lo == 1'b0);,1
testbench.v,154,assert (fifo_v_lo == 1'b0);,1
testbench.v,155,assert (test_v_lo == 1'b0);,1
testbench.v,20,assert(v_lo == 1'b0);,1
testbench.v,21,assert(addr_lo == 8'b0);,1
testbench.v,25,assert(v_lo == 1'b1);,1
testbench.v,26,assert(addr_lo == 8'b0);,1
testbench.v,30,assert(v_lo == 1'b1);,1
testbench.v,31,assert(addr_lo == 8'b0);,1
testbench.v,35,assert(v_lo == 1'b1);,1
testbench.v,36,assert(addr_lo == 8'b1);,1
testbench.v,40,assert(v_lo == 1'b1);,1
testbench.v,41,assert(addr_lo == 8'd2);,1
testbench.v,45,assert(v_lo == 1'b1);,1
testbench.v,46,assert(addr_lo == 8'd3);,1
testbench.v,50,assert(v_lo == 1'b1);,1
testbench.v,51,assert(addr_lo == 8'd7);,1
testbench.v,55,assert(v_lo == 1'b1);,1
testbench.v,56,assert(addr_lo == 8'd5);,1
testbench.v,60,assert(v_lo == 1'b1);,1
testbench.v,61,assert(addr_lo == 8'd4);,1
testbench.v,75,assert (w_empty_lo == 4'b1111);,1
testbench.v,95,assert (w_empty_lo == 4'b1100);,1
testbench.v,103,assert (r_v_lo);,1
testbench.v,104,assert (r_data_lo == 16'hdead);,1
testbench.v,112,assert (r_v_lo);,1
testbench.v,113,assert (r_data_lo == 16'hbeef);,1
testbench.v,129,assert (~r_v_lo);,1
testbench.v,130,assert (w_empty_lo == 4'b1101);,1
testbench.v,95,assert (r_v_lo);,1
testbench.v,96,assert (r_data_lo == 16'hdead);,1
testbench.v,104,assert (r_v_lo);,1
testbench.v,105,assert (r_data_lo == 16'hbeef);,1
testbench.v,121,assert (~r_v_lo);,1
testbench.v,127,assert (~r_v_lo);,1
mips_cpu_bus_tb.v,74,assert(active == 1);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
axi_tb.v,60,assert(data_out == 0);,1
axi_tb.v,61,assert(last_out == 0);,1
axi_tb.v,62,assert(keep_out == 0);,1
axi_tb.v,63,assert(valid_out == 0);,1
axi_tb.v,74,assert(data_out == data_in);,1
axi_tb.v,75,assert(last_out == last_in);,1
axi_tb.v,76,assert(keep_out == keep_in);,1
axi_tb.v,77,assert(valid_out == valid_in);,1
axi_tb.v,87,assert(data_out == data_insert);,1
axi_tb.v,88,assert(last_out == 0);,1
axi_tb.v,89,assert(keep_out == {KEEP_WIDTH{1'b1}});,1
axi_tb.v,90,assert(valid_out == 1);,1
axi_tb.v,104,assert(data_out == data_insert);,1
axi_tb.v,105,assert(last_out == 0);,1
axi_tb.v,106,assert(keep_out == {KEEP_WIDTH{1'b1}});,1
axi_tb.v,107,assert(valid_out == 1);,1
axi_tb.v,109,assert(data_out == data_in);,1
axi_tb.v,110,assert(last_out == last_in);,1
axi_tb.v,111,assert(keep_out == keep_in);,1
axi_tb.v,112,assert(valid_out == valid_in);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
formal_example.v,19,assert(cnt != 3123);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
data_sync_tb.v,47,assert (dout === 8'b00000000);,1
data_sync_tb.v,48,assert (dready_o === 0);,1
data_sync_tb.v,54,assert (dout === 8'b01010101);,1
data_sync_tb.v,55,assert (dready_o === 1);,1
data_sync_tb.v,60,assert (dout === 8'b00000000);,1
data_sync_tb.v,61,assert (dready_o === 0);,1
data_sync_tb.v,66,assert (dout === 8'b00000000);,1
data_sync_tb.v,67,assert (dready_o === 0);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
cpu_tb.v,41,assert(result == a+b);,1
cpu_tb.v,46,assert(result == a+imm);,1
cpu_tb.v,75,assert(pc == 4);,1
cpu_tb.v,78,assert(pc == 8);,1
cpu_tb.v,81,assert(pc ==12);,1
cpu_tb.v,86,assert(pc ==24);,1
cpu_tb.v,89,assert(pc ==28);,1
loads_tb.v,17,assert(mem_out == 32'h00000000);,1
loads_tb.v,24,assert(mem_out == 32'hFFFFFFE2);,1
loads_tb.v,31,assert(mem_out == 32'hE7294C8F);,1
loads_tb.v,38,assert(mem_out == 32'h00005744);,1
loads_tb.v,45,assert(mem_out == 32'hFFFF95B0);,1
loads_tb.v,52,assert(mem_out == 32'h00005744);,1
loads_tb.v,59,assert(mem_out == 32'h000095B0);,1
loads_tb.v,66,assert(mem_out == 32'h01020304);,1
loads_tb.v,73,assert(mem_out == 32'h00000304);,1
stores_tb.v,15,assert(write_data == 32'h2DE5C8F3);,1
stores_tb.v,22,assert(write_data == 32'h002D0000);,1
stores_tb.v,29,assert(write_data == 32'h2fd20000);,1
stores_tb.v,38,assert(write_data == 32'h04030201);,1
stores_tb.v,47,assert(write_data == 32'h04030000);,1
jr_tb.v,34,assert(pcout == 4);,1
jr_tb.v,37,assert(pcout == 8);,1
jr_tb.v,40,assert(pcout ==12);,1
jr_tb.v,45,assert(pcout ==16);,1
jr_tb.v,49,assert(pcout ==24);,1
ALU_tb.v,18,assert(ALUResult == 4);,1
ALU_tb.v,19,assert(byteenable == 4'b0100);,1
ALU_tb.v,27,assert(ALUResult == 20);,1
ALU_tb.v,28,assert(byteenable == 4'b1000);,1
ALU_tb.v,36,assert(ALUResult == 24);,1
ALU_tb.v,37,assert(byteenable == 4'b1111);,1
ALU_tb.v,45,assert(ALUResult == 48);,1
ALU_tb.v,46,assert(byteenable == 4'b0010);,1
ALU_tb.v,54,assert(ALUResult == 262144);,1
ALU_tb.v,60,assert(ALUResult==80);,1
ALU_tb.v,65,assert(ALUResult==40);,1
ALU_tb.v,70,assert(ALUResult ==90);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
mips_cpu_statemac_tb.v,43,assert(active == 1);,1
mips_cpu_statemac_tb.v,48,assert(active == 0);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
axi2axilite.v,927,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,932,assert(m_axi_awvalid);,1
axi2axilite.v,934,assert(!skids_awready);,1
axi2axilite.v,936,assert(!skids_awready);,1
axi2axilite.v,938,assert(!skids_awready);,1
axi2axilite.v,943,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,963,assert(rid == S_AXI_RID);,1
axi2axilite.v,967,assert(rid == S_AXI_RID);,1
axi2axilite.v,971,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,976,assert(m_axi_arvalid);,1
axi2axilite.v,977,assert(!skids_arready);,1
axi2axilite.v,995,assume(!skids_awvalid);,1
axi2axilite.v,996,assume(!skids_wvalid);,1
axi2axilite.v,997,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,998,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,999,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1000,assert(!skidm_bvalid);,1
axi2axilite.v,1001,assert(!S_AXI_BVALID);,1
axi2axilite.v,1010,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1011,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1012,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1044,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1046,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1070,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1072,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
aximwr2wbsp.v,664,assume(!i_wb_err);,1
aximwr2wbsp.v,665,assert(!err_state);,1
aximwr2wbsp.v,669,assert(o_wb_cyc);,1
aximwr2wbsp.v,671,assert(!S_AXI_BRESP[1]);,1
aximwr2wbsp.v,672,assert(!S_AXI_BRESP[0]);,1
axi3reorder.v,479,assert(sr_write == 0);,1
axi3reorder.v,494,cover(cvr_sreg_full && sr_valid == 0);,1
axi3reorder.v,631,assume(!S_AXI_ARESETN);,1
axi3reorder.v,636,assume(!S_AXI3_AWVALID);,1
axi3reorder.v,637,assume(!S_AXI3_WVALID);,1
axi3reorder.v,639,assume(!M_AXI_WVALID);,1
axi3reorder.v,643,assume(S_AXI3_AWVALID);,1
axi3reorder.v,649,assume(S_AXI3_WVALID);,1
axi3reorder.v,658,assert(M_AXI_WVALID);,1
axi3reorder.v,695,assert(!f_ckfifo_empty);,1
axi3reorder.v,696,assert(f_ckfifo_id == M_AXI_WID);,1
axi3reorder.v,697,assert(f_ckfifo_data == M_AXI_WDATA);,1
axi3reorder.v,698,assert(f_ckfifo_strb == M_AXI_WSTRB);,1
axi3reorder.v,699,assert(f_ckfifo_last == M_AXI_WLAST);,1
axi3reorder.v,716,assert(f_awid_count > 0);,1
axi3reorder.v,722,assume(S_AXI3_AWID == 0);,1
axi3reorder.v,727,assume(S_AXI3_WID == 0);,1
axi3reorder.v,728,assume(S_AXI3_WDATA == 0);,1
axi3reorder.v,729,assume(S_AXI3_WSTRB == 0);,1
axi3reorder.v,730,assume(S_AXI3_WLAST == 0);,1
axi3reorder.v,736,assert(M_AXI_WID == 0);,1
axi3reorder.v,737,assert(M_AXI_WDATA == 0);,1
axi3reorder.v,738,assert(M_AXI_WSTRB == 0);,1
axi3reorder.v,739,assert(M_AXI_WLAST == 0);,1
aximrd2wbsp.v,490,assume(w_reset);,1
aximrd2wbsp.v,505,assert(!o_wb_stb && !o_wb_cyc);,1
aximrd2wbsp.v,530,assert(fwb_outstanding == 0);,1
aximrd2wbsp.v,596,assert(resp_fifo_fill == 1);,1
aximrd2wbsp.v,603,assert(o_wb_stb || lastid_fifo_full);,1
aximrd2wbsp.v,607,assert(stblen == 0);,1
aximrd2wbsp.v,612,assert(!o_wb_stb);,1
aximrd2wbsp.v,613,assert(!lastid_fifo_wr);,1
aximrd2wbsp.v,620,assert(!last_ack);,1
aximrd2wbsp.v,626,assert(!last_ack);,1
aximrd2wbsp.v,628,assert(midissue || last_ack);,1
aximrd2wbsp.v,630,assert(last_ack == last_stb);,1
aximrd2wbsp.v,633,assert(o_wb_cyc);,1
aximrd2wbsp.v,647,assert(!o_wb_cyc);,1
aximrd2wbsp.v,730,cover(cvr_reads == 4);,1
aximrd2wbsp.v,733,cover(cvr_read_bursts == 4);,1
aximrd2wbsp.v,736,cover(cvr_rdid_bursts == 4);,1
axissafety.v,435,assume(!S_AXI_ARESETN);,1
axissafety.v,441,assert(!M_AXIS_TVALID);,1
axissafety.v,444,assert(M_AXIS_TVALID);,1
axissafety.v,466,assert(fm_packet_counter < OPT_PACKET_LENGTH);,1
axissafety.v,469,assert(m_packet_count == fm_packet_counter);,1
axissafety.v,474,assert(s_packet_counter == 0);,1
axissafety.v,475,assert(m_packet_count == OPT_PACKET_LENGTH-2);,1
axissafety.v,479,assert(m_packet_count == OPT_PACKET_LENGTH-1);,1
axissafety.v,489,assert(s_packet_counter < OPT_PACKET_LENGTH);,1
axissafety.v,506,assert(fm_stall_count < OPT_MAX_STALL);,1
axissafety.v,516,assume(!S_AXIS_TVALID);,1
axissafety.v,519,assume(S_AXIS_TVALID);,1
axissafety.v,546,assert(s_packet_counter == fs_packet_counter);,1
axissafety.v,548,assert(s_packet_counter == 0);,1
axissafety.v,583,assert(stall_count == f_stall_count);,1
axissafety.v,586,assume(f_stall_count <= OPT_MAX_STALL);,1
axissafety.v,592,assert(!o_fault);,1
demofull.v,996,assume(!S_AXI_ARESETN);,1
demofull.v,1084,assert(S_AXI_BVALID);,1
demofull.v,1091,assert(!S_AXI_WREADY);,1
demofull.v,1115,assert(S_AXI_ARREADY);,1
demofull.v,1118,assert(axi_rlen <= 256);,1
demofull.v,1133,assert(!rskd_lock);,1
demofull.v,1136,assert(S_AXI_BRESP == 2'b00);,1
demofull.v,1142,assert(S_AXI_RID == 0);,1
demofull.v,1143,assert(S_AXI_RDATA == 0);,1
demofull.v,1144,assert(S_AXI_RRESP == 2'b00);,1
demofull.v,1149,assert(o_waddr == 0);,1
demofull.v,1150,assert(o_wdata == 0);,1
demofull.v,1151,assert(o_wstrb == 0);,1
demofull.v,1194,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
axlite2wbsp.v,436,assume(!i_axi_reset_n);,1
axlite2wbsp.v,495,assert(f_axi_rd_outstanding == f_rd_fifo_axi_used);,1
axlite2wbsp.v,503,assert(f_axi_awr_outstanding == 0);,1
axlite2wbsp.v,504,assert(f_axi_wr_outstanding == 0);,1
axlite2wbsp.v,510,assert(f_axi_rd_outstanding == 0);,1
axlite2wbsp.v,519,assume(i_axi_awvalid == 0);,1
axlite2wbsp.v,520,assume(i_axi_wvalid == 0);,1
axlite2wbsp.v,522,assert(o_axi_bvalid == 0);,1
axlite2wbsp.v,528,assume(i_axi_arvalid == 0);,1
axlite2wbsp.v,529,assert(o_axi_rvalid == 0);,1
demoaxi.v,450,assert(f_axi_rd_outstanding == 0);,1
demoaxi.v,454,assert(f_axi_rd_outstanding == 1);,1
demoaxi.v,628,cover(fw_wrdemo_pipe[0]);,1
demoaxi.v,629,cover(fw_wrdemo_pipe[1]);,1
demoaxi.v,630,cover(fw_wrdemo_pipe[2]);,1
demoaxi.v,631,cover(fw_wrdemo_pipe[3]);,1
demoaxi.v,632,cover(fw_wrdemo_pipe[4]);,1
demoaxi.v,633,cover(fw_wrdemo_pipe[5]);,1
demoaxi.v,634,cover(fw_wrdemo_pipe[6]);,1
demoaxi.v,635,cover(fw_wrdemo_pipe[7]); // cover(fw_wrdemo_pipe[8]);,2
demoaxi.v,637,cover(fw_wrdemo_pipe[9]);,1
demoaxi.v,638,cover(fw_wrdemo_pipe[10]);,1
demoaxi.v,639,cover(fw_wrdemo_pipe[11]);,1
demoaxi.v,640,cover(fw_wrdemo_pipe[12]);,1
demoaxi.v,641,cover(fw_wrdemo_pipe[13]);,1
demoaxi.v,642,cover(fw_wrdemo_pipe[14]);,1
demoaxi.v,643,cover(fw_wrdemo_pipe[15]);,1
demoaxi.v,644,cover(fw_wrdemo_pipe[16]);,1
demoaxi.v,645,cover(fw_wrdemo_pipe[17]);,1
demoaxi.v,646,cover(fw_wrdemo_pipe[18]);,1
demoaxi.v,647,cover(fw_wrdemo_pipe[19]);,1
demoaxi.v,648,cover(fw_wrdemo_pipe[20]);,1
demoaxi.v,649,cover(fw_wrdemo_pipe[21]);,1
demoaxi.v,650,cover(fw_wrdemo_pipe[22]);,1
demoaxi.v,701,cover(fw_rddemo_pipe[0]);,1
demoaxi.v,702,cover(fw_rddemo_pipe[1]);,1
demoaxi.v,703,cover(fw_rddemo_pipe[2]);,1
demoaxi.v,704,cover(fw_rddemo_pipe[3]);,1
demoaxi.v,705,cover(fw_rddemo_pipe[4]);,1
demoaxi.v,706,cover(fw_rddemo_pipe[5]);,1
demoaxi.v,707,cover(fw_rddemo_pipe[6]);,1
demoaxi.v,708,cover(fw_rddemo_pipe[7]);,1
demoaxi.v,709,cover(fw_rddemo_pipe[8]);,1
demoaxi.v,710,cover(fw_rddemo_pipe[9]);,1
demoaxi.v,711,cover(fw_rddemo_pipe[10]);,1
wbxclk.v,154,assert(bus_abort);,1
wbxclk.v,195,assert(xck_reset);,1
wbxclk.v,360,assume(fwb_step >= 2);,1
wbxclk.v,361,assume(fxck_step >= 2);,1
wbxclk.v,363,assume(fwb_step <= 4'b1000);,1
wbxclk.v,364,assume(fxck_step <= 4'b1000);,1
wbxclk.v,380,assume(i_wb_clk == fwb_count[3]);,1
wbxclk.v,381,assume(i_xclk_clk == fxck_count[3]);,1
wbxclk.v,438,assume(past_wb_reset== i_reset);,1
wbxclk.v,439,assume(past_wb_cyc == i_wb_cyc);,1
wbxclk.v,440,assume(past_wb_stb == i_wb_stb);,1
wbxclk.v,441,assume(past_wb_we == i_wb_we);,1
wbxclk.v,442,assume(past_wb_err == o_wb_err);,1
wbxclk.v,445,assume(!i_wb_cyc);,1
wbxclk.v,447,assume(past_wb_we == i_wb_we);,1
wbxclk.v,462,assume(past_xclk_stall == i_xclk_stall);,1
wbxclk.v,463,assume(past_xclk_data == i_xclk_data);,1
wbxclk.v,464,assume(past_xclk_ack == i_xclk_ack);,1
wbxclk.v,465,assume(past_xclk_err == i_xclk_err);,1
wbxclk.v,513,assert(ackfifo_fill == 0 || xclk_err_state);,1
wbxclk.v,524,assert(wb_active);,1
wbxclk.v,534,assert(reqfifo_fill == fwb_outstanding + 1);,1
wbxclk.v,538,assert(o_xclk_cyc && !o_xclk_stb);,1
wbxclk.v,539,assert(ackfifo_fill == 0);,1
wbxclk.v,540,assert(fxck_outstanding == 0);,1
wbxclk.v,543,assert(wb_active);,1
wbxclk.v,545,assert(!wb_active);,1
wbxclk.v,550,assert(fxck_outstanding == 0);,1
wbxclk.v,551,assert(xck_reset || wb_active || !i_wb_cyc);,1
wbxclk.v,552,assert(!o_xclk_stb);,1
wbxclk.v,554,assert(no_returns || err_stb);,1
wbxclk.v,556,assert(o_wb_err);,1
wbxclk.v,562,assert(reqfifo_fill <= fwb_outstanding + 1);,1
wbxclk.v,563,assert(ackfifo_fill <= fwb_outstanding);,1
wbxclk.v,564,assert(fxck_outstanding <= fwb_outstanding);,1
wbxclk.v,566,assert(wb_active || f_drop_cyc_request);,1
wbxclk.v,574,assert(reqfifo_fill== fwb_outstanding + 1);,1
wbxclk.v,575,assert(ackfifo_fill == 0);,1
wbxclk.v,576,assert(fxck_outstanding == 0);,1
wbxclk.v,577,assert(!o_xclk_stb);,1
wbxclk.v,578,assert(o_xclk_cyc);,1
wbxclk.v,587,assert(o_xclk_cyc || xclk_err_state);,1
wbxclk.v,588,assert(!f_drop_cyc_request);,1
wbxclk.v,589,assert(!xck_reset || bus_abort);,1
wbxclk.v,599,assert(o_xclk_cyc || xck_reset || xclk_err_state);,1
wbxclk.v,608,assert(!i_wb_cyc || fwb_outstanding == reqfifo_fill);,1
wbxclk.v,612,assert(!wb_active);,1
wbxclk.v,618,assert(!ackfifo_full);,1
wbxclk.v,624,assert(i_wb_we == o_xclk_we);,1
wbxclk.v,628,assert(acks_outstanding == fwb_outstanding);,1
wbxclk.v,632,assert(!o_xclk_cyc);,1
wbxclk.v,640,assert(!req_stb || xck_reset);,1
wbxclk.v,641,assert(reqfifo_fill <= 1);,1
wbxclk.v,643,assert(!o_xclk_cyc);,1
wbxclk.v,666,assert(acks_outstanding >= ackfifo_fill);,1
wbxclk.v,667,assert(acks_outstanding >= fxck_outstanding);,1
wbxclk.v,674,assert(acks_outstanding +1 == reqfifo_fill);,1
wbxclk.v,676,assert(!wb_active || o_xclk_cyc || xclk_err_state);,1
wbxclk.v,679,assert(acks_outstanding +1 == reqfifo_fill);,1
wbxclk.v,680,assert(ackfifo_fill == 0);,1
wbxclk.v,681,assert(fxck_outstanding == 0);,1
wbxclk.v,682,assert(!o_xclk_stb);,1
wbxclk.v,683,assert(o_xclk_cyc);,1
wbxclk.v,689,assert(o_xclk_cyc);,1
wbxclk.v,693,assert(!xck_reset);,1
wbxclk.v,696,assert(!xclk_err_state || acks_outstanding != 0 || xck_reset);,1
wbxclk.v,703,assert(f_drop_cyc_request);,1
wbxclk.v,723,assert(o_xclk_cyc);,1
wbxclk.v,728,assert(!ign_ackfifo_stall);,1
wbxclk.v,816,cover(cvr_replies > 1); // 33 cover(cvr_replies > 3); // 38 cover(cvr_replies > 9);,3
wbxclk.v,820,cover(cvr_abort); // 31 cover(cvr_post_abort > 1 && cvr_replies > 1); // 63 cover(cvr_post_abort > 1 && cvr_replies > 2); // 63 cover(cvr_post_abort > 1 && cvr_replies > 3); // 65 cover(cvr_post_abort > 2 && cvr_replies > 3); // 65 cover(cvr_post_abort > 3 && cvr_replies > 3); // 68 cover(cvr_post_abort > 4 && cvr_replies > 3); // 70 cover(cvr_post_abort > 3 && cvr_replies > 6); // 72 end always @(posedge gbl_clk) if (!i_reset) cover(cvr_replies > 9 && !i_wb_clk && acks_outstanding == 0 && fwb_nreqs == fwb_nacks && fwb_nreqs == cvr_replies && !bus_abort && fwb_count != fxck_count);,15
axilsafety.v,979,assert(reset_counter < OPT_MIN_RESET);,1
axilsafety.v,1061,assume(!S_AXI_ARESETN);,1
axilsafety.v,1062,assert(!M_AXI_ARESETN);,1
axilsafety.v,1120,assume(!S_AXI_AWVALID);,1
axilsafety.v,1121,assume(!S_AXI_WVALID);,1
axilsafety.v,1122,assert(aw_count == 0);,1
axilsafety.v,1123,assert(w_count == 0);,1
axilsafety.v,1124,assert(!M_AXI_AWVALID);,1
axilsafety.v,1125,assert(!M_AXI_WVALID);,1
axilsafety.v,1133,assume(!S_AXI_ARVALID);,1
axilsafety.v,1134,assert(r_count == 0);,1
axilsafety.v,1135,assert(!S_AXI_RVALID);,1
axilsafety.v,1136,assert(!M_AXI_ARVALID);,1
axilsafety.v,1176,assert(aw_count == faxils_awr_outstanding);,1
axilsafety.v,1177,assert(w_count == faxils_wr_outstanding);,1
axilsafety.v,1178,assert(r_count == faxils_rd_outstanding);,1
axilsafety.v,1250,assert(!o_write_fault);,1
axilsafety.v,1252,assert(!o_read_fault);,1
axilsafety.v,1264,assert(!aw_stall_limit);,1
axilsafety.v,1265,assert(!w_stall_limit);,1
axilsafety.v,1266,assert(!w_ack_limit);,1
axilsafety.v,1268,assert(!r_stall_limit);,1
axilsafety.v,1269,assert(!r_ack_limit);,1
axilsafety.v,1273,assert(downstream_aw_count == faxilm_awr_outstanding);,1
axilsafety.v,1274,assert(downstream_w_count == faxilm_wr_outstanding);,1
axilsafety.v,1275,assert(downstream_r_count == faxilm_rd_outstanding);,1
axilsafety.v,1297,assert(f_axi_awstall == aw_stall_counter);,1
axilsafety.v,1301,assert(f_axi_wstall == w_stall_counter);,1
axilsafety.v,1305,assert(f_axi_arstall == r_stall_counter);,1
axilsafety.v,1356,cover(faulted && M_AXI_ARESETN && S_AXI_BVALID);,1
axilsafety.v,1359,cover(faulted && M_AXI_ARESETN && S_AXI_RVALID);,1
axilsafety.v,1372,cover(cvr_writes > 5);,1
axilsafety.v,1384,cover(cvr_reads > 5);,1
axilsafety.v,1408,assume(S_AXI_AWADDR != fc_never_write_addr);,1
axilsafety.v,1412,assert(M_AXI_AWADDR != fc_never_write_addr);,1
axilsafety.v,1419,"assume({ S_AXI_WDATA, S_AXI_WSTRB } != fc_never_write_data);",1
axilsafety.v,1423,"assert({ M_AXI_WDATA, M_AXI_WSTRB } != fc_never_write_data);",1
axilsafety.v,1430,assume(S_AXI_ARADDR != fc_never_read_addr);,1
axilsafety.v,1434,assert(M_AXI_ARADDR != fc_never_read_addr);,1
axilsafety.v,1441,assume(M_AXI_RDATA != fc_never_read_data);,1
axilsafety.v,1445,assert(S_AXI_RDATA != fc_never_read_data);,1
aximm2s.v,1404,assert(fifo_fill == 0 || reset_fifo);,1
aximm2s.v,1415,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
aximm2s.v,1424,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1425,assert(fv_start_addr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1426,assert(axi_araddr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1427,assert(axi_raddr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1451,assert(f_next_start == f_last_addr);,1
aximm2s.v,1518,assert(fv_ar_requests_remaining == ar_requests_remaining);,1
aximm2s.v,1528,assert(fv_ar_requests_remaining <= cmd_length_aligned_w);,1
aximm2s.v,1559,assert(axi_raddr[ADDRLSB-1:0] == cmd_addr[ADDRLSB-1:0]);,1
aximm2s.v,1560,assert(axi_abort_pending || fv_axi_raddr == axi_raddr);,1
aximm2s.v,1563,assert(fv_axi_raddr == fv_start_addr);,1
aximm2s.v,1564,assert(axi_raddr == fv_start_addr);,1
aximm2s.v,1570,assert(fv_axi_raddr <= f_last_addr);,1
aximm2s.v,1571,assert(fv_axi_raddr >= fv_start_addr);,1
aximm2s.v,1584,assert(axi_raddr <= fv_axi_raddr);,1
aximm2s.v,1585,assert(fv_start_addr <= axi_raddr);,1
aximm2s.v,1601,assert(!M_AXI_ARVALID);,1
aximm2s.v,1602,assert(!M_AXI_RVALID);,1
aximm2s.v,1617,assert(!r_busy);,1
aximm2s.v,1630,assert(!r_busy);,1
aximm2s.v,1673,assert(M_AXI_ARVALID);,1
aximm2s.v,1678,assert(r_max_burst > 0);,1
aximm2s.v,1684,assert(initial_burstlen > 0);,1
aximm2s.v,1696,assert(cmd_addr == axi_raddr);,1
aximm2s.v,1698,assert(cmd_addr == fv_start_addr);,1
aximm2s.v,1738,assert(M_AXI_ARADDR == fv_start_addr);,1
aximm2s.v,1748,assert(rd_reads_remaining <= cmd_length_w);,1
aximm2s.v,1752,assert(ar_bursts_outstanding <= rd_reads_remaining);,1
aximm2s.v,1771,assert(!M_AXI_ARVALID);,1
aximm2s.v,1813,assert(!o_int);,1
aximm2s.v,1831,assume(M_AXI_RDATA != f_restricted);,1
aximm2s.v,1836,assert(M_AXIS_TDATA != f_restricted);,1
aximm2s.v,1881,cover( r_err && cvr_aborted);,1
aximm2s.v,1882,cover( r_err && cvr_buserr);,1
aximm2s.v,1883,cover(!r_err);,1
aximm2s.v,1886,cover(cmd_length_w > 5);,1
aximm2s.v,1887,cover(cmd_length_w > 8);,1
aximm2s.v,1891,cover(&cvr_continued);,1
aximm2s.v,1899,cover(!r_err && fifo_fill > 8 && !r_busy);,1
aximm2s.v,1902,cover(r_busy);,1
aximm2s.v,1905,cover(start_burst);,1
aximm2s.v,1908,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
aximm2s.v,1911,cover(M_AXI_RVALID);,1
aximm2s.v,1914,cover(M_AXI_RVALID & M_AXI_RLAST);,1
aximm2s.v,1918,cover(!ar_none_remaining);,1
aximm2s.v,1921,cover(1);,1
aximm2s.v,1925,cover(!phantom_start);,1
aximm2s.v,1926,cover(phantom_start);,1
aximm2s.v,1944,cover(M_AXIS_TVALID && M_AXIS_TREADY && M_AXIS_TLAST);,1
aximm2s.v,1947,cover(o_int && cvr_lastcount > 2);,1
aximm2s.v,1959,cover(r_err);,1
aximm2s.v,1960,cover(!r_err);,1
aximm2s.v,1961,cover(axi_abort_pending);,1
aximm2s.v,1962,cover(!axi_abort_pending);,1
aximm2s.v,1963,cover(cvr_aborted);,1
aximm2s.v,1964,cover(!cvr_aborted);,1
aximm2s.v,1965,cover(cvr_buserr);,1
aximm2s.v,1966,cover(!cvr_buserr);,1
aximm2s.v,1967,cover(!cvr_buserr && !axi_abort_pending);,1
axivcamera.v,1224,assume(!lost_sync && cfg_active);,1
axivfifo.v,1083,assert(!phantom_write);,1
axivfifo.v,1084,assert(!phantom_read);,1
axivfifo.v,1102,assert(!ofifo_full);,1
axivfifo.v,1117,assert(!M_AXI_WVALID);,1
axivfifo.v,1121,assert(read_from_fifo);,1
axivfifo.v,1123,assert(read_from_fifo);,1
axivfifo.v,1147,assert(o_err);,1
axivfifo.v,1149,assert(o_err);,1
axivfifo.v,1163,assert(!M_AXI_AWVALID);,1
axivfifo.v,1164,assert(!M_AXI_WVALID);,1
axivfifo.v,1165,assert(!M_AXI_ARVALID);,1
axivfifo.v,1225,assert(M_AXI_ARADDR != M_AXI_AWADDR);,1
axivfifo.v,1251,assert(mem_space_available == f_space_available);,1
axivfifo.v,1255,assert(M_AXI_ARADDR == M_AXI_AWADDR);,1
axivfifo.v,1256,assert(!M_AXI_AWVALID || phantom_write);,1
axivfifo.v,1280,assert(mem_data_available == f_data_available);,1
axivfifo.v,1283,assert(vfifo_fill[C_AXI_ADDR_WIDTH]);,1
axivfifo.v,1284,assert(ofifo_empty);,1
axivfifo.v,1313,assert(!M_AXI_AWVALID);,1
axivfifo.v,1314,assert(!M_AXI_WVALID);,1
axivfifo.v,1315,assert(!M_AXI_ARVALID);,1
axivfifo.v,1318,assert(mem_data_available == 0);,1
axivfifo.v,1320,assert(!phantom_read);,1
axivfifo.v,1321,assert(!phantom_write);,1
axivfifo.v,1323,assert(vfifo_fill == 0);,1
axivfifo.v,1356,assume(M_AXI_AWREADY || writes_pending > 0);,1
axivfifo.v,1357,assume(M_AXIS_TREADY);,1
axivfifo.v,1358,assume(M_AXI_WREADY);,1
axivfifo.v,1359,assume(M_AXI_ARREADY);,1
axivfifo.v,1382,cover(cvr_read_bursts > 1 && cvr_write_bursts > 1);,1
axisrandom.v,108,assume(!S_AXI_ARESETN);,1
axisrandom.v,122,assert(!M_AXIS_TVALID);,1
axisrandom.v,124,assert(M_AXIS_TVALID);,1
sfifothresh.v,93,assert(!o_int);,1
wbsafety.v,424,assume(i_reset);,1
wbsafety.v,453,assert(expected_returns == fwbs_outstanding);,1
wbsafety.v,489,assert(!o_fault);,1
wbsafety.v,502,assert(!timeout);,1
wbsafety.v,506,assert(!o_wb_cyc);,1
wbsafety.v,513,assert(sacks == fwbm_nacks);,1
wbsafety.v,517,assert(o_wb_cyc || o_wb_err);,1
wbsafety.v,524,assert(fwbs_nreqs == mreqs);,1
wbsafety.v,528,assert(i_wb_we == o_wb_we);,1
wbsafety.v,532,assert(o_wb_cyc || o_wb_err);,1
wbsafety.v,543,cover(o_fault);,1
wbsafety.v,547,cover(o_fault);,1
wbsafety.v,551,cover(o_fault);,1
wbsafety.v,574,cover(faulted && !o_reset && o_wb_ack);,1
wbsafety.v,581,cover(!i_reset && fwbs_nacks > 4);,1
axiempty.v,273,assume(!S_AXI_ARESETN);,1
axiempty.v,380,assert(S_AXI_ARREADY);,1
axiempty.v,424,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
wbp2classic.v,155,assume(i_reset);,1
wbp2classic.v,195,assume(i_sstb);,1
axisafety.v,1505,assert(f_axi_awr_nbursts <= 1);,1
axisafety.v,1510,assert(!S_AXI_AWREADY);,1
axisafety.v,1512,assert(f_axi_wr_pending == 0);,1
axisafety.v,1521,assert(!r_wvalid || !r_wlast);,1
axisafety.v,1523,assert(s_wbursts == 0);,1
axisafety.v,1524,assert(!S_AXI_WREADY);,1
axisafety.v,1526,assert(1 || S_AXI_AWREADY || !M_AXI_ARESETN || !S_AXI_ARESETN);,1
axisafety.v,1528,assert(S_AXI_AWREADY);,1
axisafety.v,1539,assert(S_AXI_AWREADY == !OPT_SELF_RESET);,1
axisafety.v,1541,assert(!S_AXI_AWREADY);,1
axisafety.v,1543,assert(!S_AXI_AWREADY);,1
axisafety.v,1545,assert(S_AXI_AWREADY);,1
axisafety.v,1547,assert(S_AXI_AWREADY || OPT_SELF_RESET);,1
axisafety.v,1551,assert(s_wbursts == 0);,1
axisafety.v,1553,assert(s_wbursts == f_axi_awr_nbursts);,1
axisafety.v,1555,assert(s_wbursts == 0);,1
axisafety.v,1559,assert(!M_AXI_AWVALID);,1
axisafety.v,1564,assert(o_write_fault || !M_AXI_AWVALID);,1
axisafety.v,1565,assert(!S_AXI_BVALID);,1
axisafety.v,1566,assert(s_wbursts == 0);,1
axisafety.v,1568,assert(f_axi_wr_pending > 0);,1
axisafety.v,1572,assert(waddr_valid);,1
axisafety.v,1576,assert(M_AXI_WVALID && r_wvalid);,1
axisafety.v,1581,assert(waddr_valid == !S_AXI_AWREADY);,1
axisafety.v,1589,assert(M_AXI_WVALID);,1
axisafety.v,1594,assert(M_AXI_AWVALID || !M_AXI_WVALID);,1
axisafety.v,1595,assert(M_AXI_AWVALID || f_axi_wr_pending == 0);,1
axisafety.v,1606,assert(m_wpending == 0);,1
axisafety.v,1611,assert(m_wpending <= 9'h100);,1
axisafety.v,1615,assert(!M_AXI_AWVALID);,1
axisafety.v,1622,assert(!M_AXI_AWVALID);,1
axisafety.v,1623,assert(!M_AXI_WVALID);,1
axisafety.v,1633,assert(!M_AXI_AWVALID);,1
axisafety.v,1634,assert(!M_AXI_WVALID);,1
axisafety.v,1638,assert(f_axi_awr_nbursts == 1);,1
axisafety.v,1641,assert(m_wpending == 0);,1
axisafety.v,1644,assert(!M_AXI_AWVALID);,1
axisafety.v,1648,assert(!r_awvalid);,1
axisafety.v,1665,assert(o_write_fault || write_timeout);,1
axisafety.v,1669,assert(waddr_valid == !S_AXI_AWREADY);,1
axisafety.v,1671,assert(!S_AXI_AWREADY);,1
axisafety.v,1675,assert(waddr_valid == !S_AXI_AWREADY);,1
axisafety.v,1679,assert(!S_AXI_WREADY);,1
axisafety.v,1692,assert(f_axi_rd_nbursts <= 1);,1
axisafety.v,1697,assert(rfifo_id == f_axi_rd_checkid);,1
axisafety.v,1699,assert(rfifo_id != f_axi_rd_checkid);,1
axisafety.v,1703,assert(raddr_valid);,1
axisafety.v,1707,assert(!S_AXI_ARREADY);,1
axisafety.v,1711,assert(raddr_valid == !S_AXI_ARREADY);,1
axisafety.v,1723,assert(!raddr_valid || OPT_SELF_RESET);,1
axisafety.v,1727,assert(!M_AXI_ARVALID);,1
axisafety.v,1731,assert(rfifo_counter == f_axi_rd_outstanding);,1
axisafety.v,1746,assert(skid_arvalid);,1
axisafety.v,1750,assert(read_timeout);,1
axisafety.v,1756,assume(!M_AXI_BVALID);,1
axisafety.v,1757,assume(!M_AXI_RVALID);,1
axisafety.v,1762,assert(raddr_valid == !S_AXI_ARREADY);,1
axisafety.v,1766,assert(raddr_valid);,1
axisafety.v,1772,assert(o_read_fault || o_write_fault /* ... */ );,1
axisafety.v,1886,assert(!o_write_fault || !M_AXI_ARESETN);,1
axisafety.v,1888,assert(!o_write_fault);,1
axisafety.v,1892,assert(!o_read_fault || !M_AXI_ARESETN);,1
axisafety.v,1894,assert(!o_read_fault);,1
axisafety.v,1898,assert(!read_timeout || !M_AXI_ARESETN);,1
axisafety.v,1900,assert(!read_timeout);,1
axisafety.v,1904,assert(!write_timeout || !M_AXI_ARESETN);,1
axisafety.v,1906,assert(!write_timeout);,1
axisafety.v,1910,assert(!M_AXI_AWVALID);,1
axisafety.v,1935,assert(!M_AXI_ARVALID);,1
axisafety.v,1939,assert(m_wpending == fm_axi_wr_pending);,1
axisafety.v,1944,assert(fm_axi_awr_nbursts== f_axi_awr_nbursts);,1
axisafety.v,1945,assert(fm_axi_awr_nbursts == 1);,1
axisafety.v,1978,assume(S_AXI_AWADDR != fc_never_write_addr);,1
axisafety.v,1982,assert(M_AXI_AWADDR != fc_never_write_addr);,1
axisafety.v,1989,"assume({ S_AXI_WDATA, S_AXI_WSTRB } != fc_never_write_data);",1
axisafety.v,1993,"assert({ M_AXI_WDATA, M_AXI_WSTRB } != fc_never_write_data);",1
axisafety.v,2000,assume(S_AXI_ARADDR != fc_never_read_addr);,1
axisafety.v,2004,assume(r_araddr != fc_never_read_addr);,1
axisafety.v,2008,assert(M_AXI_ARADDR != fc_never_read_addr);,1
axisafety.v,2015,assume(M_AXI_RDATA != fc_never_read_data);,1
axisafety.v,2019,assert(S_AXI_RDATA != fc_never_read_data);,1
axisafety.v,2058,cover(S_AXI_AWVALID && S_AXI_AWREADY);,1
axisafety.v,2061,cover(S_AXI_AWVALID && S_AXI_AWREADY && S_AXI_AWLEN == 3);,1
axilempty.v,125,assert(awskd_unused == 0);,1
axilempty.v,139,assert(wskd_unused == 0);,1
axilempty.v,208,assert(arskd_unused == 0);,1
axilempty.v,341,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
axilempty.v,351,assert(S_AXI_RDATA == 0);,1
axilempty.v,353,assert(S_AXI_RRESP == 2'b11);,1
axilempty.v,355,assert(S_AXI_BRESP == 2'b11);,1
axilite2axi.v,299,assert(faxi_awr_nbursts == faxil_awr_outstanding);,1
axilite2axi.v,319,assert(faxil_wr_outstanding == 0);,1
axilite2axi.v,354,assume(S_AXI_AWVALID || !S_AXI_WVALID);,1
axilite2axi.v,356,assume(!S_AXI_AWVALID);,1
axilite2axi.v,366,assume(!S_AXI_ARVALID);,1
axilite2axi.v,370,assume(!S_AXI_AWVALID);,1
wbxbar.v,1114,assume(i_reset);,1
wbxbar.v,1132,assert(grant[N][M-1:0] == 0);,1
wbxbar.v,1138,assert(o_merr[N] || m_stall[N]);,1
wbxbar.v,1151,assert(checkgrant == mgrant[N]);,1
wbxbar.v,1165,assert(mgrant[N]);,1
wbxbar.v,1166,assert(mindex[N] == M);,1
wbxbar.v,1167,assert(sgrant[M]);,1
wbxbar.v,1168,assert(sindex[M] == N);,1
wbxbar.v,1181,assert(grant[sindex[M]][M]);,1
wbxbar.v,1192,assert(sgrant[M] == f_sgrant);,1
wbxbar.v,1217,assume(sgrant == 0);,1
wbxbar.v,1224,assume(o_scyc[M] == 0);,1
wbxbar.v,1225,assume(o_sstb[M] == 0);,1
wbxbar.v,1226,assume(sgrant[M] == 0);,1
wbxbar.v,1235,assume(grant[N] == 0);,1
wbxbar.v,1236,assume(mgrant[N] == 0);,1
wbxbar.v,1269,assert(f_moutstanding[N] <= 1);,1
wbxbar.v,1273,assert(m_stall[N] || o_merr[N]);,1
wbxbar.v,1310,assert(m_stall[N]);,1
wbxbar.v,1348,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1350,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1352,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1354,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1356,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1358,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1366,assert(i_mwe[N] == m_we[N]);,1
wbxbar.v,1376,assert(!o_scyc[M]);,1
wbxbar.v,1421,assume(special_master == 0);,1
wbxbar.v,1424,assume(special_slave == 0);,1
wbxbar.v,1457,assert(address_found == 0);,1
wbxbar.v,1476,assume(special_value == 0);,1
wbxbar.v,1486,assume(i_sack[special_slave]);,1
wbxbar.v,1493,assume(!i_sack[special_slave]);,1
wbxbar.v,1494,assume(!i_serr[special_slave]);,1
wbxbar.v,1542,assert(grant[special_master][special_slave]);,1
wbxbar.v,1543,assert(mgrant[special_master]);,1
wbxbar.v,1544,assert(sgrant[special_slave]);,1
wbxbar.v,1545,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1546,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1547,assert(!o_merr[special_master]);,1
wbxbar.v,1552,assert(o_scyc[special_slave]);,1
wbxbar.v,1553,assert(o_sstb[special_slave]);,1
wbxbar.v,1554,assert(!o_swe[special_slave]);,1
wbxbar.v,1555,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1562,assert(!m_we[special_master]);,1
wbxbar.v,1563,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1570,assert(o_scyc[special_slave]);,1
wbxbar.v,1571,assert(o_sstb[special_slave]);,1
wbxbar.v,1572,assert(!o_swe[special_slave]);,1
wbxbar.v,1573,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1577,assert(i_sack[special_slave]);,1
wbxbar.v,1585,assert(o_mack[special_master]);,1
wbxbar.v,1593,cover(i_mcyc[special_master] && f_read_ack);,1
wbxbar.v,1630,assert(grant[special_master][special_slave]);,1
wbxbar.v,1631,assert(mgrant[special_master]);,1
wbxbar.v,1632,assert(sgrant[special_slave]);,1
wbxbar.v,1633,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1634,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1635,assert(!o_merr[special_master]);,1
wbxbar.v,1640,assert(o_scyc[special_slave]);,1
wbxbar.v,1641,assert(o_sstb[special_slave]);,1
wbxbar.v,1642,assert(o_swe[special_slave]);,1
wbxbar.v,1643,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1654,assert(m_we[special_master]);,1
wbxbar.v,1655,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1664,assert(o_scyc[special_slave]);,1
wbxbar.v,1665,assert(o_sstb[special_slave]);,1
wbxbar.v,1666,assert(o_swe[special_slave]);,1
wbxbar.v,1667,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1680,assert(i_sack[special_slave]);,1
wbxbar.v,1687,assert(o_mack[special_master]);,1
wbxbar.v,1692,cover(i_mcyc[special_master] && f_write_ack);,1
sfifo.v,256,assert(o_fill == f_fill);,1
sfifo.v,260,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,264,assert(o_full == r_full);,1
sfifo.v,271,assert(o_empty == r_empty);,1
sfifo.v,282,assert(r_empty);,1
sfifo.v,286,assert(!r_empty);,1
sfifo.v,288,assert(!r_empty);,1
sfifo.v,295,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,297,assert(o_data == i_data);,1
sfifo.v,350,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,356,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,369,assert(f_first_in_fifo);,1
sfifo.v,371,assert(!f_first_in_fifo);,1
sfifo.v,380,assert(!f_first_in_fifo);,1
sfifo.v,385,assert(f_second_in_fifo);,1
sfifo.v,392,assert(f_second_in_fifo);,1
sfifo.v,394,assert(!f_second_in_fifo);,1
sfifo.v,397,assert(f_first_in_fifo);,1
sfifo.v,400,assert(f_second_in_fifo);,1
sfifo.v,403,assert(f_first_in_fifo);,1
sfifo.v,405,assert(o_data == f_first_data);,1
sfifo.v,407,assert(!f_first_in_fifo);,1
sfifo.v,408,assert(o_data == f_second_data);,1
sfifo.v,435,cover(f_was_full && f_empty);,1
apbslave.v,137,assert(PREADY);,1
apbslave.v,155,assume(mem[f_addr[AW-1:APBLSB]] == f_data);,1
apbslave.v,168,assert(PRDATA == f_data);,1
apbslave.v,171,assert(f_data == mem[f_addr[AW-1:APBLSB]]);,1
apbslave.v,198,cover(cvr_writes[2]);,1
apbslave.v,201,cover(cvr_reads[2]);,1
apbslave.v,220,cover(cvr_seq[0]);,1
apbslave.v,221,cover(cvr_seq[1]);,1
apbslave.v,222,cover(cvr_seq[2]);,1
apbslave.v,226,cover(PRESETn && !PSEL && !PENABLE && cvr_seq[2]);,1
easyaxil.v,397,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
easyaxil.v,408,assert(S_AXI_RDATA == 0);,1
axixbar.v,2050,assert(rerr_id[N] == 0);,1
axixbar.v,2122,assert(mwgrant[N]);,1
axixbar.v,2123,assert(mwindex[N] == iM);,1
axixbar.v,2126,assert(swgrant[iM]);,1
axixbar.v,2127,assert(swindex[iM] == N);,1
axixbar.v,2134,assert(wgrant[N] != 0);,1
axixbar.v,2138,assert(wrequest[N][NS-1:0] == 0);,1
axixbar.v,2158,assert(mrgrant[N]);,1
axixbar.v,2159,assert(mrindex[N] == iM);,1
axixbar.v,2162,assert(srgrant[iM]);,1
axixbar.v,2163,assert(srindex[iM] == N);,1
axixbar.v,2170,assert(rgrant[N] != 0);,1
axixbar.v,2178,assert(!mrempty[N]);,1
axixbar.v,2263,assert(mwfull[N] == &w_mawpending[N]);,1
axixbar.v,2269,assert(mrfull[N] == &w_mrpending[N]);,1
axixbar.v,2469,assume(S_AXI_AWVALID[N] == 0);,1
axixbar.v,2471,assert(wgrant[N] == 0);,1
axixbar.v,2473,assert(mwgrant[N] == 0);,1
axixbar.v,2475,assert(S_AXI_BVALID[N]== 0);,1
axixbar.v,2481,assume(S_AXI_ARVALID [N]== 0);,1
axixbar.v,2483,assert(rgrant[N] == 0);,1
axixbar.v,2485,assert(S_AXI_RVALID[N] == 0);,1
axixbar.v,2491,assert(OPT_READS | OPT_WRITES);,1
axivdisplay.v,773,"assert(req_addr >= { 1'b0, cfg_frame_addr });",1
axivdisplay.v,774,"assert(req_line_addr >= { 1'b0, cfg_frame_addr });",1
axivdisplay.v,775,assert(req_line_addr <= req_addr);,1
axivdisplay.v,781,assert(cfg_frame_lines != 0);,1
axivdisplay.v,782,assert(cfg_line_words != 0);,1
axivdisplay.v,788,assert(r_frame_lines != 0);,1
axivdisplay.v,789,assert(r_line_words != 0);,1
axivdisplay.v,986,assert(axi_arlen+1 == req_line_words);,1
axivdisplay.v,988,assert(axi_arlen+1 < req_line_words);,1
axivdisplay.v,992,assert(!req_hlast);,1
axivdisplay.v,994,assert(axi_arlen < max_burst);,1
axivdisplay.v,996,assert(max_burst > 0);,1
axivdisplay.v,1000,assert(max_burst == req_line_words);,1
axivdisplay.v,1180,assert(!cfg_active);,1
axivdisplay.v,1266,assert(M_AXI_ARBURST == 2'b01);,1
axivdisplay.v,1272,assert(!r_stopped);,1
axivdisplay.v,1288,assert(cfg_frame_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1291,assert(req_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1292,assert(req_line_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1314,assert(M_AXI_RLAST);,1
axivdisplay.v,1317,assume(!M_AXI_RLAST);,1
axivdisplay.v,1373,cover(!soft_reset);,1
axivdisplay.v,1376,cover(start_burst);,1
axivdisplay.v,1379,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
axivdisplay.v,1382,cover(M_AXI_RVALID);,1
axivdisplay.v,1385,cover(M_AXI_RVALID & M_AXI_RLAST);,1
axivdisplay.v,1388,cover(!r_stopped && cvr_full_frame);,1
axivdisplay.v,1391,cover(cvr_full_frame && phantom_start && !r_stopped);,1
axivdisplay.v,1397,assume(M_AXI_ARREADY && M_AXI_RREADY);,1
axivdisplay.v,1398,assume(M_AXIS_TREADY);,1
axivdisplay.v,1399,assume(cfg_frame_addr[12:0] == 0);,1
axivdisplay.v,1400,assume(cfg_line_step[3:0] == 0);,1
axivdisplay.v,1404,cover(cvr_hlast_rlast && cvr_full_frame && phantom_start && !r_stopped);,1
axivdisplay.v,1424,assume(!f_sequential);,1
axivdisplay.v,1427,assume(!f_biglines);,1
axivdisplay.v,1430,assume(!req_addr[C_AXI_ADDR_WIDTH]);,1
axivdisplay.v,1433,assume(!req_line_addr[C_AXI_ADDR_WIDTH]);,1
addrdecode.v,245,assume(i_reset);,1
addrdecode.v,250,assume(!i_valid);,1
addrdecode.v,253,assume(i_valid);,1
addrdecode.v,260,assert(i_reset);,1
addrdecode.v,265,assert(!i_valid);,1
addrdecode.v,268,assert(i_valid);,1
addrdecode.v,276,assert(!o_valid);,1
addrdecode.v,277,assert(o_decode == 0);,1
addrdecode.v,306,assert(!o_decode[iM]);,1
addrdecode.v,313,assert(o_addr == 0);,1
addrdecode.v,314,assert(o_decode == 0);,1
addrdecode.v,315,assert(o_data == 0);,1
addrdecode.v,338,assert(onehot_request);,1
addrdecode.v,353,cover(i_valid);,1
addrdecode.v,356,cover(o_valid);,1
addrdecode.v,359,cover(o_valid && !i_stall);,1
addrdecode.v,373,cover(f_reached[0]);,1
addrdecode.v,382,cover(&f_reached);,1
axidma.v,907,assert(!clear_read_pipeline);,1
axidma.v,910,assert(!clear_read_pipeline);,1
axidma.v,913,assert(!clear_read_pipeline);,1
axidma.v,1575,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1579,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1659,assert(!M_AXI_AWVALID);,1
axidma.v,1660,assert(!M_AXI_WVALID);,1
axidma.v,1661,assert(!M_AXI_ARVALID);,1
axidma.v,1680,assert(f_length != 0);,1
axidma.v,1681,assert(f_length[LGLEN] == 0);,1
axidma.v,1683,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axidma.v,1684,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axidma.v,1762,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1763,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1764,assert(f_length[ADDRLSB-1:0] == 0);,1
axidma.v,1771,assert(!extra_realignment_write);,1
axidma.v,1773,assert(!extra_realignment_write);,1
axidma.v,1775,assert(extra_realignment_write);,1
axidma.v,1779,assert(r_partial_outvalid);,1
axidma.v,1786,assert(f_extra_realignment_read);,1
axidma.v,1788,assert(f_extra_realignment_read == extra_realignment_read);,1
axidma.v,1797,assert(no_read_bursts_outstanding);,1
axidma.v,1801,assert(!r_int);,1
axidma.v,1830,assert(M_AXI_WVALID);,1
axidma.v,1848,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
axidma.v,1854,assert(r_len[ADDRLSB-1:0] == 0);,1
axidma.v,1855,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1856,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1862,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,1863,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,1864,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,1870,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,1872,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axidma.v,1876,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,1881,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,1907,assert(reads_remaining_w == 0);,1
axidma.v,1908,assert(!M_AXI_ARVALID);,1
axidma.v,1909,assert(writes_remaining_w == 0);,1
axidma.v,1934,assert(r_partial_outvalid);,1
axidma.v,1936,assert(!fifo_empty || r_abort || r_err);,1
axidma.v,1962,assert(!M_AXI_WVALID);,1
axidma.v,1969,assert(fifo_data_available == 0);,1
axidma.v,2053,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2057,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
axidma.v,2059,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2066,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
axidma.v,2069,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
axidma.v,2071,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
axidma.v,2087,assert(read_address == f_read_address);,1
axidma.v,2089,assert(read_address[ADDRLSB-1:0] == 0);,1
axidma.v,2093,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2098,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2123,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
axidma.v,2138,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
axidma.v,2146,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
axidma.v,2163,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
axidma.v,2170,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2171,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2173,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
axidma.v,2188,assert(readlen_w != 0);,1
axidma.v,2211,assert(!r_done);,1
axidma.v,2213,assert(!r_done);,1
axidma.v,2221,assert(r_done);,1
axidma.v,2233,assert(M_AXI_WSTRB == 0);,1
axidma.v,2251,assert(reads_remaining_w == 0);,1
axidma.v,2253,assert(reads_remaining_w > 0);,1
axidma.v,2256,assert(readlen_w <= reads_remaining_w);,1
axidma.v,2264,assert(M_AXI_BREADY);,1
axidma.v,2268,assert(M_AXI_RREADY);,1
axidma.v,2291,assert(M_AXI_ARVALID);,1
axidma.v,2295,assert(M_AXI_AWVALID);,1
axidma.v,2316,assert(M_AXI_WVALID);,1
axidma.v,2337,assert(!S_AXIL_BVALID);,1
axidma.v,2338,assert(!S_AXIL_RVALID);,1
axidma.v,2340,assert(!M_AXI_AWVALID);,1
axidma.v,2341,assert(!M_AXI_WVALID);,1
axidma.v,2342,assert(!M_AXI_ARVALID);,1
axidma.v,2344,assert(write_bursts_outstanding == 0);,1
axidma.v,2345,assert(write_requests_remaining == 0);,1
axidma.v,2347,assert(!phantom_read);,1
axidma.v,2348,assert(!phantom_write);,1
axidma.v,2349,assert(!r_busy);,1
axidma.v,2350,assert(read_bursts_outstanding == 0);,1
axidma.v,2351,assert(no_read_bursts_outstanding);,1
axidma.v,2353,assert(r_len == 0);,1
axidma.v,2354,assert(zero_len);,1
axidma.v,2356,assert(write_count == 0);,1
axidma.v,2357,assert(!M_AXI_WLAST);,1
axidma.v,2358,assert(M_AXI_AWLEN == 0);,1
axidma.v,2359,assert(!r_write_fifo);,1
axidma.v,2360,assert(r_src_addr == 0);,1
axidma.v,2361,assert(r_dst_addr == 0);,1
axidma.v,2365,assert(ADDRLSB + LGMAXBURST <= 12);,1
axidma.v,2403,assume(f_const_posn < f_length);,1
axidma.v,2441,assert(f_shifted_wstrb[0]);,1
axidma.v,2442,assert(f_shifted_write[7:0] == f_const_byte);,1
axidma.v,2444,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
axidma.v,2479,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
axidma.v,2516,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
axidma.v,2577,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
axidma.v,2589,cover(!r_busy && r_err);,1
axidma.v,2593,cover(!r_busy && r_abort);,1
axidma.v,2597,cover(reads_remaining_w == 0);,1
axidma.v,2601,cover(reads_remaining_w == 0 && fifo_empty);,1
wbc2pipeline.v,153,assume(i_reset);,1
afifo.v,584,assume(i_wclk == now_wclk);,1
afifo.v,585,assume(i_rclk == now_rclk);,1
afifo.v,596,assume(!pre_wclk && !wclk);,1
afifo.v,597,assume(!pre_rclk && !i_rclk);,1
afifo.v,741,cover(o_rd_empty);,1
afifo.v,742,cover(!o_rd_empty);,1
afifo.v,743,cover(f_state == 2'b01);,1
afifo.v,744,cover(f_state == 2'b10);,1
afifo.v,745,cover(f_state == 2'b11);,1
afifo.v,746,cover(&f_fill[MSB-1:0]);,1
afifo.v,748,cover(i_rd);,1
afifo.v,749,cover(i_rd && !o_rd_empty);,1
afifo.v,770,cover(o_wr_full);,1
afifo.v,771,cover(o_rd_empty && cvr_full);,1
afifo.v,772,cover(o_rd_empty && f_fill == 0 && cvr_full);,1
afifo.v,791,cover(cvr_nearly_full && i_wr_reset_n);,1
afifo.v,792,cover(o_rd_empty && cvr_nearly_full);,1
afifo.v,793,cover(o_rd_empty && f_fill == 0 && cvr_nearly_full);,1
axilsingle.v,317,assert(bfifo.f_first_data != 2'b01);,1
axilsingle.v,320,assert(bfifo.f_second_data != 2'b01);,1
axilsingle.v,324,assume(S_AXI_BRESP != 2'b01);,1
axilsingle.v,328,assume(S_AXI_BRESP != 2'b01);,1
axilsingle.v,336,assert(!bffull || !write_bvalid);,1
axilsingle.v,436,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
axilsingle.v,440,assert(rfifo.f_first_data[1:0] != 2'b01);,1
axilsingle.v,443,assert(rfifo.f_second_data[1:0] != 2'b01);,1
axilsingle.v,447,assume(S_AXI_RRESP != 2'b01);,1
axilsingle.v,451,assume(S_AXI_RRESP != 2'b01);,1
axilsingle.v,585,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
axilsingle.v,615,assert(M_AXI_AWPROT == 0);,1
axilsingle.v,632,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
axilsingle.v,646,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
axilsingle.v,665,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
axilsingle.v,705,cover(cvr_awvalids > 4);,1
axilsingle.v,708,cover(cvr_arvalids > 4);,1
axilsingle.v,711,cover(cvr_reads > 4);,1
axilsingle.v,714,cover(cvr_writes > 4);,1
axil2axis.v,301,assert(write_timer <= OPT_TIMEOUT-1);,1
axil2axis.v,442,assert(read_timer <= OPT_TIMEOUT-1);,1
axil2axis.v,632,assume(!S_AXI_ARESETN);,1
axil2axis.v,737,assert(f_reads == reads_completed);,1
axil2axis.v,739,assert(f_read_pkts == read_bursts_completed);,1
axil2axis.v,743,assert(S_AXIS_TREADY);,1
axil2axis.v,764,assert(f_writes == 0);,1
axil2axis.v,765,assert(f_write_pkts == 0);,1
axil2axis.v,770,assert(f_writes == writes_completed);,1
axil2axis.v,771,assert(f_write_pkts == write_bursts_completed);,1
axil2axis.v,784,assert(S_AXI_RVALID);,1
axil2axis.v,791,assert(&S_AXI_RDATA[C_AXI_DATA_WIDTH-1:SW]);,1
axil2axis.v,793,assert(S_AXI_RDATA[C_AXI_DATA_WIDTH-1:SW] == 0);,1
axil2axis.v,797,assert(S_AXI_RRESP == 2'b00);,1
axil2axis.v,807,assert(S_AXI_RRESP == 2'b00);,1
axil2axis.v,809,assert(S_AXI_RDATA[31:16+LGFIFO+1] == 0);,1
axil2axis.v,813,assert(S_AXI_RDATA[14:LGFIFO+1] == 0);,1
axil2axis.v,826,assert(S_AXI_RDATA == 0);,1
axil2axis.v,841,assume(!S_AXIS_TVALID);,1
axil2axis.v,844,assume(S_AXIS_TVALID);,1
axil2axis.v,853,assert(!M_AXIS_TVALID);,1
axil2axis.v,856,assert(M_AXIS_TVALID);,1
axil2axis.v,870,cover(S_AXI_ARESETN && writes_completed == 16);,1
axil2axis.v,873,cover(S_AXI_ARESETN && reads_completed == 16);,1
axil2axis.v,880,cover(S_AXI_BVALID && S_AXI_BRESP != 2'b00);,1
axil2axis.v,883,cover(S_AXI_RVALID && S_AXI_RRESP != 2'b00);,1
axil2apb.v,550,assert(S_AXI_BVALID);,1
axil2apb.v,552,assert(S_AXI_RVALID);,1
axil2apb.v,589,assert(!M_APB_PENABLE);,1
axil2apb.v,601,assert(!axil_write_ready || !axil_read_ready);,1
axil2apb.v,623,assume(f_never_addr[AXILLSB-1:0] == 0);,1
axil2apb.v,627,assume(S_AXI_AWADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,628,assume(S_AXI_AWPROT != f_never_prot);,1
axil2apb.v,633,assume(S_AXI_WDATA != f_never_data);,1
axil2apb.v,634,assume(S_AXI_WSTRB != f_never_strb);,1
axil2apb.v,639,assume(S_AXI_ARADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,640,assume(S_AXI_ARPROT != f_never_prot);,1
axil2apb.v,644,assume(M_APB_PRDATA != f_never_data);,1
axil2apb.v,655,assert(awskd_addr != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,656,assert(awskd_prot != f_never_prot);,1
axil2apb.v,661,assert(wskd_data != f_never_data);,1
axil2apb.v,662,assert(wskd_strb != f_never_strb);,1
axil2apb.v,667,assert(arskd_addr != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,668,assert(arskd_prot != f_never_prot);,1
axil2apb.v,672,assert(r_apb_data != f_never_data);,1
axil2apb.v,683,assert(M_APB_PADDR != f_never_addr);,1
axil2apb.v,684,assert(M_APB_PPROT != f_never_prot);,1
axil2apb.v,687,assert(M_APB_PWDATA != f_never_data);,1
axil2apb.v,688,assert(M_APB_PWSTRB != f_never_strb);,1
axil2apb.v,693,assert(S_AXI_RDATA != f_never_data);,1
axisswitch.v,469,assert(S_AXI_RDATA[C_AXI_DATA_WIDTH-1:LGNS] == 0);,1
axisswitch.v,475,assert(S_AXI_RVALID);,1
axisswitch.v,485,assert(S_AXI_RDATA == 0);,1
axisswitch.v,501,assert(!M_AXIS_TVALID);,1
axisswitch.v,504,assert(M_AXIS_TVALID);,1
axisswitch.v,512,assert(M_AXIS_TDATA == 0);,1
axisswitch.v,513,assert(M_AXIS_TLAST == 0);,1
axisswitch.v,523,assume(f_const_index < NUM_STREAMS);,1
axisswitch.v,535,assert(f_this_index < NUM_STREAMS);,1
axisswitch.v,538,assert(switch_index < NUM_STREAMS);,1
axisswitch.v,572,assert(f_recount == f_count);,1
axisswitch.v,579,assert(f_this_index == switch_index);,1
axisswitch.v,585,"assume({ S_AXIS_TDATA[f_const_index * C_AXIS_DATA_WIDTH +: C_AXIS_DATA_WIDTH], S_AXIS_TLAST[f_const_index] } != f_never_data);",1
axisswitch.v,593,"assert({ skd_data[f_const_index], skd_last[f_const_index] } != f_never_data);",1
axisswitch.v,595,"assert({ M_AXIS_TDATA, M_AXIS_TLAST } != f_never_data);",1
axilwr2wbsp.v,443,assert(!r_awvalid || !o_axi_awready);,1
axilwr2wbsp.v,444,assert(!r_wvalid || !o_axi_wready);,1
axilwr2wbsp.v,446,assert(!o_wb_cyc);,1
axilwr2wbsp.v,456,assert(!fifo_empty);,1
axilwr2wbsp.v,457,assert(r_first[LGFIFO-1:0] == r_last[LGFIFO-1:0]);,1
axilwr2wbsp.v,458,assert(r_first[LGFIFO] != r_last[LGFIFO]);,1
axilwr2wbsp.v,467,assert(!r_awvalid || !o_axi_awready);,1
axilwr2wbsp.v,468,assert(!r_wvalid || !o_axi_wready);,1
axilwr2wbsp.v,491,assert(f_wb_outstanding == wb_outstanding);,1
axilwr2wbsp.v,499,assert(wb_fill <= f_fifo_fill);,1
axilwr2wbsp.v,504,assert(wb_outstanding+1 == wb_fill);,1
axilwr2wbsp.v,506,assert(wb_outstanding == wb_fill);,1
axilwr2wbsp.v,543,assert(f_axi_rd_outstanding == 0);,1
axilwr2wbsp.v,560,assert(!o_axi_bresp[1]);,1
axilwr2wbsp.v,562,assert(o_axi_bresp == 2'b10);,1
axilwr2wbsp.v,564,assert(!o_axi_bresp[1]);,1
axilwr2wbsp.v,566,assert(o_axi_bresp[1]);,1
axilwr2wbsp.v,581,assert(f_first_minus_err != 0);,1
axilwr2wbsp.v,585,assert(f_mid_minus_err <= f_first_minus_err);,1
axilwr2wbsp.v,592,assert(!o_axi_awready);,1
axilwr2wbsp.v,595,assert(!o_axi_wready);,1
axilwr2wbsp.v,605,cover(o_wb_cyc && o_wb_stb && !i_wb_stall);,1
axilwr2wbsp.v,607,cover(o_wb_cyc && i_wb_ack);,1
wbm2axilite.v,326,assume(f_past_valid || i_reset);,1
wbm2axilite.v,405,assert(o_axi_bready);,1
wbm2axilite.v,411,assert(o_axi_rready);,1
wbm2axilite.v,421,assert(!o_axi_awvalid);,1
wbm2axilite.v,422,assert(!o_axi_wvalid);,1
wbm2axilite.v,431,assert(o_axi_awvalid);,1
wbm2axilite.v,432,assert(o_axi_wvalid);,1
wbm2axilite.v,433,assert(wb_we);,1
wbm2axilite.v,437,assert(!o_axi_awvalid);,1
wbm2axilite.v,439,assert(!o_axi_wvalid);,1
wbm2axilite.v,467,assert(o_axi_arvalid);,1
wbm2axilite.v,483,assert(outstanding == 0);,1
wbm2axilite.v,484,assert(err_pending == 0);,1
wbm2axilite.v,491,assert(f_axi_awr_outstanding == 0);,1
wbm2axilite.v,492,assert(f_axi_wr_outstanding == 0);,1
wbm2axilite.v,493,assert(f_axi_rd_outstanding == 0);,1
wbm2axilite.v,495,assert(f_wb_outstanding == 0);,1
wbm2axilite.v,496,assert(!pending);,1
wbm2axilite.v,497,assert(outstanding == 0);,1
wbm2axilite.v,498,assert(err_pending == 0);,1
wbm2axilite.v,565,cover(i_axi_bvalid && o_axi_bready);,1
wbm2axilite.v,567,cover(i_axi_rvalid && o_axi_rready);,1
wbm2axilite.v,596,cover(i_axi_rvalid && o_axi_rready);,1
wbm2axilite.v,600,cover(i_wb_cyc && o_wb_ack);,1
axisgfsm.v,519,assume(!S_AXI_ARESETN);,1
axisgfsm.v,524,assume(!i_abort);,1
axisgfsm.v,525,assume(i_tbl_addr[1:0] == 2'b00);,1
axisgfsm.v,546,assert(o_pf_pc[1:0] == 2'b00);,1
axisgfsm.v,556,assume(i_pf_pc == f_pc);,1
axisgfsm.v,560,assert(f_pc[1:0] == 2'b00);,1
axisgfsm.v,565,assume(!i_pf_illegal);,1
axisgfsm.v,708,assert(sgstate == SG_SRCADDR);,1
axisgfsm.v,710,assert(sgstate == SG_SRCHALF);,1
axisgfsm.v,754,assert(sgstate != SG_SRCHALF);,1
axisgfsm.v,755,assert(sgstate != SG_DSTHALF);,1
axisgfsm.v,796,assert(sgstate == SG_SRCADDR);,1
axisgfsm.v,797,assert(!o_dmac_wvalid);,1
axisgfsm.v,798,assert(!dma_busy);,1
axisgfsm.v,810,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,811,assert(f_pc == o_pf_pc);,1
axisgfsm.v,819,assert(o_new_pc);,1
axisgfsm.v,834,assert(sgstate == SG_DSTADDR);,1
axisgfsm.v,835,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,836,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,838,assert(o_dmac_wvalid);,1
axisgfsm.v,839,assert(o_dmac_waddr == DMA_SRCLO);,1
axisgfsm.v,840,assert(o_dmac_wdata == f_tblentry[31:0]);,1
axisgfsm.v,841,assert(&o_dmac_wstrb);,1
axisgfsm.v,842,assert(!dma_busy);,1
axisgfsm.v,843,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,855,assert(sgstate == SG_LENGTH);,1
axisgfsm.v,856,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,857,assert(tbl_int_enable == f_tbl_int_enable);,1
axisgfsm.v,858,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,860,assert(o_dmac_wvalid);,1
axisgfsm.v,861,assert(o_dmac_waddr == DMA_DSTLO);,1
axisgfsm.v,862,"assert(o_dmac_wdata == { 2'b00, f_tblentry[61:32] });",1
axisgfsm.v,863,assert(&o_dmac_wstrb);,1
axisgfsm.v,864,assert(!dma_busy);,1
axisgfsm.v,865,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,877,assert(sgstate == SG_CONTROL);,1
axisgfsm.v,878,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,879,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,880,assert(o_dmac_wvalid);,1
axisgfsm.v,881,assert(o_dmac_waddr == DMA_LENLO);,1
axisgfsm.v,882,assert(o_dmac_wdata == f_tblentry[95:64]);,1
axisgfsm.v,883,assert(&o_dmac_wstrb);,1
axisgfsm.v,884,assert(!dma_busy);,1
axisgfsm.v,885,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,897,assert(sgstate == SG_WAIT);,1
axisgfsm.v,898,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,899,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,900,assert(o_dmac_wvalid);,1
axisgfsm.v,901,assert(o_dmac_waddr == DMA_CONTROL);,1
axisgfsm.v,902,assert(o_dmac_wdata[15:0] == 16'h1f);,1
axisgfsm.v,903,assert(&o_dmac_wstrb);,1
axisgfsm.v,904,assert(!dma_busy);,1
axisgfsm.v,905,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,917,assert(sgstate == SG_WAIT);,1
axisgfsm.v,918,assert(!o_dmac_wvalid);,1
axisgfsm.v,919,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,920,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,921,assert(!o_dmac_wvalid);,1
axisgfsm.v,922,assert(o_dmac_waddr == DMA_CONTROL);,1
axisgfsm.v,924,assert(&o_dmac_wstrb);,1
axisgfsm.v,926,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,948,assert(sgstate == SG_IDLE);,1
axisgfsm.v,949,assert(!o_new_pc);,1
axisgfsm.v,950,assert(!o_dmac_wvalid);,1
axisgfsm.v,958,assert(o_pf_clear_cache);,1
axisgfsm.v,959,assert(!dma_busy);,1
axisgfsm.v,995,assert(!o_done);,1
axisgfsm.v,996,assert(!o_err);,1
axisgfsm.v,1010,assert(!o_dmac_wvalid || i_dmac_wready);,1
axisgfsm.v,1031,assume(!i_abort);,1
axisgfsm.v,1035,assume(!i_abort);,1
skidbuffer.v,233,assume(i_reset);,1
skidbuffer.v,251,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,255,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,261,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,263,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,304,assert(o_ready);,1
skidbuffer.v,335,assert(o_valid == i_valid);,1
skidbuffer.v,345,assert(o_valid);,1
skidbuffer.v,348,assert(!o_valid);,1
skidbuffer.v,359,assert(o_ready);,1
skidbuffer.v,369,assert(o_data == 0);,1
skidbuffer.v,373,assert(r_data == 0);,1
skidbuffer.v,440,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,446,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
axilrd2wbsp.v,376,assume(w_reset);,1
axilrd2wbsp.v,380,assert(!o_axi_arready);,1
axilrd2wbsp.v,401,assert(!o_axi_arready);,1
axilrd2wbsp.v,406,assert(!o_axi_arready);,1
axilrd2wbsp.v,429,assert(f_wb_outstanding == wb_outstanding);,1
axilrd2wbsp.v,437,assert(wb_fill <= f_fifo_fill);,1
axilrd2wbsp.v,443,assert(&o_wb_sel);,1
axilrd2wbsp.v,446,assert(wb_outstanding == wb_fill);,1
axilrd2wbsp.v,451,assert(o_wb_stb);,1
axilrd2wbsp.v,452,assert(!o_axi_arready);,1
axilrd2wbsp.v,484,assert(f_axi_wr_outstanding == 0);,1
axilrd2wbsp.v,486,assert(f_axi_awr_outstanding == 0);,1
axilrd2wbsp.v,488,assert(f_axi_rd_outstanding == f_fifo_fill);,1
axilrd2wbsp.v,497,assert(!o_axi_rresp[1]);,1
axilrd2wbsp.v,499,assert(o_axi_rresp == 2'b10);,1
axilrd2wbsp.v,501,assert(!o_axi_rresp[1]);,1
axilrd2wbsp.v,503,assert(o_axi_rresp[1]);,1
axilrd2wbsp.v,518,assert(f_first_minus_err != 0);,1
axilrd2wbsp.v,522,assert(f_mid_minus_err <= f_first_minus_err);,1
axilrd2wbsp.v,542,cover(o_wb_cyc && o_wb_stb);,1
axilrd2wbsp.v,546,cover(o_wb_cyc && f_wb_outstanding > 2);,1
axilrd2wbsp.v,555,cover(o_axi_rvalid && i_axi_rready);,1
axilfetch.v,327,assert(!o_valid);,1
axi2axilsub.v,548,assert(mst_awaddr == 0);,1
axi2axilsub.v,549,assert(mst_awprot == 0);,1
axi2axilsub.v,621,assert(slv_wstrb == 0);,1
axi2axilsub.v,622,assert(slv_wdata == 0);,1
axi2axilsub.v,795,assume(skidm_bresp <= f_max_bresp);,1
axi2axilsub.v,796,assume(skidm_bresp != EXOKAY);,1
axi2axilsub.v,798,assert(bresp <= f_max_bresp);,1
axi2axilsub.v,799,assert(bresp != EXOKAY);,1
axi2axilsub.v,802,assert(S_AXI_BRESP <= f_max_bresp);,1
axi2axilsub.v,803,assert(S_AXI_BRESP != EXOKAY);,1
axi2axilsub.v,954,assert(faxi_rd_nbursts == 0);,1
axi2axilsub.v,1027,assert(faxil_rd_outstanding == 0);,1
axi2axilsub.v,1048,assert(f_bfifo_packets <= wfifo_count);,1
axi2axilsub.v,1466,assert(mst_arid == 0);,1
axi2axilsub.v,1467,assert(mst_araddr == 0);,1
axi2axilsub.v,1468,assert(mst_arprot == 0);,1
axi2axilsub.v,1747,assert(faxi_awr_nbursts == 0);,1
axi2axilsub.v,1748,assert(faxi_wr_pending == 0);,1
axi2axilsub.v,1749,assert(faxi_wr_ckvalid == 0);,1
axi2axilsub.v,1822,assert(faxil_awr_outstanding == 0);,1
axi2axilsub.v,1823,assert(faxil_wr_outstanding == 0);,1
axi2axilsub.v,1907,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilsub.v,1912,assert(m_axi_awvalid);,1
axi2axilsub.v,1914,assert(!skids_awready);,1
axi2axilsub.v,1916,assert(!skids_awready);,1
axi2axilsub.v,1918,assert(!skids_awready);,1
axi2axilsub.v,1923,assert(axi_bresp != EXOKAY);,1
axi2axilsub.v,1962,assert(f_wfifo_bursts == wfifo_count);,1
axi2axilsub.v,1964,assert(f_wfifo_bursts <= f_wfifo_within);,1
axi2axilsub.v,1967,"assert(f_wfifo_within <= { f_wfifo_bursts, 8'h00 });",1
axi2axilsub.v,1988,assert(f_wfifo_within + bcounts >= faxi_wr_pending);,1
axi2axilsub.v,2063,assert(rid == S_AXI_RID);,1
axi2axilsub.v,2067,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilsub.v,2072,assert(m_axi_arvalid);,1
axi2axilsub.v,2073,assert(!skids_arready);,1
axi2axilsub.v,2128,assert(f_rfifo_bursts == rfifo_count);,1
axi2axilsub.v,2168,assert(rcounts <= 256);,1
axi2axilsub.v,2184,assert(S_AXI_RLAST);,1
axi2axilsub.v,2202,assume(!skids_awvalid);,1
axi2axilsub.v,2203,assume(!skids_wvalid);,1
axi2axilsub.v,2204,assert(M_AXI_AWVALID == 0);,1
axi2axilsub.v,2205,assert(faxil_awr_outstanding == 0);,1
axi2axilsub.v,2206,assert(faxil_wr_outstanding == 0);,1
axi2axilsub.v,2207,assert(!skidm_bvalid);,1
axi2axilsub.v,2208,assert(!S_AXI_BVALID);,1
axi2axilsub.v,2217,assume(!S_AXI_ARVALID);,1
axi2axilsub.v,2218,assert(M_AXI_ARVALID == 0);,1
axi2axilsub.v,2219,assert(faxil_rd_outstanding == 0);,1
axi2axilsub.v,2251,cover(cvr_write_count_simple > 6 && faxi_awr_nbursts == 0 && !S_AXI_BVALID);,1
axi2axilsub.v,2253,cover(cvr_write_count > 2 && faxi_awr_nbursts == 0 && !S_AXI_BVALID);,1
axi2axilsub.v,2277,cover(cvr_read_count_simple > 6 && faxi_rd_nbursts == 0 && !S_AXI_RVALID);,1
axi2axilsub.v,2279,cover(cvr_read_count > 2 && faxi_rd_nbursts == 0 && !S_AXI_RVALID);,1
axi2axilsub.v,2299,assume(f_count_awwait < 3);,1
axildouble.v,332,assert(bfifo.f_first_data != 2'b01);,1
axildouble.v,335,assert(bfifo.f_second_data != 2'b01);,1
axildouble.v,341,assume(S_AXI_BRESP != 2'b01);,1
axildouble.v,345,assume(S_AXI_BRESP != 2'b01);,1
axildouble.v,353,assert(!bffull || !write_bvalid);,1
axildouble.v,456,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
axildouble.v,460,assert(rfifo.f_first_data[1:0] != 2'b01);,1
axildouble.v,463,assert(rfifo.f_second_data[1:0] != 2'b01);,1
axildouble.v,469,assume(S_AXI_RRESP != 2'b01);,1
axildouble.v,473,assume(S_AXI_RRESP != 2'b01);,1
axildouble.v,606,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
axildouble.v,636,assert(M_AXI_AWPROT == 0);,1
axildouble.v,653,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
axildouble.v,667,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
axildouble.v,686,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
axildouble.v,727,cover(cvr_awvalids > 4);,1
axildouble.v,730,cover(cvr_arvalids > 4);,1
axildouble.v,733,cover(cvr_reads > 4);,1
axildouble.v,736,cover(cvr_writes > 4);,1
wbarbiter.v,310,assert(f_b_nreqs == 0);,1
wbarbiter.v,311,assert(f_b_nacks == 0);,1
wbarbiter.v,312,assert(f_a_outstanding == f_outstanding);,1
wbarbiter.v,314,assert(f_a_nreqs == 0);,1
wbarbiter.v,315,assert(f_a_nacks == 0);,1
wbarbiter.v,316,assert(f_b_outstanding == f_outstanding);,1
wbarbiter.v,322,assert(r_a_owner);,1
wbarbiter.v,326,assert(!r_a_owner);,1
wbarbiter.v,348,cover(f_prior_b_ack && o_cyc && o_a_ack);,1
wbarbiter.v,355,cover(f_prior_a_ack && o_cyc && o_b_ack);,1
wbarbiter.v,363,cover(o_cyc && o_b_ack);,1
axiperf.v,1155,assert(S_AXIL_RDATA == 0);,1
axis2mm.v,1551,assert(wr_writes_pending == 0);,1
axis2mm.v,1552,assert(wr_none_pending);,1
axis2mm.v,1555,assert(wr_writes_pending <= M_AXI_AWLEN+1);,1
axis2mm.v,1564,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axis2mm.v,1568,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
axis2mm.v,1587,assert(!M_AXI_AWVALID);,1
axis2mm.v,1588,assert(!M_AXI_WVALID);,1
axis2mm.v,1589,assert(!M_AXI_BVALID);,1
axis2mm.v,1613,assert(wr_writes_pending == 0);,1
axis2mm.v,1620,assert(fifo_fill >= wr_writes_pending);,1
axis2mm.v,1631,assert(wr_writes_pending <= r_remaining_w);,1
axis2mm.v,1634,assert(aw_requests_remaining == r_remaining_w);,1
axis2mm.v,1637,assert(wr_writes_pending == 0);,1
axis2mm.v,1640,assert(!M_AXI_WVALID);,1
axis2mm.v,1658,assert(!r_busy);,1
axis2mm.v,1661,assert(fifo_fill >= wr_writes_pending);,1
axis2mm.v,1675,assert(M_AXI_AWVALID && M_AXI_WVALID);,1
axis2mm.v,1676,assert(wr_none_pending);,1
axis2mm.v,1683,assert(r_max_burst > 0);,1
axis2mm.v,1689,assert(initial_burstlen > 0);,1
axis2mm.v,1699,assert(M_AXI_AWLEN+1 <= MAX_FIXED_BURST);,1
axis2mm.v,1725,assert(M_AXI_AWADDR[ADDRLSB +: LGMAXBURST] == 0);,1
axis2mm.v,1740,assert(!S_AXIS_TREADY);,1
axis2mm.v,1745,assert(S_AXIS_TREADY);,1
axis2mm.v,1749,assert(S_AXIS_TREADY);,1
axis2mm.v,1754,assert(!S_AXIS_TREADY);,1
axis2mm.v,1757,assert(S_AXIS_TREADY);,1
axis2mm.v,1771,assert(r_errcode == 0);,1
axis2mm.v,1773,assert(r_errcode != 0);,1
axis2mm.v,1782,assert(!r_err);,1
axis2mm.v,1805,assert(axi_addr == cmd_addr);,1
axis2mm.v,1852,cover( r_err && cvr_aborted);,1
axis2mm.v,1853,cover( r_err && cvr_buserr);,1
axis2mm.v,1854,cover(!r_err);,1
axis2mm.v,1857,cover(cmd_length_w > 5);,1
axis2mm.v,1858,cover(cmd_length_w > 8);,1
axilxbar.v,432,assert(skd_awprot[N] == 0);,1
axilxbar.v,517,assert(skd_arprot[N] == 0);,1
axilxbar.v,929,assert(m_awprot[N] == 0);,1
axilxbar.v,933,assert(m_arprot[N] == 0);,1
axilxbar.v,1151,assert(axi_awaddr == 0);,1
axilxbar.v,1152,assert(axi_awprot == 0);,1
axilxbar.v,1158,assert(axi_wdata == 0);,1
axilxbar.v,1159,assert(axi_wstrb == 0);,1
axilxbar.v,1257,assert(axi_araddr == 0);,1
axilxbar.v,1258,assert(axi_arprot == 0);,1
axilxbar.v,1357,assert(r_bresp[N] != 2'b01);,1
axilxbar.v,1360,assert(m_axi_bready[swindex[N]] == !r_bvalid[N]);,1
axilxbar.v,1362,assert(!r_bvalid[N]);,1
axilxbar.v,1365,assert(r_bresp[N] == 0);,1
axilxbar.v,1369,assert(axi_bresp == 0);,1
axilxbar.v,1498,assert(r_rresp[N] != 2'b01);,1
axilxbar.v,1501,assert(m_axi_rready[srindex[N]] == !r_rvalid[N]);,1
axilxbar.v,1503,assert(!r_rvalid[N]);,1
axilxbar.v,1507,assert(r_rresp[N] == 0);,1
axilxbar.v,1508,assert(r_rdata[N] == 0);,1
axilxbar.v,1514,assert(axi_rresp == 0);,1
axilxbar.v,1515,assert(axi_rdata == 0);,1
axilxbar.v,1623,assert(missing_wdata == awpending - wpending);,1
axilxbar.v,1627,assert(awpending >= wpending);,1
axilxbar.v,1706,assume(swindex[iN] == 0);,1
axilxbar.v,1709,assume(srindex[iN] == 0);,1
axilxbar.v,1740,assert(swgrant[N]);,1
axilxbar.v,1741,assert(swindex[N] == iM);,1
axilxbar.v,1744,assert(mwgrant[iM]);,1
axilxbar.v,1745,assert(mwindex[iM] == N);,1
axilxbar.v,1752,assert(wgrant[N] != 0);,1
axilxbar.v,1756,assert(wrequest[N][NS-1:0] == 0);,1
axilxbar.v,1769,assert(srgrant[N]);,1
axilxbar.v,1770,assert(srindex[N] == iM);,1
axilxbar.v,1773,assert(mrgrant[iM]);,1
axilxbar.v,1774,assert(mrindex[iM] == N);,1
axilxbar.v,1781,assert(rgrant[N] != 0);,1
axilxbar.v,1785,assert(rrequest[N][NS-1:0] == 0);,1
axilxbar.v,1875,assert(!S_AXI_BVALID[N]);,1
axilxbar.v,1880,assert(w_sawpending[N] == 0);,1
axilxbar.v,1881,assert(w_swpending[N] == 0);,1
axilxbar.v,1916,assert(!S_AXI_RVALID[N]);,1
axilxbar.v,1919,assert(w_srpending[N] == 0);,1
axilxbar.v,1929,assert(swfull[N] == &w_sawpending[N]);,1
axilxbar.v,1935,assert(srfull[N] == &w_srpending[N]);,1
axilxbar.v,1992,assert(fs_awr_outstanding[M] == 0);,1
axilxbar.v,1993,assert(fs_wr_outstanding[M] == 0);,1
axilxbar.v,1998,assert(fs_rd_outstanding[M] == 0);,1
axilxbar.v,2145,cover(!swgrant[N] && whsreturn);,1
axilxbar.v,2147,cover(!swgrant[N] && was_wevery);,1
axilxbar.v,2150,cover(S_AXI_ARESETN && wrequest[N][NS]);,1
axilxbar.v,2152,cover(S_AXI_ARESETN && wrequest[N][NS] && slave_awaccepts[N]);,1
axilxbar.v,2154,cover(err_wr_return);,1
axilxbar.v,2156,cover(!swgrant[N] && err_wr_return);,1
axilxbar.v,2161,assert(swgrant[N]);,1
axilxbar.v,2221,cover(!srgrant[N] && rhsreturn); // @26 always @(*) cover(!srgrant[N] && was_revery); // @26 always @(*) cover(S_AXI_ARVALID[N] && rrequest[N][NS]);,6
axilxbar.v,2228,cover(rgrant[N][NS]);,1
axilxbar.v,2230,cover(err_rd_return);,1
axilxbar.v,2232,cover(!srgrant[N] && err_rd_return); //@! `endif always @(*) if (S_AXI_BVALID[N] && wgrant[N][NS]) assert(S_AXI_BRESP[2*N+:2]==INTERCONNECT_ERROR);,6
axilxbar.v,2240,assert(S_AXI_RRESP[2*N+:2]==INTERCONNECT_ERROR);,1
axilxbar.v,2260,cover(multi_write_hit);,1
axilxbar.v,2263,cover(multi_read_hit);,1
axilxbar.v,2266,cover(S_AXI_ARESETN && multi_write_hit & mwgrant == 0 && M_AXI_BVALID == 0);,1
axilxbar.v,2269,cover(S_AXI_ARESETN && multi_read_hit & mrgrant == 0 && M_AXI_RVALID == 0);,1
axilxbar.v,2294,assume(f_const_source < NM);,1
axilxbar.v,2305,assume(f_const_slave < NS);,1
axilxbar.v,2321,assume(f_awaddr != f_const_addr_n);,1
axilxbar.v,2322,assume(S_AXI_AWPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2326,assume(m_wdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2327,assume(m_wstrb[f_const_source] != f_const_strb_n);,1
axilxbar.v,2331,assume(f_araddr != f_const_addr_n);,1
axilxbar.v,2332,assume(S_AXI_ARPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2337,assume(m_axi_bresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2342,assume(m_axi_rdata[f_const_slave] != f_const_data_n);,1
axilxbar.v,2343,assume(m_axi_rresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2352,assert(skd_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2353,assert(skd_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2357,assert(m_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2358,assert(m_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2362,assert(M_AXI_AWADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2363,assert(M_AXI_AWPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2367,assert(M_AXI_WDATA[f_const_slave*DW+:DW] != f_const_data_n);,1
axilxbar.v,2372,assert(skd_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2373,assert(skd_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2377,assert(m_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2378,assert(m_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2382,assert(M_AXI_ARADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2383,assert(M_AXI_ARPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2387,assert(r_bresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2389,assert(S_AXI_BRESP[f_const_source*2+:2] != f_const_resp_n);,1
axilxbar.v,2392,assert(r_rresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2393,assert(r_rdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2397,assert(S_AXI_RRESP[f_const_source*2+:2]!=f_const_resp_n);,1
axilxbar.v,2398,assert(S_AXI_RDATA[f_const_source*DW+:DW]!=f_const_data_n);,1
axidouble.v,1174,assert(!S_AXI_BVALID || S_AXI_BRESP != EXOKAY);,1
axidouble.v,1175,assert(!S_AXI_RVALID || S_AXI_RRESP != EXOKAY);,1
axidouble.v,1201,assert(M_AXI_AWVALID == 0);,1
axidouble.v,1203,assert(M_AXI_AWVALID == 0);,1
axidouble.v,1206,assert(M_AXI_AWVALID == wdecode[NS-1:0]);,1
axidouble.v,1209,assert(M_AXI_AWVALID == 0);,1
axidouble.v,1241,assume(!S_AXI_AWVALID);,1
axidouble.v,1243,assert(!S_AXI_BVALID);,1
axidouble.v,1245,assert(!M_AXI_AWVALID);,1
axidouble.v,1253,assume(!S_AXI_ARVALID);,1
axidouble.v,1255,assert(!S_AXI_RVALID);,1
axidouble.v,1257,assert(M_AXI_ARVALID == 0);,1
axidouble.v,1259,assert(rdecode == 0);,1
axidouble.v,1279,assume(S_AXI_AWLEN > 2);,1
axidouble.v,1283,assume(S_AXI_ARLEN > 2);,1
axidouble.v,1318,cover(cvr_awvalids > 2);,1
axidouble.v,1321,cover(cvr_writes > 2);,1
axidouble.v,1324,cover(cvr_writes > 4);,1
axidouble.v,1330,cover(cvr_arvalids > 2);,1
axidouble.v,1333,cover(cvr_reads > 2);,1
axidouble.v,1336,cover(cvr_reads > 4);,1
axidouble.v,1346,cover(S_AXI_BVALID && S_AXI_BRESP == EXOKAY);,1
wbm2axisp.v,508,assert(wr_addr - rd_addr == npending);,1
wbm2axisp.v,568,assert(C_AXI_DATA_WIDTH >= DW);,1
wbm2axisp.v,595,assume(i_reset);,1
wbm2axisp.v,689,assert(direction);,1
wbm2axisp.v,690,assert(f_axi_rd_nbursts == 0);,1
wbm2axisp.v,700,assert(o_axi_wvalid);,1
wbm2axisp.v,706,assert(!direction);,1
wbm2axisp.v,709,assert(f_axi_awr_nbursts == 0);,1
wbm2axisp.v,720,assert(!o_axi_arvalid);,1
wbm2axisp.v,721,assert(f_axi_rd_nbursts == 0);,1
wbm2axisp.v,722,assert(!i_axi_rvalid);,1
wbm2axisp.v,725,assert(!o_axi_awvalid);,1
wbm2axisp.v,726,assert(!o_axi_wvalid);,1
wbm2axisp.v,727,assert(f_axi_awr_nbursts == 0);,1
wbm2axisp.v,745,assert(o_wb_stall);,1
wbm2axisp.v,760,assert(o_axi_bready);,1
wbm2axisp.v,766,assert(o_axi_rready);,1
wbm2axisp.v,775,assert(direction);,1
wbm2axisp.v,786,assert(!direction);,1
wbm2axisp.v,839,assume(i_axi_rdata == f_data);,1
wbm2axisp.v,1036,cover(!i_reset && cvr_flushed && !flushing);,1
wbm2axisp.v,1037,cover(!i_reset && cvr_flushed && !flushing && !o_wb_stall);,1
wbm2axisp.v,1062,cover(cvr_read2write && direction && o_wb_ack && f_wb_outstanding == 1);,1
wbm2axisp.v,1063,cover(cvr_write2read && !direction && o_wb_ack && f_wb_outstanding == 1);,1
wbm2axisp.v,1081,cover(&cvr_ack_after_abort[1:0]);,1
wbm2axisp.v,1085,cover(&cvr_ack_after_abort[2:0]);,1
wbm2axisp.v,1087,cover(!i_wb_cyc && &cvr_ack_after_abort[2:0]);,1
wbm2axisp.v,1102,cover(cvr_nwrites == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
wbm2axisp.v,1105,cover(cvr_nreads == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
wbm2axisp.v,1114,assume(!i_reset && i_wb_cyc && !o_wb_err);,1
axilupsz.v,190,assert(awskd_prot == 3'h0);,1
axilupsz.v,381,assert(rdata == 0);,1
axilupsz.v,382,assert(rresp == 0);,1
axilupsz.v,566,assert(rfifo_fill == fmst_rd_outstanding);,1
axilupsz.v,569,assert(!rfifo_empty);,1
saxi_slave.v,162,assert(F_LGDEPTH > 8);,1
fav_slave.v,140,assume(!i_av_read);,1
fav_slave.v,141,assume(!i_av_write);,1
fav_slave.v,142,assume(!i_av_lock);,1
fav_slave.v,147,assume(|i_av_byteenable);,1
fav_slave.v,236,assume(!i_av_read);,1
fav_slave.v,237,assume(!i_av_write);,1
fav_slave.v,243,assert(!i_av_readdatavalid);,1
fav_slave.v,244,assert(!i_av_writeresponsevalid);,1
fav_slave.v,245,assert(f_rd_nreqs == 0);,1
fav_slave.v,246,assert(f_rd_nacks == 0);,1
fav_slave.v,247,assert(f_wr_nreqs == 0);,1
fav_slave.v,248,assert(f_wr_nacks == 0);,1
fav_slave.v,262,assert(!i_av_readdatavalid);,1
fav_slave.v,267,assert(!i_av_writeresponsevalid);,1
faxil_master.v,190,assume(!i_axi_reset_n);,1
faxil_master.v,194,assert(!i_axi_reset_n);,1
faxil_master.v,216,assume(!i_axi_reset_n);,1
faxil_master.v,220,assume(!i_axi_reset_n);,1
faxil_master.v,227,assert(!i_axi_reset_n);,1
faxil_master.v,231,assert(!i_axi_reset_n);,1
faxil_master.v,614,assert(!i_axi_awvalid);,1
faxil_master.v,617,assert(!i_axi_wvalid);,1
faxil_master.v,620,assert(!i_axi_arvalid);,1
faxil_master.v,733,assert(f_axi_rd_outstanding == 0);,1
faxil_master.v,749,assert(f_axi_wr_outstanding == 0);,1
faxil_master.v,751,assert(f_axi_awr_outstanding == 0);,1
faxil_master.v,803,cover(cvr_writes == F_OPT_COVER_BURST);,1
faxil_master.v,821,cover(cvr_reads == F_OPT_COVER_BURST);,1
faxi_master.v,135,assert(F_LGDEPTH > 8);,1
faxi_master.v,191,assert(!i_axi_reset_n);,1
faxi_master.v,206,assume(!i_axi_reset_n);,1
faxi_master.v,210,assert(!i_axi_reset_n);,1
faxi_master.v,234,assume(!i_axi_reset_n);,1
faxi_master.v,238,assume(!i_axi_reset_n);,1
faxi_master.v,245,assert(!i_axi_reset_n);,1
faxi_master.v,249,assert(!i_axi_reset_n);,1
faxi_master.v,611,assert(f_axi_rd_nbursts <= f_axi_rd_outstanding);,1
faxi_master.v,645,"assert({ 8'h00, f_axi_rd_outstanding } <= { f_axi_rd_nbursts, 8'h0 });",1
faxi_master.v,808,assert(f_axi_wr_pending <= f_axi_wr_len + 1);,1
faxi_master.v,810,assert(f_axi_wr_pending <= 9'h100);,1
faxi_master.v,941,assert(f_axi_wr_pending <= 1);,1
faxi_master.v,944,assert(f_axi_wr_len == 0);,1
fwbc_master.v,337,cover(!i_wb_cyc && ack_count > 4);,1
fwbc_master.v,339,cover(!i_wb_cyc && ack_count > 3);,1
faxil_register.v,82,assume(!S_AXI_ARESETN);,1
faxil_register.v,136,assert(!S_AXIL_BVALID);,1
faxil_register.v,139,assert(S_AXIL_BVALID);,1
faxil_register.v,144,assert(!S_AXIL_RVALID);,1
faxil_register.v,147,assert(S_AXIL_RVALID);,1
xlnxdemo.v,809,assert(f_axi_awr_outstanding == f_axi_wr_outstanding);,1
xlnxdemo.v,934,cover(fw_rdcover[0]);,1
xlnxdemo.v,935,cover(fw_rdcover[1]);,1
xlnxdemo.v,936,cover(fw_rdcover[2]);,1
xlnxdemo.v,937,cover(fw_rdcover[3]);,1
xlnxdemo.v,938,cover(fw_rdcover[4]);,1
xlnxdemo.v,939,cover(fw_rdcover[5]); // cover(fw_rdcover[6]);,2
xlnxdemo.v,941,cover(fw_rdcover[7]);,1
xlnxdemo.v,942,cover(fw_rdcover[8]);,1
xlnxdemo.v,943,cover(fw_rdcover[9]);,1
xlnxdemo.v,944,cover(fw_rdcover[10]);,1
xlnxdemo.v,945,cover(fw_rdcover[11]);,1
xlnxdemo.v,946,cover(fw_rdcover[12]);,1
xlnxdemo.v,1052,cover(fw_wrcover[0]);,1
xlnxdemo.v,1053,cover(fw_wrcover[1]);,1
xlnxdemo.v,1054,cover(fw_wrcover[2]);,1
xlnxdemo.v,1055,cover(fw_wrcover[3]);,1
xlnxdemo.v,1056,cover(fw_wrcover[4]);,1
xlnxdemo.v,1057,cover(fw_wrcover[5]); // cover(fw_wrcover[6]);,2
xlnxdemo.v,1059,cover(fw_wrcover[7]);,1
xlnxdemo.v,1060,cover(fw_wrcover[8]);,1
xlnxdemo.v,1061,cover(fw_wrcover[9]);,1
xlnxdemo.v,1062,cover(fw_wrcover[11]);,1
xlnxdemo.v,1063,cover(fw_wrcover[12]);,1
xlnxdemo.v,1064,cover(fw_wrcover[13]);,1
xlnxdemo.v,1065,cover(fw_wrcover[14]);,1
xlnxdemo.v,1066,cover(fw_wrcover[15]);,1
xlnxdemo.v,1067,cover(fw_wrcover[16]);,1
xlnxdemo.v,1068,cover(fw_wrcover[17]);,1
xlnxdemo.v,1069,cover(fw_wrcover[18]);,1
xlnxdemo.v,1070,cover(fw_wrcover[19]);,1
xlnxdemo.v,1071,cover(fw_wrcover[20]);,1
xlnxdemo.v,1072,cover(fw_wrcover[21]);,1
xlnxdemo.v,1073,cover(fw_wrcover[22]);,1
xlnxdemo.v,1074,cover(fw_wrcover[23]);,1
xlnxdemo.v,1075,cover(fw_wrcover[24]);,1
fwb_master.v,523,assume(!i_wb_stall);,1
axi_addr_miter.v,26,assume(i_burst != 2'b11);,1
axi_addr_miter.v,29,assume(i_size <= DSZ);,1
axi_addr_miter.v,59,assume(aligned);,1
axi_addr_miter.v,62,assert(uut_next_addr == ref_next_addr);,1
axi_addr_miter.v,66,assume(i_last_addr[AW-1:12] == ref_next_addr[AW-1:12]);,1
fwbc_slave.v,337,cover(!i_wb_cyc && ack_count > 4);,1
fwbc_slave.v,339,cover(!i_wb_cyc && ack_count > 3);,1
xlnxstream_2018_3.v,258,assume(!M_AXIS_ARESETN);,1
xlnxstream_2018_3.v,266,assert(mst_exec_state == IDLE);,1
xlnxstream_2018_3.v,267,assert(read_pointer == 0);,1
xlnxstream_2018_3.v,268,assert(count == 0);,1
xlnxstream_2018_3.v,269,assert(!tx_done);,1
xlnxstream_2018_3.v,298,assert(count <= C_M_START_COUNT-1);,1
xlnxstream_2018_3.v,303,assert(!M_AXIS_TVALID);,1
xlnxstream_2018_3.v,304,assert(read_pointer == 0);,1
xlnxstream_2018_3.v,310,assert(read_pointer == NUMBER_OF_OUTPUT_WORDS);,1
xlnxstream_2018_3.v,315,assert(read_pointer <= NUMBER_OF_OUTPUT_WORDS);,1
xlnxstream_2018_3.v,319,assert(!M_AXIS_TVALID);,1
xlnxstream_2018_3.v,323,assert(M_AXIS_TVALID);,1
xlnxstream_2018_3.v,332,assert(count == C_M_START_COUNT-1);,1
xlnxstream_2018_3.v,362,cover(tx_done);,1
xlnxstream_2018_3.v,365,cover(&final_counter);,1
faxil_slave.v,190,assume(!i_axi_reset_n);,1
faxil_slave.v,194,assert(!i_axi_reset_n);,1
faxil_slave.v,216,assume(!i_axi_reset_n);,1
faxil_slave.v,220,assume(!i_axi_reset_n);,1
faxil_slave.v,227,assert(!i_axi_reset_n);,1
faxil_slave.v,231,assert(!i_axi_reset_n);,1
faxil_slave.v,614,assert(!i_axi_awready);,1
faxil_slave.v,617,assert(!i_axi_wready);,1
faxil_slave.v,620,assert(!i_axi_arready);,1
faxil_slave.v,733,assert(f_axi_rd_outstanding == 0);,1
faxil_slave.v,749,assert(f_axi_wr_outstanding == 0);,1
faxil_slave.v,751,assert(f_axi_awr_outstanding == 0);,1
faxil_slave.v,803,cover(cvr_writes == F_OPT_COVER_BURST);,1
faxil_slave.v,821,cover(cvr_reads == F_OPT_COVER_BURST);,1
fwb_register.v,75,assume(i_reset);,1
fwb_register.v,107,assert(i_wb_ack);,1
fwb_register.v,109,assert(!i_wb_ack);,1
faxi_slave.v,136,assert(F_LGDEPTH > 8);,1
faxi_slave.v,192,assume(!i_axi_reset_n);,1
faxi_slave.v,207,assume(!i_axi_reset_n);,1
faxi_slave.v,211,assert(!i_axi_reset_n);,1
faxi_slave.v,235,assume(!i_axi_reset_n);,1
faxi_slave.v,239,assume(!i_axi_reset_n);,1
faxi_slave.v,246,assert(!i_axi_reset_n);,1
faxi_slave.v,250,assert(!i_axi_reset_n);,1
faxi_slave.v,612,assert(f_axi_rd_nbursts <= f_axi_rd_outstanding);,1
faxi_slave.v,646,"assert({ 8'h00, f_axi_rd_outstanding } <= { f_axi_rd_nbursts, 8'h0 });",1
faxi_slave.v,809,assert(f_axi_wr_pending <= f_axi_wr_len + 1);,1
faxi_slave.v,811,assert(f_axi_wr_pending <= 9'h100);,1
faxi_slave.v,942,assert(f_axi_wr_pending <= 1);,1
faxi_slave.v,945,assert(f_axi_wr_len == 0);,1
picorv32.v,2114,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2117,restrict property (resetn != $initstate);,1
picorv32.v,2127,assert (mem_wstrb == 0);,1
picorv32.v,2139,assert (ok);,1
picorv32.v,2157,assert(mem_valid);,1
picorv32.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2159,assert(mem_wstrb == 0);,1
picorv32.v,2162,assert(mem_valid);,1
picorv32.v,2163,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2164,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2165,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2168,assert(!mem_valid || mem_ready);,1
UDP_rx.v,76,assert ( ~( valid_o & keep_o[i]) | ( valid_o & keep_o[i] & ~$isunknown( data_o[i*8+7:i*8] )));,1
UDP_rx.v,79,assert ( ~( valid_o & keep_o[i]) | ( valid_o & keep_o[i] & ~$isunknown( data_o[i*8+7:i*8] )));,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
satarx_framer.v,188,assert(!r_valid);,1
satarx_crc.v,215,assert(r_valid);,1
satarx_crc.v,221,assert(!M_AXIS_TABORT);,1
satarx_scrambler.v,176,assert(fill != 0);,1
satarx_scrambler.v,180,assume(!S_AXIS_TVALID);,1
satarx_scrambler.v,183,assume(S_AXIS_TVALID);,1
satarx_scrambler.v,190,assert(!M_AXIS_TVALID);,1
satarx_scrambler.v,193,assert(M_AXIS_TVALID);,1
satarx_scrambler.v,201,assert(M_AXIS_TDATA == 0);,1
satarx_scrambler.v,202,assert(M_AXIS_TLAST == 0);,1
satadma_s2mm.v,261,assert(!o_wr_stb);,1
satadma_s2mm.v,346,assert(!S_READY);,1
satadma_s2mm.v,349,assert(S_VALID && S_READY);,1
satadma_s2mm.v,351,assert(!S_VALID || !S_READY);,1
satadma_s2mm.v,354,assert(!S_READY);,1
satadma_s2mm.v,358,assert(!S_READY);,1
satadma_s2mm.v,363,assert(!o_wr_cyc);,1
satadma_s2mm.v,430,assume(i_reset);,1
satadma_s2mm.v,442,assume(!i_request);,1
satadma_s2mm.v,445,assume(i_request);,1
satadma_s2mm.v,462,assume(i_inc == f_cfg_inc);,1
satadma_s2mm.v,463,assume(i_inc == f_cfg_inc);,1
satadma_s2mm.v,464,assume(i_inc == f_cfg_inc);,1
satadma_s2mm.v,470,assume(i_inc == f_cfg_inc);,1
satadma_s2mm.v,471,assume(i_size == f_cfg_size);,1
satadma_s2mm.v,472,assume(i_addr == f_cfg_addr);,1
satadma_s2mm.v,478,assert(r_addr == f_cfg_addr);,1
satadma_s2mm.v,479,assert(r_size == f_cfg_size);,1
satadma_s2mm.v,480,assert(r_inc == f_cfg_inc);,1
satadma_s2mm.v,485,assume(!S_VALID);,1
satadma_s2mm.v,486,assume(!S_VALID);,1
satadma_s2mm.v,487,assume(!S_VALID);,1
satadma_s2mm.v,503,assume(!S_VALID);,1
satadma_s2mm.v,506,assume(S_VALID);,1
satadma_s2mm.v,515,assume(S_BYTES <= DW/8);,1
satadma_s2mm.v,516,assume(S_BYTES > 0);,1
satadma_s2mm.v,594,assert(|o_wr_sel);,1
satadma_s2mm.v,598,assert(fwb_outstanding == wb_outstanding);,1
satadma_s2mm.v,640,"assert({ 1'b0, o_wr_addr } == fwb_addr[ADDRESS_WIDTH:WBLSB]);",1
satadma_s2mm.v,642,assert(subaddr == fwb_addr[WBLSB-1:0]);,1
satadma_s2mm.v,643,assert(subaddr == fwb_addr[WBLSB-1:0]);,1
satadma_s2mm.v,644,assert(subaddr == fwb_addr[WBLSB-1:0]);,1
satadma_s2mm.v,646,assert(subaddr == fwb_addr[WBLSB-1:0]);,1
satadma_s2mm.v,653,assert(o_err);,1
satadma_s2mm.v,659,assert(!o_wr_cyc);,1
satadma_s2mm.v,668,assert(o_wr_stb);,1
satadma_s2mm.v,669,assert(o_wr_stb);,1
satadma_s2mm.v,672,assert(o_wr_stb);,1
satadma_s2mm.v,673,assert(o_wr_stb);,1
satadma_s2mm.v,674,assert(o_wr_stb);,1
satadma_s2mm.v,688,assert(o_wr_stb);,1
satadma_s2mm.v,697,assert(!o_wr_cyc);,1
satadma_s2mm.v,700,assert(r_sel == 0);,1
satadma_s2mm.v,701,assert(!o_wr_cyc);,1
satadma_s2mm.v,702,assert(wb_outstanding == 0);,1
satadma_s2mm.v,705,assert(r_sel[DW/8-1:1] == 0);,1
satadma_s2mm.v,709,assert(r_sel[DW/8-1:1] == 0);,1
satadma_s2mm.v,711,assert(r_sel[DW/8-2:0] == 0);,1
satadma_s2mm.v,717,assert(r_sel == 0);,1
satadma_s2mm.v,727,assert(r_sel[DW/8-1:3] == 0);,1
satadma_s2mm.v,729,assert(r_sel[DW/8-4:0] == 0);,1
satadma_s2mm.v,735,assert(r_sel == 0);,1
satadma_s2mm.v,747,assert(r_sel == 0);,1
satadma_s2mm.v,755,assert(!r_sel[0]);,1
satadma_s2mm.v,758,assert(!r_sel[DW/8-1]);,1
satadma_s2mm.v,766,assert(!r_sel[ik]);,1
satadma_s2mm.v,768,assert(!r_sel[ik]);,1
satadma_s2mm.v,774,assert(!r_sel[DW/8-1-ik]);,1
satadma_s2mm.v,782,assert(!r_sel[DW/5-1-ik-subaddr]);,1
satadma_s2mm.v,788,assert(!r_sel[ik]);,1
satadma_s2mm.v,798,assert(r_sel == 0);,1
satadma_s2mm.v,866,assume(fc_partial[7:0] == fc_byte);,1
satadma_s2mm.v,868,assume(fc_partial[DW-1:DW-8] == fc_byte);,1
satadma_s2mm.v,909,assert(fwb_posn <= f_posn);,1
satadma_s2mm.v,916,assert(fc_partial_wb[7:0] == fc_byte);,1
satadma_s2mm.v,917,assert(fc_partial_sel[0]);,1
satadma_s2mm.v,919,assert(fc_partial_wb[2*DW-1:2*DW-8] == fc_byte);,1
satadma_s2mm.v,920,assert(fc_partial_sel[2*DW/8-1]);,1
satadma_s2mm.v,935,cover(i_request);,1
satadma_s2mm.v,939,cover(o_busy);,1
satadma_s2mm.v,944,cover(!o_busy);,1
sfifo.v,287,assert(o_fill == f_fill);,1
sfifo.v,294,assert(o_full == r_full);,1
sfifo.v,301,assert(o_empty == r_empty);,1
sfifo.v,312,assert(r_empty);,1
sfifo.v,316,assert(!r_empty);,1
sfifo.v,318,assert(!r_empty);,1
sfifo.v,325,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,327,assert(o_data == i_data);,1
sfifo.v,383,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,389,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,396,assert(o_data == f_first_data);,1
sfifo.v,400,assert(o_data == f_second_data);,1
sfifo.v,410,assert(f_first_in_fifo);,1
sfifo.v,412,assert(!f_first_in_fifo);,1
sfifo.v,421,assert(!f_first_in_fifo);,1
sfifo.v,426,assert(f_second_in_fifo);,1
sfifo.v,433,assert(f_second_in_fifo);,1
sfifo.v,435,assert(!f_second_in_fifo);,1
sfifo.v,438,assert(f_first_in_fifo);,1
sfifo.v,441,assert(f_second_in_fifo);,1
sfifo.v,444,assert(f_first_in_fifo);,1
sfifo.v,446,assert(o_data == f_first_data);,1
sfifo.v,448,assert(!f_first_in_fifo);,1
sfifo.v,449,assert(o_data == f_second_data);,1
sfifo.v,476,cover(f_was_full && f_empty);,1
afifo.v,597,assume(i_wclk == now_wclk);,1
afifo.v,598,assume(i_rclk == now_rclk);,1
afifo.v,609,assume(!pre_wclk && !wclk);,1
afifo.v,610,assume(!pre_rclk && !i_rclk);,1
afifo.v,754,cover(o_rd_empty);,1
afifo.v,755,cover(!o_rd_empty);,1
afifo.v,756,cover(f_state == 2'b01);,1
afifo.v,757,cover(f_state == 2'b10);,1
afifo.v,758,cover(f_state == 2'b11);,1
afifo.v,759,cover(&f_fill[MSB-1:0]);,1
afifo.v,761,cover(i_rd);,1
afifo.v,762,cover(i_rd && !o_rd_empty);,1
afifo.v,783,cover(o_wr_full);,1
afifo.v,784,cover(o_rd_empty && cvr_full);,1
afifo.v,785,cover(o_rd_empty && f_fill == 0 && cvr_full);,1
afifo.v,804,cover(cvr_nearly_full && i_wr_reset_n);,1
afifo.v,805,cover(o_rd_empty && cvr_nearly_full);,1
afifo.v,806,cover(o_rd_empty && f_fill == 0 && cvr_nearly_full);,1
satadma_txgears.v,154,assert(m_bytes <= fill);,1
satadma_txgears.v,217,assert(m_bytes > 0);,1
satadma_txgears.v,218,assert(m_bytes <= fill);,1
satadma_txgears.v,220,assert(m_bytes == fill);,1
satadma_txgears.v,223,assert(m_bytes <= 2);,1
satadma_txgears.v,225,assert(m_bytes <= 2);,1
satadma_txgears.v,227,assert(M_LAST && m_bytes == fill);,1
satadma_txgears.v,230,assert(m_bytes <= 4);,1
satadma_txgears.v,232,assert(M_LAST && m_bytes == fill);,1
satadma_txgears.v,235,assert(m_bytes <= DW/8);,1
satadma_txgears.v,237,assert(M_LAST && m_bytes == fill);,1
satadma_txgears.v,330,assert(f_mid_packet != 2'b11);,1
satadma_txgears.v,340,assert(!r_next);,1
satadma_txgears.v,431,"assert({ r_last, m_last } == 2'b00);",1
satadma_txgears.v,462,assume(i_reset);,1
satadma_txgears.v,466,assume(i_size == f_cfg_size);,1
satadma_txgears.v,480,assume(!S_VALID);,1
satadma_txgears.v,483,assume(S_VALID);,1
satadma_txgears.v,495,assume(S_BYTES > 0);,1
satadma_txgears.v,517,assume(!f_rcvd[F_LGCOUNT-1]);,1
satadma_txgears.v,522,assert(f_rcvd == 0);,1
satadma_txgears.v,524,assert(f_rcvd > 0);,1
satadma_txgears.v,540,assert(!M_VALID);,1
satadma_txgears.v,543,assert(M_VALID);,1
satadma_txgears.v,555,assert(M_BYTES > 0);,1
satadma_txgears.v,560,assert(!r_last || !M_LAST);,1
satadma_txgears.v,561,assert(!r_last || !M_LAST);,1
satadma_txgears.v,562,assert(!r_last || !M_LAST);,1
satadma_txgears.v,567,assert(!r_last || !M_LAST);,1
satadma_txgears.v,568,assert(!r_last || !M_LAST);,1
satadma_txgears.v,569,assert(!r_last || !M_LAST);,1
satadma_txgears.v,580,assert(!r_last || !M_LAST);,1
satadma_txgears.v,582,assert(M_VALID);,1
satadma_txgears.v,586,assert(fill > 0);,1
satadma_txgears.v,587,assert(fill > 0);,1
satadma_txgears.v,588,assert(fill > 0);,1
satadma_txgears.v,589,assert(fill > 0);,1
satadma_txgears.v,594,assert(fill > 0);,1
satadma_txgears.v,598,assert(fill <= (DW/8));,1
satadma_txgears.v,599,assert(fill <= (DW/8));,1
satadma_txgears.v,612,assert(fill == M_BYTES);,1
satadma_txgears.v,640,assume(!f_sent[F_LGCOUNT-1]);,1
satadma_txgears.v,644,assert(f_sent + fill == f_rcvd);,1
satadma_txgears.v,645,assert(f_sent <= f_rcvd);,1
satadma_txgears.v,652,assert(f_sent == 0);,1
satadma_txgears.v,654,assert(M_VALID || f_sent > 0);,1
satadma_txgears.v,692,assume(fs_shifted[7:0] == fc_byte);,1
satadma_txgears.v,694,assume(fs_shifted[DW-1:DW-8] == fc_byte);,1
satadma_txgears.v,717,assert(fm_shifted[7:0] == fc_byte);,1
satadma_txgears.v,719,assert(fm_shifted[DW-1:DW-8] == fc_byte);,1
satadma_txgears.v,736,cover(i_size == SZ_BYTE && f_sent > DW/8);,1
satadma_txgears.v,737,cover(i_size == SZ_16B && f_sent > DW/8);,1
satadma_txgears.v,738,cover(i_size == SZ_32B && f_sent > DW/8);,1
satadma_txgears.v,739,cover(i_size == SZ_BUS && f_sent > DW/8);,1
satadma_txgears.v,741,cover(i_size == SZ_BYTE && f_sent > 2*DW/8+1);,1
satadma_txgears.v,742,cover(i_size == SZ_16B && f_sent > 2*DW/8+1);,1
satadma_txgears.v,743,cover(i_size == SZ_32B && f_sent > 2*DW/8+1);,1
satadma_txgears.v,744,cover(i_size == SZ_BUS && f_sent > 2*DW/8+1);,1
satadma_txgears.v,746,cover(i_size == SZ_BUS && f_sent > 2*DW/8+2);,1
satadma_txgears.v,747,cover(i_size == SZ_BUS && f_sent > 2*DW/8+3);,1
satadma_txgears.v,748,cover(i_size == SZ_BUS && f_sent > 2*DW/8+4);,1
satadma_mm2s.v,372,assert(rdack_len == 0);,1
satadma_mm2s.v,373,assert(fill == m_bytes);,1
satadma_mm2s.v,902,assume(i_reset);,1
satadma_mm2s.v,916,assume(!i_request);,1
satadma_mm2s.v,919,assume(i_request);,1
satadma_mm2s.v,929,assume(f_cfg_len > 0);,1
satadma_mm2s.v,932,assume(i_inc == f_cfg_inc);,1
satadma_mm2s.v,933,assume(i_size == f_cfg_size);,1
satadma_mm2s.v,934,assume(i_addr == f_cfg_addr);,1
satadma_mm2s.v,935,assume(i_transferlen == f_cfg_len);,1
satadma_mm2s.v,938,assert(r_inc == f_cfg_inc);,1
satadma_mm2s.v,939,assert(r_size == f_cfg_size);,1
satadma_mm2s.v,940,assert(r_addr == f_cfg_addr);,1
satadma_mm2s.v,941,assert(r_transferlen == f_cfg_len);,1
satadma_mm2s.v,1016,assert(first_size == f_cfg_len);,1
satadma_mm2s.v,1018,assert(first_size == f_cfg_len);,1
satadma_mm2s.v,1023,assert(first_size == f_cfg_len);,1
satadma_mm2s.v,1039,"assert({ o_rd_addr, subaddr } == f_cfg_addr);",1
satadma_mm2s.v,1041,"assert({ o_rd_addr, subaddr } == f_cfg_addr + f_rcvd + f_outstanding_bytes);",1
satadma_mm2s.v,1047,assert(subaddr == 0);,1
satadma_mm2s.v,1091,assert(!o_rd_we);,1
satadma_mm2s.v,1095,assert(!o_rd_cyc);,1
satadma_mm2s.v,1107,assert(fwb_outstanding == wb_outstanding);,1
satadma_mm2s.v,1142,assert(base_sel != 0);,1
satadma_mm2s.v,1175,assert(base_sel == f_base_sel);,1
satadma_mm2s.v,1196,assert(o_rd_sel != 0);,1
satadma_mm2s.v,1206,assert(o_rd_sel != 0);,1
satadma_mm2s.v,1330,assert(rdstb_size == f_cfg_len);,1
satadma_mm2s.v,1333,assert(rdstb_size == rdstb_len);,1
satadma_mm2s.v,1335,assert(rdstb_size == f_stb_size);,1
satadma_mm2s.v,1341,assert(rdstb_size <= rdstb_len);,1
satadma_mm2s.v,1377,assert(rdack_size == f_cfg_len);,1
satadma_mm2s.v,1380,assert(rdack_size == rdack_len);,1
satadma_mm2s.v,1382,assert(rdack_size == f_ack_size);,1
satadma_mm2s.v,1419,assert(rdack_len[0] == (f_cfg_addr[0] ^ f_cfg_len[0]));,1
satadma_mm2s.v,1420,assert(rdack_len[0] == (f_cfg_addr[0] ^ f_cfg_len[0]));,1
satadma_mm2s.v,1421,assert(rdack_len[0] == (f_cfg_addr[0] ^ f_cfg_len[0]));,1
satadma_mm2s.v,1436,assert(f_rcvd <= f_cfg_len + DW/8 - 1);,1
satadma_mm2s.v,1437,assert(f_rcvd <= f_cfg_len + DW/8 - 1);,1
satadma_mm2s.v,1438,assert(f_rcvd <= f_cfg_len + DW/8 - 1);,1
satadma_mm2s.v,1449,assert(f_rcvd <= f_cfg_len + DW/8 - 1);,1
satadma_mm2s.v,1451,assert(f_cfg_len == f_rcvd + f_outstanding_bytes + rdstb_len);,1
satadma_mm2s.v,1457,assert(rdack_len <= f_cfg_len);,1
satadma_mm2s.v,1458,assert(rdstb_len <= rdack_len);,1
satadma_mm2s.v,1461,assert(rdack_len == rdstb_len + f_outstanding_bytes);,1
satadma_mm2s.v,1471,assert(rdstb_len != 0 || !o_rd_stb);,1
satadma_mm2s.v,1516,assert(f_rcvd == f_cfg_len - rdack_len);,1
satadma_mm2s.v,1528,assert(!M_VALID);,1
satadma_mm2s.v,1532,assert(fill == 0);,1
satadma_mm2s.v,1537,assert(M_BYTES > 0);,1
satadma_mm2s.v,1541,assert(!o_rd_stb);,1
satadma_mm2s.v,1546,assert(f_sent <= r_transferlen);,1
satadma_mm2s.v,1553,assert(f_rcvd == f_sent);,1
satadma_mm2s.v,1555,assert(f_rcvd == f_sent + M_BYTES);,1
satadma_mm2s.v,1560,assert(rdstb_len == 0);,1
satadma_mm2s.v,1600,assert(pre_shift == r_addr[WBLSB-1:0]);,1
satadma_mm2s.v,1619,assume(fwb_shifted[7:0] == fc_byte);,1
satadma_mm2s.v,1621,assume(fwb_shifted[DW-1:DW-8] == fc_byte);,1
satadma_mm2s.v,1646,assert(fm_shifted[7:0] == fc_byte);,1
satadma_mm2s.v,1648,assert(fm_shifted[DW-1:DW-8] == fc_byte);,1
satadma_mm2s.v,1665,cover(!i_reset && i_request);,1
satadma_mm2s.v,1666,cover(o_busy);,1
satadma_mm2s.v,1667,cover(o_rd_cyc);,1
satadma_mm2s.v,1668,cover(o_rd_cyc && i_rd_ack);,1
satadma_mm2s.v,1673,cover(!i_reset && fm_check);,1
satadma_mm2s.v,1692,assume(M_READY);,1
satadma_mm2s.v,1693,assume(M_READY);,1
satadma_mm2s.v,1694,assume(M_READY);,1
satadma_mm2s.v,1699,assume(M_READY);,1
satatx_scrambler.v,156,assert(fill != 0);,1
satatx_scrambler.v,161,assume(!S_AXIS_TVALID);,1
satatx_scrambler.v,164,assume(S_AXIS_TVALID);,1
satatx_scrambler.v,172,assert(!M_AXIS_TVALID);,1
satatx_scrambler.v,175,assert(M_AXIS_TVALID);,1
satatx_scrambler.v,183,assert(M_AXIS_TDATA == 0);,1
satatx_scrambler.v,184,assert(M_AXIS_TLAST == 0);,1
satadma_rxgears.v,132,assert(fill < 2*DW/8);,1
satadma_rxgears.v,167,assert(m_valid);,1
satadma_rxgears.v,171,assert(m_bytes == fill);,1
satadma_rxgears.v,298,assume(i_reset);,1
satadma_rxgears.v,310,assume(!S_VALID);,1
satadma_rxgears.v,313,assume(S_VALID);,1
satadma_rxgears.v,323,assume(S_BYTES > 0);,1
satadma_rxgears.v,340,assume(!f_rcvd[F_LGCOUNT-1]);,1
satadma_rxgears.v,357,assert(!M_VALID);,1
satadma_rxgears.v,358,assert(!r_last);,1
satadma_rxgears.v,359,assert(!M_LAST);,1
satadma_rxgears.v,362,assert(M_VALID);,1
satadma_rxgears.v,372,assert(M_BYTES > 0);,1
satadma_rxgears.v,396,assert(!f_sent[F_LGCOUNT-1]);,1
satadma_rxgears.v,397,assert(!f_buffered[F_LGCOUNT-1]);,1
satadma_rxgears.v,399,assert(f_buffered >= f_sent);,1
satadma_rxgears.v,401,assert(f_sent[WBLSB-1:0] == 0);,1
satadma_rxgears.v,409,assert(f_sent + fill == f_rcvd);,1
satadma_rxgears.v,410,assert(f_sent <= f_rcvd);,1
satadma_rxgears.v,425,assert(!r_last || !M_LAST);,1
satadma_rxgears.v,437,assert(M_BYTES == fill);,1
satadma_rxgears.v,442,assert(f_rcvd == 0);,1
satadma_rxgears.v,444,assert(fill[WBLSB-1:0] == f_rcvd[WBLSB-1:0]);,1
satadma_rxgears.v,481,assume(frx_shifted[7:0] == fc_byte);,1
satadma_rxgears.v,483,assume(frx_shifted[DW-1:DW-8] == fc_byte);,1
satadma_rxgears.v,507,assert(ftx_shifted[7:0] == fc_byte);,1
satadma_rxgears.v,509,assert(ftx_shifted[2*DW-1:2*DW-8] == fc_byte);,1
satadma_rxgears.v,520,assert(sreg[8*ik +: 8] == 8'h00);,1
satadma_rxgears.v,522,assert(sreg[2*DW-8-8*ik +: 8] == 8'h00);,1
skidbuffer.v,264,assume(i_reset);,1
skidbuffer.v,282,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,286,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,292,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,294,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,312,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,335,assert(o_ready);,1
skidbuffer.v,366,assert(o_valid == i_valid);,1
skidbuffer.v,376,assert(o_valid);,1
skidbuffer.v,379,assert(!o_valid);,1
skidbuffer.v,390,assert(o_ready);,1
skidbuffer.v,400,assert(o_data == 0);,1
skidbuffer.v,404,assert(w_data == 0);,1
skidbuffer.v,472,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,478,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
satatx_crc.v,176,assert(state != 2'b11);,1
satatx_crc.v,180,assert(M_AXIS_TVALID);,1
satatx_crc.v,184,assert(M_AXIS_TVALID);,1
satatx_framer.v,145,assert(M_AXIS_TVALID);,1
satatx_framer.v,153,assert(M_AXIS_TDATA == P_EOF);,1
satatx_framer.v,158,assert(M_AXIS_TVALID);,1
satatx_framer.v,159,assert(M_AXIS_TDATA != P_EOF);,1
satatx_framer.v,167,assert(!M_AXIS_TDATA[32]);,1
satatx_framer.v,168,assert(M_AXIS_TVALID);,1
satatx_framer.v,172,assert(0);,1
satatrn_fsm.v,790,assume(i_reset);,1
satatrn_fsm.v,825,assert(!o_wb_stall);,1
satatrn_fsm.v,843,assert(!o_tran_req);,1
satatrn_fsm.v,844,assume(!i_tran_busy);,1
satatrn_fsm.v,847,assert(o_tran_req);,1
satatrn_fsm.v,851,assert(o_tran_req);,1
satatrn_fsm.v,855,assume(i_tran_busy || i_tran_err);,1
satatrn_fsm.v,860,assume(!i_tran_busy);,1
satatrn_fsm.v,861,assume(!i_tran_err);,1
satatrn_fsm.v,866,assume(!o_tran_req);,1
satatrn_fsm.v,880,assert(!o_mm2s_request);,1
satatrn_fsm.v,881,assume(!i_mm2s_busy);,1
satatrn_fsm.v,882,assume(!i_mm2s_err);,1
satatrn_fsm.v,885,assert(o_mm2s_request);,1
satatrn_fsm.v,891,assert(!i_mm2s_busy);,1
satatrn_fsm.v,897,assume(!i_mm2s_busy);,1
satatrn_fsm.v,898,assume(!i_mm2s_err);,1
satatrn_fsm.v,903,assume(!i_mm2s_busy);,1
satatrn_fsm.v,918,assert(!o_s2mm_request);,1
satatrn_fsm.v,919,assume(!i_s2mm_busy);,1
satatrn_fsm.v,920,assume(!i_s2mm_err);,1
satatrn_fsm.v,923,assert(o_s2mm_request);,1
satatrn_fsm.v,929,assert(!i_s2mm_busy);,1
satatrn_fsm.v,935,assume(!i_s2mm_busy);,1
satatrn_fsm.v,936,assume(!i_s2mm_err);,1
satatrn_fsm.v,941,assume(!i_s2mm_busy);,1
satatrn_fsm.v,966,assert(!m_valid);,1
satatrn_fsm.v,969,assert(m_valid);,1
satatrn_fsm.v,985,assume(!i_tran_err);,1
satatrn_fsm.v,988,assume(!i_mm2s_err);,1
satatrn_fsm.v,991,assume(!i_s2mm_err);,1
satatrn_wbarbiter.v,359,assert(f_b_nreqs == 0);,1
satatrn_wbarbiter.v,360,assert(f_b_nacks == 0);,1
satatrn_wbarbiter.v,361,assert(f_a_outstanding == f_outstanding);,1
satatrn_wbarbiter.v,363,assert(f_a_nreqs == 0);,1
satatrn_wbarbiter.v,364,assert(f_a_nacks == 0);,1
satatrn_wbarbiter.v,365,assert(f_b_outstanding == f_outstanding);,1
satatrn_wbarbiter.v,372,assert(r_a_owner);,1
satatrn_wbarbiter.v,377,assert(!r_a_owner);,1
mdl_s8b10b.v,149,assume(S_DATA[7:0] == 8'h7c || S_DATA[7:0] == 8'hbc);,1
mdl_s8b10b.v,153,"assert({ r_6b, r_4b, r_nd } == { 6'b010101, 4'b0101, 1'b0 });",1
mdl_s8b10b.v,157,"assert({ r_6b, r_4b, r_nd } == { 6'b110100, 4'b1000, 1'b0 });",1
sata_scrambler.v,144,assume(i_reset);,1
sata_scrambler.v,159,assume(!S_AXIS_TVALID);,1
sata_scrambler.v,162,assume(S_AXIS_TVALID);,1
sata_scrambler.v,173,assert(!tx_valid);,1
sata_scrambler.v,176,assert(tx_valid);,1
sata_scrambler.v,187,assert(!M_AXIS_TVALID);,1
sata_scrambler.v,190,assert(M_AXIS_TVALID);,1
sata_scrambler.v,251,assume(!S_AXIS_TVALID || !S_AXIS_TLAST);,1
sata_scrambler.v,254,assume(s_word < 4096);,1
sata_scrambler.v,274,assert(tx_last);,1
sata_scrambler.v,276,assert(tx_word == 0);,1
sata_scrambler.v,283,assert(tx_word == 0);,1
sata_scrambler.v,301,"assume(f_value == { S_AXIS_TLAST, S_AXIS_TDATA });",1
sata_scrambler.v,307,"assert(f_value == { tx_last, clear_data });",1
sata_scrambler.v,311,"assert(f_value == { M_AXIS_TLAST, M_AXIS_TDATA });",1
sata_scrambler.v,315,assert(tx_fill == rx_fill);,1
sata_scrambler.v,333,assume(M_AXIS_TREADY);,1
sata_framer.v,142,assume(i_reset);,1
sata_framer.v,157,assume(!S_AXIS_TVALID);,1
sata_framer.v,160,assume(S_AXIS_TVALID);,1
sata_framer.v,171,assert(!tx_valid);,1
sata_framer.v,174,assert(tx_valid);,1
sata_framer.v,233,assert(tx_word < 4096);,1
sata_framer.v,236,assert(m_word < 4096);,1
sata_framer.v,242,assert(tx_state != 2'b00);,1
sata_framer.v,247,assert(!tx_valid || tx_data[32] || tx_state == 2'b10);,1
sata_framer.v,251,assert(tx_data == P_SOF);,1
sata_framer.v,252,assert(S_AXIS_TVALID);,1
sata_framer.v,256,assert(tx_word < 4095);,1
sata_framer.v,259,assert(rx_state == 1'b0);,1
sata_framer.v,261,assert(i_reset || !tx_valid || tx_data != P_HOLD);,1
sata_framer.v,265,assert(tx_word == 0);,1
sata_framer.v,270,assert(tx_state == 2'b01);,1
sata_framer.v,271,assert(!tx_valid || tx_data != P_EOF);,1
sata_framer.v,272,assert(!tx_valid || tx_data != P_SOF);,1
sata_framer.v,278,assert(tx_valid);,1
sata_framer.v,281,assert(rx_state == 1'b0);,1
sata_framer.v,290,assert(tx_word == 0);,1
sata_framer.v,297,assert(rx_state == 1'b1);,1
sata_framer.v,312,assume(f_value == S_AXIS_TDATA);,1
sata_framer.v,317,"assert({ 1'b0, f_value } == tx_data);",1
sata_framer.v,321,assert(f_value == rx_rdata);,1
sata_framer.v,325,assert(f_value == M_AXIS_TDATA);,1
sata_framer.v,348,cover(cvr_frames == 1);,1
sata_framer.v,352,cover(cvr_frames == 2);,1
sata_framer.v,365,assume(!S_AXIS_TVALID || !S_AXIS_TLAST);,1
sata_framer.v,368,assume(s_word < 4095);,1
satatb_bwrap.v,66,assert(o_data[8:0] == i_data[8:0]);,1
satatb_bwrap.v,67,assert(o_data != 9'h1ff);,1
sata_crc_wrapper.v,144,assume(i_reset);,1
sata_crc_wrapper.v,151,assume(phy_errors == 0);,1
sata_crc_wrapper.v,155,assert(!tx_last);,1
sata_crc_wrapper.v,170,assume(!S_AXIS_TVALID);,1
sata_crc_wrapper.v,173,assume(S_AXIS_TVALID);,1
sata_crc_wrapper.v,184,assert(!tx_valid);,1
sata_crc_wrapper.v,187,assert(tx_valid);,1
sata_crc_wrapper.v,248,assume(!S_AXIS_TVALID || !S_AXIS_TLAST);,1
sata_crc_wrapper.v,251,assume(s_word < 4096);,1
sata_crc_wrapper.v,262,assert(rx_rvalid);,1
sata_crc_wrapper.v,270,assert(!tx_valid && tx_state == 2'b00);,1
sata_crc_wrapper.v,275,assert(tx_state != 2'b00);,1
sata_crc_wrapper.v,281,assert(tx_word == 0);,1
sata_crc_wrapper.v,310,assert(!M_AXIS_TABORT);,1
sata_crc_wrapper.v,319,assert(rx_crc == tx_data);,1
sata_crc_wrapper.v,322,assert(rx_crc == INITIAL_CRC);,1
sata_crc_wrapper.v,327,assert(rx_crc == tx_crc);,1
sata_crc_wrapper.v,332,assert(tx_crc == INITIAL_CRC);,1
sata_crc_wrapper.v,339,assert(rx_crc == INITIAL_CRC);,1
sata_crc_wrapper.v,364,assume(!f_ckval);,1
sata_crc_wrapper.v,368,assume(f_value == S_AXIS_TDATA);,1
sata_crc_wrapper.v,372,assert(f_value == tx_data);,1
sata_crc_wrapper.v,379,assert(f_value == rx_rdata);,1
sata_crc_wrapper.v,385,assert(f_value == M_AXIS_TDATA);,1
sata_crc_wrapper.v,392,cover(!i_reset && M_AXIS_TABORT);,1
sata_crc_wrapper.v,408,assume(phy_ready);,1
memdev.v,211,assume(i_reset);,1
memdev.v,241,assert(f_outstanding <= 2);,1
memdev.v,247,assert(o_wb_ack);,1
memdev.v,250,assert(f_outstanding <= 1);,1
memdev.v,253,assert(f_outstanding == 1);,1
memdev.v,258,assert(!o_wb_stall);,1
memdev.v,276,assert(mem[f_addr] == f_data);,1
wbxbar.v,1137,assume(i_reset);,1
wbxbar.v,1157,assert(grant[N][M-1:0] == 0);,1
wbxbar.v,1163,assert(o_merr[N] || m_stall[N]);,1
wbxbar.v,1175,assert(checkgrant == mgrant[N]);,1
wbxbar.v,1189,assert(mgrant[N]);,1
wbxbar.v,1190,assert(mindex[N] == M);,1
wbxbar.v,1191,assert(sgrant[M]);,1
wbxbar.v,1192,assert(sindex[M] == N);,1
wbxbar.v,1205,assert(grant[sindex[M]][M]);,1
wbxbar.v,1216,assert(sgrant[M] == f_sgrant);,1
wbxbar.v,1241,assume(sgrant == 0);,1
wbxbar.v,1248,assume(o_scyc[M] == 0);,1
wbxbar.v,1249,assume(o_sstb[M] == 0);,1
wbxbar.v,1250,assume(sgrant[M] == 0);,1
wbxbar.v,1259,assume(grant[N] == 0);,1
wbxbar.v,1260,assume(mgrant[N] == 0);,1
wbxbar.v,1293,assert(f_moutstanding[N] <= 1);,1
wbxbar.v,1297,assert(m_stall[N] || o_merr[N]);,1
wbxbar.v,1334,assert(m_stall[N]);,1
wbxbar.v,1372,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1374,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1376,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1378,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1380,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1382,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1390,assert(i_mwe[N] == m_we[N]);,1
wbxbar.v,1400,assert(!o_scyc[M]);,1
wbxbar.v,1445,assume(special_master == 0);,1
wbxbar.v,1448,assume(special_slave == 0);,1
wbxbar.v,1481,assert(address_found == 0);,1
wbxbar.v,1500,assume(special_value == 0);,1
wbxbar.v,1510,assume(i_sack[special_slave]);,1
wbxbar.v,1517,assume(!i_sack[special_slave]);,1
wbxbar.v,1518,assume(!i_serr[special_slave]);,1
wbxbar.v,1566,assert(grant[special_master][special_slave]);,1
wbxbar.v,1567,assert(mgrant[special_master]);,1
wbxbar.v,1568,assert(sgrant[special_slave]);,1
wbxbar.v,1569,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1570,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1571,assert(!o_merr[special_master]);,1
wbxbar.v,1576,assert(o_scyc[special_slave]);,1
wbxbar.v,1577,assert(o_sstb[special_slave]);,1
wbxbar.v,1578,assert(!o_swe[special_slave]);,1
wbxbar.v,1579,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1586,assert(!m_we[special_master]);,1
wbxbar.v,1587,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1594,assert(o_scyc[special_slave]);,1
wbxbar.v,1595,assert(o_sstb[special_slave]);,1
wbxbar.v,1596,assert(!o_swe[special_slave]);,1
wbxbar.v,1597,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1601,assert(i_sack[special_slave]);,1
wbxbar.v,1609,assert(o_mack[special_master]);,1
wbxbar.v,1617,cover(i_mcyc[special_master] && f_read_ack);,1
wbxbar.v,1654,assert(grant[special_master][special_slave]);,1
wbxbar.v,1655,assert(mgrant[special_master]);,1
wbxbar.v,1656,assert(sgrant[special_slave]);,1
wbxbar.v,1657,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1658,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1659,assert(!o_merr[special_master]);,1
wbxbar.v,1664,assert(o_scyc[special_slave]);,1
wbxbar.v,1665,assert(o_sstb[special_slave]);,1
wbxbar.v,1666,assert(o_swe[special_slave]);,1
wbxbar.v,1667,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1678,assert(m_we[special_master]);,1
wbxbar.v,1679,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1688,assert(o_scyc[special_slave]);,1
wbxbar.v,1689,assert(o_sstb[special_slave]);,1
wbxbar.v,1690,assert(o_swe[special_slave]);,1
wbxbar.v,1691,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1704,assert(i_sack[special_slave]);,1
wbxbar.v,1711,assert(o_mack[special_master]);,1
wbxbar.v,1716,cover(i_mcyc[special_master] && f_write_ack);,1
addrdecode.v,331,assume(i_reset);,1
addrdecode.v,335,assert(i_reset);,1
addrdecode.v,341,assert(!o_valid);,1
addrdecode.v,342,assert(o_decode == 0);,1
addrdecode.v,371,assert(!o_decode[iM]);,1
addrdecode.v,380,assert(o_addr == 0);,1
addrdecode.v,381,assert(o_decode == 0);,1
addrdecode.v,382,assert(o_data == 0);,1
addrdecode.v,406,assert(onehot_request);,1
addrdecode.v,424,cover(i_valid);,1
addrdecode.v,427,cover(o_valid);,1
addrdecode.v,430,cover(o_valid && !i_stall);,1
addrdecode.v,444,cover(f_reached[0]);,1
addrdecode.v,453,cover(&f_reached);,1
wbdown.v,306,assume(i_reset);,1
wbdown.v,345,assert(s_count > 0);,1
wbdown.v,347,assert(s_count == 0);,1
wbdown.v,352,assert(ign_fifo_fill == fmst_outstanding);,1
wbdown.v,356,assert(ign_fifo_fill == 0);,1
wbdown.v,360,assert(!r_stb);,1
wbdown.v,364,assert(o_swe == i_wwe);,1
wbdown.v,368,assert(o_scyc);,1
wbdown.v,387,assert(f_acks_in_fifo > 0);,1
wbdown.v,420,assert(f_acks_in_fifo <= ign_fifo_fill);,1
wbdown.v,421,assert(!ign_fifo_empty || f_acks_in_fifo == 0);,1
wbdown.v,430,assert(f_first_ack || s_count > 0);,1
wbdown.v,432,assert(f_second_ack || s_count > 0);,1
wbdown.v,435,assert(f_acks_in_fifo > 0);,1
wbdown.v,471,assume(!fifo_ack);,1
wbdown.v,919,assume(i_reset);,1
wbdown.v,958,assert(s_count > 0);,1
wbdown.v,959,assert(o_ssel != 0);,1
wbdown.v,961,assert(o_saddr[WBLSB-1:0] == 0);,1
wbdown.v,964,assert(o_saddr[WBLSB-1:0] == 0);,1
wbdown.v,967,assert(s_sel[SMALL_DW/8-1:0] == 0);,1
wbdown.v,970,assert(s_sel[WIDE_DW/8-1:SMALL_DW/8] == 0);,1
wbdown.v,973,assert(s_sel == 0);,1
wbdown.v,974,assert(s_count == 0);,1
wbdown.v,987,assert(!r_stb || !s_null);,1
wbdown.v,992,assert(o_ssel != 0);,1
wbdown.v,1004,assert(ign_fifo_fill == fmst_outstanding);,1
wbdown.v,1008,assert(ign_fifo_fill == 0);,1
wbdown.v,1012,assert(!r_stb);,1
wbdown.v,1016,assert(o_swe == i_wwe);,1
wbdown.v,1020,assert(o_scyc);,1
wbdown.v,1024,assert(r_data == 0);,1
wbdown.v,1044,assert(f_acks_in_fifo > 0);,1
wbdown.v,1055,assert(f_acks_in_fifo <= ign_fifo_fill);,1
wbdown.v,1056,assert(!fifo_empty || f_acks_in_fifo == 0);,1
wbdown.v,1065,assert(f_first_ack || s_count > 0);,1
wbdown.v,1067,assert(f_second_ack || s_count > 0);,1
wbdown.v,1070,assert(f_acks_in_fifo > 0);,1
wbdown.v,1106,assume(!fifo_ack);,1
Cache_tb.v,77,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,86,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,95,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,104,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,114,"assert(RAMLesen, 0, `__LINE__);",1
Cache_tb.v,115,"assert(ProzessorDatenGelesen, 1, `__LINE__);",1
Cache_tb.v,121,"assert(ProzessorDatenGelesen, 0, `__LINE__);",1
Cache_tb.v,127,"assert(ProzessorDatenGelesen, 1, `__LINE__);",1
Cache_tb.v,133,"assert(ProzessorDatenGelesen, 0, `__LINE__);",1
Cache_tb.v,140,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,149,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,158,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,167,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,177,"assert(RAMLesen, 0, `__LINE__);",1
Cache_tb.v,178,"assert(ProzessorDatenGeschrieben, 1, `__LINE__);",1
Cache_tb.v,183,"assert(ProzessorDatenGeschrieben, 0, `__LINE__);",1
Cache_tb.v,189,"assert(ProzessorDatenGelesen, 1, `__LINE__);",1
Cache_tb.v,195,"assert(ProzessorDatenGelesen, 0, `__LINE__);",1
Cache_tb.v,201,"assert(RAMSchreiben, 1, `__LINE__);",1
Cache_tb.v,209,"assert(RAMSchreiben, 1, `__LINE__);",1
Cache_tb.v,217,"assert(RAMSchreiben, 1, `__LINE__);",1
Cache_tb.v,225,"assert(RAMSchreiben, 1, `__LINE__);",1
Cache_tb.v,233,"assert(RAMSchreiben, 0, `__LINE__);",1
Cache_tb.v,235,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,244,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,253,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,262,"assert(RAMLesen, 1, `__LINE__);",1
Cache_tb.v,272,"assert(RAMLesen, 0, `__LINE__);",1
Cache_tb.v,273,"assert(ProzessorDatenGelesen, 1, `__LINE__);",1
Cache_tb.v,279,"assert(ProzessorDatenGelesen, 0, `__LINE__);",1
Steuerung_tb.v,90,"assert(LoadBefehlSignal, 1, `__LINE__);",1
Steuerung_tb.v,91,"assert(DekodierSignal, 0, `__LINE__);",1
Steuerung_tb.v,92,"assert(ALUStartSignal, 0, `__LINE__);",1
Steuerung_tb.v,93,"assert(RegisterSchreibSignal, 0, `__LINE__);",1
Steuerung_tb.v,94,"assert(LoadDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,95,"assert(StoreDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,96,"assert(PCSignal, 0, `__LINE__);",1
Steuerung_tb.v,97,"assert(PCSprungSignal, 0, `__LINE__);",1
Steuerung_tb.v,102,"assert(LoadBefehlSignal, 0, `__LINE__);",1
Steuerung_tb.v,103,"assert(DekodierSignal, 1, `__LINE__);",1
Steuerung_tb.v,104,"assert(ALUStartSignal, 0, `__LINE__);",1
Steuerung_tb.v,105,"assert(RegisterSchreibSignal, 0, `__LINE__);",1
Steuerung_tb.v,106,"assert(LoadDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,107,"assert(StoreDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,108,"assert(PCSignal, 0, `__LINE__);",1
Steuerung_tb.v,109,"assert(PCSprungSignal, 0, `__LINE__);",1
Steuerung_tb.v,113,"assert(LoadBefehlSignal, 0, `__LINE__);",1
Steuerung_tb.v,114,"assert(DekodierSignal, 0, `__LINE__);",1
Steuerung_tb.v,115,"assert(ALUStartSignal, 1, `__LINE__);",1
Steuerung_tb.v,116,"assert(RegisterSchreibSignal, 0, `__LINE__);",1
Steuerung_tb.v,117,"assert(LoadDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,118,"assert(StoreDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,119,"assert(PCSignal, 0, `__LINE__);",1
Steuerung_tb.v,120,"assert(PCSprungSignal, 0, `__LINE__);",1
Steuerung_tb.v,124,"assert(LoadBefehlSignal, 0, `__LINE__);",1
Steuerung_tb.v,125,"assert(DekodierSignal, 0, `__LINE__);",1
Steuerung_tb.v,126,"assert(ALUStartSignal, 0, `__LINE__);",1
Steuerung_tb.v,127,"assert(RegisterSchreibSignal, 0, `__LINE__);",1
Steuerung_tb.v,128,"assert(LoadDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,129,"assert(StoreDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,130,"assert(PCSignal, 0, `__LINE__);",1
Steuerung_tb.v,131,"assert(PCSprungSignal, 0, `__LINE__);",1
Steuerung_tb.v,136,"assert(LoadBefehlSignal, 0, `__LINE__);",1
Steuerung_tb.v,137,"assert(DekodierSignal, 0, `__LINE__);",1
Steuerung_tb.v,138,"assert(ALUStartSignal, 0, `__LINE__);",1
Steuerung_tb.v,139,"assert(RegisterSchreibSignal, 1, `__LINE__);",1
Steuerung_tb.v,140,"assert(LoadDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,141,"assert(StoreDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,142,"assert(PCSignal, 1, `__LINE__);",1
Steuerung_tb.v,143,"assert(PCSprungSignal, 0, `__LINE__);",1
Steuerung_tb.v,159,"assert(LoadBefehlSignal, 0, `__LINE__);",1
Steuerung_tb.v,160,"assert(DekodierSignal, 0, `__LINE__);",1
Steuerung_tb.v,161,"assert(ALUStartSignal, 0, `__LINE__);",1
Steuerung_tb.v,162,"assert(RegisterSchreibSignal, 0, `__LINE__);",1
Steuerung_tb.v,163,"assert(LoadDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,164,"assert(StoreDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,165,"assert(PCSignal, 1, `__LINE__);",1
Steuerung_tb.v,166,"assert(PCSprungSignal, 1, `__LINE__);",1
Steuerung_tb.v,183,"assert(LoadBefehlSignal, 0, `__LINE__);",1
Steuerung_tb.v,184,"assert(DekodierSignal, 0, `__LINE__);",1
Steuerung_tb.v,185,"assert(ALUStartSignal, 0, `__LINE__);",1
Steuerung_tb.v,186,"assert(RegisterSchreibSignal, 0, `__LINE__);",1
Steuerung_tb.v,187,"assert(LoadDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,188,"assert(StoreDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,189,"assert(PCSignal, 1, `__LINE__);",1
Steuerung_tb.v,190,"assert(PCSprungSignal, 1, `__LINE__);",1
Steuerung_tb.v,207,"assert(LoadBefehlSignal, 0, `__LINE__);",1
Steuerung_tb.v,208,"assert(DekodierSignal, 0, `__LINE__);",1
Steuerung_tb.v,209,"assert(ALUStartSignal, 0, `__LINE__);",1
Steuerung_tb.v,210,"assert(RegisterSchreibSignal, 0, `__LINE__);",1
Steuerung_tb.v,211,"assert(LoadDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,212,"assert(StoreDatenSignal, 1, `__LINE__);",1
Steuerung_tb.v,213,"assert(PCSignal, 1, `__LINE__);",1
Steuerung_tb.v,214,"assert(PCSprungSignal, 0, `__LINE__);",1
Steuerung_tb.v,233,"assert(LoadBefehlSignal, 0, `__LINE__);",1
Steuerung_tb.v,234,"assert(DekodierSignal, 0, `__LINE__);",1
Steuerung_tb.v,235,"assert(ALUStartSignal, 0, `__LINE__);",1
Steuerung_tb.v,236,"assert(RegisterSchreibSignal, 0, `__LINE__);",1
Steuerung_tb.v,237,"assert(LoadDatenSignal, 1, `__LINE__);",1
Steuerung_tb.v,238,"assert(StoreDatenSignal, 0, `__LINE__);",1
Steuerung_tb.v,239,"assert(PCSignal, 1, `__LINE__);",1
Steuerung_tb.v,240,"assert(PCSprungSignal, 0, `__LINE__);",1
async_fifo.v,251,assume(f_wclk_step != 0);,1
async_fifo.v,252,assume(f_rclk_step != 0);,1
async_fifo.v,284,assert(rbin == 0);,1
async_fifo.v,310,assume(w_en == 0);,1
async_fifo.v,312,assert(wptr == 0);,1
async_fifo.v,313,assert(wbin == 0);,1
async_fifo.v,314,assert(!w_full);,1
async_fifo.v,316,assert(wq1_rptr == 0);,1
async_fifo.v,317,assert(wq2_rptr == 0);,1
async_fifo.v,318,assert(rq1_wptr == 0);,1
async_fifo.v,319,assert(rq2_wptr == 0);,1
async_fifo.v,321,assert(rbin == 0);,1
async_fifo.v,322,assert(r_empty);,1
async_fifo.v,328,assume(r_en == 0);,1
async_fifo.v,330,assert(rptr == 0);,1
async_fifo.v,331,assert(rbin == 0);,1
async_fifo.v,332,assert(wq1_rptr == 0);,1
async_fifo.v,333,assert(wq2_rptr == 0);,1
async_fifo.v,334,assert(rq1_wptr == 0);,1
async_fifo.v,335,assert(rq2_wptr == 0);,1
async_fifo.v,349,assert(w_full);,1
async_fifo.v,359,assert(r_empty);,1
async_fifo.v,431,assert(w_full);,1
async_fifo.v,435,assert(r_empty);,1
async_fifo.v,559,cover(w_rstn);,1
async_fifo.v,561,cover(r_rstn);,1
async_fifo.v,569,cover(w_full);,1
async_fifo.v,583,cover(w_en);,1
properties.v,3,assert(outputs[0] == scan_clk_in);,1
properties.v,4,assert(outputs[1] == scan_data_in);,1
properties.v,5,assert(scan_clk_out == inputs[0]);,1
properties.v,6,assert(scan_data_out == inputs[1]);,1
properties.v,7,assert(scan_select == inputs[2]);,1
properties.v,8,assert(scan_latch_en == inputs[3]);,1
properties.v,11,assert(la_scan_data_out == scan_data_in);,1
properties.v,12,assert(scan_clk_out == la_scan_clk_in);,1
properties.v,13,assert(scan_data_out == la_scan_data_in);,1
properties.v,14,assert(scan_select == la_scan_select);,1
properties.v,15,assert(scan_latch_en == la_scan_latch_en);,1
properties.v,18,assert(int_scan_data_out == scan_data_out);,1
properties.v,19,assert(scan_clk_out == int_scan_clk_out);,1
properties.v,20,assert(scan_data_in == int_scan_data_in);,1
properties.v,21,assert(scan_clk_in == int_scan_clk_in);,1
properties.v,22,assert(scan_select == int_scan_select);,1
properties.v,23,assert(scan_latch_en == int_scan_latch_en);,1
fftstage.v,407,assume(f_mpydelay > 1);,1
fftstage.v,417,assert(iaddr == 0);,1
fftstage.v,418,assert(wait_for_sync);,1
fftstage.v,419,assert(o_sync == 0);,1
fftstage.v,420,assert(oaddr == 0);,1
fftstage.v,421,assert(!b_started);,1
fftstage.v,422,assert(!o_sync);,1
fftstage.v,438,assume(!i_ce);,1
fftstage.v,441,assume(f_addr[LGSPAN]==1'b0);,1
fftstage.v,449,assert(iaddr == 0);,1
fftstage.v,455,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,465,assert(ib_a == f_left);,1
fftstage.v,466,assert(ib_b == f_right);,1
fftstage.v,467,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,492,assert(f_output_active == b_started);,1
fftstage.v,496,assert(!f_output_active);,1
fftstage.v,501,assert(oaddr == f_oaddr);,1
fftstage.v,503,assert(oaddr == 0);,1
fftstage.v,507,assume(!ob_sync);,1
fftstage.v,530,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
fftstage.v,535,assert(o_sync);,1
fftstage.v,537,assert(!o_sync);,1
fftstage.v,541,assert(o_data == f_oleft);,1
fftstage.v,546,assert(pre_ovalue == f_oright);,1
fftstage.v,551,assert(o_data == f_oright);,1
hwbfly.v,693,assume(i_ce);,1
hwbfly.v,705,assume(!i_ce);,1
hwbfly.v,712,assume(!i_ce);,1
hwbfly.v,749,assert(left_sr == f_sumrx);,1
hwbfly.v,750,assert(left_si == f_sumix);,1
hwbfly.v,751,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,755,assert(mpy_r == 0);,1
hwbfly.v,756,assert(mpy_i == 0);,1
hwbfly.v,760,assert(mpy_r == 0);,1
hwbfly.v,761,assert(mpy_i == 0);,1
hwbfly.v,766,assert(mpy_r == f_difrx);,1
hwbfly.v,767,assert(mpy_i == f_difix);,1
hwbfly.v,772,assert(mpy_r == -f_difix);,1
hwbfly.v,773,assert(mpy_i == f_difrx);,1
hwbfly.v,778,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,779,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,784,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,785,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,815,assert(p_one == 0);,1
hwbfly.v,817,assert(p_two == 0);,1
hwbfly.v,820,assert(p_one == f_predifrx);,1
hwbfly.v,822,assert(p_two == f_predifix);,1
hwbfly.v,825,assert(p_one == 0);,1
hwbfly.v,827,assert(p_two == 0);,1
hwbfly.v,831,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,833,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,837,assert(p_three == 0);,1
hwbfly.v,839,assert(p_three == 0);,1
hwbfly.v,842,assert(p_three == f_sumdiff);,1
hwbfly.v,844,assert(p_three == f_sumcoef);,1
hwbfly.v,847,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,848,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,849,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1008,assume(i_ce);,1
butterfly.v,1016,assume(i_ce);,1
butterfly.v,1026,assume(!i_ce);,1
butterfly.v,1031,assume(i_ce);,1
butterfly.v,1036,assume(i_ce);,1
butterfly.v,1045,assume(!i_ce);,1
butterfly.v,1052,assume(i_ce);,1
butterfly.v,1062,assume(i_ce);,1
butterfly.v,1101,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,1102,assert(left_sr == f_sumrx);,1
butterfly.v,1103,assert(left_si == f_sumix);,1
butterfly.v,1104,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,1108,assert(mpy_r == 0);,1
butterfly.v,1109,assert(mpy_i == 0);,1
butterfly.v,1113,assert(mpy_r == 0);,1
butterfly.v,1114,assert(mpy_i == 0);,1
butterfly.v,1119,assert(mpy_r == f_difrx);,1
butterfly.v,1120,assert(mpy_i == f_difix);,1
butterfly.v,1125,assert(mpy_r == -f_difix);,1
butterfly.v,1126,assert(mpy_i == f_difrx);,1
butterfly.v,1131,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,1132,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,1137,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,1138,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,1168,assert(p_one == 0);,1
butterfly.v,1170,assert(p_two == 0);,1
butterfly.v,1173,assert(p_one == f_predifrx);,1
butterfly.v,1175,assert(p_two == f_predifix);,1
butterfly.v,1178,assert(p_one == 0);,1
butterfly.v,1180,assert(p_two == 0);,1
butterfly.v,1184,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,1186,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,1190,assert(p_three == 0);,1
butterfly.v,1192,assert(p_three == 0);,1
butterfly.v,1195,assert(p_three == f_sumdiff);,1
butterfly.v,1197,assert(p_three == f_sumcoef);,1
butterfly.v,1202,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1203,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1204,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1224,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1225,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1226,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1227,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,198,assert(o_out == f_addr_value);,1
bitreverse.v,202,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,257,assume(i_ce);,1
longbimpy.v,448,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,450,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,459,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,460,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,467,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,473,assert(r_b[k][BW-1:3] == 0);,1
laststage.v,214,assume(!i_sync);,1
laststage.v,217,assert(stage == f_state[0]);,1
laststage.v,222,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,223,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,229,assert(!o_sync);,1
laststage.v,230,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,231,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,237,assert(!f_rsyncd);,1
laststage.v,238,assert(!o_sync);,1
laststage.v,239,assert(f_state == 0);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
immediate_generator_tb.v,16,assert (immediate === 32'b00000000000000000001001101000100);,1
immediate_generator_tb.v,21,assert (immediate === 32'b00000000000000000010001101000100);,1
immediate_generator_tb.v,26,assert (immediate === 32'b11111111111111111011101100000000);,1
immediate_generator_tb.v,31,assert (immediate === 32'b00000000000000000000010000000000);,1
immediate_generator_tb.v,36,assert (immediate === 32'b11111111111110000000000000001011);,1
immediate_generator_tb.v,41,assert (immediate === 32'b00000000000000000000000001000000);,1
immediate_generator_tb.v,46,assert (immediate === 32'b00000000000000000000000000000000);,1
picorv32.v,2129,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2132,restrict property (resetn != $initstate);,1
picorv32.v,2142,assert (mem_wstrb == 0);,1
picorv32.v,2154,assert (ok);,1
picorv32.v,2172,assert(mem_valid);,1
picorv32.v,2173,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2174,assert(mem_wstrb == 0);,1
picorv32.v,2177,assert(mem_valid);,1
picorv32.v,2178,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2179,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2180,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2183,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2211,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2214,restrict property (resetn != $initstate);,1
picorv32.v,2224,assert (mem_wstrb == 0);,1
picorv32.v,2236,assert (ok);,1
picorv32.v,2254,assert(mem_valid);,1
picorv32.v,2255,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2256,assert(mem_wstrb == 0);,1
picorv32.v,2259,assert(mem_valid);,1
picorv32.v,2260,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2261,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2262,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2265,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
fifo_tb.v,27,assert(empty_o);,1
fifo_tb.v,36,assert(full_o);,1
gray_tb.v,43,assert( bin_i == bin_o );,1
miss_msg_det_tb.v,169,assert(seq_match);,1
miss_msg_det_tb.v,170,assert(sid_match);,1
miss_msg_det_tb.v,183,assert ( sid_miss_match );,1
miss_msg_det_tb.v,184,assert ( seq_miss_match );,1
miss_msg_det_tb.v,189,assert( miss_seq_num_sid_i == tb_sid_sent );,1
miss_msg_det_tb.v,190,assert( miss_seq_num_start_i == tb_seq_sent );,1
miss_msg_det_tb.v,191,assert( miss_seq_num_cnt_i == tb_seq_miss_cnt );,1
miss_msg_det_tb.v,195,assert( miss_sid_start_i == tb_sid_sent );,1
miss_msg_det_tb.v,196,assert( miss_sid_cnt_i == tb_sid_miss_cnt );,1
miss_msg_det_tb.v,197,assert( miss_sid_seq_num_start_i == tb_seq_sent );,1
miss_msg_det_tb.v,198,assert( miss_sid_seq_num_end_i == tb_seq_new );,1
fftstage.v,407,assume(f_mpydelay > 1);,1
fftstage.v,417,assert(iaddr == 0);,1
fftstage.v,418,assert(wait_for_sync);,1
fftstage.v,419,assert(o_sync == 0);,1
fftstage.v,420,assert(oaddr == 0);,1
fftstage.v,421,assert(!b_started);,1
fftstage.v,422,assert(!o_sync);,1
fftstage.v,438,assume(!i_ce);,1
fftstage.v,441,assume(f_addr[LGSPAN]==1'b0);,1
fftstage.v,449,assert(iaddr == 0);,1
fftstage.v,455,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,465,assert(ib_a == f_left);,1
fftstage.v,466,assert(ib_b == f_right);,1
fftstage.v,467,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,492,assert(f_output_active == b_started);,1
fftstage.v,496,assert(!f_output_active);,1
fftstage.v,501,assert(oaddr == f_oaddr);,1
fftstage.v,503,assert(oaddr == 0);,1
fftstage.v,507,assume(!ob_sync);,1
fftstage.v,530,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
fftstage.v,535,assert(o_sync);,1
fftstage.v,537,assert(!o_sync);,1
fftstage.v,541,assert(o_data == f_oleft);,1
fftstage.v,546,assert(pre_ovalue == f_oright);,1
fftstage.v,551,assert(o_data == f_oright);,1
hwbfly.v,674,assume(i_ce);,1
hwbfly.v,686,assume(!i_ce);,1
hwbfly.v,693,assume(!i_ce);,1
hwbfly.v,730,assert(left_sr == f_sumrx);,1
hwbfly.v,731,assert(left_si == f_sumix);,1
hwbfly.v,732,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,736,assert(mpy_r == 0);,1
hwbfly.v,737,assert(mpy_i == 0);,1
hwbfly.v,741,assert(mpy_r == 0);,1
hwbfly.v,742,assert(mpy_i == 0);,1
hwbfly.v,747,assert(mpy_r == f_difrx);,1
hwbfly.v,748,assert(mpy_i == f_difix);,1
hwbfly.v,753,assert(mpy_r == -f_difix);,1
hwbfly.v,754,assert(mpy_i == f_difrx);,1
hwbfly.v,759,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,760,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,765,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,766,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,796,assert(p_one == 0);,1
hwbfly.v,798,assert(p_two == 0);,1
hwbfly.v,801,assert(p_one == f_predifrx);,1
hwbfly.v,803,assert(p_two == f_predifix);,1
hwbfly.v,806,assert(p_one == 0);,1
hwbfly.v,808,assert(p_two == 0);,1
hwbfly.v,812,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,814,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,818,assert(p_three == 0);,1
hwbfly.v,820,assert(p_three == 0);,1
hwbfly.v,823,assert(p_three == f_sumdiff);,1
hwbfly.v,825,assert(p_three == f_sumcoef);,1
hwbfly.v,828,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,829,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,830,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1008,assume(i_ce);,1
butterfly.v,1016,assume(i_ce);,1
butterfly.v,1026,assume(!i_ce);,1
butterfly.v,1031,assume(i_ce);,1
butterfly.v,1036,assume(i_ce);,1
butterfly.v,1045,assume(!i_ce);,1
butterfly.v,1052,assume(i_ce);,1
butterfly.v,1062,assume(i_ce);,1
butterfly.v,1101,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,1102,assert(left_sr == f_sumrx);,1
butterfly.v,1103,assert(left_si == f_sumix);,1
butterfly.v,1104,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,1108,assert(mpy_r == 0);,1
butterfly.v,1109,assert(mpy_i == 0);,1
butterfly.v,1113,assert(mpy_r == 0);,1
butterfly.v,1114,assert(mpy_i == 0);,1
butterfly.v,1119,assert(mpy_r == f_difrx);,1
butterfly.v,1120,assert(mpy_i == f_difix);,1
butterfly.v,1125,assert(mpy_r == -f_difix);,1
butterfly.v,1126,assert(mpy_i == f_difrx);,1
butterfly.v,1131,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,1132,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,1137,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,1138,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,1168,assert(p_one == 0);,1
butterfly.v,1170,assert(p_two == 0);,1
butterfly.v,1173,assert(p_one == f_predifrx);,1
butterfly.v,1175,assert(p_two == f_predifix);,1
butterfly.v,1178,assert(p_one == 0);,1
butterfly.v,1180,assert(p_two == 0);,1
butterfly.v,1184,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,1186,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,1190,assert(p_three == 0);,1
butterfly.v,1192,assert(p_three == 0);,1
butterfly.v,1195,assert(p_three == f_sumdiff);,1
butterfly.v,1197,assert(p_three == f_sumcoef);,1
butterfly.v,1202,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1203,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1204,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1224,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1225,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1226,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1227,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,198,assert(o_out == f_addr_value);,1
bitreverse.v,202,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,257,assume(i_ce);,1
longbimpy.v,448,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,450,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,459,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,460,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,467,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,473,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,280,assume(!i_sync);,1
qtrstage.v,283,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,291,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,292,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,293,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,294,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,296,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,297,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,303,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,304,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,305,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,306,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,313,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,314,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,320,assert(!o_sync);,1
qtrstage.v,321,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,322,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,328,assert(!o_sync);,1
qtrstage.v,329,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,330,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,335,assume(i_sync);,1
qtrstage.v,343,assert(!wait_for_sync);,1
qtrstage.v,348,assert(!o_sync);,1
qtrstage.v,351,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,352,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,354,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,355,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,214,assume(!i_sync);,1
laststage.v,217,assert(stage == f_state[0]);,1
laststage.v,222,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,223,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,229,assert(!o_sync);,1
laststage.v,230,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,231,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,237,assert(!f_rsyncd);,1
laststage.v,238,assert(!o_sync);,1
laststage.v,239,assert(f_state == 0);,1
ControlUnitTest.v,36,assert(ALUOP === 5'bxxxxx);,1
ControlUnitTest.v,37,assert(MUX3_SELECT === 2'bxx);,1
ControlUnitTest.v,38,assert(IMME_SELECT === 3'bxxx);,1
ControlUnitTest.v,39,assert(MUX1_SELECT === 1'bx);,1
ControlUnitTest.v,40,assert(MUX2_SELECT === 1'bx);,1
ControlUnitTest.v,41,assert(MUX4_SELECT === 1'bx);,1
ControlUnitTest.v,42,assert(MEMREAD === 1'b0);,1
ControlUnitTest.v,43,assert(MEMWRITE === 1'b0);,1
ControlUnitTest.v,44,assert(BRANCH === 1'b0);,1
ControlUnitTest.v,45,assert(JUMP === 1'b0);,1
ControlUnitTest.v,46,assert(WRITEENABLE === 1'b0);,1
ControlUnitTest.v,51,assert(ALUOP === 5'b00000);,1
ControlUnitTest.v,52,assert(MUX3_SELECT === 2'b01);,1
ControlUnitTest.v,53,assert(IMME_SELECT === 3'bxxx);,1
ControlUnitTest.v,54,assert(MUX1_SELECT === 1'b0);,1
ControlUnitTest.v,55,assert(MUX2_SELECT === 1'b1);,1
ControlUnitTest.v,56,assert(MUX4_SELECT === 1'b0);,1
ControlUnitTest.v,57,assert(MEMREAD === 1'b0);,1
ControlUnitTest.v,58,assert(MEMWRITE === 1'b0);,1
ControlUnitTest.v,59,assert(BRANCH === 1'b0);,1
ControlUnitTest.v,60,assert(JUMP === 1'b0);,1
ControlUnitTest.v,61,assert(WRITEENABLE === 1'b1);,1
ControlUnitTest.v,66,assert(ALUOP === 5'bxxxxx);,1
ControlUnitTest.v,67,assert(MUX3_SELECT === 2'b01);,1
ControlUnitTest.v,68,assert(IMME_SELECT === 3'b010);,1
ControlUnitTest.v,69,assert(MUX1_SELECT === 1'b0);,1
ControlUnitTest.v,70,assert(MUX2_SELECT === 1'b0);,1
ControlUnitTest.v,71,assert(MUX4_SELECT === 1'b0);,1
ControlUnitTest.v,72,assert(MEMREAD === 1'b0);,1
ControlUnitTest.v,73,assert(MEMWRITE === 1'b0);,1
ControlUnitTest.v,74,assert(BRANCH === 1'b0);,1
ControlUnitTest.v,75,assert(JUMP === 1'b0);,1
ControlUnitTest.v,76,assert(WRITEENABLE === 1'b1);,1
llqspi.v,533,assert(f_nbits != 0);,1
llqspi.v,556,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
llqspi.v,558,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
llqspi.v,574,assert(!o_cs_n);,1
llqspi.v,590,assert(o_sck);,1
llqspi.v,615,assert(!o_cs_n);,1
llqspi.v,631,assert(f_nsent == f_nbits);,1
skidbuffer.v,258,assume(i_reset);,1
skidbuffer.v,276,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,286,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,288,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,306,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,329,assert(o_ready);,1
skidbuffer.v,360,assert(o_valid == i_valid);,1
skidbuffer.v,370,assert(o_valid);,1
skidbuffer.v,373,assert(!o_valid);,1
skidbuffer.v,384,assert(o_ready);,1
skidbuffer.v,394,assert(o_data == 0);,1
skidbuffer.v,398,assert(w_data == 0);,1
skidbuffer.v,466,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,472,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2039,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2042,restrict property (resetn != $initstate);,1
picorv32.v,2052,assert (mem_wstrb == 0);,1
picorv32.v,2064,assert (ok);,1
picorv32.v,2082,assert(mem_valid);,1
picorv32.v,2083,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2084,assert(mem_wstrb == 0);,1
picorv32.v,2087,assert(mem_valid);,1
picorv32.v,2088,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2089,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2090,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2093,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2120,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2123,restrict property (resetn != $initstate);,1
picorv32.v,2133,assert (mem_wstrb == 0);,1
picorv32.v,2145,assert (ok);,1
picorv32.v,2163,assert(mem_valid);,1
picorv32.v,2164,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2165,assert(mem_wstrb == 0);,1
picorv32.v,2168,assert(mem_valid);,1
picorv32.v,2169,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2170,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2171,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2174,assert(!mem_valid || mem_ready);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32-checkpoint.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32-checkpoint.v,2107,restrict property (resetn != $initstate);,1
picorv32-checkpoint.v,2117,assert (mem_wstrb == 0);,1
picorv32-checkpoint.v,2129,assert (ok);,1
picorv32-checkpoint.v,2147,assert(mem_valid);,1
picorv32-checkpoint.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32-checkpoint.v,2149,assert(mem_wstrb == 0);,1
picorv32-checkpoint.v,2152,assert(mem_valid);,1
picorv32-checkpoint.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32-checkpoint.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32-checkpoint.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32-checkpoint.v,2158,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32-checkpoint.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32-checkpoint.v,2107,restrict property (resetn != $initstate);,1
picorv32-checkpoint.v,2117,assert (mem_wstrb == 0);,1
picorv32-checkpoint.v,2129,assert (ok);,1
picorv32-checkpoint.v,2147,assert(mem_valid);,1
picorv32-checkpoint.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32-checkpoint.v,2149,assert(mem_wstrb == 0);,1
picorv32-checkpoint.v,2152,assert(mem_valid);,1
picorv32-checkpoint.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32-checkpoint.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32-checkpoint.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32-checkpoint.v,2158,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32-checkpoint.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32-checkpoint.v,2107,restrict property (resetn != $initstate);,1
picorv32-checkpoint.v,2117,assert (mem_wstrb == 0);,1
picorv32-checkpoint.v,2129,assert (ok);,1
picorv32-checkpoint.v,2147,assert(mem_valid);,1
picorv32-checkpoint.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32-checkpoint.v,2149,assert(mem_wstrb == 0);,1
picorv32-checkpoint.v,2152,assert(mem_valid);,1
picorv32-checkpoint.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32-checkpoint.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32-checkpoint.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32-checkpoint.v,2158,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
miss_msg_det_tb.v,169,assert(seq_match);,1
miss_msg_det_tb.v,170,assert(sid_match);,1
miss_msg_det_tb.v,183,assert ( sid_miss_match );,1
miss_msg_det_tb.v,184,assert ( seq_miss_match );,1
miss_msg_det_tb.v,189,assert( miss_seq_num_sid_i == tb_sid_sent );,1
miss_msg_det_tb.v,190,assert( miss_seq_num_start_i == tb_seq_sent );,1
miss_msg_det_tb.v,191,assert( miss_seq_num_cnt_i == tb_seq_miss_cnt );,1
miss_msg_det_tb.v,195,assert( miss_sid_start_i == tb_sid_sent );,1
miss_msg_det_tb.v,196,assert( miss_sid_cnt_i == tb_sid_miss_cnt );,1
miss_msg_det_tb.v,197,assert( miss_sid_seq_num_start_i == tb_seq_sent );,1
miss_msg_det_tb.v,198,assert( miss_sid_seq_num_end_i == tb_seq_new );,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
immediate_generator_tb.v,16,assert (immediate === 32'b00000000000000000001001101000100);,1
immediate_generator_tb.v,21,assert (immediate === 32'b00000000000000000010001101000100);,1
immediate_generator_tb.v,26,assert (immediate === 32'b11111111111111111011101100000000);,1
immediate_generator_tb.v,31,assert (immediate === 32'b00000000000000000000010000000000);,1
immediate_generator_tb.v,36,assert (immediate === 32'b11111111111110000000000000001011);,1
immediate_generator_tb.v,41,assert (immediate === 32'b00000000000000000000000001000000);,1
immediate_generator_tb.v,46,assert (immediate === 32'b00000000000000000000000000000000);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
tdt_dm.v,3486,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3489,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3491,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3494,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3496,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3499,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3501,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3504,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3506,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3509,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3511,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3514,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dtm_ctrl.v,479,assert property(jtag2_read_not_update_idr);,1
tdt_dtm_ctrl.v,482,assert property(jtag2_read_not_update_idr);,1
tdt_dtm_ctrl.v,484,assert property(jtag2_write_not_capture_idr);,1
tdt_dtm_ctrl.v,487,assert property(jtag2_write_not_capture_idr);,1
tdt_dtm_idr.v,219,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,222,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,224,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,227,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,229,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,232,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,234,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,237,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,239,assert property(set_op_when_capture_dr_in_dmi_running);,1
tdt_dtm_idr.v,242,assert property(set_op_when_capture_dr_in_dmi_running);,1
tdt_dm.v,3486,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3489,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3491,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3494,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3496,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3499,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3501,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3504,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3506,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3509,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3511,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3514,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dtm_ctrl.v,479,assert property(jtag2_read_not_update_idr);,1
tdt_dtm_ctrl.v,482,assert property(jtag2_read_not_update_idr);,1
tdt_dtm_ctrl.v,484,assert property(jtag2_write_not_capture_idr);,1
tdt_dtm_ctrl.v,487,assert property(jtag2_write_not_capture_idr);,1
tdt_dtm_idr.v,219,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,222,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,224,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,227,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,229,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,232,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,234,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,237,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,239,assert property(set_op_when_capture_dr_in_dmi_running);,1
tdt_dtm_idr.v,242,assert property(set_op_when_capture_dr_in_dmi_running);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
helloworld.v,364,restrict(i_clk == !f_last_clk);,1
helloworld.v,408,assert(f_baud_count < CLOCKS_PER_BAUD);,1
helloworld.v,412,assert(o_busy);,1
helloworld.v,436,assert(f_bitcount <= 4'ha);,1
helloworld.v,447,assert(!f_txbits[subcount]);,1
helloworld.v,452,assert(f_txbits[8:1] == f_request_tx_data);,1
helloworld.v,453,assert( f_txbits[9]);,1
helloworld.v,461,cover(!o_busy);,1
helloworld.v,545,assert(baud_counter < CLOCKS_PER_BAUD);,1
speechfifo.v,993,assert(f_baud_count < CLOCKS_PER_BAUD);,1
speechfifo.v,997,assert(o_busy);,1
speechfifo.v,1023,assert(f_bitcount <= 4'ha);,1
speechfifo.v,1034,assert(!f_txbits[subcount]);,1
speechfifo.v,1039,assert(f_txbits[8:1] == f_request_tx_data);,1
speechfifo.v,1040,assert( f_txbits[9]);,1
speechfifo.v,1048,cover(!o_busy);,1
speechfifo.v,1139,assert(baud_counter < CLOCKS_PER_BAUD);,1
speechfifo.v,1428,assert(f_raddr_plus_one == r_next);,1
speechfifo.v,1433,assert(!w_read);,1
speechfifo.v,1434,assert(!osrc);,1
speechfifo.v,1440,assert(r_fill == f_fill);,1
speechfifo.v,1496,assert(!will_underflow);,1
speechfifo.v,1497,assert(f_first_in_fifo);,1
speechfifo.v,1498,assert(!f_second_in_fifo);,1
speechfifo.v,1499,assert(wr_addr == f_next_addr);,1
speechfifo.v,1500,assert(fifo[f_const_addr] == f_const_data);,1
speechfifo.v,1502,assert(o_data == f_const_data);,1
speechfifo.v,1505,assert(f_first_in_fifo);,1
speechfifo.v,1506,assert(f_second_in_fifo);,1
speechfifo.v,1509,assert(f_second_in_fifo);,1
speechfifo.v,1510,assert(rd_addr == f_next_addr);,1
speechfifo.v,1511,assert(o_data == f_const_second);,1
speechfifo.v,1525,cover(o_empty_n);,1
speechfifo.v,1529,cover(o_err);,1
speechfifo.v,1539,cover(cvr_filled && !o_empty_n);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
skew_registers_tb.v,44,assert(dout_w[1] == 2);,1
skew_registers_tb.v,50,assert(dout_w[1] == 3);,1
skew_registers_tb.v,51,assert(dout_w[2] == 3);,1
skew_registers_tb.v,57,assert(dout_w[1] == 4);,1
skew_registers_tb.v,58,assert(dout_w[2] == 4);,1
skew_registers_tb.v,59,assert(dout_w[3] == 4);,1
adr_gen_sequential_tb.v,37,assert(adr == 0);,1
systolic_array_with_skew_tb.v,146,assert(ofmap_out_w[0] == 1*1 + 2*5 + 3* 9 + 4*13);,1
systolic_array_with_skew_tb.v,147,assert(ofmap_out_w[1] == 1*2 + 2*6 + 3*10 + 4*14);,1
systolic_array_with_skew_tb.v,148,assert(ofmap_out_w[2] == 1*3 + 2*7 + 3*11 + 4*15);,1
systolic_array_with_skew_tb.v,149,assert(ofmap_out_w[3] == 1*4 + 2*8 + 3*12 + 4*16);,1
systolic_array_with_skew_tb.v,156,assert(ofmap_out_w[0] == 5*1 + 6*5 + 7* 9 + 8*13);,1
systolic_array_with_skew_tb.v,157,assert(ofmap_out_w[1] == 5*2 + 6*6 + 7*10 + 8*14);,1
systolic_array_with_skew_tb.v,158,assert(ofmap_out_w[2] == 5*3 + 6*7 + 7*11 + 8*15);,1
systolic_array_with_skew_tb.v,159,assert(ofmap_out_w[3] == 5*4 + 6*8 + 7*12 + 8*16);,1
systolic_array_with_skew_tb.v,166,assert(ofmap_out_w[0] == 9*1 + 10*5 + 11* 9 + 12*13);,1
systolic_array_with_skew_tb.v,167,assert(ofmap_out_w[1] == 9*2 + 10*6 + 11*10 + 12*14);,1
systolic_array_with_skew_tb.v,168,assert(ofmap_out_w[2] == 9*3 + 10*7 + 11*11 + 12*15);,1
systolic_array_with_skew_tb.v,169,assert(ofmap_out_w[3] == 9*4 + 10*8 + 11*12 + 12*16);,1
systolic_array_with_skew_tb.v,176,assert(ofmap_out_w[0] == 13*1 + 14*5 + 15* 9 + 16*13);,1
systolic_array_with_skew_tb.v,177,assert(ofmap_out_w[1] == 13*2 + 14*6 + 15*10 + 16*14);,1
systolic_array_with_skew_tb.v,178,assert(ofmap_out_w[2] == 13*3 + 14*7 + 15*11 + 16*15);,1
systolic_array_with_skew_tb.v,179,assert(ofmap_out_w[3] == 13*4 + 14*8 + 15*12 + 16*16);,1
generate.v,196,assert property (out1 == 4);,1
generate.v,197,assert property (out2 == 2);,1
generate.v,198,assert property (out3 == 7);,1
generate.v,199,assert property (cond.sub_out1 == 4);,1
generate.v,200,assert property (cond.sub_out2 == 2);,1
generate.v,201,assert property (cond.sub_out3 == 7);,1
asserts.v,8,assert(state < 3);,1
asserts.v,13,assert property (y !== 1'b1);,1
initval.v,20,"assert property (foo == {last_bar[3:2], bar[1:0]});",1
asserts_seq.v,16,assert(a_old != b);,1
asserts_seq.v,33,assert(a_old != b);,1
asserts_seq.v,50,assert(a_old != b);,1
asserts_seq.v,67,"assert(a_old == b); // <-- this will fail end endmodule module test_005(clk, a, a_old, b);",5
asserts_seq.v,84,assert(a_old != b);,1
cells_sim.v,558,assert(A0m==A1m);,1
cells_sim.v,559,assert(B0m==B1m);,1
cells_sim.v,560,assert(C0m==C1m);,1
cells_sim.v,561,assert(D0m==D1m);,1
example.v,9,assert property (counter != 15);,1
demo.v,8,assume(counter != 0);,1
demo7.v,18,assert property (1000 < memory[addr] && memory[addr] < 2000);,1
demo1.v,11,assert property (cnt != 15);,1
demo9.v,9,assume(trigger == 1'b1);,1
demo9.v,10,cover(1);,1
demo8.v,10,assume(prime > 1);,1
demo5.v,16,assert(hash == 32'h A18FAC0A);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
demo1.v,23,assert property($initstate || !reset_ || cntr != 3);,1
demo1.v,23,assert property($initstate || !reset_ || cntr != 3);,1
picorv32.v,2106,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2109,restrict property (resetn != $initstate);,1
picorv32.v,2119,assert (mem_wstrb == 0);,1
picorv32.v,2131,assert (ok);,1
picorv32.v,2149,assert(mem_valid);,1
picorv32.v,2150,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2151,assert(mem_wstrb == 0);,1
picorv32.v,2154,assert(mem_valid);,1
picorv32.v,2155,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2156,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2157,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2160,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
counter.v,56,assert (cnt == 10'sd17);,1
counter.v,65,assert (cnt <= 10'sd269);,1
counter.v,66,assert (cnt >= -10'sd263);,1
counter.v,67,assert (cnt != -10'sd47);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
picorv32a.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2040,restrict property (resetn != $initstate);,1
picorv32a.v,2050,assert (mem_wstrb == 0);,1
picorv32a.v,2062,assert (ok);,1
picorv32a.v,2080,assert(mem_valid);,1
picorv32a.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2082,assert(mem_wstrb == 0);,1
picorv32a.v,2085,assert(mem_valid);,1
picorv32a.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2091,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
cacheline_formal.v,113,assume(choice == 2'b00 || choice == 2'b01);,1
cacheline_formal.v,124,assume(|attacker_hitmap);,1
cacheline_formal.v,131,assume(hitmap1 == attacker_hitmap && hitmap2 == attacker_hitmap);,1
cacheline_formal.v,152,assume(addr1 == addr2);,1
cacheline_formal.v,173,assert(!check || eq_hit);,1
axi2axilite.v,927,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,932,assert(m_axi_awvalid);,1
axi2axilite.v,934,assert(!skids_awready);,1
axi2axilite.v,936,assert(!skids_awready);,1
axi2axilite.v,938,assert(!skids_awready);,1
axi2axilite.v,943,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,963,assert(rid == S_AXI_RID);,1
axi2axilite.v,967,assert(rid == S_AXI_RID);,1
axi2axilite.v,971,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,976,assert(m_axi_arvalid);,1
axi2axilite.v,977,assert(!skids_arready);,1
axi2axilite.v,995,assume(!skids_awvalid);,1
axi2axilite.v,996,assume(!skids_wvalid);,1
axi2axilite.v,997,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,998,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,999,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1000,assert(!skidm_bvalid);,1
axi2axilite.v,1001,assert(!S_AXI_BVALID);,1
axi2axilite.v,1010,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1011,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1012,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1044,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1046,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1070,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1072,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
aximwr2wbsp.v,664,assume(!i_wb_err);,1
aximwr2wbsp.v,665,assert(!err_state);,1
aximwr2wbsp.v,669,assert(o_wb_cyc);,1
aximwr2wbsp.v,671,assert(!S_AXI_BRESP[1]);,1
aximwr2wbsp.v,672,assert(!S_AXI_BRESP[0]);,1
axi3reorder.v,479,assert(sr_write == 0);,1
axi3reorder.v,494,cover(cvr_sreg_full && sr_valid == 0);,1
axi3reorder.v,631,assume(!S_AXI_ARESETN);,1
axi3reorder.v,636,assume(!S_AXI3_AWVALID);,1
axi3reorder.v,637,assume(!S_AXI3_WVALID);,1
axi3reorder.v,639,assume(!M_AXI_WVALID);,1
axi3reorder.v,643,assume(S_AXI3_AWVALID);,1
axi3reorder.v,649,assume(S_AXI3_WVALID);,1
axi3reorder.v,658,assert(M_AXI_WVALID);,1
axi3reorder.v,695,assert(!f_ckfifo_empty);,1
axi3reorder.v,696,assert(f_ckfifo_id == M_AXI_WID);,1
axi3reorder.v,697,assert(f_ckfifo_data == M_AXI_WDATA);,1
axi3reorder.v,698,assert(f_ckfifo_strb == M_AXI_WSTRB);,1
axi3reorder.v,699,assert(f_ckfifo_last == M_AXI_WLAST);,1
axi3reorder.v,716,assert(f_awid_count > 0);,1
axi3reorder.v,722,assume(S_AXI3_AWID == 0);,1
axi3reorder.v,727,assume(S_AXI3_WID == 0);,1
axi3reorder.v,728,assume(S_AXI3_WDATA == 0);,1
axi3reorder.v,729,assume(S_AXI3_WSTRB == 0);,1
axi3reorder.v,730,assume(S_AXI3_WLAST == 0);,1
axi3reorder.v,736,assert(M_AXI_WID == 0);,1
axi3reorder.v,737,assert(M_AXI_WDATA == 0);,1
axi3reorder.v,738,assert(M_AXI_WSTRB == 0);,1
axi3reorder.v,739,assert(M_AXI_WLAST == 0);,1
aximrd2wbsp.v,490,assume(w_reset);,1
aximrd2wbsp.v,505,assert(!o_wb_stb && !o_wb_cyc);,1
aximrd2wbsp.v,530,assert(fwb_outstanding == 0);,1
aximrd2wbsp.v,596,assert(resp_fifo_fill == 1);,1
aximrd2wbsp.v,603,assert(o_wb_stb || lastid_fifo_full);,1
aximrd2wbsp.v,607,assert(stblen == 0);,1
aximrd2wbsp.v,612,assert(!o_wb_stb);,1
aximrd2wbsp.v,613,assert(!lastid_fifo_wr);,1
aximrd2wbsp.v,620,assert(!last_ack);,1
aximrd2wbsp.v,626,assert(!last_ack);,1
aximrd2wbsp.v,628,assert(midissue || last_ack);,1
aximrd2wbsp.v,630,assert(last_ack == last_stb);,1
aximrd2wbsp.v,633,assert(o_wb_cyc);,1
aximrd2wbsp.v,647,assert(!o_wb_cyc);,1
aximrd2wbsp.v,730,cover(cvr_reads == 4);,1
aximrd2wbsp.v,733,cover(cvr_read_bursts == 4);,1
aximrd2wbsp.v,736,cover(cvr_rdid_bursts == 4);,1
axissafety.v,435,assume(!S_AXI_ARESETN);,1
axissafety.v,441,assert(!M_AXIS_TVALID);,1
axissafety.v,444,assert(M_AXIS_TVALID);,1
axissafety.v,466,assert(fm_packet_counter < OPT_PACKET_LENGTH);,1
axissafety.v,469,assert(m_packet_count == fm_packet_counter);,1
axissafety.v,474,assert(s_packet_counter == 0);,1
axissafety.v,475,assert(m_packet_count == OPT_PACKET_LENGTH-2);,1
axissafety.v,479,assert(m_packet_count == OPT_PACKET_LENGTH-1);,1
axissafety.v,489,assert(s_packet_counter < OPT_PACKET_LENGTH);,1
axissafety.v,506,assert(fm_stall_count < OPT_MAX_STALL);,1
axissafety.v,516,assume(!S_AXIS_TVALID);,1
axissafety.v,519,assume(S_AXIS_TVALID);,1
axissafety.v,546,assert(s_packet_counter == fs_packet_counter);,1
axissafety.v,548,assert(s_packet_counter == 0);,1
axissafety.v,583,assert(stall_count == f_stall_count);,1
axissafety.v,586,assume(f_stall_count <= OPT_MAX_STALL);,1
axissafety.v,592,assert(!o_fault);,1
demofull.v,996,assume(!S_AXI_ARESETN);,1
demofull.v,1084,assert(S_AXI_BVALID);,1
demofull.v,1091,assert(!S_AXI_WREADY);,1
demofull.v,1115,assert(S_AXI_ARREADY);,1
demofull.v,1118,assert(axi_rlen <= 256);,1
demofull.v,1133,assert(!rskd_lock);,1
demofull.v,1136,assert(S_AXI_BRESP == 2'b00);,1
demofull.v,1142,assert(S_AXI_RID == 0);,1
demofull.v,1143,assert(S_AXI_RDATA == 0);,1
demofull.v,1144,assert(S_AXI_RRESP == 2'b00);,1
demofull.v,1149,assert(o_waddr == 0);,1
demofull.v,1150,assert(o_wdata == 0);,1
demofull.v,1151,assert(o_wstrb == 0);,1
demofull.v,1194,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
axlite2wbsp.v,436,assume(!i_axi_reset_n);,1
axlite2wbsp.v,495,assert(f_axi_rd_outstanding == f_rd_fifo_axi_used);,1
axlite2wbsp.v,503,assert(f_axi_awr_outstanding == 0);,1
axlite2wbsp.v,504,assert(f_axi_wr_outstanding == 0);,1
axlite2wbsp.v,510,assert(f_axi_rd_outstanding == 0);,1
axlite2wbsp.v,519,assume(i_axi_awvalid == 0);,1
axlite2wbsp.v,520,assume(i_axi_wvalid == 0);,1
axlite2wbsp.v,522,assert(o_axi_bvalid == 0);,1
axlite2wbsp.v,528,assume(i_axi_arvalid == 0);,1
axlite2wbsp.v,529,assert(o_axi_rvalid == 0);,1
demoaxi.v,450,assert(f_axi_rd_outstanding == 0);,1
demoaxi.v,454,assert(f_axi_rd_outstanding == 1);,1
demoaxi.v,628,cover(fw_wrdemo_pipe[0]);,1
demoaxi.v,629,cover(fw_wrdemo_pipe[1]);,1
demoaxi.v,630,cover(fw_wrdemo_pipe[2]);,1
demoaxi.v,631,cover(fw_wrdemo_pipe[3]);,1
demoaxi.v,632,cover(fw_wrdemo_pipe[4]);,1
demoaxi.v,633,cover(fw_wrdemo_pipe[5]);,1
demoaxi.v,634,cover(fw_wrdemo_pipe[6]);,1
demoaxi.v,635,cover(fw_wrdemo_pipe[7]); // cover(fw_wrdemo_pipe[8]);,2
demoaxi.v,637,cover(fw_wrdemo_pipe[9]);,1
demoaxi.v,638,cover(fw_wrdemo_pipe[10]);,1
demoaxi.v,639,cover(fw_wrdemo_pipe[11]);,1
demoaxi.v,640,cover(fw_wrdemo_pipe[12]);,1
demoaxi.v,641,cover(fw_wrdemo_pipe[13]);,1
demoaxi.v,642,cover(fw_wrdemo_pipe[14]);,1
demoaxi.v,643,cover(fw_wrdemo_pipe[15]);,1
demoaxi.v,644,cover(fw_wrdemo_pipe[16]);,1
demoaxi.v,645,cover(fw_wrdemo_pipe[17]);,1
demoaxi.v,646,cover(fw_wrdemo_pipe[18]);,1
demoaxi.v,647,cover(fw_wrdemo_pipe[19]);,1
demoaxi.v,648,cover(fw_wrdemo_pipe[20]);,1
demoaxi.v,649,cover(fw_wrdemo_pipe[21]);,1
demoaxi.v,650,cover(fw_wrdemo_pipe[22]);,1
demoaxi.v,701,cover(fw_rddemo_pipe[0]);,1
demoaxi.v,702,cover(fw_rddemo_pipe[1]);,1
demoaxi.v,703,cover(fw_rddemo_pipe[2]);,1
demoaxi.v,704,cover(fw_rddemo_pipe[3]);,1
demoaxi.v,705,cover(fw_rddemo_pipe[4]);,1
demoaxi.v,706,cover(fw_rddemo_pipe[5]);,1
demoaxi.v,707,cover(fw_rddemo_pipe[6]);,1
demoaxi.v,708,cover(fw_rddemo_pipe[7]);,1
demoaxi.v,709,cover(fw_rddemo_pipe[8]);,1
demoaxi.v,710,cover(fw_rddemo_pipe[9]);,1
demoaxi.v,711,cover(fw_rddemo_pipe[10]);,1
wbxclk.v,154,assert(bus_abort);,1
wbxclk.v,195,assert(xck_reset);,1
wbxclk.v,360,assume(fwb_step >= 2);,1
wbxclk.v,361,assume(fxck_step >= 2);,1
wbxclk.v,363,assume(fwb_step <= 4'b1000);,1
wbxclk.v,364,assume(fxck_step <= 4'b1000);,1
wbxclk.v,380,assume(i_wb_clk == fwb_count[3]);,1
wbxclk.v,381,assume(i_xclk_clk == fxck_count[3]);,1
wbxclk.v,438,assume(past_wb_reset== i_reset);,1
wbxclk.v,439,assume(past_wb_cyc == i_wb_cyc);,1
wbxclk.v,440,assume(past_wb_stb == i_wb_stb);,1
wbxclk.v,441,assume(past_wb_we == i_wb_we);,1
wbxclk.v,442,assume(past_wb_err == o_wb_err);,1
wbxclk.v,445,assume(!i_wb_cyc);,1
wbxclk.v,447,assume(past_wb_we == i_wb_we);,1
wbxclk.v,462,assume(past_xclk_stall == i_xclk_stall);,1
wbxclk.v,463,assume(past_xclk_data == i_xclk_data);,1
wbxclk.v,464,assume(past_xclk_ack == i_xclk_ack);,1
wbxclk.v,465,assume(past_xclk_err == i_xclk_err);,1
wbxclk.v,513,assert(ackfifo_fill == 0 || xclk_err_state);,1
wbxclk.v,524,assert(wb_active);,1
wbxclk.v,534,assert(reqfifo_fill == fwb_outstanding + 1);,1
wbxclk.v,538,assert(o_xclk_cyc && !o_xclk_stb);,1
wbxclk.v,539,assert(ackfifo_fill == 0);,1
wbxclk.v,540,assert(fxck_outstanding == 0);,1
wbxclk.v,543,assert(wb_active);,1
wbxclk.v,545,assert(!wb_active);,1
wbxclk.v,550,assert(fxck_outstanding == 0);,1
wbxclk.v,551,assert(xck_reset || wb_active || !i_wb_cyc);,1
wbxclk.v,552,assert(!o_xclk_stb);,1
wbxclk.v,554,assert(no_returns || err_stb);,1
wbxclk.v,556,assert(o_wb_err);,1
wbxclk.v,562,assert(reqfifo_fill <= fwb_outstanding + 1);,1
wbxclk.v,563,assert(ackfifo_fill <= fwb_outstanding);,1
wbxclk.v,564,assert(fxck_outstanding <= fwb_outstanding);,1
wbxclk.v,566,assert(wb_active || f_drop_cyc_request);,1
wbxclk.v,574,assert(reqfifo_fill== fwb_outstanding + 1);,1
wbxclk.v,575,assert(ackfifo_fill == 0);,1
wbxclk.v,576,assert(fxck_outstanding == 0);,1
wbxclk.v,577,assert(!o_xclk_stb);,1
wbxclk.v,578,assert(o_xclk_cyc);,1
wbxclk.v,587,assert(o_xclk_cyc || xclk_err_state);,1
wbxclk.v,588,assert(!f_drop_cyc_request);,1
wbxclk.v,589,assert(!xck_reset || bus_abort);,1
wbxclk.v,599,assert(o_xclk_cyc || xck_reset || xclk_err_state);,1
wbxclk.v,608,assert(!i_wb_cyc || fwb_outstanding == reqfifo_fill);,1
wbxclk.v,612,assert(!wb_active);,1
wbxclk.v,618,assert(!ackfifo_full);,1
wbxclk.v,624,assert(i_wb_we == o_xclk_we);,1
wbxclk.v,628,assert(acks_outstanding == fwb_outstanding);,1
wbxclk.v,632,assert(!o_xclk_cyc);,1
wbxclk.v,640,assert(!req_stb || xck_reset);,1
wbxclk.v,641,assert(reqfifo_fill <= 1);,1
wbxclk.v,643,assert(!o_xclk_cyc);,1
wbxclk.v,666,assert(acks_outstanding >= ackfifo_fill);,1
wbxclk.v,667,assert(acks_outstanding >= fxck_outstanding);,1
wbxclk.v,674,assert(acks_outstanding +1 == reqfifo_fill);,1
wbxclk.v,676,assert(!wb_active || o_xclk_cyc || xclk_err_state);,1
wbxclk.v,679,assert(acks_outstanding +1 == reqfifo_fill);,1
wbxclk.v,680,assert(ackfifo_fill == 0);,1
wbxclk.v,681,assert(fxck_outstanding == 0);,1
wbxclk.v,682,assert(!o_xclk_stb);,1
wbxclk.v,683,assert(o_xclk_cyc);,1
wbxclk.v,689,assert(o_xclk_cyc);,1
wbxclk.v,693,assert(!xck_reset);,1
wbxclk.v,696,assert(!xclk_err_state || acks_outstanding != 0 || xck_reset);,1
wbxclk.v,703,assert(f_drop_cyc_request);,1
wbxclk.v,723,assert(o_xclk_cyc);,1
wbxclk.v,728,assert(!ign_ackfifo_stall);,1
wbxclk.v,816,cover(cvr_replies > 1); // 33 cover(cvr_replies > 3); // 38 cover(cvr_replies > 9);,3
wbxclk.v,820,cover(cvr_abort); // 31 cover(cvr_post_abort > 1 && cvr_replies > 1); // 63 cover(cvr_post_abort > 1 && cvr_replies > 2); // 63 cover(cvr_post_abort > 1 && cvr_replies > 3); // 65 cover(cvr_post_abort > 2 && cvr_replies > 3); // 65 cover(cvr_post_abort > 3 && cvr_replies > 3); // 68 cover(cvr_post_abort > 4 && cvr_replies > 3); // 70 cover(cvr_post_abort > 3 && cvr_replies > 6); // 72 end always @(posedge gbl_clk) if (!i_reset) cover(cvr_replies > 9 && !i_wb_clk && acks_outstanding == 0 && fwb_nreqs == fwb_nacks && fwb_nreqs == cvr_replies && !bus_abort && fwb_count != fxck_count);,15
axilsafety.v,979,assert(reset_counter < OPT_MIN_RESET);,1
axilsafety.v,1061,assume(!S_AXI_ARESETN);,1
axilsafety.v,1062,assert(!M_AXI_ARESETN);,1
axilsafety.v,1120,assume(!S_AXI_AWVALID);,1
axilsafety.v,1121,assume(!S_AXI_WVALID);,1
axilsafety.v,1122,assert(aw_count == 0);,1
axilsafety.v,1123,assert(w_count == 0);,1
axilsafety.v,1124,assert(!M_AXI_AWVALID);,1
axilsafety.v,1125,assert(!M_AXI_WVALID);,1
axilsafety.v,1133,assume(!S_AXI_ARVALID);,1
axilsafety.v,1134,assert(r_count == 0);,1
axilsafety.v,1135,assert(!S_AXI_RVALID);,1
axilsafety.v,1136,assert(!M_AXI_ARVALID);,1
axilsafety.v,1176,assert(aw_count == faxils_awr_outstanding);,1
axilsafety.v,1177,assert(w_count == faxils_wr_outstanding);,1
axilsafety.v,1178,assert(r_count == faxils_rd_outstanding);,1
axilsafety.v,1250,assert(!o_write_fault);,1
axilsafety.v,1252,assert(!o_read_fault);,1
axilsafety.v,1264,assert(!aw_stall_limit);,1
axilsafety.v,1265,assert(!w_stall_limit);,1
axilsafety.v,1266,assert(!w_ack_limit);,1
axilsafety.v,1268,assert(!r_stall_limit);,1
axilsafety.v,1269,assert(!r_ack_limit);,1
axilsafety.v,1273,assert(downstream_aw_count == faxilm_awr_outstanding);,1
axilsafety.v,1274,assert(downstream_w_count == faxilm_wr_outstanding);,1
axilsafety.v,1275,assert(downstream_r_count == faxilm_rd_outstanding);,1
axilsafety.v,1297,assert(f_axi_awstall == aw_stall_counter);,1
axilsafety.v,1301,assert(f_axi_wstall == w_stall_counter);,1
axilsafety.v,1305,assert(f_axi_arstall == r_stall_counter);,1
axilsafety.v,1356,cover(faulted && M_AXI_ARESETN && S_AXI_BVALID);,1
axilsafety.v,1359,cover(faulted && M_AXI_ARESETN && S_AXI_RVALID);,1
axilsafety.v,1372,cover(cvr_writes > 5);,1
axilsafety.v,1384,cover(cvr_reads > 5);,1
axilsafety.v,1408,assume(S_AXI_AWADDR != fc_never_write_addr);,1
axilsafety.v,1412,assert(M_AXI_AWADDR != fc_never_write_addr);,1
axilsafety.v,1419,"assume({ S_AXI_WDATA, S_AXI_WSTRB } != fc_never_write_data);",1
axilsafety.v,1423,"assert({ M_AXI_WDATA, M_AXI_WSTRB } != fc_never_write_data);",1
axilsafety.v,1430,assume(S_AXI_ARADDR != fc_never_read_addr);,1
axilsafety.v,1434,assert(M_AXI_ARADDR != fc_never_read_addr);,1
axilsafety.v,1441,assume(M_AXI_RDATA != fc_never_read_data);,1
axilsafety.v,1445,assert(S_AXI_RDATA != fc_never_read_data);,1
aximm2s.v,1404,assert(fifo_fill == 0 || reset_fifo);,1
aximm2s.v,1415,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
aximm2s.v,1424,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1425,assert(fv_start_addr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1426,assert(axi_araddr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1427,assert(axi_raddr[ADDRLSB-1:0] == 0);,1
aximm2s.v,1451,assert(f_next_start == f_last_addr);,1
aximm2s.v,1518,assert(fv_ar_requests_remaining == ar_requests_remaining);,1
aximm2s.v,1528,assert(fv_ar_requests_remaining <= cmd_length_aligned_w);,1
aximm2s.v,1559,assert(axi_raddr[ADDRLSB-1:0] == cmd_addr[ADDRLSB-1:0]);,1
aximm2s.v,1560,assert(axi_abort_pending || fv_axi_raddr == axi_raddr);,1
aximm2s.v,1563,assert(fv_axi_raddr == fv_start_addr);,1
aximm2s.v,1564,assert(axi_raddr == fv_start_addr);,1
aximm2s.v,1570,assert(fv_axi_raddr <= f_last_addr);,1
aximm2s.v,1571,assert(fv_axi_raddr >= fv_start_addr);,1
aximm2s.v,1584,assert(axi_raddr <= fv_axi_raddr);,1
aximm2s.v,1585,assert(fv_start_addr <= axi_raddr);,1
aximm2s.v,1601,assert(!M_AXI_ARVALID);,1
aximm2s.v,1602,assert(!M_AXI_RVALID);,1
aximm2s.v,1617,assert(!r_busy);,1
aximm2s.v,1630,assert(!r_busy);,1
aximm2s.v,1673,assert(M_AXI_ARVALID);,1
aximm2s.v,1678,assert(r_max_burst > 0);,1
aximm2s.v,1684,assert(initial_burstlen > 0);,1
aximm2s.v,1696,assert(cmd_addr == axi_raddr);,1
aximm2s.v,1698,assert(cmd_addr == fv_start_addr);,1
aximm2s.v,1738,assert(M_AXI_ARADDR == fv_start_addr);,1
aximm2s.v,1748,assert(rd_reads_remaining <= cmd_length_w);,1
aximm2s.v,1752,assert(ar_bursts_outstanding <= rd_reads_remaining);,1
aximm2s.v,1771,assert(!M_AXI_ARVALID);,1
aximm2s.v,1813,assert(!o_int);,1
aximm2s.v,1831,assume(M_AXI_RDATA != f_restricted);,1
aximm2s.v,1836,assert(M_AXIS_TDATA != f_restricted);,1
aximm2s.v,1881,cover( r_err && cvr_aborted);,1
aximm2s.v,1882,cover( r_err && cvr_buserr);,1
aximm2s.v,1883,cover(!r_err);,1
aximm2s.v,1886,cover(cmd_length_w > 5);,1
aximm2s.v,1887,cover(cmd_length_w > 8);,1
aximm2s.v,1891,cover(&cvr_continued);,1
aximm2s.v,1899,cover(!r_err && fifo_fill > 8 && !r_busy);,1
aximm2s.v,1902,cover(r_busy);,1
aximm2s.v,1905,cover(start_burst);,1
aximm2s.v,1908,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
aximm2s.v,1911,cover(M_AXI_RVALID);,1
aximm2s.v,1914,cover(M_AXI_RVALID & M_AXI_RLAST);,1
aximm2s.v,1918,cover(!ar_none_remaining);,1
aximm2s.v,1921,cover(1);,1
aximm2s.v,1925,cover(!phantom_start);,1
aximm2s.v,1926,cover(phantom_start);,1
aximm2s.v,1944,cover(M_AXIS_TVALID && M_AXIS_TREADY && M_AXIS_TLAST);,1
aximm2s.v,1947,cover(o_int && cvr_lastcount > 2);,1
aximm2s.v,1959,cover(r_err);,1
aximm2s.v,1960,cover(!r_err);,1
aximm2s.v,1961,cover(axi_abort_pending);,1
aximm2s.v,1962,cover(!axi_abort_pending);,1
aximm2s.v,1963,cover(cvr_aborted);,1
aximm2s.v,1964,cover(!cvr_aborted);,1
aximm2s.v,1965,cover(cvr_buserr);,1
aximm2s.v,1966,cover(!cvr_buserr);,1
aximm2s.v,1967,cover(!cvr_buserr && !axi_abort_pending);,1
axivcamera.v,1224,assume(!lost_sync && cfg_active);,1
axivfifo.v,1083,assert(!phantom_write);,1
axivfifo.v,1084,assert(!phantom_read);,1
axivfifo.v,1102,assert(!ofifo_full);,1
axivfifo.v,1117,assert(!M_AXI_WVALID);,1
axivfifo.v,1121,assert(read_from_fifo);,1
axivfifo.v,1123,assert(read_from_fifo);,1
axivfifo.v,1147,assert(o_err);,1
axivfifo.v,1149,assert(o_err);,1
axivfifo.v,1163,assert(!M_AXI_AWVALID);,1
axivfifo.v,1164,assert(!M_AXI_WVALID);,1
axivfifo.v,1165,assert(!M_AXI_ARVALID);,1
axivfifo.v,1225,assert(M_AXI_ARADDR != M_AXI_AWADDR);,1
axivfifo.v,1251,assert(mem_space_available == f_space_available);,1
axivfifo.v,1255,assert(M_AXI_ARADDR == M_AXI_AWADDR);,1
axivfifo.v,1256,assert(!M_AXI_AWVALID || phantom_write);,1
axivfifo.v,1280,assert(mem_data_available == f_data_available);,1
axivfifo.v,1283,assert(vfifo_fill[C_AXI_ADDR_WIDTH]);,1
axivfifo.v,1284,assert(ofifo_empty);,1
axivfifo.v,1313,assert(!M_AXI_AWVALID);,1
axivfifo.v,1314,assert(!M_AXI_WVALID);,1
axivfifo.v,1315,assert(!M_AXI_ARVALID);,1
axivfifo.v,1318,assert(mem_data_available == 0);,1
axivfifo.v,1320,assert(!phantom_read);,1
axivfifo.v,1321,assert(!phantom_write);,1
axivfifo.v,1323,assert(vfifo_fill == 0);,1
axivfifo.v,1356,assume(M_AXI_AWREADY || writes_pending > 0);,1
axivfifo.v,1357,assume(M_AXIS_TREADY);,1
axivfifo.v,1358,assume(M_AXI_WREADY);,1
axivfifo.v,1359,assume(M_AXI_ARREADY);,1
axivfifo.v,1382,cover(cvr_read_bursts > 1 && cvr_write_bursts > 1);,1
axisrandom.v,108,assume(!S_AXI_ARESETN);,1
axisrandom.v,122,assert(!M_AXIS_TVALID);,1
axisrandom.v,124,assert(M_AXIS_TVALID);,1
sfifothresh.v,93,assert(!o_int);,1
wbsafety.v,424,assume(i_reset);,1
wbsafety.v,453,assert(expected_returns == fwbs_outstanding);,1
wbsafety.v,489,assert(!o_fault);,1
wbsafety.v,502,assert(!timeout);,1
wbsafety.v,506,assert(!o_wb_cyc);,1
wbsafety.v,513,assert(sacks == fwbm_nacks);,1
wbsafety.v,517,assert(o_wb_cyc || o_wb_err);,1
wbsafety.v,524,assert(fwbs_nreqs == mreqs);,1
wbsafety.v,528,assert(i_wb_we == o_wb_we);,1
wbsafety.v,532,assert(o_wb_cyc || o_wb_err);,1
wbsafety.v,543,cover(o_fault);,1
wbsafety.v,547,cover(o_fault);,1
wbsafety.v,551,cover(o_fault);,1
wbsafety.v,574,cover(faulted && !o_reset && o_wb_ack);,1
wbsafety.v,581,cover(!i_reset && fwbs_nacks > 4);,1
axiempty.v,273,assume(!S_AXI_ARESETN);,1
axiempty.v,380,assert(S_AXI_ARREADY);,1
axiempty.v,424,cover(S_AXI_ARREADY && f_rd_cvr_valid /* && ... */);,1
wbp2classic.v,155,assume(i_reset);,1
wbp2classic.v,195,assume(i_sstb);,1
axisafety.v,1505,assert(f_axi_awr_nbursts <= 1);,1
axisafety.v,1510,assert(!S_AXI_AWREADY);,1
axisafety.v,1512,assert(f_axi_wr_pending == 0);,1
axisafety.v,1521,assert(!r_wvalid || !r_wlast);,1
axisafety.v,1523,assert(s_wbursts == 0);,1
axisafety.v,1524,assert(!S_AXI_WREADY);,1
axisafety.v,1526,assert(1 || S_AXI_AWREADY || !M_AXI_ARESETN || !S_AXI_ARESETN);,1
axisafety.v,1528,assert(S_AXI_AWREADY);,1
axisafety.v,1539,assert(S_AXI_AWREADY == !OPT_SELF_RESET);,1
axisafety.v,1541,assert(!S_AXI_AWREADY);,1
axisafety.v,1543,assert(!S_AXI_AWREADY);,1
axisafety.v,1545,assert(S_AXI_AWREADY);,1
axisafety.v,1547,assert(S_AXI_AWREADY || OPT_SELF_RESET);,1
axisafety.v,1551,assert(s_wbursts == 0);,1
axisafety.v,1553,assert(s_wbursts == f_axi_awr_nbursts);,1
axisafety.v,1555,assert(s_wbursts == 0);,1
axisafety.v,1559,assert(!M_AXI_AWVALID);,1
axisafety.v,1564,assert(o_write_fault || !M_AXI_AWVALID);,1
axisafety.v,1565,assert(!S_AXI_BVALID);,1
axisafety.v,1566,assert(s_wbursts == 0);,1
axisafety.v,1568,assert(f_axi_wr_pending > 0);,1
axisafety.v,1572,assert(waddr_valid);,1
axisafety.v,1576,assert(M_AXI_WVALID && r_wvalid);,1
axisafety.v,1581,assert(waddr_valid == !S_AXI_AWREADY);,1
axisafety.v,1589,assert(M_AXI_WVALID);,1
axisafety.v,1594,assert(M_AXI_AWVALID || !M_AXI_WVALID);,1
axisafety.v,1595,assert(M_AXI_AWVALID || f_axi_wr_pending == 0);,1
axisafety.v,1606,assert(m_wpending == 0);,1
axisafety.v,1611,assert(m_wpending <= 9'h100);,1
axisafety.v,1615,assert(!M_AXI_AWVALID);,1
axisafety.v,1622,assert(!M_AXI_AWVALID);,1
axisafety.v,1623,assert(!M_AXI_WVALID);,1
axisafety.v,1633,assert(!M_AXI_AWVALID);,1
axisafety.v,1634,assert(!M_AXI_WVALID);,1
axisafety.v,1638,assert(f_axi_awr_nbursts == 1);,1
axisafety.v,1641,assert(m_wpending == 0);,1
axisafety.v,1644,assert(!M_AXI_AWVALID);,1
axisafety.v,1648,assert(!r_awvalid);,1
axisafety.v,1665,assert(o_write_fault || write_timeout);,1
axisafety.v,1669,assert(waddr_valid == !S_AXI_AWREADY);,1
axisafety.v,1671,assert(!S_AXI_AWREADY);,1
axisafety.v,1675,assert(waddr_valid == !S_AXI_AWREADY);,1
axisafety.v,1679,assert(!S_AXI_WREADY);,1
axisafety.v,1692,assert(f_axi_rd_nbursts <= 1);,1
axisafety.v,1697,assert(rfifo_id == f_axi_rd_checkid);,1
axisafety.v,1699,assert(rfifo_id != f_axi_rd_checkid);,1
axisafety.v,1703,assert(raddr_valid);,1
axisafety.v,1707,assert(!S_AXI_ARREADY);,1
axisafety.v,1711,assert(raddr_valid == !S_AXI_ARREADY);,1
axisafety.v,1723,assert(!raddr_valid || OPT_SELF_RESET);,1
axisafety.v,1727,assert(!M_AXI_ARVALID);,1
axisafety.v,1731,assert(rfifo_counter == f_axi_rd_outstanding);,1
axisafety.v,1746,assert(skid_arvalid);,1
axisafety.v,1750,assert(read_timeout);,1
axisafety.v,1756,assume(!M_AXI_BVALID);,1
axisafety.v,1757,assume(!M_AXI_RVALID);,1
axisafety.v,1762,assert(raddr_valid == !S_AXI_ARREADY);,1
axisafety.v,1766,assert(raddr_valid);,1
axisafety.v,1772,assert(o_read_fault || o_write_fault /* ... */ );,1
axisafety.v,1886,assert(!o_write_fault || !M_AXI_ARESETN);,1
axisafety.v,1888,assert(!o_write_fault);,1
axisafety.v,1892,assert(!o_read_fault || !M_AXI_ARESETN);,1
axisafety.v,1894,assert(!o_read_fault);,1
axisafety.v,1898,assert(!read_timeout || !M_AXI_ARESETN);,1
axisafety.v,1900,assert(!read_timeout);,1
axisafety.v,1904,assert(!write_timeout || !M_AXI_ARESETN);,1
axisafety.v,1906,assert(!write_timeout);,1
axisafety.v,1910,assert(!M_AXI_AWVALID);,1
axisafety.v,1935,assert(!M_AXI_ARVALID);,1
axisafety.v,1939,assert(m_wpending == fm_axi_wr_pending);,1
axisafety.v,1944,assert(fm_axi_awr_nbursts== f_axi_awr_nbursts);,1
axisafety.v,1945,assert(fm_axi_awr_nbursts == 1);,1
axisafety.v,1978,assume(S_AXI_AWADDR != fc_never_write_addr);,1
axisafety.v,1982,assert(M_AXI_AWADDR != fc_never_write_addr);,1
axisafety.v,1989,"assume({ S_AXI_WDATA, S_AXI_WSTRB } != fc_never_write_data);",1
axisafety.v,1993,"assert({ M_AXI_WDATA, M_AXI_WSTRB } != fc_never_write_data);",1
axisafety.v,2000,assume(S_AXI_ARADDR != fc_never_read_addr);,1
axisafety.v,2004,assume(r_araddr != fc_never_read_addr);,1
axisafety.v,2008,assert(M_AXI_ARADDR != fc_never_read_addr);,1
axisafety.v,2015,assume(M_AXI_RDATA != fc_never_read_data);,1
axisafety.v,2019,assert(S_AXI_RDATA != fc_never_read_data);,1
axisafety.v,2058,cover(S_AXI_AWVALID && S_AXI_AWREADY);,1
axisafety.v,2061,cover(S_AXI_AWVALID && S_AXI_AWREADY && S_AXI_AWLEN == 3);,1
axilempty.v,125,assert(awskd_unused == 0);,1
axilempty.v,139,assert(wskd_unused == 0);,1
axilempty.v,208,assert(arskd_unused == 0);,1
axilempty.v,341,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
axilempty.v,351,assert(S_AXI_RDATA == 0);,1
axilempty.v,353,assert(S_AXI_RRESP == 2'b11);,1
axilempty.v,355,assert(S_AXI_BRESP == 2'b11);,1
axilite2axi.v,299,assert(faxi_awr_nbursts == faxil_awr_outstanding);,1
axilite2axi.v,319,assert(faxil_wr_outstanding == 0);,1
axilite2axi.v,354,assume(S_AXI_AWVALID || !S_AXI_WVALID);,1
axilite2axi.v,356,assume(!S_AXI_AWVALID);,1
axilite2axi.v,366,assume(!S_AXI_ARVALID);,1
axilite2axi.v,370,assume(!S_AXI_AWVALID);,1
wbxbar.v,1114,assume(i_reset);,1
wbxbar.v,1132,assert(grant[N][M-1:0] == 0);,1
wbxbar.v,1138,assert(o_merr[N] || m_stall[N]);,1
wbxbar.v,1151,assert(checkgrant == mgrant[N]);,1
wbxbar.v,1165,assert(mgrant[N]);,1
wbxbar.v,1166,assert(mindex[N] == M);,1
wbxbar.v,1167,assert(sgrant[M]);,1
wbxbar.v,1168,assert(sindex[M] == N);,1
wbxbar.v,1181,assert(grant[sindex[M]][M]);,1
wbxbar.v,1192,assert(sgrant[M] == f_sgrant);,1
wbxbar.v,1217,assume(sgrant == 0);,1
wbxbar.v,1224,assume(o_scyc[M] == 0);,1
wbxbar.v,1225,assume(o_sstb[M] == 0);,1
wbxbar.v,1226,assume(sgrant[M] == 0);,1
wbxbar.v,1235,assume(grant[N] == 0);,1
wbxbar.v,1236,assume(mgrant[N] == 0);,1
wbxbar.v,1269,assert(f_moutstanding[N] <= 1);,1
wbxbar.v,1273,assert(m_stall[N] || o_merr[N]);,1
wbxbar.v,1310,assert(m_stall[N]);,1
wbxbar.v,1348,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1350,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1352,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1354,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1356,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1358,assert(i_mwe[N] == o_swe[iM]);,1
wbxbar.v,1366,assert(i_mwe[N] == m_we[N]);,1
wbxbar.v,1376,assert(!o_scyc[M]);,1
wbxbar.v,1421,assume(special_master == 0);,1
wbxbar.v,1424,assume(special_slave == 0);,1
wbxbar.v,1457,assert(address_found == 0);,1
wbxbar.v,1476,assume(special_value == 0);,1
wbxbar.v,1486,assume(i_sack[special_slave]);,1
wbxbar.v,1493,assume(!i_sack[special_slave]);,1
wbxbar.v,1494,assume(!i_serr[special_slave]);,1
wbxbar.v,1542,assert(grant[special_master][special_slave]);,1
wbxbar.v,1543,assert(mgrant[special_master]);,1
wbxbar.v,1544,assert(sgrant[special_slave]);,1
wbxbar.v,1545,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1546,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1547,assert(!o_merr[special_master]);,1
wbxbar.v,1552,assert(o_scyc[special_slave]);,1
wbxbar.v,1553,assert(o_sstb[special_slave]);,1
wbxbar.v,1554,assert(!o_swe[special_slave]);,1
wbxbar.v,1555,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1562,assert(!m_we[special_master]);,1
wbxbar.v,1563,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1570,assert(o_scyc[special_slave]);,1
wbxbar.v,1571,assert(o_sstb[special_slave]);,1
wbxbar.v,1572,assert(!o_swe[special_slave]);,1
wbxbar.v,1573,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1577,assert(i_sack[special_slave]);,1
wbxbar.v,1585,assert(o_mack[special_master]);,1
wbxbar.v,1593,cover(i_mcyc[special_master] && f_read_ack);,1
wbxbar.v,1630,assert(grant[special_master][special_slave]);,1
wbxbar.v,1631,assert(mgrant[special_master]);,1
wbxbar.v,1632,assert(sgrant[special_slave]);,1
wbxbar.v,1633,assert(mindex[special_master] == special_slave);,1
wbxbar.v,1634,assert(sindex[special_slave] == special_master);,1
wbxbar.v,1635,assert(!o_merr[special_master]);,1
wbxbar.v,1640,assert(o_scyc[special_slave]);,1
wbxbar.v,1641,assert(o_sstb[special_slave]);,1
wbxbar.v,1642,assert(o_swe[special_slave]);,1
wbxbar.v,1643,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1654,assert(m_we[special_master]);,1
wbxbar.v,1655,assert(m_addr[special_master] == special_address);,1
wbxbar.v,1664,assert(o_scyc[special_slave]);,1
wbxbar.v,1665,assert(o_sstb[special_slave]);,1
wbxbar.v,1666,assert(o_swe[special_slave]);,1
wbxbar.v,1667,assert(o_saddr[special_slave*AW +: AW] == special_address);,1
wbxbar.v,1680,assert(i_sack[special_slave]);,1
wbxbar.v,1687,assert(o_mack[special_master]);,1
wbxbar.v,1692,cover(i_mcyc[special_master] && f_write_ack);,1
sfifo.v,256,assert(o_fill == f_fill);,1
sfifo.v,260,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,264,assert(o_full == r_full);,1
sfifo.v,271,assert(o_empty == r_empty);,1
sfifo.v,282,assert(r_empty);,1
sfifo.v,286,assert(!r_empty);,1
sfifo.v,288,assert(!r_empty);,1
sfifo.v,295,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,297,assert(o_data == i_data);,1
sfifo.v,350,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,356,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,369,assert(f_first_in_fifo);,1
sfifo.v,371,assert(!f_first_in_fifo);,1
sfifo.v,380,assert(!f_first_in_fifo);,1
sfifo.v,385,assert(f_second_in_fifo);,1
sfifo.v,392,assert(f_second_in_fifo);,1
sfifo.v,394,assert(!f_second_in_fifo);,1
sfifo.v,397,assert(f_first_in_fifo);,1
sfifo.v,400,assert(f_second_in_fifo);,1
sfifo.v,403,assert(f_first_in_fifo);,1
sfifo.v,405,assert(o_data == f_first_data);,1
sfifo.v,407,assert(!f_first_in_fifo);,1
sfifo.v,408,assert(o_data == f_second_data);,1
sfifo.v,435,cover(f_was_full && f_empty);,1
apbslave.v,137,assert(PREADY);,1
apbslave.v,155,assume(mem[f_addr[AW-1:APBLSB]] == f_data);,1
apbslave.v,168,assert(PRDATA == f_data);,1
apbslave.v,171,assert(f_data == mem[f_addr[AW-1:APBLSB]]);,1
apbslave.v,198,cover(cvr_writes[2]);,1
apbslave.v,201,cover(cvr_reads[2]);,1
apbslave.v,220,cover(cvr_seq[0]);,1
apbslave.v,221,cover(cvr_seq[1]);,1
apbslave.v,222,cover(cvr_seq[2]);,1
apbslave.v,226,cover(PRESETn && !PSEL && !PENABLE && cvr_seq[2]);,1
easyaxil.v,397,assert(faxil_awr_outstanding == faxil_wr_outstanding);,1
easyaxil.v,408,assert(S_AXI_RDATA == 0);,1
axixbar.v,2050,assert(rerr_id[N] == 0);,1
axixbar.v,2122,assert(mwgrant[N]);,1
axixbar.v,2123,assert(mwindex[N] == iM);,1
axixbar.v,2126,assert(swgrant[iM]);,1
axixbar.v,2127,assert(swindex[iM] == N);,1
axixbar.v,2134,assert(wgrant[N] != 0);,1
axixbar.v,2138,assert(wrequest[N][NS-1:0] == 0);,1
axixbar.v,2158,assert(mrgrant[N]);,1
axixbar.v,2159,assert(mrindex[N] == iM);,1
axixbar.v,2162,assert(srgrant[iM]);,1
axixbar.v,2163,assert(srindex[iM] == N);,1
axixbar.v,2170,assert(rgrant[N] != 0);,1
axixbar.v,2178,assert(!mrempty[N]);,1
axixbar.v,2263,assert(mwfull[N] == &w_mawpending[N]);,1
axixbar.v,2269,assert(mrfull[N] == &w_mrpending[N]);,1
axixbar.v,2469,assume(S_AXI_AWVALID[N] == 0);,1
axixbar.v,2471,assert(wgrant[N] == 0);,1
axixbar.v,2473,assert(mwgrant[N] == 0);,1
axixbar.v,2475,assert(S_AXI_BVALID[N]== 0);,1
axixbar.v,2481,assume(S_AXI_ARVALID [N]== 0);,1
axixbar.v,2483,assert(rgrant[N] == 0);,1
axixbar.v,2485,assert(S_AXI_RVALID[N] == 0);,1
axixbar.v,2491,assert(OPT_READS | OPT_WRITES);,1
axivdisplay.v,773,"assert(req_addr >= { 1'b0, cfg_frame_addr });",1
axivdisplay.v,774,"assert(req_line_addr >= { 1'b0, cfg_frame_addr });",1
axivdisplay.v,775,assert(req_line_addr <= req_addr);,1
axivdisplay.v,781,assert(cfg_frame_lines != 0);,1
axivdisplay.v,782,assert(cfg_line_words != 0);,1
axivdisplay.v,788,assert(r_frame_lines != 0);,1
axivdisplay.v,789,assert(r_line_words != 0);,1
axivdisplay.v,986,assert(axi_arlen+1 == req_line_words);,1
axivdisplay.v,988,assert(axi_arlen+1 < req_line_words);,1
axivdisplay.v,992,assert(!req_hlast);,1
axivdisplay.v,994,assert(axi_arlen < max_burst);,1
axivdisplay.v,996,assert(max_burst > 0);,1
axivdisplay.v,1000,assert(max_burst == req_line_words);,1
axivdisplay.v,1180,assert(!cfg_active);,1
axivdisplay.v,1266,assert(M_AXI_ARBURST == 2'b01);,1
axivdisplay.v,1272,assert(!r_stopped);,1
axivdisplay.v,1288,assert(cfg_frame_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1291,assert(req_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1292,assert(req_line_addr[ADDRLSB-1:0] == 0);,1
axivdisplay.v,1314,assert(M_AXI_RLAST);,1
axivdisplay.v,1317,assume(!M_AXI_RLAST);,1
axivdisplay.v,1373,cover(!soft_reset);,1
axivdisplay.v,1376,cover(start_burst);,1
axivdisplay.v,1379,cover(M_AXI_ARVALID && M_AXI_ARREADY);,1
axivdisplay.v,1382,cover(M_AXI_RVALID);,1
axivdisplay.v,1385,cover(M_AXI_RVALID & M_AXI_RLAST);,1
axivdisplay.v,1388,cover(!r_stopped && cvr_full_frame);,1
axivdisplay.v,1391,cover(cvr_full_frame && phantom_start && !r_stopped);,1
axivdisplay.v,1397,assume(M_AXI_ARREADY && M_AXI_RREADY);,1
axivdisplay.v,1398,assume(M_AXIS_TREADY);,1
axivdisplay.v,1399,assume(cfg_frame_addr[12:0] == 0);,1
axivdisplay.v,1400,assume(cfg_line_step[3:0] == 0);,1
axivdisplay.v,1404,cover(cvr_hlast_rlast && cvr_full_frame && phantom_start && !r_stopped);,1
axivdisplay.v,1424,assume(!f_sequential);,1
axivdisplay.v,1427,assume(!f_biglines);,1
axivdisplay.v,1430,assume(!req_addr[C_AXI_ADDR_WIDTH]);,1
axivdisplay.v,1433,assume(!req_line_addr[C_AXI_ADDR_WIDTH]);,1
addrdecode.v,245,assume(i_reset);,1
addrdecode.v,250,assume(!i_valid);,1
addrdecode.v,253,assume(i_valid);,1
addrdecode.v,260,assert(i_reset);,1
addrdecode.v,265,assert(!i_valid);,1
addrdecode.v,268,assert(i_valid);,1
addrdecode.v,276,assert(!o_valid);,1
addrdecode.v,277,assert(o_decode == 0);,1
addrdecode.v,306,assert(!o_decode[iM]);,1
addrdecode.v,313,assert(o_addr == 0);,1
addrdecode.v,314,assert(o_decode == 0);,1
addrdecode.v,315,assert(o_data == 0);,1
addrdecode.v,338,assert(onehot_request);,1
addrdecode.v,353,cover(i_valid);,1
addrdecode.v,356,cover(o_valid);,1
addrdecode.v,359,cover(o_valid && !i_stall);,1
addrdecode.v,373,cover(f_reached[0]);,1
addrdecode.v,382,cover(&f_reached);,1
axidma.v,907,assert(!clear_read_pipeline);,1
axidma.v,910,assert(!clear_read_pipeline);,1
axidma.v,913,assert(!clear_read_pipeline);,1
axidma.v,1575,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1579,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1659,assert(!M_AXI_AWVALID);,1
axidma.v,1660,assert(!M_AXI_WVALID);,1
axidma.v,1661,assert(!M_AXI_ARVALID);,1
axidma.v,1680,assert(f_length != 0);,1
axidma.v,1681,assert(f_length[LGLEN] == 0);,1
axidma.v,1683,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axidma.v,1684,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axidma.v,1762,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1763,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1764,assert(f_length[ADDRLSB-1:0] == 0);,1
axidma.v,1771,assert(!extra_realignment_write);,1
axidma.v,1773,assert(!extra_realignment_write);,1
axidma.v,1775,assert(extra_realignment_write);,1
axidma.v,1779,assert(r_partial_outvalid);,1
axidma.v,1786,assert(f_extra_realignment_read);,1
axidma.v,1788,assert(f_extra_realignment_read == extra_realignment_read);,1
axidma.v,1797,assert(no_read_bursts_outstanding);,1
axidma.v,1801,assert(!r_int);,1
axidma.v,1830,assert(M_AXI_WVALID);,1
axidma.v,1848,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
axidma.v,1854,assert(r_len[ADDRLSB-1:0] == 0);,1
axidma.v,1855,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1856,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axidma.v,1862,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,1863,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,1864,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
axidma.v,1870,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,1872,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axidma.v,1876,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,1881,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,1907,assert(reads_remaining_w == 0);,1
axidma.v,1908,assert(!M_AXI_ARVALID);,1
axidma.v,1909,assert(writes_remaining_w == 0);,1
axidma.v,1934,assert(r_partial_outvalid);,1
axidma.v,1936,assert(!fifo_empty || r_abort || r_err);,1
axidma.v,1962,assert(!M_AXI_WVALID);,1
axidma.v,1969,assert(fifo_data_available == 0);,1
axidma.v,2053,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2057,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
axidma.v,2059,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2066,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
axidma.v,2069,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
axidma.v,2071,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
axidma.v,2087,assert(read_address == f_read_address);,1
axidma.v,2089,assert(read_address[ADDRLSB-1:0] == 0);,1
axidma.v,2093,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2098,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axidma.v,2123,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
axidma.v,2138,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
axidma.v,2146,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
axidma.v,2163,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
axidma.v,2170,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2171,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
axidma.v,2173,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
axidma.v,2188,assert(readlen_w != 0);,1
axidma.v,2211,assert(!r_done);,1
axidma.v,2213,assert(!r_done);,1
axidma.v,2221,assert(r_done);,1
axidma.v,2233,assert(M_AXI_WSTRB == 0);,1
axidma.v,2251,assert(reads_remaining_w == 0);,1
axidma.v,2253,assert(reads_remaining_w > 0);,1
axidma.v,2256,assert(readlen_w <= reads_remaining_w);,1
axidma.v,2264,assert(M_AXI_BREADY);,1
axidma.v,2268,assert(M_AXI_RREADY);,1
axidma.v,2291,assert(M_AXI_ARVALID);,1
axidma.v,2295,assert(M_AXI_AWVALID);,1
axidma.v,2316,assert(M_AXI_WVALID);,1
axidma.v,2337,assert(!S_AXIL_BVALID);,1
axidma.v,2338,assert(!S_AXIL_RVALID);,1
axidma.v,2340,assert(!M_AXI_AWVALID);,1
axidma.v,2341,assert(!M_AXI_WVALID);,1
axidma.v,2342,assert(!M_AXI_ARVALID);,1
axidma.v,2344,assert(write_bursts_outstanding == 0);,1
axidma.v,2345,assert(write_requests_remaining == 0);,1
axidma.v,2347,assert(!phantom_read);,1
axidma.v,2348,assert(!phantom_write);,1
axidma.v,2349,assert(!r_busy);,1
axidma.v,2350,assert(read_bursts_outstanding == 0);,1
axidma.v,2351,assert(no_read_bursts_outstanding);,1
axidma.v,2353,assert(r_len == 0);,1
axidma.v,2354,assert(zero_len);,1
axidma.v,2356,assert(write_count == 0);,1
axidma.v,2357,assert(!M_AXI_WLAST);,1
axidma.v,2358,assert(M_AXI_AWLEN == 0);,1
axidma.v,2359,assert(!r_write_fifo);,1
axidma.v,2360,assert(r_src_addr == 0);,1
axidma.v,2361,assert(r_dst_addr == 0);,1
axidma.v,2365,assert(ADDRLSB + LGMAXBURST <= 12);,1
axidma.v,2403,assume(f_const_posn < f_length);,1
axidma.v,2441,assert(f_shifted_wstrb[0]);,1
axidma.v,2442,assert(f_shifted_write[7:0] == f_const_byte);,1
axidma.v,2444,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
axidma.v,2479,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
axidma.v,2516,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
axidma.v,2577,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
axidma.v,2589,cover(!r_busy && r_err);,1
axidma.v,2593,cover(!r_busy && r_abort);,1
axidma.v,2597,cover(reads_remaining_w == 0);,1
axidma.v,2601,cover(reads_remaining_w == 0 && fifo_empty);,1
wbc2pipeline.v,153,assume(i_reset);,1
afifo.v,584,assume(i_wclk == now_wclk);,1
afifo.v,585,assume(i_rclk == now_rclk);,1
afifo.v,596,assume(!pre_wclk && !wclk);,1
afifo.v,597,assume(!pre_rclk && !i_rclk);,1
afifo.v,741,cover(o_rd_empty);,1
afifo.v,742,cover(!o_rd_empty);,1
afifo.v,743,cover(f_state == 2'b01);,1
afifo.v,744,cover(f_state == 2'b10);,1
afifo.v,745,cover(f_state == 2'b11);,1
afifo.v,746,cover(&f_fill[MSB-1:0]);,1
afifo.v,748,cover(i_rd);,1
afifo.v,749,cover(i_rd && !o_rd_empty);,1
afifo.v,770,cover(o_wr_full);,1
afifo.v,771,cover(o_rd_empty && cvr_full);,1
afifo.v,772,cover(o_rd_empty && f_fill == 0 && cvr_full);,1
afifo.v,791,cover(cvr_nearly_full && i_wr_reset_n);,1
afifo.v,792,cover(o_rd_empty && cvr_nearly_full);,1
afifo.v,793,cover(o_rd_empty && f_fill == 0 && cvr_nearly_full);,1
axilsingle.v,317,assert(bfifo.f_first_data != 2'b01);,1
axilsingle.v,320,assert(bfifo.f_second_data != 2'b01);,1
axilsingle.v,324,assume(S_AXI_BRESP != 2'b01);,1
axilsingle.v,328,assume(S_AXI_BRESP != 2'b01);,1
axilsingle.v,336,assert(!bffull || !write_bvalid);,1
axilsingle.v,436,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
axilsingle.v,440,assert(rfifo.f_first_data[1:0] != 2'b01);,1
axilsingle.v,443,assert(rfifo.f_second_data[1:0] != 2'b01);,1
axilsingle.v,447,assume(S_AXI_RRESP != 2'b01);,1
axilsingle.v,451,assume(S_AXI_RRESP != 2'b01);,1
axilsingle.v,585,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
axilsingle.v,615,assert(M_AXI_AWPROT == 0);,1
axilsingle.v,632,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
axilsingle.v,646,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
axilsingle.v,665,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
axilsingle.v,705,cover(cvr_awvalids > 4);,1
axilsingle.v,708,cover(cvr_arvalids > 4);,1
axilsingle.v,711,cover(cvr_reads > 4);,1
axilsingle.v,714,cover(cvr_writes > 4);,1
axil2axis.v,301,assert(write_timer <= OPT_TIMEOUT-1);,1
axil2axis.v,442,assert(read_timer <= OPT_TIMEOUT-1);,1
axil2axis.v,632,assume(!S_AXI_ARESETN);,1
axil2axis.v,737,assert(f_reads == reads_completed);,1
axil2axis.v,739,assert(f_read_pkts == read_bursts_completed);,1
axil2axis.v,743,assert(S_AXIS_TREADY);,1
axil2axis.v,764,assert(f_writes == 0);,1
axil2axis.v,765,assert(f_write_pkts == 0);,1
axil2axis.v,770,assert(f_writes == writes_completed);,1
axil2axis.v,771,assert(f_write_pkts == write_bursts_completed);,1
axil2axis.v,784,assert(S_AXI_RVALID);,1
axil2axis.v,791,assert(&S_AXI_RDATA[C_AXI_DATA_WIDTH-1:SW]);,1
axil2axis.v,793,assert(S_AXI_RDATA[C_AXI_DATA_WIDTH-1:SW] == 0);,1
axil2axis.v,797,assert(S_AXI_RRESP == 2'b00);,1
axil2axis.v,807,assert(S_AXI_RRESP == 2'b00);,1
axil2axis.v,809,assert(S_AXI_RDATA[31:16+LGFIFO+1] == 0);,1
axil2axis.v,813,assert(S_AXI_RDATA[14:LGFIFO+1] == 0);,1
axil2axis.v,826,assert(S_AXI_RDATA == 0);,1
axil2axis.v,841,assume(!S_AXIS_TVALID);,1
axil2axis.v,844,assume(S_AXIS_TVALID);,1
axil2axis.v,853,assert(!M_AXIS_TVALID);,1
axil2axis.v,856,assert(M_AXIS_TVALID);,1
axil2axis.v,870,cover(S_AXI_ARESETN && writes_completed == 16);,1
axil2axis.v,873,cover(S_AXI_ARESETN && reads_completed == 16);,1
axil2axis.v,880,cover(S_AXI_BVALID && S_AXI_BRESP != 2'b00);,1
axil2axis.v,883,cover(S_AXI_RVALID && S_AXI_RRESP != 2'b00);,1
axil2apb.v,550,assert(S_AXI_BVALID);,1
axil2apb.v,552,assert(S_AXI_RVALID);,1
axil2apb.v,589,assert(!M_APB_PENABLE);,1
axil2apb.v,601,assert(!axil_write_ready || !axil_read_ready);,1
axil2apb.v,623,assume(f_never_addr[AXILLSB-1:0] == 0);,1
axil2apb.v,627,assume(S_AXI_AWADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,628,assume(S_AXI_AWPROT != f_never_prot);,1
axil2apb.v,633,assume(S_AXI_WDATA != f_never_data);,1
axil2apb.v,634,assume(S_AXI_WSTRB != f_never_strb);,1
axil2apb.v,639,assume(S_AXI_ARADDR[AW-1:AXILLSB] != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,640,assume(S_AXI_ARPROT != f_never_prot);,1
axil2apb.v,644,assume(M_APB_PRDATA != f_never_data);,1
axil2apb.v,655,assert(awskd_addr != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,656,assert(awskd_prot != f_never_prot);,1
axil2apb.v,661,assert(wskd_data != f_never_data);,1
axil2apb.v,662,assert(wskd_strb != f_never_strb);,1
axil2apb.v,667,assert(arskd_addr != f_never_addr[AW-1:AXILLSB]);,1
axil2apb.v,668,assert(arskd_prot != f_never_prot);,1
axil2apb.v,672,assert(r_apb_data != f_never_data);,1
axil2apb.v,683,assert(M_APB_PADDR != f_never_addr);,1
axil2apb.v,684,assert(M_APB_PPROT != f_never_prot);,1
axil2apb.v,687,assert(M_APB_PWDATA != f_never_data);,1
axil2apb.v,688,assert(M_APB_PWSTRB != f_never_strb);,1
axil2apb.v,693,assert(S_AXI_RDATA != f_never_data);,1
axisswitch.v,469,assert(S_AXI_RDATA[C_AXI_DATA_WIDTH-1:LGNS] == 0);,1
axisswitch.v,475,assert(S_AXI_RVALID);,1
axisswitch.v,485,assert(S_AXI_RDATA == 0);,1
axisswitch.v,501,assert(!M_AXIS_TVALID);,1
axisswitch.v,504,assert(M_AXIS_TVALID);,1
axisswitch.v,512,assert(M_AXIS_TDATA == 0);,1
axisswitch.v,513,assert(M_AXIS_TLAST == 0);,1
axisswitch.v,523,assume(f_const_index < NUM_STREAMS);,1
axisswitch.v,535,assert(f_this_index < NUM_STREAMS);,1
axisswitch.v,538,assert(switch_index < NUM_STREAMS);,1
axisswitch.v,572,assert(f_recount == f_count);,1
axisswitch.v,579,assert(f_this_index == switch_index);,1
axisswitch.v,585,"assume({ S_AXIS_TDATA[f_const_index * C_AXIS_DATA_WIDTH +: C_AXIS_DATA_WIDTH], S_AXIS_TLAST[f_const_index] } != f_never_data);",1
axisswitch.v,593,"assert({ skd_data[f_const_index], skd_last[f_const_index] } != f_never_data);",1
axisswitch.v,595,"assert({ M_AXIS_TDATA, M_AXIS_TLAST } != f_never_data);",1
axilwr2wbsp.v,443,assert(!r_awvalid || !o_axi_awready);,1
axilwr2wbsp.v,444,assert(!r_wvalid || !o_axi_wready);,1
axilwr2wbsp.v,446,assert(!o_wb_cyc);,1
axilwr2wbsp.v,456,assert(!fifo_empty);,1
axilwr2wbsp.v,457,assert(r_first[LGFIFO-1:0] == r_last[LGFIFO-1:0]);,1
axilwr2wbsp.v,458,assert(r_first[LGFIFO] != r_last[LGFIFO]);,1
axilwr2wbsp.v,467,assert(!r_awvalid || !o_axi_awready);,1
axilwr2wbsp.v,468,assert(!r_wvalid || !o_axi_wready);,1
axilwr2wbsp.v,491,assert(f_wb_outstanding == wb_outstanding);,1
axilwr2wbsp.v,499,assert(wb_fill <= f_fifo_fill);,1
axilwr2wbsp.v,504,assert(wb_outstanding+1 == wb_fill);,1
axilwr2wbsp.v,506,assert(wb_outstanding == wb_fill);,1
axilwr2wbsp.v,543,assert(f_axi_rd_outstanding == 0);,1
axilwr2wbsp.v,560,assert(!o_axi_bresp[1]);,1
axilwr2wbsp.v,562,assert(o_axi_bresp == 2'b10);,1
axilwr2wbsp.v,564,assert(!o_axi_bresp[1]);,1
axilwr2wbsp.v,566,assert(o_axi_bresp[1]);,1
axilwr2wbsp.v,581,assert(f_first_minus_err != 0);,1
axilwr2wbsp.v,585,assert(f_mid_minus_err <= f_first_minus_err);,1
axilwr2wbsp.v,592,assert(!o_axi_awready);,1
axilwr2wbsp.v,595,assert(!o_axi_wready);,1
axilwr2wbsp.v,605,cover(o_wb_cyc && o_wb_stb && !i_wb_stall);,1
axilwr2wbsp.v,607,cover(o_wb_cyc && i_wb_ack);,1
wbm2axilite.v,326,assume(f_past_valid || i_reset);,1
wbm2axilite.v,405,assert(o_axi_bready);,1
wbm2axilite.v,411,assert(o_axi_rready);,1
wbm2axilite.v,421,assert(!o_axi_awvalid);,1
wbm2axilite.v,422,assert(!o_axi_wvalid);,1
wbm2axilite.v,431,assert(o_axi_awvalid);,1
wbm2axilite.v,432,assert(o_axi_wvalid);,1
wbm2axilite.v,433,assert(wb_we);,1
wbm2axilite.v,437,assert(!o_axi_awvalid);,1
wbm2axilite.v,439,assert(!o_axi_wvalid);,1
wbm2axilite.v,467,assert(o_axi_arvalid);,1
wbm2axilite.v,483,assert(outstanding == 0);,1
wbm2axilite.v,484,assert(err_pending == 0);,1
wbm2axilite.v,491,assert(f_axi_awr_outstanding == 0);,1
wbm2axilite.v,492,assert(f_axi_wr_outstanding == 0);,1
wbm2axilite.v,493,assert(f_axi_rd_outstanding == 0);,1
wbm2axilite.v,495,assert(f_wb_outstanding == 0);,1
wbm2axilite.v,496,assert(!pending);,1
wbm2axilite.v,497,assert(outstanding == 0);,1
wbm2axilite.v,498,assert(err_pending == 0);,1
wbm2axilite.v,565,cover(i_axi_bvalid && o_axi_bready);,1
wbm2axilite.v,567,cover(i_axi_rvalid && o_axi_rready);,1
wbm2axilite.v,596,cover(i_axi_rvalid && o_axi_rready);,1
wbm2axilite.v,600,cover(i_wb_cyc && o_wb_ack);,1
axisgfsm.v,519,assume(!S_AXI_ARESETN);,1
axisgfsm.v,524,assume(!i_abort);,1
axisgfsm.v,525,assume(i_tbl_addr[1:0] == 2'b00);,1
axisgfsm.v,546,assert(o_pf_pc[1:0] == 2'b00);,1
axisgfsm.v,556,assume(i_pf_pc == f_pc);,1
axisgfsm.v,560,assert(f_pc[1:0] == 2'b00);,1
axisgfsm.v,565,assume(!i_pf_illegal);,1
axisgfsm.v,708,assert(sgstate == SG_SRCADDR);,1
axisgfsm.v,710,assert(sgstate == SG_SRCHALF);,1
axisgfsm.v,754,assert(sgstate != SG_SRCHALF);,1
axisgfsm.v,755,assert(sgstate != SG_DSTHALF);,1
axisgfsm.v,796,assert(sgstate == SG_SRCADDR);,1
axisgfsm.v,797,assert(!o_dmac_wvalid);,1
axisgfsm.v,798,assert(!dma_busy);,1
axisgfsm.v,810,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,811,assert(f_pc == o_pf_pc);,1
axisgfsm.v,819,assert(o_new_pc);,1
axisgfsm.v,834,assert(sgstate == SG_DSTADDR);,1
axisgfsm.v,835,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,836,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,838,assert(o_dmac_wvalid);,1
axisgfsm.v,839,assert(o_dmac_waddr == DMA_SRCLO);,1
axisgfsm.v,840,assert(o_dmac_wdata == f_tblentry[31:0]);,1
axisgfsm.v,841,assert(&o_dmac_wstrb);,1
axisgfsm.v,842,assert(!dma_busy);,1
axisgfsm.v,843,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,855,assert(sgstate == SG_LENGTH);,1
axisgfsm.v,856,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,857,assert(tbl_int_enable == f_tbl_int_enable);,1
axisgfsm.v,858,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,860,assert(o_dmac_wvalid);,1
axisgfsm.v,861,assert(o_dmac_waddr == DMA_DSTLO);,1
axisgfsm.v,862,"assert(o_dmac_wdata == { 2'b00, f_tblentry[61:32] });",1
axisgfsm.v,863,assert(&o_dmac_wstrb);,1
axisgfsm.v,864,assert(!dma_busy);,1
axisgfsm.v,865,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,877,assert(sgstate == SG_CONTROL);,1
axisgfsm.v,878,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,879,assert(o_tbl_addr == f_tbladdr);,1
axisgfsm.v,880,assert(o_dmac_wvalid);,1
axisgfsm.v,881,assert(o_dmac_waddr == DMA_LENLO);,1
axisgfsm.v,882,assert(o_dmac_wdata == f_tblentry[95:64]);,1
axisgfsm.v,883,assert(&o_dmac_wstrb);,1
axisgfsm.v,884,assert(!dma_busy);,1
axisgfsm.v,885,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,897,assert(sgstate == SG_WAIT);,1
axisgfsm.v,898,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,899,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,900,assert(o_dmac_wvalid);,1
axisgfsm.v,901,assert(o_dmac_waddr == DMA_CONTROL);,1
axisgfsm.v,902,assert(o_dmac_wdata[15:0] == 16'h1f);,1
axisgfsm.v,903,assert(&o_dmac_wstrb);,1
axisgfsm.v,904,assert(!dma_busy);,1
axisgfsm.v,905,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,917,assert(sgstate == SG_WAIT);,1
axisgfsm.v,918,assert(!o_dmac_wvalid);,1
axisgfsm.v,919,assert(tbl_last == f_tbl_last);,1
axisgfsm.v,920,assert(o_tbl_addr == f_tbladdr + TBL_SIZE);,1
axisgfsm.v,921,assert(!o_dmac_wvalid);,1
axisgfsm.v,922,assert(o_dmac_waddr == DMA_CONTROL);,1
axisgfsm.v,924,assert(&o_dmac_wstrb);,1
axisgfsm.v,926,assert(o_pf_pc == f_tbladdr);,1
axisgfsm.v,948,assert(sgstate == SG_IDLE);,1
axisgfsm.v,949,assert(!o_new_pc);,1
axisgfsm.v,950,assert(!o_dmac_wvalid);,1
axisgfsm.v,958,assert(o_pf_clear_cache);,1
axisgfsm.v,959,assert(!dma_busy);,1
axisgfsm.v,995,assert(!o_done);,1
axisgfsm.v,996,assert(!o_err);,1
axisgfsm.v,1010,assert(!o_dmac_wvalid || i_dmac_wready);,1
axisgfsm.v,1031,assume(!i_abort);,1
axisgfsm.v,1035,assume(!i_abort);,1
skidbuffer.v,233,assume(i_reset);,1
skidbuffer.v,251,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,255,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,261,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,263,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,304,assert(o_ready);,1
skidbuffer.v,335,assert(o_valid == i_valid);,1
skidbuffer.v,345,assert(o_valid);,1
skidbuffer.v,348,assert(!o_valid);,1
skidbuffer.v,359,assert(o_ready);,1
skidbuffer.v,369,assert(o_data == 0);,1
skidbuffer.v,373,assert(r_data == 0);,1
skidbuffer.v,440,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,446,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
axilrd2wbsp.v,376,assume(w_reset);,1
axilrd2wbsp.v,380,assert(!o_axi_arready);,1
axilrd2wbsp.v,401,assert(!o_axi_arready);,1
axilrd2wbsp.v,406,assert(!o_axi_arready);,1
axilrd2wbsp.v,429,assert(f_wb_outstanding == wb_outstanding);,1
axilrd2wbsp.v,437,assert(wb_fill <= f_fifo_fill);,1
axilrd2wbsp.v,443,assert(&o_wb_sel);,1
axilrd2wbsp.v,446,assert(wb_outstanding == wb_fill);,1
axilrd2wbsp.v,451,assert(o_wb_stb);,1
axilrd2wbsp.v,452,assert(!o_axi_arready);,1
axilrd2wbsp.v,484,assert(f_axi_wr_outstanding == 0);,1
axilrd2wbsp.v,486,assert(f_axi_awr_outstanding == 0);,1
axilrd2wbsp.v,488,assert(f_axi_rd_outstanding == f_fifo_fill);,1
axilrd2wbsp.v,497,assert(!o_axi_rresp[1]);,1
axilrd2wbsp.v,499,assert(o_axi_rresp == 2'b10);,1
axilrd2wbsp.v,501,assert(!o_axi_rresp[1]);,1
axilrd2wbsp.v,503,assert(o_axi_rresp[1]);,1
axilrd2wbsp.v,518,assert(f_first_minus_err != 0);,1
axilrd2wbsp.v,522,assert(f_mid_minus_err <= f_first_minus_err);,1
axilrd2wbsp.v,542,cover(o_wb_cyc && o_wb_stb);,1
axilrd2wbsp.v,546,cover(o_wb_cyc && f_wb_outstanding > 2);,1
axilrd2wbsp.v,555,cover(o_axi_rvalid && i_axi_rready);,1
axilfetch.v,327,assert(!o_valid);,1
axi2axilsub.v,548,assert(mst_awaddr == 0);,1
axi2axilsub.v,549,assert(mst_awprot == 0);,1
axi2axilsub.v,621,assert(slv_wstrb == 0);,1
axi2axilsub.v,622,assert(slv_wdata == 0);,1
axi2axilsub.v,795,assume(skidm_bresp <= f_max_bresp);,1
axi2axilsub.v,796,assume(skidm_bresp != EXOKAY);,1
axi2axilsub.v,798,assert(bresp <= f_max_bresp);,1
axi2axilsub.v,799,assert(bresp != EXOKAY);,1
axi2axilsub.v,802,assert(S_AXI_BRESP <= f_max_bresp);,1
axi2axilsub.v,803,assert(S_AXI_BRESP != EXOKAY);,1
axi2axilsub.v,954,assert(faxi_rd_nbursts == 0);,1
axi2axilsub.v,1027,assert(faxil_rd_outstanding == 0);,1
axi2axilsub.v,1048,assert(f_bfifo_packets <= wfifo_count);,1
axi2axilsub.v,1466,assert(mst_arid == 0);,1
axi2axilsub.v,1467,assert(mst_araddr == 0);,1
axi2axilsub.v,1468,assert(mst_arprot == 0);,1
axi2axilsub.v,1747,assert(faxi_awr_nbursts == 0);,1
axi2axilsub.v,1748,assert(faxi_wr_pending == 0);,1
axi2axilsub.v,1749,assert(faxi_wr_ckvalid == 0);,1
axi2axilsub.v,1822,assert(faxil_awr_outstanding == 0);,1
axi2axilsub.v,1823,assert(faxil_wr_outstanding == 0);,1
axi2axilsub.v,1907,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilsub.v,1912,assert(m_axi_awvalid);,1
axi2axilsub.v,1914,assert(!skids_awready);,1
axi2axilsub.v,1916,assert(!skids_awready);,1
axi2axilsub.v,1918,assert(!skids_awready);,1
axi2axilsub.v,1923,assert(axi_bresp != EXOKAY);,1
axi2axilsub.v,1962,assert(f_wfifo_bursts == wfifo_count);,1
axi2axilsub.v,1964,assert(f_wfifo_bursts <= f_wfifo_within);,1
axi2axilsub.v,1967,"assert(f_wfifo_within <= { f_wfifo_bursts, 8'h00 });",1
axi2axilsub.v,1988,assert(f_wfifo_within + bcounts >= faxi_wr_pending);,1
axi2axilsub.v,2063,assert(rid == S_AXI_RID);,1
axi2axilsub.v,2067,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilsub.v,2072,assert(m_axi_arvalid);,1
axi2axilsub.v,2073,assert(!skids_arready);,1
axi2axilsub.v,2128,assert(f_rfifo_bursts == rfifo_count);,1
axi2axilsub.v,2168,assert(rcounts <= 256);,1
axi2axilsub.v,2184,assert(S_AXI_RLAST);,1
axi2axilsub.v,2202,assume(!skids_awvalid);,1
axi2axilsub.v,2203,assume(!skids_wvalid);,1
axi2axilsub.v,2204,assert(M_AXI_AWVALID == 0);,1
axi2axilsub.v,2205,assert(faxil_awr_outstanding == 0);,1
axi2axilsub.v,2206,assert(faxil_wr_outstanding == 0);,1
axi2axilsub.v,2207,assert(!skidm_bvalid);,1
axi2axilsub.v,2208,assert(!S_AXI_BVALID);,1
axi2axilsub.v,2217,assume(!S_AXI_ARVALID);,1
axi2axilsub.v,2218,assert(M_AXI_ARVALID == 0);,1
axi2axilsub.v,2219,assert(faxil_rd_outstanding == 0);,1
axi2axilsub.v,2251,cover(cvr_write_count_simple > 6 && faxi_awr_nbursts == 0 && !S_AXI_BVALID);,1
axi2axilsub.v,2253,cover(cvr_write_count > 2 && faxi_awr_nbursts == 0 && !S_AXI_BVALID);,1
axi2axilsub.v,2277,cover(cvr_read_count_simple > 6 && faxi_rd_nbursts == 0 && !S_AXI_RVALID);,1
axi2axilsub.v,2279,cover(cvr_read_count > 2 && faxi_rd_nbursts == 0 && !S_AXI_RVALID);,1
axi2axilsub.v,2299,assume(f_count_awwait < 3);,1
axildouble.v,332,assert(bfifo.f_first_data != 2'b01);,1
axildouble.v,335,assert(bfifo.f_second_data != 2'b01);,1
axildouble.v,341,assume(S_AXI_BRESP != 2'b01);,1
axildouble.v,345,assume(S_AXI_BRESP != 2'b01);,1
axildouble.v,353,assert(!bffull || !write_bvalid);,1
axildouble.v,456,assert(read_count == rfill + read_result + read_rvalid + read_rwait);,1
axildouble.v,460,assert(rfifo.f_first_data[1:0] != 2'b01);,1
axildouble.v,463,assert(rfifo.f_second_data[1:0] != 2'b01);,1
axildouble.v,469,assume(S_AXI_RRESP != 2'b01);,1
axildouble.v,473,assume(S_AXI_RRESP != 2'b01);,1
axildouble.v,606,assert(fm_axi_awr_outstanding[M] == fm_axi_wr_outstanding[M]);,1
axildouble.v,636,assert(M_AXI_AWPROT == 0);,1
axildouble.v,653,assert(f_axi_awr_outstanding == count_awr_outstanding);,1
axildouble.v,667,assert(f_axi_wr_outstanding == count_wr_outstanding);,1
axildouble.v,686,assert(f_axi_rd_outstanding == count_rd_outstanding);,1
axildouble.v,727,cover(cvr_awvalids > 4);,1
axildouble.v,730,cover(cvr_arvalids > 4);,1
axildouble.v,733,cover(cvr_reads > 4);,1
axildouble.v,736,cover(cvr_writes > 4);,1
wbarbiter.v,310,assert(f_b_nreqs == 0);,1
wbarbiter.v,311,assert(f_b_nacks == 0);,1
wbarbiter.v,312,assert(f_a_outstanding == f_outstanding);,1
wbarbiter.v,314,assert(f_a_nreqs == 0);,1
wbarbiter.v,315,assert(f_a_nacks == 0);,1
wbarbiter.v,316,assert(f_b_outstanding == f_outstanding);,1
wbarbiter.v,322,assert(r_a_owner);,1
wbarbiter.v,326,assert(!r_a_owner);,1
wbarbiter.v,348,cover(f_prior_b_ack && o_cyc && o_a_ack);,1
wbarbiter.v,355,cover(f_prior_a_ack && o_cyc && o_b_ack);,1
wbarbiter.v,363,cover(o_cyc && o_b_ack);,1
axiperf.v,1155,assert(S_AXIL_RDATA == 0);,1
axis2mm.v,1551,assert(wr_writes_pending == 0);,1
axis2mm.v,1552,assert(wr_none_pending);,1
axis2mm.v,1555,assert(wr_writes_pending <= M_AXI_AWLEN+1);,1
axis2mm.v,1564,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axis2mm.v,1568,assert(cmd_addr[ADDRLSB-1:0] == 0);,1
axis2mm.v,1587,assert(!M_AXI_AWVALID);,1
axis2mm.v,1588,assert(!M_AXI_WVALID);,1
axis2mm.v,1589,assert(!M_AXI_BVALID);,1
axis2mm.v,1613,assert(wr_writes_pending == 0);,1
axis2mm.v,1620,assert(fifo_fill >= wr_writes_pending);,1
axis2mm.v,1631,assert(wr_writes_pending <= r_remaining_w);,1
axis2mm.v,1634,assert(aw_requests_remaining == r_remaining_w);,1
axis2mm.v,1637,assert(wr_writes_pending == 0);,1
axis2mm.v,1640,assert(!M_AXI_WVALID);,1
axis2mm.v,1658,assert(!r_busy);,1
axis2mm.v,1661,assert(fifo_fill >= wr_writes_pending);,1
axis2mm.v,1675,assert(M_AXI_AWVALID && M_AXI_WVALID);,1
axis2mm.v,1676,assert(wr_none_pending);,1
axis2mm.v,1683,assert(r_max_burst > 0);,1
axis2mm.v,1689,assert(initial_burstlen > 0);,1
axis2mm.v,1699,assert(M_AXI_AWLEN+1 <= MAX_FIXED_BURST);,1
axis2mm.v,1725,assert(M_AXI_AWADDR[ADDRLSB +: LGMAXBURST] == 0);,1
axis2mm.v,1740,assert(!S_AXIS_TREADY);,1
axis2mm.v,1745,assert(S_AXIS_TREADY);,1
axis2mm.v,1749,assert(S_AXIS_TREADY);,1
axis2mm.v,1754,assert(!S_AXIS_TREADY);,1
axis2mm.v,1757,assert(S_AXIS_TREADY);,1
axis2mm.v,1771,assert(r_errcode == 0);,1
axis2mm.v,1773,assert(r_errcode != 0);,1
axis2mm.v,1782,assert(!r_err);,1
axis2mm.v,1805,assert(axi_addr == cmd_addr);,1
axis2mm.v,1852,cover( r_err && cvr_aborted);,1
axis2mm.v,1853,cover( r_err && cvr_buserr);,1
axis2mm.v,1854,cover(!r_err);,1
axis2mm.v,1857,cover(cmd_length_w > 5);,1
axis2mm.v,1858,cover(cmd_length_w > 8);,1
axilxbar.v,432,assert(skd_awprot[N] == 0);,1
axilxbar.v,517,assert(skd_arprot[N] == 0);,1
axilxbar.v,929,assert(m_awprot[N] == 0);,1
axilxbar.v,933,assert(m_arprot[N] == 0);,1
axilxbar.v,1151,assert(axi_awaddr == 0);,1
axilxbar.v,1152,assert(axi_awprot == 0);,1
axilxbar.v,1158,assert(axi_wdata == 0);,1
axilxbar.v,1159,assert(axi_wstrb == 0);,1
axilxbar.v,1257,assert(axi_araddr == 0);,1
axilxbar.v,1258,assert(axi_arprot == 0);,1
axilxbar.v,1357,assert(r_bresp[N] != 2'b01);,1
axilxbar.v,1360,assert(m_axi_bready[swindex[N]] == !r_bvalid[N]);,1
axilxbar.v,1362,assert(!r_bvalid[N]);,1
axilxbar.v,1365,assert(r_bresp[N] == 0);,1
axilxbar.v,1369,assert(axi_bresp == 0);,1
axilxbar.v,1498,assert(r_rresp[N] != 2'b01);,1
axilxbar.v,1501,assert(m_axi_rready[srindex[N]] == !r_rvalid[N]);,1
axilxbar.v,1503,assert(!r_rvalid[N]);,1
axilxbar.v,1507,assert(r_rresp[N] == 0);,1
axilxbar.v,1508,assert(r_rdata[N] == 0);,1
axilxbar.v,1514,assert(axi_rresp == 0);,1
axilxbar.v,1515,assert(axi_rdata == 0);,1
axilxbar.v,1623,assert(missing_wdata == awpending - wpending);,1
axilxbar.v,1627,assert(awpending >= wpending);,1
axilxbar.v,1706,assume(swindex[iN] == 0);,1
axilxbar.v,1709,assume(srindex[iN] == 0);,1
axilxbar.v,1740,assert(swgrant[N]);,1
axilxbar.v,1741,assert(swindex[N] == iM);,1
axilxbar.v,1744,assert(mwgrant[iM]);,1
axilxbar.v,1745,assert(mwindex[iM] == N);,1
axilxbar.v,1752,assert(wgrant[N] != 0);,1
axilxbar.v,1756,assert(wrequest[N][NS-1:0] == 0);,1
axilxbar.v,1769,assert(srgrant[N]);,1
axilxbar.v,1770,assert(srindex[N] == iM);,1
axilxbar.v,1773,assert(mrgrant[iM]);,1
axilxbar.v,1774,assert(mrindex[iM] == N);,1
axilxbar.v,1781,assert(rgrant[N] != 0);,1
axilxbar.v,1785,assert(rrequest[N][NS-1:0] == 0);,1
axilxbar.v,1875,assert(!S_AXI_BVALID[N]);,1
axilxbar.v,1880,assert(w_sawpending[N] == 0);,1
axilxbar.v,1881,assert(w_swpending[N] == 0);,1
axilxbar.v,1916,assert(!S_AXI_RVALID[N]);,1
axilxbar.v,1919,assert(w_srpending[N] == 0);,1
axilxbar.v,1929,assert(swfull[N] == &w_sawpending[N]);,1
axilxbar.v,1935,assert(srfull[N] == &w_srpending[N]);,1
axilxbar.v,1992,assert(fs_awr_outstanding[M] == 0);,1
axilxbar.v,1993,assert(fs_wr_outstanding[M] == 0);,1
axilxbar.v,1998,assert(fs_rd_outstanding[M] == 0);,1
axilxbar.v,2145,cover(!swgrant[N] && whsreturn);,1
axilxbar.v,2147,cover(!swgrant[N] && was_wevery);,1
axilxbar.v,2150,cover(S_AXI_ARESETN && wrequest[N][NS]);,1
axilxbar.v,2152,cover(S_AXI_ARESETN && wrequest[N][NS] && slave_awaccepts[N]);,1
axilxbar.v,2154,cover(err_wr_return);,1
axilxbar.v,2156,cover(!swgrant[N] && err_wr_return);,1
axilxbar.v,2161,assert(swgrant[N]);,1
axilxbar.v,2221,cover(!srgrant[N] && rhsreturn); // @26 always @(*) cover(!srgrant[N] && was_revery); // @26 always @(*) cover(S_AXI_ARVALID[N] && rrequest[N][NS]);,6
axilxbar.v,2228,cover(rgrant[N][NS]);,1
axilxbar.v,2230,cover(err_rd_return);,1
axilxbar.v,2232,cover(!srgrant[N] && err_rd_return); //@! `endif always @(*) if (S_AXI_BVALID[N] && wgrant[N][NS]) assert(S_AXI_BRESP[2*N+:2]==INTERCONNECT_ERROR);,6
axilxbar.v,2240,assert(S_AXI_RRESP[2*N+:2]==INTERCONNECT_ERROR);,1
axilxbar.v,2260,cover(multi_write_hit);,1
axilxbar.v,2263,cover(multi_read_hit);,1
axilxbar.v,2266,cover(S_AXI_ARESETN && multi_write_hit & mwgrant == 0 && M_AXI_BVALID == 0);,1
axilxbar.v,2269,cover(S_AXI_ARESETN && multi_read_hit & mrgrant == 0 && M_AXI_RVALID == 0);,1
axilxbar.v,2294,assume(f_const_source < NM);,1
axilxbar.v,2305,assume(f_const_slave < NS);,1
axilxbar.v,2321,assume(f_awaddr != f_const_addr_n);,1
axilxbar.v,2322,assume(S_AXI_AWPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2326,assume(m_wdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2327,assume(m_wstrb[f_const_source] != f_const_strb_n);,1
axilxbar.v,2331,assume(f_araddr != f_const_addr_n);,1
axilxbar.v,2332,assume(S_AXI_ARPROT[f_const_source*3+:3] != f_const_prot_n);,1
axilxbar.v,2337,assume(m_axi_bresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2342,assume(m_axi_rdata[f_const_slave] != f_const_data_n);,1
axilxbar.v,2343,assume(m_axi_rresp[f_const_slave] != f_const_resp_n);,1
axilxbar.v,2352,assert(skd_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2353,assert(skd_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2357,assert(m_awaddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2358,assert(m_awprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2362,assert(M_AXI_AWADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2363,assert(M_AXI_AWPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2367,assert(M_AXI_WDATA[f_const_slave*DW+:DW] != f_const_data_n);,1
axilxbar.v,2372,assert(skd_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2373,assert(skd_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2377,assert(m_araddr[f_const_source] != f_const_addr_n);,1
axilxbar.v,2378,assert(m_arprot[f_const_source] != f_const_prot_n);,1
axilxbar.v,2382,assert(M_AXI_ARADDR[f_const_slave*AW+:AW] != f_const_addr_n);,1
axilxbar.v,2383,assert(M_AXI_ARPROT[f_const_slave*3+:3] != f_const_prot_n);,1
axilxbar.v,2387,assert(r_bresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2389,assert(S_AXI_BRESP[f_const_source*2+:2] != f_const_resp_n);,1
axilxbar.v,2392,assert(r_rresp[f_const_source] != f_const_resp_n);,1
axilxbar.v,2393,assert(r_rdata[f_const_source] != f_const_data_n);,1
axilxbar.v,2397,assert(S_AXI_RRESP[f_const_source*2+:2]!=f_const_resp_n);,1
axilxbar.v,2398,assert(S_AXI_RDATA[f_const_source*DW+:DW]!=f_const_data_n);,1
axidouble.v,1174,assert(!S_AXI_BVALID || S_AXI_BRESP != EXOKAY);,1
axidouble.v,1175,assert(!S_AXI_RVALID || S_AXI_RRESP != EXOKAY);,1
axidouble.v,1201,assert(M_AXI_AWVALID == 0);,1
axidouble.v,1203,assert(M_AXI_AWVALID == 0);,1
axidouble.v,1206,assert(M_AXI_AWVALID == wdecode[NS-1:0]);,1
axidouble.v,1209,assert(M_AXI_AWVALID == 0);,1
axidouble.v,1241,assume(!S_AXI_AWVALID);,1
axidouble.v,1243,assert(!S_AXI_BVALID);,1
axidouble.v,1245,assert(!M_AXI_AWVALID);,1
axidouble.v,1253,assume(!S_AXI_ARVALID);,1
axidouble.v,1255,assert(!S_AXI_RVALID);,1
axidouble.v,1257,assert(M_AXI_ARVALID == 0);,1
axidouble.v,1259,assert(rdecode == 0);,1
axidouble.v,1279,assume(S_AXI_AWLEN > 2);,1
axidouble.v,1283,assume(S_AXI_ARLEN > 2);,1
axidouble.v,1318,cover(cvr_awvalids > 2);,1
axidouble.v,1321,cover(cvr_writes > 2);,1
axidouble.v,1324,cover(cvr_writes > 4);,1
axidouble.v,1330,cover(cvr_arvalids > 2);,1
axidouble.v,1333,cover(cvr_reads > 2);,1
axidouble.v,1336,cover(cvr_reads > 4);,1
axidouble.v,1346,cover(S_AXI_BVALID && S_AXI_BRESP == EXOKAY);,1
wbm2axisp.v,508,assert(wr_addr - rd_addr == npending);,1
wbm2axisp.v,568,assert(C_AXI_DATA_WIDTH >= DW);,1
wbm2axisp.v,595,assume(i_reset);,1
wbm2axisp.v,689,assert(direction);,1
wbm2axisp.v,690,assert(f_axi_rd_nbursts == 0);,1
wbm2axisp.v,700,assert(o_axi_wvalid);,1
wbm2axisp.v,706,assert(!direction);,1
wbm2axisp.v,709,assert(f_axi_awr_nbursts == 0);,1
wbm2axisp.v,720,assert(!o_axi_arvalid);,1
wbm2axisp.v,721,assert(f_axi_rd_nbursts == 0);,1
wbm2axisp.v,722,assert(!i_axi_rvalid);,1
wbm2axisp.v,725,assert(!o_axi_awvalid);,1
wbm2axisp.v,726,assert(!o_axi_wvalid);,1
wbm2axisp.v,727,assert(f_axi_awr_nbursts == 0);,1
wbm2axisp.v,745,assert(o_wb_stall);,1
wbm2axisp.v,760,assert(o_axi_bready);,1
wbm2axisp.v,766,assert(o_axi_rready);,1
wbm2axisp.v,775,assert(direction);,1
wbm2axisp.v,786,assert(!direction);,1
wbm2axisp.v,839,assume(i_axi_rdata == f_data);,1
wbm2axisp.v,1036,cover(!i_reset && cvr_flushed && !flushing);,1
wbm2axisp.v,1037,cover(!i_reset && cvr_flushed && !flushing && !o_wb_stall);,1
wbm2axisp.v,1062,cover(cvr_read2write && direction && o_wb_ack && f_wb_outstanding == 1);,1
wbm2axisp.v,1063,cover(cvr_write2read && !direction && o_wb_ack && f_wb_outstanding == 1);,1
wbm2axisp.v,1081,cover(&cvr_ack_after_abort[1:0]);,1
wbm2axisp.v,1085,cover(&cvr_ack_after_abort[2:0]);,1
wbm2axisp.v,1087,cover(!i_wb_cyc && &cvr_ack_after_abort[2:0]);,1
wbm2axisp.v,1102,cover(cvr_nwrites == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
wbm2axisp.v,1105,cover(cvr_nreads == 3 && !o_wb_ack && !o_wb_err && !i_wb_cyc);,1
wbm2axisp.v,1114,assume(!i_reset && i_wb_cyc && !o_wb_err);,1
axilupsz.v,190,assert(awskd_prot == 3'h0);,1
axilupsz.v,381,assert(rdata == 0);,1
axilupsz.v,382,assert(rresp == 0);,1
axilupsz.v,566,assert(rfifo_fill == fmst_rd_outstanding);,1
axilupsz.v,569,assert(!rfifo_empty);,1
saxi_slave.v,162,assert(F_LGDEPTH > 8);,1
fav_slave.v,140,assume(!i_av_read);,1
fav_slave.v,141,assume(!i_av_write);,1
fav_slave.v,142,assume(!i_av_lock);,1
fav_slave.v,147,assume(|i_av_byteenable);,1
fav_slave.v,236,assume(!i_av_read);,1
fav_slave.v,237,assume(!i_av_write);,1
fav_slave.v,243,assert(!i_av_readdatavalid);,1
fav_slave.v,244,assert(!i_av_writeresponsevalid);,1
fav_slave.v,245,assert(f_rd_nreqs == 0);,1
fav_slave.v,246,assert(f_rd_nacks == 0);,1
fav_slave.v,247,assert(f_wr_nreqs == 0);,1
fav_slave.v,248,assert(f_wr_nacks == 0);,1
fav_slave.v,262,assert(!i_av_readdatavalid);,1
fav_slave.v,267,assert(!i_av_writeresponsevalid);,1
faxil_master.v,190,assume(!i_axi_reset_n);,1
faxil_master.v,194,assert(!i_axi_reset_n);,1
faxil_master.v,216,assume(!i_axi_reset_n);,1
faxil_master.v,220,assume(!i_axi_reset_n);,1
faxil_master.v,227,assert(!i_axi_reset_n);,1
faxil_master.v,231,assert(!i_axi_reset_n);,1
faxil_master.v,614,assert(!i_axi_awvalid);,1
faxil_master.v,617,assert(!i_axi_wvalid);,1
faxil_master.v,620,assert(!i_axi_arvalid);,1
faxil_master.v,733,assert(f_axi_rd_outstanding == 0);,1
faxil_master.v,749,assert(f_axi_wr_outstanding == 0);,1
faxil_master.v,751,assert(f_axi_awr_outstanding == 0);,1
faxil_master.v,803,cover(cvr_writes == F_OPT_COVER_BURST);,1
faxil_master.v,821,cover(cvr_reads == F_OPT_COVER_BURST);,1
faxi_master.v,135,assert(F_LGDEPTH > 8);,1
faxi_master.v,191,assert(!i_axi_reset_n);,1
faxi_master.v,206,assume(!i_axi_reset_n);,1
faxi_master.v,210,assert(!i_axi_reset_n);,1
faxi_master.v,234,assume(!i_axi_reset_n);,1
faxi_master.v,238,assume(!i_axi_reset_n);,1
faxi_master.v,245,assert(!i_axi_reset_n);,1
faxi_master.v,249,assert(!i_axi_reset_n);,1
faxi_master.v,611,assert(f_axi_rd_nbursts <= f_axi_rd_outstanding);,1
faxi_master.v,645,"assert({ 8'h00, f_axi_rd_outstanding } <= { f_axi_rd_nbursts, 8'h0 });",1
faxi_master.v,808,assert(f_axi_wr_pending <= f_axi_wr_len + 1);,1
faxi_master.v,810,assert(f_axi_wr_pending <= 9'h100);,1
faxi_master.v,941,assert(f_axi_wr_pending <= 1);,1
faxi_master.v,944,assert(f_axi_wr_len == 0);,1
fwbc_master.v,337,cover(!i_wb_cyc && ack_count > 4);,1
fwbc_master.v,339,cover(!i_wb_cyc && ack_count > 3);,1
faxil_register.v,82,assume(!S_AXI_ARESETN);,1
faxil_register.v,136,assert(!S_AXIL_BVALID);,1
faxil_register.v,139,assert(S_AXIL_BVALID);,1
faxil_register.v,144,assert(!S_AXIL_RVALID);,1
faxil_register.v,147,assert(S_AXIL_RVALID);,1
xlnxdemo.v,809,assert(f_axi_awr_outstanding == f_axi_wr_outstanding);,1
xlnxdemo.v,934,cover(fw_rdcover[0]);,1
xlnxdemo.v,935,cover(fw_rdcover[1]);,1
xlnxdemo.v,936,cover(fw_rdcover[2]);,1
xlnxdemo.v,937,cover(fw_rdcover[3]);,1
xlnxdemo.v,938,cover(fw_rdcover[4]);,1
xlnxdemo.v,939,cover(fw_rdcover[5]); // cover(fw_rdcover[6]);,2
xlnxdemo.v,941,cover(fw_rdcover[7]);,1
xlnxdemo.v,942,cover(fw_rdcover[8]);,1
xlnxdemo.v,943,cover(fw_rdcover[9]);,1
xlnxdemo.v,944,cover(fw_rdcover[10]);,1
xlnxdemo.v,945,cover(fw_rdcover[11]);,1
xlnxdemo.v,946,cover(fw_rdcover[12]);,1
xlnxdemo.v,1052,cover(fw_wrcover[0]);,1
xlnxdemo.v,1053,cover(fw_wrcover[1]);,1
xlnxdemo.v,1054,cover(fw_wrcover[2]);,1
xlnxdemo.v,1055,cover(fw_wrcover[3]);,1
xlnxdemo.v,1056,cover(fw_wrcover[4]);,1
xlnxdemo.v,1057,cover(fw_wrcover[5]); // cover(fw_wrcover[6]);,2
xlnxdemo.v,1059,cover(fw_wrcover[7]);,1
xlnxdemo.v,1060,cover(fw_wrcover[8]);,1
xlnxdemo.v,1061,cover(fw_wrcover[9]);,1
xlnxdemo.v,1062,cover(fw_wrcover[11]);,1
xlnxdemo.v,1063,cover(fw_wrcover[12]);,1
xlnxdemo.v,1064,cover(fw_wrcover[13]);,1
xlnxdemo.v,1065,cover(fw_wrcover[14]);,1
xlnxdemo.v,1066,cover(fw_wrcover[15]);,1
xlnxdemo.v,1067,cover(fw_wrcover[16]);,1
xlnxdemo.v,1068,cover(fw_wrcover[17]);,1
xlnxdemo.v,1069,cover(fw_wrcover[18]);,1
xlnxdemo.v,1070,cover(fw_wrcover[19]);,1
xlnxdemo.v,1071,cover(fw_wrcover[20]);,1
xlnxdemo.v,1072,cover(fw_wrcover[21]);,1
xlnxdemo.v,1073,cover(fw_wrcover[22]);,1
xlnxdemo.v,1074,cover(fw_wrcover[23]);,1
xlnxdemo.v,1075,cover(fw_wrcover[24]);,1
fwb_master.v,523,assume(!i_wb_stall);,1
axi_addr_miter.v,26,assume(i_burst != 2'b11);,1
axi_addr_miter.v,29,assume(i_size <= DSZ);,1
axi_addr_miter.v,59,assume(aligned);,1
axi_addr_miter.v,62,assert(uut_next_addr == ref_next_addr);,1
axi_addr_miter.v,66,assume(i_last_addr[AW-1:12] == ref_next_addr[AW-1:12]);,1
fwbc_slave.v,337,cover(!i_wb_cyc && ack_count > 4);,1
fwbc_slave.v,339,cover(!i_wb_cyc && ack_count > 3);,1
xlnxstream_2018_3.v,258,assume(!M_AXIS_ARESETN);,1
xlnxstream_2018_3.v,266,assert(mst_exec_state == IDLE);,1
xlnxstream_2018_3.v,267,assert(read_pointer == 0);,1
xlnxstream_2018_3.v,268,assert(count == 0);,1
xlnxstream_2018_3.v,269,assert(!tx_done);,1
xlnxstream_2018_3.v,298,assert(count <= C_M_START_COUNT-1);,1
xlnxstream_2018_3.v,303,assert(!M_AXIS_TVALID);,1
xlnxstream_2018_3.v,304,assert(read_pointer == 0);,1
xlnxstream_2018_3.v,310,assert(read_pointer == NUMBER_OF_OUTPUT_WORDS);,1
xlnxstream_2018_3.v,315,assert(read_pointer <= NUMBER_OF_OUTPUT_WORDS);,1
xlnxstream_2018_3.v,319,assert(!M_AXIS_TVALID);,1
xlnxstream_2018_3.v,323,assert(M_AXIS_TVALID);,1
xlnxstream_2018_3.v,332,assert(count == C_M_START_COUNT-1);,1
xlnxstream_2018_3.v,362,cover(tx_done);,1
xlnxstream_2018_3.v,365,cover(&final_counter);,1
faxil_slave.v,190,assume(!i_axi_reset_n);,1
faxil_slave.v,194,assert(!i_axi_reset_n);,1
faxil_slave.v,216,assume(!i_axi_reset_n);,1
faxil_slave.v,220,assume(!i_axi_reset_n);,1
faxil_slave.v,227,assert(!i_axi_reset_n);,1
faxil_slave.v,231,assert(!i_axi_reset_n);,1
faxil_slave.v,614,assert(!i_axi_awready);,1
faxil_slave.v,617,assert(!i_axi_wready);,1
faxil_slave.v,620,assert(!i_axi_arready);,1
faxil_slave.v,733,assert(f_axi_rd_outstanding == 0);,1
faxil_slave.v,749,assert(f_axi_wr_outstanding == 0);,1
faxil_slave.v,751,assert(f_axi_awr_outstanding == 0);,1
faxil_slave.v,803,cover(cvr_writes == F_OPT_COVER_BURST);,1
faxil_slave.v,821,cover(cvr_reads == F_OPT_COVER_BURST);,1
fwb_register.v,75,assume(i_reset);,1
fwb_register.v,107,assert(i_wb_ack);,1
fwb_register.v,109,assert(!i_wb_ack);,1
faxi_slave.v,136,assert(F_LGDEPTH > 8);,1
faxi_slave.v,192,assume(!i_axi_reset_n);,1
faxi_slave.v,207,assume(!i_axi_reset_n);,1
faxi_slave.v,211,assert(!i_axi_reset_n);,1
faxi_slave.v,235,assume(!i_axi_reset_n);,1
faxi_slave.v,239,assume(!i_axi_reset_n);,1
faxi_slave.v,246,assert(!i_axi_reset_n);,1
faxi_slave.v,250,assert(!i_axi_reset_n);,1
faxi_slave.v,612,assert(f_axi_rd_nbursts <= f_axi_rd_outstanding);,1
faxi_slave.v,646,"assert({ 8'h00, f_axi_rd_outstanding } <= { f_axi_rd_nbursts, 8'h0 });",1
faxi_slave.v,809,assert(f_axi_wr_pending <= f_axi_wr_len + 1);,1
faxi_slave.v,811,assert(f_axi_wr_pending <= 9'h100);,1
faxi_slave.v,942,assert(f_axi_wr_pending <= 1);,1
faxi_slave.v,945,assert(f_axi_wr_len == 0);,1
sync_fifo.v,105,assume(rst_n);,1
sync_fifo.v,109,assert(level <= DEPTH);,1
hazard3_frontend.v,181,assert(!fifo_valid[1]);,1
hazard3_frontend.v,364,assert(ctr_flush_pending <= pending_fetches);,1
hazard3_frontend.v,365,assert(pending_fetches < 2'd3);,1
hazard3_frontend.v,514,assert(cir_vld <= 2);,1
hazard3_frontend.v,515,assert(cir_use <= cir_vld);,1
hazard3_frontend.v,517,assert(buf_level_next >= level_next_no_fetch);,1
hazard3_frontend.v,536,assert(buf_level != 2'h3);,1
hazard3_shift_barrel.v,55,assert(dout == din >> shamt);,1
hazard3_shift_barrel.v,57,assert(dout == din << shamt);,1
hazard3_instr_decompress.v,443,assert(uop_ctr == 4'h0 || in_uop_seq);,1
hazard3_instr_decompress.v,445,assert(in_uop_seq);,1
hazard3_instr_decompress.v,446,assert(instr_out_uop_stall || uop_ctr_nxt == 4'h0);,1
hazard3_power_ctrl.v,137,assert(past_sleeping);,1
hazard3_power_ctrl.v,139,assert(sleeping_on_wfi|| sleeping_on_block);,1
hazard3_power_ctrl.v,142,assert(!past_stall_release);,1
hazard3_power_ctrl.v,145,assert(allow_power_down || allow_clkgate);,1
hazard3_muldiv_seq.v,274,assert(op_rdy);,1
hazard3_muldiv_seq.v,290,assert(alive);,1
hazard3_core.v,448,assert(d_rs1_predecoded == d_rs1);,1
hazard3_core.v,450,assert(d_rs2_predecoded == d_rs2);,1
hazard3_core.v,453,assert(~|d_rs1);,1
hazard3_core.v,455,assert(~|d_rs2);,1
hazard3_core.v,548,assert(x_amo_phase == 3'h0 || x_amo_phase == 3'h2 || x_amo_phase == 3'h4);,1
hazard3_core.v,553,assert(x_unaligned_addr);,1
hazard3_core.v,560,assert(x_amo_phase == 3'h0);,1
hazard3_core.v,592,assert(x_amo_phase <= 3'h4);,1
hazard3_core.v,595,assert(x_amo_phase == 3'h0);,1
hazard3_core.v,598,assert(x_amo_phase == 3'h0);,1
hazard3_core.v,602,assert(!x_stall || m_stall);,1
hazard3_core.v,606,assert(x_unaligned_addr);,1
hazard3_core.v,610,assert(!x_unaligned_addr);,1
hazard3_core.v,617,assert(!m_stall);,1
hazard3_core.v,1092,assert(xm_except == EXCEPT_LOAD_FAULT || xm_except == EXCEPT_STORE_FAULT);,1
hazard3_core.v,1104,assert(xm_memop != MEMOP_NONE);,1
hazard3_core.v,1113,assert(!xm_except_to_d_mode);,1
hazard3_core.v,1114,assert(!xm_sleep_wfi);,1
hazard3_core.v,1115,assert(!xm_sleep_block);,1
hazard3_core.v,1116,assert(!unblock_out);,1
hazard3_core.v,1124,assert(!bus_aph_req_d);,1
hazard3_core.v,1134,assert(!bus_aph_req_d);,1
hazard3_core.v,1139,assert(xm_memop == MEMOP_NONE || xm_memop == MEMOP_AMO);,1
hazard3_core.v,1323,assert(m_reg_wen_if_nonzero);,1
hazard3_core.v,1325,assert(~|xm_rd);,1
hazard3_csr.v,1382,assume(except == EXCEPT_NONE || except == EXCEPT_MRET);,1
hazard3_csr.v,1409,assert(!wen);,1
hazard3_csr.v,1413,assert(except != EXCEPT_MRET);,1
hazard3_csr.v,1417,assert(except != EXCEPT_MRET);,1
hazard3_csr.v,1439,assert(trap_enter_vld);,1
hazard3_csr.v,1441,assert(!trap_is_irq);,1
hazard3_csr.v,1446,assert(except == EXCEPT_EBREAK);,1
hazard3_csr.v,1451,assert(!loadstore_dphase_pending);,1
hazard3_csr.v,1459,assert(trap_enter_vld);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
fftstage.v,407,assume(f_mpydelay > 1);,1
fftstage.v,417,assert(iaddr == 0);,1
fftstage.v,418,assert(wait_for_sync);,1
fftstage.v,419,assert(o_sync == 0);,1
fftstage.v,420,assert(oaddr == 0);,1
fftstage.v,421,assert(!b_started);,1
fftstage.v,422,assert(!o_sync);,1
fftstage.v,438,assume(!i_ce);,1
fftstage.v,441,assume(f_addr[LGSPAN]==1'b0);,1
fftstage.v,449,assert(iaddr == 0);,1
fftstage.v,455,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,465,assert(ib_a == f_left);,1
fftstage.v,466,assert(ib_b == f_right);,1
fftstage.v,467,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,492,assert(f_output_active == b_started);,1
fftstage.v,496,assert(!f_output_active);,1
fftstage.v,501,assert(oaddr == f_oaddr);,1
fftstage.v,503,assert(oaddr == 0);,1
fftstage.v,507,assume(!ob_sync);,1
fftstage.v,530,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
fftstage.v,535,assert(o_sync);,1
fftstage.v,537,assert(!o_sync);,1
fftstage.v,541,assert(o_data == f_oleft);,1
fftstage.v,546,assert(pre_ovalue == f_oright);,1
fftstage.v,551,assert(o_data == f_oright);,1
hwbfly.v,674,assume(i_ce);,1
hwbfly.v,686,assume(!i_ce);,1
hwbfly.v,693,assume(!i_ce);,1
hwbfly.v,730,assert(left_sr == f_sumrx);,1
hwbfly.v,731,assert(left_si == f_sumix);,1
hwbfly.v,732,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,736,assert(mpy_r == 0);,1
hwbfly.v,737,assert(mpy_i == 0);,1
hwbfly.v,741,assert(mpy_r == 0);,1
hwbfly.v,742,assert(mpy_i == 0);,1
hwbfly.v,747,assert(mpy_r == f_difrx);,1
hwbfly.v,748,assert(mpy_i == f_difix);,1
hwbfly.v,753,assert(mpy_r == -f_difix);,1
hwbfly.v,754,assert(mpy_i == f_difrx);,1
hwbfly.v,759,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,760,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,765,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,766,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,796,assert(p_one == 0);,1
hwbfly.v,798,assert(p_two == 0);,1
hwbfly.v,801,assert(p_one == f_predifrx);,1
hwbfly.v,803,assert(p_two == f_predifix);,1
hwbfly.v,806,assert(p_one == 0);,1
hwbfly.v,808,assert(p_two == 0);,1
hwbfly.v,812,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,814,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,818,assert(p_three == 0);,1
hwbfly.v,820,assert(p_three == 0);,1
hwbfly.v,823,assert(p_three == f_sumdiff);,1
hwbfly.v,825,assert(p_three == f_sumcoef);,1
hwbfly.v,828,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,829,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,830,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1008,assume(i_ce);,1
butterfly.v,1016,assume(i_ce);,1
butterfly.v,1026,assume(!i_ce);,1
butterfly.v,1031,assume(i_ce);,1
butterfly.v,1036,assume(i_ce);,1
butterfly.v,1045,assume(!i_ce);,1
butterfly.v,1052,assume(i_ce);,1
butterfly.v,1062,assume(i_ce);,1
butterfly.v,1101,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,1102,assert(left_sr == f_sumrx);,1
butterfly.v,1103,assert(left_si == f_sumix);,1
butterfly.v,1104,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,1108,assert(mpy_r == 0);,1
butterfly.v,1109,assert(mpy_i == 0);,1
butterfly.v,1113,assert(mpy_r == 0);,1
butterfly.v,1114,assert(mpy_i == 0);,1
butterfly.v,1119,assert(mpy_r == f_difrx);,1
butterfly.v,1120,assert(mpy_i == f_difix);,1
butterfly.v,1125,assert(mpy_r == -f_difix);,1
butterfly.v,1126,assert(mpy_i == f_difrx);,1
butterfly.v,1131,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,1132,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,1137,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,1138,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,1168,assert(p_one == 0);,1
butterfly.v,1170,assert(p_two == 0);,1
butterfly.v,1173,assert(p_one == f_predifrx);,1
butterfly.v,1175,assert(p_two == f_predifix);,1
butterfly.v,1178,assert(p_one == 0);,1
butterfly.v,1180,assert(p_two == 0);,1
butterfly.v,1184,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,1186,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,1190,assert(p_three == 0);,1
butterfly.v,1192,assert(p_three == 0);,1
butterfly.v,1195,assert(p_three == f_sumdiff);,1
butterfly.v,1197,assert(p_three == f_sumcoef);,1
butterfly.v,1202,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1203,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1204,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1224,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1225,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1226,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1227,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,198,assert(o_out == f_addr_value);,1
bitreverse.v,202,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,257,assume(i_ce);,1
longbimpy.v,448,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,450,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,459,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,460,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,467,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,473,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,280,assume(!i_sync);,1
qtrstage.v,283,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,291,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,292,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,293,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,294,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,296,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,297,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,303,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,304,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,305,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,306,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,313,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,314,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,320,assert(!o_sync);,1
qtrstage.v,321,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,322,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,328,assert(!o_sync);,1
qtrstage.v,329,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,330,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,335,assume(i_sync);,1
qtrstage.v,343,assert(!wait_for_sync);,1
qtrstage.v,348,assert(!o_sync);,1
qtrstage.v,351,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,352,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,354,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,355,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,214,assume(!i_sync);,1
laststage.v,217,assert(stage == f_state[0]);,1
laststage.v,222,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,223,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,229,assert(!o_sync);,1
laststage.v,230,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,231,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,237,assert(!f_rsyncd);,1
laststage.v,238,assert(!o_sync);,1
laststage.v,239,assert(f_state == 0);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
axi2axilite.v,1013,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1018,assert(m_axi_awvalid);,1
axi2axilite.v,1021,assert(!skids_awready);,1
axi2axilite.v,1024,assert(!skids_awready);,1
axi2axilite.v,1026,assert(!skids_awready);,1
axi2axilite.v,1031,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1051,assert(rid == S_AXI_RID);,1
axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
axi2axilite.v,1059,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1064,assert(m_axi_arvalid);,1
axi2axilite.v,1065,assert(!skids_arready);,1
axi2axilite.v,1083,assume(!skids_awvalid);,1
axi2axilite.v,1084,assume(!skids_wvalid);,1
axi2axilite.v,1085,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1086,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1087,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1088,assert(!skidm_bvalid);,1
axi2axilite.v,1089,assert(!S_AXI_BVALID);,1
axi2axilite.v,1098,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1099,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1100,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1132,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1134,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1158,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1160,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
axi_cdma.v,988,assert(!clear_read_pipeline);,1
axi_cdma.v,991,assert(!clear_read_pipeline);,1
axi_cdma.v,994,assert(!clear_read_pipeline);,1
axi_cdma.v,1808,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1812,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1892,assert(!M_AXI_AWVALID);,1
axi_cdma.v,1893,assert(!M_AXI_WVALID);,1
axi_cdma.v,1894,assert(!M_AXI_ARVALID);,1
axi_cdma.v,1913,assert(f_length != 0);,1
axi_cdma.v,1914,assert(f_length[LGLEN] == 0);,1
axi_cdma.v,1916,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1917,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1995,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1996,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1997,assert(f_length[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2004,assert(!extra_realignment_write);,1
axi_cdma.v,2006,assert(!extra_realignment_write);,1
axi_cdma.v,2008,assert(extra_realignment_write);,1
axi_cdma.v,2012,assert(r_partial_outvalid);,1
axi_cdma.v,2019,assert(f_extra_realignment_read);,1
axi_cdma.v,2021,assert(f_extra_realignment_read == extra_realignment_read);,1
axi_cdma.v,2030,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2034,assert(!r_int);,1
axi_cdma.v,2063,assert(M_AXI_WVALID);,1
axi_cdma.v,2081,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
axi_cdma.v,2087,assert(r_len[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2088,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2089,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2095,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2096,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2097,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2103,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2105,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2109,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2114,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2140,assert(reads_remaining_w == 0);,1
axi_cdma.v,2141,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2142,assert(writes_remaining_w == 0);,1
axi_cdma.v,2167,assert(r_partial_outvalid);,1
axi_cdma.v,2169,assert(!fifo_empty || r_abort || r_err);,1
axi_cdma.v,2195,assert(!M_AXI_WVALID);,1
axi_cdma.v,2202,assert(fifo_data_available == 0);,1
axi_cdma.v,2286,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2290,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
axi_cdma.v,2292,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2299,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2302,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2304,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2320,assert(read_address == f_read_address);,1
axi_cdma.v,2322,assert(read_address[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2326,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2331,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2356,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
axi_cdma.v,2371,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
axi_cdma.v,2379,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
axi_cdma.v,2396,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
axi_cdma.v,2403,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2404,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2406,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
axi_cdma.v,2421,assert(readlen_w != 0);,1
axi_cdma.v,2444,assert(!r_done);,1
axi_cdma.v,2446,assert(!r_done);,1
axi_cdma.v,2454,assert(r_done);,1
axi_cdma.v,2466,assert(M_AXI_WSTRB == 0);,1
axi_cdma.v,2484,assert(reads_remaining_w == 0);,1
axi_cdma.v,2486,assert(reads_remaining_w > 0);,1
axi_cdma.v,2489,assert(readlen_w <= reads_remaining_w);,1
axi_cdma.v,2497,assert(M_AXI_BREADY);,1
axi_cdma.v,2501,assert(M_AXI_RREADY);,1
axi_cdma.v,2524,assert(M_AXI_ARVALID);,1
axi_cdma.v,2528,assert(M_AXI_AWVALID);,1
axi_cdma.v,2549,assert(M_AXI_WVALID);,1
axi_cdma.v,2570,assert(!S_AXIL_BVALID);,1
axi_cdma.v,2571,assert(!S_AXIL_RVALID);,1
axi_cdma.v,2573,assert(!M_AXI_AWVALID);,1
axi_cdma.v,2574,assert(!M_AXI_WVALID);,1
axi_cdma.v,2575,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2577,assert(write_bursts_outstanding == 0);,1
axi_cdma.v,2578,assert(write_requests_remaining == 0);,1
axi_cdma.v,2580,assert(!phantom_read);,1
axi_cdma.v,2581,assert(!phantom_write);,1
axi_cdma.v,2582,assert(!r_busy);,1
axi_cdma.v,2583,assert(read_bursts_outstanding == 0);,1
axi_cdma.v,2584,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2586,assert(r_len == 0);,1
axi_cdma.v,2587,assert(zero_len);,1
axi_cdma.v,2589,assert(write_count == 0);,1
axi_cdma.v,2590,assert(!M_AXI_WLAST);,1
axi_cdma.v,2591,assert(M_AXI_AWLEN == 0);,1
axi_cdma.v,2592,assert(!r_write_fifo);,1
axi_cdma.v,2593,assert(r_src_addr == 0);,1
axi_cdma.v,2594,assert(r_dst_addr == 0);,1
axi_cdma.v,2598,assert(ADDRLSB + LGMAXBURST <= 12);,1
axi_cdma.v,2636,assume(f_const_posn < f_length);,1
axi_cdma.v,2674,assert(f_shifted_wstrb[0]);,1
axi_cdma.v,2675,assert(f_shifted_write[7:0] == f_const_byte);,1
axi_cdma.v,2677,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
axi_cdma.v,2712,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
axi_cdma.v,2749,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
axi_cdma.v,2810,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
axi_cdma.v,2822,cover(!r_busy && r_err);,1
axi_cdma.v,2826,cover(!r_busy && r_abort);,1
axi_cdma.v,2830,cover(reads_remaining_w == 0);,1
axi_cdma.v,2834,cover(reads_remaining_w == 0 && fifo_empty);,1
sfifo.v,269,assert(o_fill == f_fill);,1
sfifo.v,273,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,277,assert(o_full == r_full);,1
sfifo.v,284,assert(o_empty == r_empty);,1
sfifo.v,295,assert(r_empty);,1
sfifo.v,299,assert(!r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,308,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,310,assert(o_data == i_data);,1
sfifo.v,366,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,372,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,385,assert(f_first_in_fifo);,1
sfifo.v,387,assert(!f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,401,assert(f_second_in_fifo);,1
sfifo.v,408,assert(f_second_in_fifo);,1
sfifo.v,410,assert(!f_second_in_fifo);,1
sfifo.v,413,assert(f_first_in_fifo);,1
sfifo.v,416,assert(f_second_in_fifo);,1
sfifo.v,419,assert(f_first_in_fifo);,1
sfifo.v,421,assert(o_data == f_first_data);,1
sfifo.v,423,assert(!f_first_in_fifo);,1
sfifo.v,424,assert(o_data == f_second_data);,1
sfifo.v,451,cover(f_was_full && f_empty);,1
skidbuffer.v,251,assume(i_reset);,1
skidbuffer.v,269,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,273,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,279,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,299,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,322,assert(o_ready);,1
skidbuffer.v,353,assert(o_valid == i_valid);,1
skidbuffer.v,363,assert(o_valid);,1
skidbuffer.v,366,assert(!o_valid);,1
skidbuffer.v,377,assert(o_ready);,1
skidbuffer.v,387,assert(o_data == 0);,1
skidbuffer.v,391,assert(w_data == 0);,1
skidbuffer.v,459,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,465,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
axi2axilite.v,1013,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1018,assert(m_axi_awvalid);,1
axi2axilite.v,1021,assert(!skids_awready);,1
axi2axilite.v,1024,assert(!skids_awready);,1
axi2axilite.v,1026,assert(!skids_awready);,1
axi2axilite.v,1031,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1051,assert(rid == S_AXI_RID);,1
axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
axi2axilite.v,1059,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1064,assert(m_axi_arvalid);,1
axi2axilite.v,1065,assert(!skids_arready);,1
axi2axilite.v,1083,assume(!skids_awvalid);,1
axi2axilite.v,1084,assume(!skids_wvalid);,1
axi2axilite.v,1085,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1086,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1087,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1088,assert(!skidm_bvalid);,1
axi2axilite.v,1089,assert(!S_AXI_BVALID);,1
axi2axilite.v,1098,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1099,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1100,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1132,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1134,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1158,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1160,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
sfifo.v,269,assert(o_fill == f_fill);,1
sfifo.v,273,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,277,assert(o_full == r_full);,1
sfifo.v,284,assert(o_empty == r_empty);,1
sfifo.v,295,assert(r_empty);,1
sfifo.v,299,assert(!r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,308,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,310,assert(o_data == i_data);,1
sfifo.v,366,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,372,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,385,assert(f_first_in_fifo);,1
sfifo.v,387,assert(!f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,401,assert(f_second_in_fifo);,1
sfifo.v,408,assert(f_second_in_fifo);,1
sfifo.v,410,assert(!f_second_in_fifo);,1
sfifo.v,413,assert(f_first_in_fifo);,1
sfifo.v,416,assert(f_second_in_fifo);,1
sfifo.v,419,assert(f_first_in_fifo);,1
sfifo.v,421,assert(o_data == f_first_data);,1
sfifo.v,423,assert(!f_first_in_fifo);,1
sfifo.v,424,assert(o_data == f_second_data);,1
sfifo.v,451,cover(f_was_full && f_empty);,1
skidbuffer.v,251,assume(i_reset);,1
skidbuffer.v,269,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,273,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,279,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,299,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,322,assert(o_ready);,1
skidbuffer.v,353,assert(o_valid == i_valid);,1
skidbuffer.v,363,assert(o_valid);,1
skidbuffer.v,366,assert(!o_valid);,1
skidbuffer.v,377,assert(o_ready);,1
skidbuffer.v,387,assert(o_data == 0);,1
skidbuffer.v,391,assert(w_data == 0);,1
skidbuffer.v,459,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,465,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
hwbfly.v,537,assume(i_ce);,1
hwbfly.v,549,assume(!i_ce);,1
hwbfly.v,556,assume(!i_ce);,1
hwbfly.v,599,assert(left_sr == f_sumrx);,1
hwbfly.v,600,assert(left_si == f_sumix);,1
hwbfly.v,601,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,605,assert(mpy_r == 0);,1
hwbfly.v,606,assert(mpy_i == 0);,1
hwbfly.v,610,assert(mpy_r == 0);,1
hwbfly.v,611,assert(mpy_i == 0);,1
hwbfly.v,616,assert(mpy_r == f_difrx);,1
hwbfly.v,617,assert(mpy_i == f_difix);,1
hwbfly.v,622,assert(mpy_r == -f_difix);,1
hwbfly.v,623,assert(mpy_i == f_difrx);,1
hwbfly.v,628,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,629,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,634,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,635,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,669,assert(p_one == 0);,1
hwbfly.v,671,assert(p_two == 0);,1
hwbfly.v,674,assert(p_one == f_predifrx);,1
hwbfly.v,676,assert(p_two == f_predifix);,1
hwbfly.v,679,assert(p_one == 0);,1
hwbfly.v,681,assert(p_two == 0);,1
hwbfly.v,685,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,687,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,691,assert(p_three == 0);,1
hwbfly.v,693,assert(p_three == 0);,1
hwbfly.v,696,assert(p_three == f_sumdiff);,1
hwbfly.v,698,assert(p_three == f_sumcoef);,1
hwbfly.v,701,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,702,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,703,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,807,assume(i_ce);,1
butterfly.v,815,assume(i_ce);,1
butterfly.v,825,assume(!i_ce);,1
butterfly.v,830,assume(i_ce);,1
butterfly.v,835,assume(i_ce);,1
butterfly.v,844,assume(!i_ce);,1
butterfly.v,851,assume(i_ce);,1
butterfly.v,861,assume(i_ce);,1
butterfly.v,900,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,901,assert(left_sr == f_sumrx);,1
butterfly.v,902,assert(left_si == f_sumix);,1
butterfly.v,903,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,907,assert(mpy_r == 0);,1
butterfly.v,908,assert(mpy_i == 0);,1
butterfly.v,912,assert(mpy_r == 0);,1
butterfly.v,913,assert(mpy_i == 0);,1
butterfly.v,918,assert(mpy_r == f_difrx);,1
butterfly.v,919,assert(mpy_i == f_difix);,1
butterfly.v,924,assert(mpy_r == -f_difix);,1
butterfly.v,925,assert(mpy_i == f_difrx);,1
butterfly.v,930,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,931,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,936,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,937,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,967,assert(p_one == 0);,1
butterfly.v,969,assert(p_two == 0);,1
butterfly.v,972,assert(p_one == f_predifrx);,1
butterfly.v,974,assert(p_two == f_predifix);,1
butterfly.v,977,assert(p_one == 0);,1
butterfly.v,979,assert(p_two == 0);,1
butterfly.v,983,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,985,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,989,assert(p_three == 0);,1
butterfly.v,991,assert(p_three == 0);,1
butterfly.v,994,assert(p_three == f_sumdiff);,1
butterfly.v,996,assert(p_three == f_sumcoef);,1
butterfly.v,1001,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1002,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1003,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1023,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1024,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1025,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1026,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,152,assert(o_out == f_addr_value);,1
bitreverse.v,156,assert(wraddr[LGSIZE-1:0] == 1);,1
ifftstage.v,291,assume(f_mpydelay > 1);,1
ifftstage.v,301,assert(iaddr == 0);,1
ifftstage.v,302,assert(wait_for_sync);,1
ifftstage.v,303,assert(o_sync == 0);,1
ifftstage.v,304,assert(oaddr == 0);,1
ifftstage.v,305,assert(!b_started);,1
ifftstage.v,306,assert(!o_sync);,1
ifftstage.v,323,assume(!i_ce);,1
ifftstage.v,326,assume(f_addr[LGSPAN]==1'b0);,1
ifftstage.v,336,assert(iaddr == 0);,1
ifftstage.v,342,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
ifftstage.v,351,assert(ib_a == f_left);,1
ifftstage.v,352,assert(ib_b == f_right);,1
ifftstage.v,353,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
ifftstage.v,380,assert(f_output_active == b_started);,1
ifftstage.v,384,assert(!f_output_active);,1
ifftstage.v,388,assert(oaddr == f_oaddr);,1
ifftstage.v,390,assert(oaddr == 0);,1
ifftstage.v,394,assume(!ob_sync);,1
ifftstage.v,417,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
ifftstage.v,421,assert(o_sync);,1
ifftstage.v,423,assert(!o_sync);,1
ifftstage.v,427,assert(o_data == f_oleft);,1
ifftstage.v,431,assert(pre_ovalue == f_oright);,1
ifftstage.v,435,assert(o_data == f_oright);,1
longbimpy.v,217,assume(i_ce);,1
longbimpy.v,404,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,406,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,415,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,416,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,423,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,429,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,275,assume(!i_sync);,1
qtrstage.v,278,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,291,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,292,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,293,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,294,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,296,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,297,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,303,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,304,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,305,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,306,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,313,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,314,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,320,assert(!o_sync);,1
qtrstage.v,321,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,322,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,328,assert(!o_sync);,1
qtrstage.v,329,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,330,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,335,assume(i_sync);,1
qtrstage.v,343,assert(!wait_for_sync);,1
qtrstage.v,348,assert(!o_sync);,1
qtrstage.v,351,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,352,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,354,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,355,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,178,assume(!i_sync);,1
laststage.v,181,assert(stage == f_state[0]);,1
laststage.v,186,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,187,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,193,assert(!o_sync);,1
laststage.v,194,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,195,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,201,assert(!f_rsyncd);,1
laststage.v,202,assert(!o_sync);,1
laststage.v,203,assert(f_state == 0);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2106,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2109,restrict property (resetn != $initstate);,1
picorv32.v,2119,assert (mem_wstrb == 0);,1
picorv32.v,2131,assert (ok);,1
picorv32.v,2149,assert(mem_valid);,1
picorv32.v,2150,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2151,assert(mem_wstrb == 0);,1
picorv32.v,2154,assert(mem_valid);,1
picorv32.v,2155,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2156,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2157,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2160,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
notrap_validop.v,29,restrict(&mem_ready_stall == 0);,1
notrap_validop.v,39,assume(!mem_ready);,1
notrap_validop.v,42,assert(!trap);,1
mulcmp.v,60,assert(pcpi_wr_0 == pcpi_wr_1);,1
mulcmp.v,61,assert(pcpi_rd_0 == pcpi_rd_1);,1
mulcmp.v,70,assert(pcpi_wr_0 == pcpi_wr_ref);,1
mulcmp.v,71,assert(pcpi_rd_0 == pcpi_rd_ref);,1
mulcmp.v,81,assert(pcpi_wr_1 == pcpi_wr_ref);,1
mulcmp.v,82,assert(pcpi_rd_1 == pcpi_rd_ref);,1
tracecmp3.v,73,assert(cpu0_mem_addr == cpu1_mem_addr);,1
tracecmp3.v,74,assert(cpu0_mem_wstrb == cpu1_mem_wstrb);,1
tracecmp3.v,81,assert(trace_buffer_cpu0 == trace_buffer_cpu1);,1
tracecmp2.v,36,assume(!mem_ready_0 == 0);,1
tracecmp2.v,38,assume(mem_ready_1 == 0);,1
tracecmp2.v,43,assume(last_mem_rdata == mem_rdata);,1
tracecmp2.v,52,assert(mem_addr_0 == mem_addr_1);,1
tracecmp2.v,53,assert(mem_wstrb_0 == mem_wstrb_1);,1
tracecmp2.v,74,assume(!mem_xfer_0);,1
tracecmp2.v,77,assert(cmp_mem_addr == mem_addr_1);,1
tracecmp2.v,78,assert(cmp_mem_wstrb == mem_wstrb_1);,1
tracecmp2.v,86,assume(!mem_xfer_1);,1
tracecmp2.v,89,assert(cmp_mem_addr == mem_addr_0);,1
tracecmp2.v,90,assert(cmp_mem_wstrb == mem_wstrb_0);,1
tracecmp2.v,109,assert(trace_data_0 == trace_data_1);,1
tracecmp2.v,122,assume(!trace_valid_0);,1
tracecmp2.v,125,assert(cmp_trace_data == trace_data_1);,1
tracecmp2.v,129,assume(!trace_valid_1);,1
tracecmp2.v,132,assert(cmp_trace_data == trace_data_0);,1
axicheck2.v,116,assert(trap_0 == trap_1 );,1
axicheck2.v,117,assert(mem_axi_awvalid_0 == mem_axi_awvalid_1);,1
axicheck2.v,118,assert(mem_axi_awaddr_0 == mem_axi_awaddr_1 );,1
axicheck2.v,119,assert(mem_axi_awprot_0 == mem_axi_awprot_1 );,1
axicheck2.v,120,assert(mem_axi_wvalid_0 == mem_axi_wvalid_1 );,1
axicheck2.v,121,assert(mem_axi_wdata_0 == mem_axi_wdata_1 );,1
axicheck2.v,122,assert(mem_axi_wstrb_0 == mem_axi_wstrb_1 );,1
axicheck2.v,123,assert(mem_axi_bready_0 == mem_axi_bready_1 );,1
axicheck2.v,124,assert(mem_axi_arvalid_0 == mem_axi_arvalid_1);,1
axicheck2.v,125,assert(mem_axi_araddr_0 == mem_axi_araddr_1 );,1
axicheck2.v,126,assert(mem_axi_arprot_0 == mem_axi_arprot_1 );,1
axicheck2.v,127,assert(mem_axi_rready_0 == mem_axi_rready_1 );,1
axicheck.v,84,restrict(timeout_aw != 15);,1
axicheck.v,85,restrict(timeout_w != 15);,1
axicheck.v,86,restrict(timeout_b != 15);,1
axicheck.v,87,restrict(timeout_ar != 15);,1
axicheck.v,88,restrict(timeout_r != 15);,1
axicheck.v,89,restrict(timeout_ex != 15);,1
axicheck.v,90,restrict(!trap);,1
axicheck.v,97,assert(!mem_axi_awvalid);,1
axicheck.v,98,assert(!mem_axi_wvalid );,1
axicheck.v,99,assume(!mem_axi_bvalid );,1
axicheck.v,100,assert(!mem_axi_arvalid);,1
axicheck.v,101,assume(!mem_axi_rvalid );,1
axicheck.v,106,assert(!mem_axi_awvalid);,1
axicheck.v,110,assert(!mem_axi_wvalid);,1
axicheck.v,114,assert(!mem_axi_arvalid);,1
axicheck.v,122,assert(!expect_rvalid);,1
axicheck.v,126,assert(!expect_bvalid_aw);,1
axicheck.v,127,assert(!expect_bvalid_w);,1
axicheck.v,131,assume(!mem_axi_bvalid);,1
axicheck.v,135,assume(!mem_axi_rvalid);,1
axicheck.v,150,assert(mem_axi_awvalid);,1
axicheck.v,162,assert(mem_axi_arvalid);,1
axicheck.v,174,assert(mem_axi_wvalid);,1
axicheck.v,188,assume(mem_axi_bvalid);,1
axicheck.v,198,assume(mem_axi_rvalid);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
assign2_vendingmachie.v,36,assert(out_dispense == 1'b1);,1
assign2_vendingmachie.v,37,assert(out_change == 4'b0000);,1
assign2_vendingmachie.v,48,assert(out_dispense == 1'b1);,1
assign2_vendingmachie.v,49,assert(out_change == 4'b0101);,1
assign2_vendingmachie.v,60,assert(out_dispense == 1'b1);,1
assign2_vendingmachie.v,61,assert(out_change == 4'b0000);,1
assign2_vendingmachie.v,72,assert(out_dispense == 1'b0);,1
picorv32a.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32a.v,2107,restrict property (resetn != $initstate);,1
picorv32a.v,2117,assert (mem_wstrb == 0);,1
picorv32a.v,2129,assert (ok);,1
picorv32a.v,2147,assert(mem_valid);,1
picorv32a.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2149,assert(mem_wstrb == 0);,1
picorv32a.v,2152,assert(mem_valid);,1
picorv32a.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32a.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32a.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32a.v,2158,assert(!mem_valid || mem_ready);,1
wbqspiflash.v,1654,assert(f_nbits != 0);,1
wbqspiflash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
wbqspiflash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
wbqspiflash.v,1695,assert(!o_cs_n);,1
wbqspiflash.v,1711,assert(o_sck);,1
wbqspiflash.v,1736,assert(!o_cs_n);,1
wbqspiflash.v,1752,assert(f_nsent == f_nbits);,1
zipdiv.v,398,assert(!o_busy);,1
zipdiv.v,399,assert(!o_valid);,1
zipdiv.v,400,assert(!o_err);,1
zipdiv.v,402,assert(!r_busy);,1
zipdiv.v,403,assert(!zero_divisor);,1
zipdiv.v,404,assert(r_bit==0);,1
zipdiv.v,405,assert(!last_bit);,1
zipdiv.v,406,assert(!pre_sign);,1
zipdiv.v,407,assert(!r_z);,1
zipdiv.v,408,assert(r_dividend==0);,1
zipdiv.v,409,assert(o_quotient==0);,1
zipdiv.v,410,assert(!r_c);,1
zipdiv.v,411,assert(r_divisor==0);,1
zipdiv.v,423,assert(o_valid);,1
zipdiv.v,434,assert(o_valid);,1
zipdiv.v,438,assert(!pre_sign);,1
zipdiv.v,442,assert(pre_sign);,1
zipdiv.v,450,assert(o_busy);,1
zipdiv.v,454,assert(!o_valid);,1
zipdiv.v,462,assert(w_n == o_quotient[BW-1]);,1
zipdiv.v,466,assert(!o_busy);,1
zipdiv.v,493,assert(o_err);,1
zipdiv.v,502,assert(r_divisor[BW-2:0] == 0);,1
zipdiv.v,511,assert(r_divisor[2*BW-2]==0);,1
zipdiv.v,515,assert(o_quotient[0]);,1
zipdiv.v,517,assert(!o_quotient[0]);,1
tb.v,21,assert(io_out[0] == 1);,1
tb.v,25,assert(io_out[0] == 0);,1
tb.v,34,assert(io_out[0] == 1);,1
tb.v,38,assert(io_out[0] == 0);,1
tb.v,47,assert(io_out[0] == 1);,1
tb.v,56,assert(io_out[0] == 1);,1
sfifo.v,268,assert(o_fill == f_fill);,1
sfifo.v,272,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,276,assert(o_full == r_full);,1
sfifo.v,283,assert(o_empty == r_empty);,1
sfifo.v,294,assert(r_empty);,1
sfifo.v,298,assert(!r_empty);,1
sfifo.v,300,assert(!r_empty);,1
sfifo.v,307,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,309,assert(o_data == i_data);,1
sfifo.v,365,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,371,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,384,assert(f_first_in_fifo);,1
sfifo.v,386,assert(!f_first_in_fifo);,1
sfifo.v,395,assert(!f_first_in_fifo);,1
sfifo.v,400,assert(f_second_in_fifo);,1
sfifo.v,407,assert(f_second_in_fifo);,1
sfifo.v,409,assert(!f_second_in_fifo);,1
sfifo.v,412,assert(f_first_in_fifo);,1
sfifo.v,415,assert(f_second_in_fifo);,1
sfifo.v,418,assert(f_first_in_fifo);,1
sfifo.v,420,assert(o_data == f_first_data);,1
sfifo.v,422,assert(!f_first_in_fifo);,1
sfifo.v,423,assert(o_data == f_second_data);,1
sfifo.v,450,cover(f_was_full && f_empty);,1
afifo.v,583,assume(i_wclk == now_wclk);,1
afifo.v,584,assume(i_rclk == now_rclk);,1
afifo.v,595,assume(!pre_wclk && !wclk);,1
afifo.v,596,assume(!pre_rclk && !i_rclk);,1
afifo.v,740,cover(o_rd_empty);,1
afifo.v,741,cover(!o_rd_empty);,1
afifo.v,742,cover(f_state == 2'b01);,1
afifo.v,743,cover(f_state == 2'b10);,1
afifo.v,744,cover(f_state == 2'b11);,1
afifo.v,745,cover(&f_fill[MSB-1:0]);,1
afifo.v,747,cover(i_rd);,1
afifo.v,748,cover(i_rd && !o_rd_empty);,1
afifo.v,769,cover(o_wr_full);,1
afifo.v,770,cover(o_rd_empty && cvr_full);,1
afifo.v,771,cover(o_rd_empty && f_fill == 0 && cvr_full);,1
afifo.v,790,cover(cvr_nearly_full && i_wr_reset_n);,1
afifo.v,791,cover(o_rd_empty && cvr_nearly_full);,1
afifo.v,792,cover(o_rd_empty && f_fill == 0 && cvr_nearly_full);,1
dsp_abc9_3.v,3,assert property (P == 42*42);,1
generate.v,196,assert property (out1 == 4);,1
generate.v,197,assert property (out2 == 2);,1
generate.v,198,assert property (out3 == 7);,1
generate.v,199,assert property (cond.sub_out1 == 4);,1
generate.v,200,assert property (cond.sub_out2 == 2);,1
generate.v,201,assert property (cond.sub_out3 == 7);,1
asserts.v,8,assert(state < 3);,1
asserts.v,13,assert property (y !== 1'b1);,1
initval1.v,20,"assert property (foo == {last_bar[3:2], bar[1:0]});",1
asserts_seq.v,16,assert(a_old != b);,1
asserts_seq.v,33,assert(a_old != b);,1
asserts_seq.v,50,assert(a_old != b);,1
asserts_seq.v,67,"assert(a_old == b); // <-- this will fail end endmodule module test_005(clk, a, a_old, b);",5
asserts_seq.v,84,assert(a_old != b);,1
sign_array_query_3.v,7,assert (good);,1
sign_array_query_1.v,8,assert (good);,1
sign_array_query_2.v,7,assert (good);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
immediate_generator_tb.v,16,assert (immediate === 32'b00000000000000000001001101000100);,1
immediate_generator_tb.v,21,assert (immediate === 32'b00000000000000000010001101000100);,1
immediate_generator_tb.v,26,assert (immediate === 32'b11111111111111111011101100000000);,1
immediate_generator_tb.v,31,assert (immediate === 32'b00000000000000000000010000000000);,1
immediate_generator_tb.v,36,assert (immediate === 32'b11111111111110000000000000001011);,1
immediate_generator_tb.v,41,assert (immediate === 32'b00000000000000000000000001000000);,1
immediate_generator_tb.v,46,assert (immediate === 32'b00000000000000000000000000000000);,1
picorv32.v,2039,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2042,restrict property (resetn != $initstate);,1
picorv32.v,2052,assert (mem_wstrb == 0);,1
picorv32.v,2064,assert (ok);,1
picorv32.v,2082,assert(mem_valid);,1
picorv32.v,2083,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2084,assert(mem_wstrb == 0);,1
picorv32.v,2087,assert(mem_valid);,1
picorv32.v,2088,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2089,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2090,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2093,assert(!mem_valid || mem_ready);,1
sudoku.v,25,assume(sudoku_grid[i][j] <= 4'd9);,1
sudoku.v,26,assume(sudoku_grid[i][j] >= 4'd1);,1
sudoku.v,39,assume(sudoku_grid[i][j] !== sudoku_grid[i][k]);,1
sudoku.v,52,assume(sudoku_grid[j][i] !== sudoku_grid[k][i]);,1
sudoku.v,84,assume(sudoku_grid[0][0]==5);,1
sudoku.v,85,assume(sudoku_grid[0][2]==7);,1
sudoku.v,86,assume(sudoku_grid[0][3]==2);,1
sudoku.v,87,assume(sudoku_grid[0][7]==9);,1
sudoku.v,89,assume(sudoku_grid[1][2]==6);,1
sudoku.v,90,assume(sudoku_grid[1][4]==3);,1
sudoku.v,91,assume(sudoku_grid[1][6]==7);,1
sudoku.v,92,assume(sudoku_grid[1][8]==1);,1
sudoku.v,94,assume(sudoku_grid[2][0]==4);,1
sudoku.v,95,assume(sudoku_grid[2][7]==6);,1
sudoku.v,97,assume(sudoku_grid[3][0]==1);,1
sudoku.v,98,assume(sudoku_grid[3][3]==4);,1
sudoku.v,99,assume(sudoku_grid[3][4]==9);,1
sudoku.v,100,assume(sudoku_grid[3][8]==7);,1
sudoku.v,102,assume(sudoku_grid[4][3]==5);,1
sudoku.v,103,assume(sudoku_grid[4][5]==8);,1
sudoku.v,105,assume(sudoku_grid[5][0]==8);,1
sudoku.v,106,assume(sudoku_grid[5][4]==2);,1
sudoku.v,107,assume(sudoku_grid[5][5]==7);,1
sudoku.v,108,assume(sudoku_grid[5][8]==5);,1
sudoku.v,110,assume(sudoku_grid[6][1]==7);,1
sudoku.v,111,assume(sudoku_grid[6][8]==9);,1
sudoku.v,113,assume(sudoku_grid[7][0]==2);,1
sudoku.v,114,assume(sudoku_grid[7][2]==9);,1
sudoku.v,115,assume(sudoku_grid[7][4]==8);,1
sudoku.v,116,assume(sudoku_grid[7][6]==6);,1
sudoku.v,118,assume(sudoku_grid[8][1]==4);,1
sudoku.v,119,assume(sudoku_grid[8][5]==9);,1
sudoku.v,120,assume(sudoku_grid[8][6]==3);,1
sudoku.v,121,assume(sudoku_grid[8][8]==8);,1
sudoku.v,137,cover(sum==6'd45);,1
picorv32_withnew_module_dot_product.v,2139,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32_withnew_module_dot_product.v,2142,restrict property (resetn != $initstate);,1
picorv32_withnew_module_dot_product.v,2152,assert (mem_wstrb == 0);,1
picorv32_withnew_module_dot_product.v,2164,assert (ok);,1
picorv32_withnew_module_dot_product.v,2182,assert(mem_valid);,1
picorv32_withnew_module_dot_product.v,2183,assert(mem_addr == last_mem_la_addr);,1
picorv32_withnew_module_dot_product.v,2184,assert(mem_wstrb == 0);,1
picorv32_withnew_module_dot_product.v,2187,assert(mem_valid);,1
picorv32_withnew_module_dot_product.v,2188,assert(mem_addr == last_mem_la_addr);,1
picorv32_withnew_module_dot_product.v,2189,assert(mem_wdata == last_mem_la_wdata);,1
picorv32_withnew_module_dot_product.v,2190,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32_withnew_module_dot_product.v,2193,assert(!mem_valid || mem_ready);,1
picorv32_core.v,2076,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32_core.v,2079,restrict property (resetn != $initstate);,1
picorv32_core.v,2089,assert (mem_wstrb == 0);,1
picorv32_core.v,2101,assert (ok);,1
picorv32_core.v,2119,assert(mem_valid);,1
picorv32_core.v,2120,assert(mem_addr == last_mem_la_addr);,1
picorv32_core.v,2121,assert(mem_wstrb == 0);,1
picorv32_core.v,2124,assert(mem_valid);,1
picorv32_core.v,2125,assert(mem_addr == last_mem_la_addr);,1
picorv32_core.v,2126,assert(mem_wdata == last_mem_la_wdata);,1
picorv32_core.v,2127,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32_core.v,2130,assert(!mem_valid || mem_ready);,1
picorv32_core_with_enable_reg.v,2114,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32_core_with_enable_reg.v,2117,restrict property (resetn != $initstate);,1
picorv32_core_with_enable_reg.v,2127,assert (mem_wstrb == 0);,1
picorv32_core_with_enable_reg.v,2139,assert (ok);,1
picorv32_core_with_enable_reg.v,2157,assert(mem_valid);,1
picorv32_core_with_enable_reg.v,2158,assert(mem_addr == last_mem_la_addr);,1
picorv32_core_with_enable_reg.v,2159,assert(mem_wstrb == 0);,1
picorv32_core_with_enable_reg.v,2162,assert(mem_valid);,1
picorv32_core_with_enable_reg.v,2163,assert(mem_addr == last_mem_la_addr);,1
picorv32_core_with_enable_reg.v,2164,assert(mem_wdata == last_mem_la_wdata);,1
picorv32_core_with_enable_reg.v,2165,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32_core_with_enable_reg.v,2168,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2107,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2110,restrict property (resetn != $initstate);,1
picorv32.v,2120,assert (mem_wstrb == 0);,1
picorv32.v,2132,assert (ok);,1
picorv32.v,2150,assert(mem_valid);,1
picorv32.v,2151,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2152,assert(mem_wstrb == 0);,1
picorv32.v,2155,assert(mem_valid);,1
picorv32.v,2156,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2157,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2158,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2161,assert(!mem_valid || mem_ready);,1
sdram.v,247,assert(fwd_addr[NCA-3:0] == 0);,1
sdram.v,542,assert(maintenance_mode);,1
sdram.v,545,assert(startup_hold);,1
sdram.v,767,assert(AW == 21);,1
sdram.v,769,assert(NRA+NCA+2 == AW+1);,1
sdram.v,773,assume(i_ram_data == o_ram_data);,1
sdram.v,783,assert(i_ram_data == o_ram_data);,1
sdram.v,819,assert(!maintenance_mode);,1
sdram.v,824,assert(maintenance_mode);,1
sdram.v,831,assume(!i_wb_stb);,1
sdram.v,837,assert(f_outstanding == 0);,1
sdram.v,844,assume(o_wb_stall);,1
sdram.v,851,assert(!r_pending);,1
sdram.v,899,assert(bank_active[o_ram_bs][1:0] == 0);,1
sdram.v,907,assert(bank_active[o_ram_bs][1:0] == 0);,1
sdram.v,921,assert(bank_active[o_ram_bs] == 3'b011);,1
sdram.v,934,assert(bank_active[o_ram_bs] == 3'b111);,1
sdram.v,937,assert(o_ram_addr[0] == 1'b0);,1
sdram.v,941,assert(bank_active[o_ram_bs] == 3'b111);,1
sdram.v,944,assert(o_ram_addr[0] == 1'b0);,1
sdram.v,978,assert(o_wb_stall);,1
sdram.v,991,assert(bank_active[0][2] == 1'b0);,1
sdram.v,992,assert(bank_active[1][2] == 1'b0);,1
sdram.v,993,assert(bank_active[2][2] == 1'b0);,1
sdram.v,994,assert(bank_active[3][2] == 1'b0);,1
sdram.v,999,assert(r_barrell_ack == 0);,1
sdram.v,1020,assert(bank_active[0] == 0);,1
sdram.v,1021,assert(bank_active[1] == 0);,1
sdram.v,1022,assert(bank_active[2] == 0);,1
sdram.v,1023,assert(bank_active[3] == 0);,1
sdram.v,1028,assert(!o_wb_ack);,1
sdram.v,1040,assert(r_barrell_ack == 0);,1
sdram.v,1073,assert(o_ram_dmod==`DMOD_PUTOUTPUT);,1
sdram.v,1074,assert(o_ram_addr[0] == 1'b0);,1
sdram.v,1078,assert(o_ram_dmod==`DMOD_PUTOUTPUT);,1
sdram.v,1082,assert(o_ram_dmod==`DMOD_GETINPUT);,1
sdram.v,1085,assert(r_barrell_ack[0]);,1
sdram.v,1090,assert(m_state == `RAM_POWER_UP);,1
sdram.v,1120,assert(clocks_til_idle ==0);,1
sdram.v,1123,assert(maintenance_clocks == 0);,1
sdram.v,1127,assert(maintenance_clocks_zero);,1
sdram.v,1131,assert(!maintenance_clocks_zero);,1
sdram.v,1135,assert(m_state == `RAM_INITIAL_REFRESH);,1
sdram.v,1139,assert(maintenance_clocks <= 4'hc);,1
sdram.v,1143,assert(maintenance_clocks <= 4'h3);,1
sdram.v,1154,assert(o_ram_cke);,1
sdram.v,1155,assert(o_ram_cs_n);,1
sdram.v,1156,assert(o_ram_ras_n);,1
sdram.v,1157,assert(o_ram_cas_n);,1
sdram.v,1158,assert(o_ram_we_n);,1
sdram.v,1159,assert(o_ram_dqm);,1
test_working_memory.v,141,assert(rd_data == 8'b10101010);,1
fftstage.v,407,assume(f_mpydelay > 1);,1
fftstage.v,417,assert(iaddr == 0);,1
fftstage.v,418,assert(wait_for_sync);,1
fftstage.v,419,assert(o_sync == 0);,1
fftstage.v,420,assert(oaddr == 0);,1
fftstage.v,421,assert(!b_started);,1
fftstage.v,422,assert(!o_sync);,1
fftstage.v,438,assume(!i_ce);,1
fftstage.v,441,assume(f_addr[LGSPAN]==1'b0);,1
fftstage.v,449,assert(iaddr == 0);,1
fftstage.v,455,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,465,assert(ib_a == f_left);,1
fftstage.v,466,assert(ib_b == f_right);,1
fftstage.v,467,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,492,assert(f_output_active == b_started);,1
fftstage.v,496,assert(!f_output_active);,1
fftstage.v,501,assert(oaddr == f_oaddr);,1
fftstage.v,503,assert(oaddr == 0);,1
fftstage.v,507,assume(!ob_sync);,1
fftstage.v,530,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
fftstage.v,535,assert(o_sync);,1
fftstage.v,537,assert(!o_sync);,1
fftstage.v,541,assert(o_data == f_oleft);,1
fftstage.v,546,assert(pre_ovalue == f_oright);,1
fftstage.v,551,assert(o_data == f_oright);,1
hwbfly.v,674,assume(i_ce);,1
hwbfly.v,686,assume(!i_ce);,1
hwbfly.v,693,assume(!i_ce);,1
hwbfly.v,730,assert(left_sr == f_sumrx);,1
hwbfly.v,731,assert(left_si == f_sumix);,1
hwbfly.v,732,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,736,assert(mpy_r == 0);,1
hwbfly.v,737,assert(mpy_i == 0);,1
hwbfly.v,741,assert(mpy_r == 0);,1
hwbfly.v,742,assert(mpy_i == 0);,1
hwbfly.v,747,assert(mpy_r == f_difrx);,1
hwbfly.v,748,assert(mpy_i == f_difix);,1
hwbfly.v,753,assert(mpy_r == -f_difix);,1
hwbfly.v,754,assert(mpy_i == f_difrx);,1
hwbfly.v,759,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,760,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,765,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,766,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,796,assert(p_one == 0);,1
hwbfly.v,798,assert(p_two == 0);,1
hwbfly.v,801,assert(p_one == f_predifrx);,1
hwbfly.v,803,assert(p_two == f_predifix);,1
hwbfly.v,806,assert(p_one == 0);,1
hwbfly.v,808,assert(p_two == 0);,1
hwbfly.v,812,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,814,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,818,assert(p_three == 0);,1
hwbfly.v,820,assert(p_three == 0);,1
hwbfly.v,823,assert(p_three == f_sumdiff);,1
hwbfly.v,825,assert(p_three == f_sumcoef);,1
hwbfly.v,828,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,829,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,830,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1008,assume(i_ce);,1
butterfly.v,1016,assume(i_ce);,1
butterfly.v,1026,assume(!i_ce);,1
butterfly.v,1031,assume(i_ce);,1
butterfly.v,1036,assume(i_ce);,1
butterfly.v,1045,assume(!i_ce);,1
butterfly.v,1052,assume(i_ce);,1
butterfly.v,1062,assume(i_ce);,1
butterfly.v,1101,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,1102,assert(left_sr == f_sumrx);,1
butterfly.v,1103,assert(left_si == f_sumix);,1
butterfly.v,1104,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,1108,assert(mpy_r == 0);,1
butterfly.v,1109,assert(mpy_i == 0);,1
butterfly.v,1113,assert(mpy_r == 0);,1
butterfly.v,1114,assert(mpy_i == 0);,1
butterfly.v,1119,assert(mpy_r == f_difrx);,1
butterfly.v,1120,assert(mpy_i == f_difix);,1
butterfly.v,1125,assert(mpy_r == -f_difix);,1
butterfly.v,1126,assert(mpy_i == f_difrx);,1
butterfly.v,1131,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,1132,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,1137,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,1138,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,1168,assert(p_one == 0);,1
butterfly.v,1170,assert(p_two == 0);,1
butterfly.v,1173,assert(p_one == f_predifrx);,1
butterfly.v,1175,assert(p_two == f_predifix);,1
butterfly.v,1178,assert(p_one == 0);,1
butterfly.v,1180,assert(p_two == 0);,1
butterfly.v,1184,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,1186,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,1190,assert(p_three == 0);,1
butterfly.v,1192,assert(p_three == 0);,1
butterfly.v,1195,assert(p_three == f_sumdiff);,1
butterfly.v,1197,assert(p_three == f_sumcoef);,1
butterfly.v,1202,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1203,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1204,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1224,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1225,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1226,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1227,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,198,assert(o_out == f_addr_value);,1
bitreverse.v,202,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,257,assume(i_ce);,1
longbimpy.v,448,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,450,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,459,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,460,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,467,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,473,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,280,assume(!i_sync);,1
qtrstage.v,283,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,291,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,292,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,293,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,294,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,296,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,297,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,303,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,304,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,305,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,306,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,313,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,314,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,320,assert(!o_sync);,1
qtrstage.v,321,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,322,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,328,assert(!o_sync);,1
qtrstage.v,329,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,330,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,335,assume(i_sync);,1
qtrstage.v,343,assert(!wait_for_sync);,1
qtrstage.v,348,assert(!o_sync);,1
qtrstage.v,351,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,352,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,354,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,355,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,214,assume(!i_sync);,1
laststage.v,217,assert(stage == f_state[0]);,1
laststage.v,222,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,223,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,229,assert(!o_sync);,1
laststage.v,230,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,231,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,237,assert(!f_rsyncd);,1
laststage.v,238,assert(!o_sync);,1
laststage.v,239,assert(f_state == 0);,1
sfifo.v,268,assert(o_fill == f_fill);,1
sfifo.v,272,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,276,assert(o_full == r_full);,1
sfifo.v,283,assert(o_empty == r_empty);,1
sfifo.v,294,assert(r_empty);,1
sfifo.v,298,assert(!r_empty);,1
sfifo.v,300,assert(!r_empty);,1
sfifo.v,307,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,309,assert(o_data == i_data);,1
sfifo.v,365,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,371,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,384,assert(f_first_in_fifo);,1
sfifo.v,386,assert(!f_first_in_fifo);,1
sfifo.v,395,assert(!f_first_in_fifo);,1
sfifo.v,400,assert(f_second_in_fifo);,1
sfifo.v,407,assert(f_second_in_fifo);,1
sfifo.v,409,assert(!f_second_in_fifo);,1
sfifo.v,412,assert(f_first_in_fifo);,1
sfifo.v,415,assert(f_second_in_fifo);,1
sfifo.v,418,assert(f_first_in_fifo);,1
sfifo.v,420,assert(o_data == f_first_data);,1
sfifo.v,422,assert(!f_first_in_fifo);,1
sfifo.v,423,assert(o_data == f_second_data);,1
sfifo.v,450,cover(f_was_full && f_empty);,1
skidbuffer.v,250,assume(i_reset);,1
skidbuffer.v,268,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,272,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,278,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,298,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,321,assert(o_ready);,1
skidbuffer.v,352,assert(o_valid == i_valid);,1
skidbuffer.v,362,assert(o_valid);,1
skidbuffer.v,365,assert(!o_valid);,1
skidbuffer.v,376,assert(o_ready);,1
skidbuffer.v,386,assert(o_data == 0);,1
skidbuffer.v,390,assert(w_data == 0);,1
skidbuffer.v,458,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,464,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
sfifo.v,268,assert(o_fill == f_fill);,1
sfifo.v,272,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,276,assert(o_full == r_full);,1
sfifo.v,283,assert(o_empty == r_empty);,1
sfifo.v,294,assert(r_empty);,1
sfifo.v,298,assert(!r_empty);,1
sfifo.v,300,assert(!r_empty);,1
sfifo.v,307,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,309,assert(o_data == i_data);,1
sfifo.v,365,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,371,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,384,assert(f_first_in_fifo);,1
sfifo.v,386,assert(!f_first_in_fifo);,1
sfifo.v,395,assert(!f_first_in_fifo);,1
sfifo.v,400,assert(f_second_in_fifo);,1
sfifo.v,407,assert(f_second_in_fifo);,1
sfifo.v,409,assert(!f_second_in_fifo);,1
sfifo.v,412,assert(f_first_in_fifo);,1
sfifo.v,415,assert(f_second_in_fifo);,1
sfifo.v,418,assert(f_first_in_fifo);,1
sfifo.v,420,assert(o_data == f_first_data);,1
sfifo.v,422,assert(!f_first_in_fifo);,1
sfifo.v,423,assert(o_data == f_second_data);,1
sfifo.v,450,cover(f_was_full && f_empty);,1
skidbuffer.v,250,assume(i_reset);,1
skidbuffer.v,268,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,272,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,278,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,298,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,321,assert(o_ready);,1
skidbuffer.v,352,assert(o_valid == i_valid);,1
skidbuffer.v,362,assert(o_valid);,1
skidbuffer.v,365,assert(!o_valid);,1
skidbuffer.v,376,assert(o_ready);,1
skidbuffer.v,386,assert(o_data == 0);,1
skidbuffer.v,390,assert(w_data == 0);,1
skidbuffer.v,458,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,464,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
sfifo.v,268,assert(o_fill == f_fill);,1
sfifo.v,272,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,276,assert(o_full == r_full);,1
sfifo.v,283,assert(o_empty == r_empty);,1
sfifo.v,294,assert(r_empty);,1
sfifo.v,298,assert(!r_empty);,1
sfifo.v,300,assert(!r_empty);,1
sfifo.v,307,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,309,assert(o_data == i_data);,1
sfifo.v,365,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,371,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,384,assert(f_first_in_fifo);,1
sfifo.v,386,assert(!f_first_in_fifo);,1
sfifo.v,395,assert(!f_first_in_fifo);,1
sfifo.v,400,assert(f_second_in_fifo);,1
sfifo.v,407,assert(f_second_in_fifo);,1
sfifo.v,409,assert(!f_second_in_fifo);,1
sfifo.v,412,assert(f_first_in_fifo);,1
sfifo.v,415,assert(f_second_in_fifo);,1
sfifo.v,418,assert(f_first_in_fifo);,1
sfifo.v,420,assert(o_data == f_first_data);,1
sfifo.v,422,assert(!f_first_in_fifo);,1
sfifo.v,423,assert(o_data == f_second_data);,1
sfifo.v,450,cover(f_was_full && f_empty);,1
skidbuffer.v,250,assume(i_reset);,1
skidbuffer.v,268,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,272,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,278,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,298,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,321,assert(o_ready);,1
skidbuffer.v,352,assert(o_valid == i_valid);,1
skidbuffer.v,362,assert(o_valid);,1
skidbuffer.v,365,assert(!o_valid);,1
skidbuffer.v,376,assert(o_ready);,1
skidbuffer.v,386,assert(o_data == 0);,1
skidbuffer.v,390,assert(w_data == 0);,1
skidbuffer.v,458,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,464,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
sfifo.v,268,assert(o_fill == f_fill);,1
sfifo.v,272,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,276,assert(o_full == r_full);,1
sfifo.v,283,assert(o_empty == r_empty);,1
sfifo.v,294,assert(r_empty);,1
sfifo.v,298,assert(!r_empty);,1
sfifo.v,300,assert(!r_empty);,1
sfifo.v,307,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,309,assert(o_data == i_data);,1
sfifo.v,365,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,371,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,384,assert(f_first_in_fifo);,1
sfifo.v,386,assert(!f_first_in_fifo);,1
sfifo.v,395,assert(!f_first_in_fifo);,1
sfifo.v,400,assert(f_second_in_fifo);,1
sfifo.v,407,assert(f_second_in_fifo);,1
sfifo.v,409,assert(!f_second_in_fifo);,1
sfifo.v,412,assert(f_first_in_fifo);,1
sfifo.v,415,assert(f_second_in_fifo);,1
sfifo.v,418,assert(f_first_in_fifo);,1
sfifo.v,420,assert(o_data == f_first_data);,1
sfifo.v,422,assert(!f_first_in_fifo);,1
sfifo.v,423,assert(o_data == f_second_data);,1
sfifo.v,450,cover(f_was_full && f_empty);,1
skidbuffer.v,250,assume(i_reset);,1
skidbuffer.v,268,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,272,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,278,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,298,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,321,assert(o_ready);,1
skidbuffer.v,352,assert(o_valid == i_valid);,1
skidbuffer.v,362,assert(o_valid);,1
skidbuffer.v,365,assert(!o_valid);,1
skidbuffer.v,376,assert(o_ready);,1
skidbuffer.v,386,assert(o_data == 0);,1
skidbuffer.v,390,assert(w_data == 0);,1
skidbuffer.v,458,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,464,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
axi2axilite.v,1013,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1018,assert(m_axi_awvalid);,1
axi2axilite.v,1021,assert(!skids_awready);,1
axi2axilite.v,1024,assert(!skids_awready);,1
axi2axilite.v,1026,assert(!skids_awready);,1
axi2axilite.v,1031,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1051,assert(rid == S_AXI_RID);,1
axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
axi2axilite.v,1059,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1064,assert(m_axi_arvalid);,1
axi2axilite.v,1065,assert(!skids_arready);,1
axi2axilite.v,1083,assume(!skids_awvalid);,1
axi2axilite.v,1084,assume(!skids_wvalid);,1
axi2axilite.v,1085,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1086,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1087,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1088,assert(!skidm_bvalid);,1
axi2axilite.v,1089,assert(!S_AXI_BVALID);,1
axi2axilite.v,1098,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1099,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1100,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1132,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1134,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1158,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1160,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
axi_cdma.v,988,assert(!clear_read_pipeline);,1
axi_cdma.v,991,assert(!clear_read_pipeline);,1
axi_cdma.v,994,assert(!clear_read_pipeline);,1
axi_cdma.v,1808,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1812,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1892,assert(!M_AXI_AWVALID);,1
axi_cdma.v,1893,assert(!M_AXI_WVALID);,1
axi_cdma.v,1894,assert(!M_AXI_ARVALID);,1
axi_cdma.v,1913,assert(f_length != 0);,1
axi_cdma.v,1914,assert(f_length[LGLEN] == 0);,1
axi_cdma.v,1916,assert(f_src_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1917,assert(f_dst_addr[C_AXI_ADDR_WIDTH] == 1'b0);,1
axi_cdma.v,1995,assert(f_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1996,assert(f_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,1997,assert(f_length[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2004,assert(!extra_realignment_write);,1
axi_cdma.v,2006,assert(!extra_realignment_write);,1
axi_cdma.v,2008,assert(extra_realignment_write);,1
axi_cdma.v,2012,assert(r_partial_outvalid);,1
axi_cdma.v,2019,assert(f_extra_realignment_read);,1
axi_cdma.v,2021,assert(f_extra_realignment_read == extra_realignment_read);,1
axi_cdma.v,2030,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2034,assert(!r_int);,1
axi_cdma.v,2063,assert(M_AXI_WVALID);,1
axi_cdma.v,2081,assert(M_AXI_AWADDR[0 +: LGMAXBURST+ADDRLSB] == 0);,1
axi_cdma.v,2087,assert(r_len[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2088,assert(r_src_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2089,assert(r_dst_addr[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2095,assert(writes_remaining_w <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2096,assert(f_writes_complete <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2097,assert(fifo_fill <= f_wrlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2103,assert(M_AXI_AWADDR[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2105,assert(M_AXI_AWADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2109,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2114,assert(write_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2140,assert(reads_remaining_w == 0);,1
axi_cdma.v,2141,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2142,assert(writes_remaining_w == 0);,1
axi_cdma.v,2167,assert(r_partial_outvalid);,1
axi_cdma.v,2169,assert(!fifo_empty || r_abort || r_err);,1
axi_cdma.v,2195,assert(!M_AXI_WVALID);,1
axi_cdma.v,2202,assert(fifo_data_available == 0);,1
axi_cdma.v,2286,assert(reads_remaining_w < f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2290,assert(M_AXI_ARADDR[0 +: LGMAXBURST + ADDRLSB] == 0);,1
axi_cdma.v,2292,assert(reads_remaining_w == f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2299,assert(M_AXI_ARADDR[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2302,assert(M_AXI_ARADDR == read_address[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2304,assert(read_address[C_AXI_ADDR_WIDTH-1:0] == f_next_rdaddr[C_AXI_ADDR_WIDTH-1:0]);,1
axi_cdma.v,2320,assert(read_address == f_read_address);,1
axi_cdma.v,2322,assert(read_address[ADDRLSB-1:0] == 0);,1
axi_cdma.v,2326,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2331,assert(read_address[LGMAXBURST+ADDRLSB-1:0] == 0);,1
axi_cdma.v,2356,assert(f_end_of_read_burst[ADDRLSB+LGMAXBURST-1:0]==0);,1
axi_cdma.v,2371,assert(&f_read_beat_addr[ADDRLSB+LGMAXBURST-1:ADDRLSB]);,1
axi_cdma.v,2379,assert(!M_AXI_RVALID || M_AXI_RLAST);,1
axi_cdma.v,2396,assert(f_read_beat_addr[C_AXI_ADDR_WIDTH-1:0] == r_src_addr);,1
axi_cdma.v,2403,assert(reads_remaining_w <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2404,assert(f_reads_complete <= f_rdlength[LGLEN:ADDRLSB]);,1
axi_cdma.v,2406,assert(fifo_fill <= f_raw_length[LGLEN:ADDRLSB]);,1
axi_cdma.v,2421,assert(readlen_w != 0);,1
axi_cdma.v,2444,assert(!r_done);,1
axi_cdma.v,2446,assert(!r_done);,1
axi_cdma.v,2454,assert(r_done);,1
axi_cdma.v,2466,assert(M_AXI_WSTRB == 0);,1
axi_cdma.v,2484,assert(reads_remaining_w == 0);,1
axi_cdma.v,2486,assert(reads_remaining_w > 0);,1
axi_cdma.v,2489,assert(readlen_w <= reads_remaining_w);,1
axi_cdma.v,2497,assert(M_AXI_BREADY);,1
axi_cdma.v,2501,assert(M_AXI_RREADY);,1
axi_cdma.v,2524,assert(M_AXI_ARVALID);,1
axi_cdma.v,2528,assert(M_AXI_AWVALID);,1
axi_cdma.v,2549,assert(M_AXI_WVALID);,1
axi_cdma.v,2570,assert(!S_AXIL_BVALID);,1
axi_cdma.v,2571,assert(!S_AXIL_RVALID);,1
axi_cdma.v,2573,assert(!M_AXI_AWVALID);,1
axi_cdma.v,2574,assert(!M_AXI_WVALID);,1
axi_cdma.v,2575,assert(!M_AXI_ARVALID);,1
axi_cdma.v,2577,assert(write_bursts_outstanding == 0);,1
axi_cdma.v,2578,assert(write_requests_remaining == 0);,1
axi_cdma.v,2580,assert(!phantom_read);,1
axi_cdma.v,2581,assert(!phantom_write);,1
axi_cdma.v,2582,assert(!r_busy);,1
axi_cdma.v,2583,assert(read_bursts_outstanding == 0);,1
axi_cdma.v,2584,assert(no_read_bursts_outstanding);,1
axi_cdma.v,2586,assert(r_len == 0);,1
axi_cdma.v,2587,assert(zero_len);,1
axi_cdma.v,2589,assert(write_count == 0);,1
axi_cdma.v,2590,assert(!M_AXI_WLAST);,1
axi_cdma.v,2591,assert(M_AXI_AWLEN == 0);,1
axi_cdma.v,2592,assert(!r_write_fifo);,1
axi_cdma.v,2593,assert(r_src_addr == 0);,1
axi_cdma.v,2594,assert(r_dst_addr == 0);,1
axi_cdma.v,2598,assert(ADDRLSB + LGMAXBURST <= 12);,1
axi_cdma.v,2636,assume(f_const_posn < f_length);,1
axi_cdma.v,2674,assert(f_shifted_wstrb[0]);,1
axi_cdma.v,2675,assert(f_shifted_write[7:0] == f_const_byte);,1
axi_cdma.v,2677,assert(f_shifted_wstrb[0] || M_AXI_WSTRB==0);,1
axi_cdma.v,2712,assert(f_const_byte == f_shifted_to_fifo[7:0]);,1
axi_cdma.v,2749,assume(f_const_byte == f_shifted_from_fifo[7:0]);,1
axi_cdma.v,2810,cover(f_past_valid && S_AXI_ARESETN && r_busy && r_err);,1
axi_cdma.v,2822,cover(!r_busy && r_err);,1
axi_cdma.v,2826,cover(!r_busy && r_abort);,1
axi_cdma.v,2830,cover(reads_remaining_w == 0);,1
axi_cdma.v,2834,cover(reads_remaining_w == 0 && fifo_empty);,1
sfifo.v,269,assert(o_fill == f_fill);,1
sfifo.v,273,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,277,assert(o_full == r_full);,1
sfifo.v,284,assert(o_empty == r_empty);,1
sfifo.v,295,assert(r_empty);,1
sfifo.v,299,assert(!r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,308,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,310,assert(o_data == i_data);,1
sfifo.v,366,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,372,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,385,assert(f_first_in_fifo);,1
sfifo.v,387,assert(!f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,401,assert(f_second_in_fifo);,1
sfifo.v,408,assert(f_second_in_fifo);,1
sfifo.v,410,assert(!f_second_in_fifo);,1
sfifo.v,413,assert(f_first_in_fifo);,1
sfifo.v,416,assert(f_second_in_fifo);,1
sfifo.v,419,assert(f_first_in_fifo);,1
sfifo.v,421,assert(o_data == f_first_data);,1
sfifo.v,423,assert(!f_first_in_fifo);,1
sfifo.v,424,assert(o_data == f_second_data);,1
sfifo.v,451,cover(f_was_full && f_empty);,1
skidbuffer.v,251,assume(i_reset);,1
skidbuffer.v,269,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,273,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,279,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,299,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,322,assert(o_ready);,1
skidbuffer.v,353,assert(o_valid == i_valid);,1
skidbuffer.v,363,assert(o_valid);,1
skidbuffer.v,366,assert(!o_valid);,1
skidbuffer.v,377,assert(o_ready);,1
skidbuffer.v,387,assert(o_data == 0);,1
skidbuffer.v,391,assert(w_data == 0);,1
skidbuffer.v,459,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,465,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
axi2axilite.v,1013,assert(!skidm_bvalid || !skidm_bready);,1
axi2axilite.v,1018,assert(m_axi_awvalid);,1
axi2axilite.v,1021,assert(!skids_awready);,1
axi2axilite.v,1024,assert(!skids_awready);,1
axi2axilite.v,1026,assert(!skids_awready);,1
axi2axilite.v,1031,assert(axi_bresp != EXOKAY);,1
axi2axilite.v,1051,assert(rid == S_AXI_RID);,1
axi2axilite.v,1055,assert(rid == S_AXI_RID);,1
axi2axilite.v,1059,assert(!skidm_rvalid || !skidm_rready);,1
axi2axilite.v,1064,assert(m_axi_arvalid);,1
axi2axilite.v,1065,assert(!skids_arready);,1
axi2axilite.v,1083,assume(!skids_awvalid);,1
axi2axilite.v,1084,assume(!skids_wvalid);,1
axi2axilite.v,1085,assert(M_AXI_AWVALID == 0);,1
axi2axilite.v,1086,assert(faxil_awr_outstanding == 0);,1
axi2axilite.v,1087,assert(faxil_wr_outstanding == 0);,1
axi2axilite.v,1088,assert(!skidm_bvalid);,1
axi2axilite.v,1089,assert(!S_AXI_BVALID);,1
axi2axilite.v,1098,assume(!S_AXI_ARVALID);,1
axi2axilite.v,1099,assert(M_AXI_ARVALID == 0);,1
axi2axilite.v,1100,assert(faxil_rd_outstanding == 0);,1
axi2axilite.v,1132,cover(cvr_write_count_simple > 6 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1134,cover(cvr_write_count > 2 && /* ... */ !S_AXI_BVALID);,1
axi2axilite.v,1158,cover(cvr_read_count_simple > 6 && /* ... */ !S_AXI_RVALID);,1
axi2axilite.v,1160,cover(cvr_read_count > 2 && /* ... */ !S_AXI_RVALID);,1
sfifo.v,269,assert(o_fill == f_fill);,1
sfifo.v,273,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,277,assert(o_full == r_full);,1
sfifo.v,284,assert(o_empty == r_empty);,1
sfifo.v,295,assert(r_empty);,1
sfifo.v,299,assert(!r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,308,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,310,assert(o_data == i_data);,1
sfifo.v,366,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,372,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,385,assert(f_first_in_fifo);,1
sfifo.v,387,assert(!f_first_in_fifo);,1
sfifo.v,396,assert(!f_first_in_fifo);,1
sfifo.v,401,assert(f_second_in_fifo);,1
sfifo.v,408,assert(f_second_in_fifo);,1
sfifo.v,410,assert(!f_second_in_fifo);,1
sfifo.v,413,assert(f_first_in_fifo);,1
sfifo.v,416,assert(f_second_in_fifo);,1
sfifo.v,419,assert(f_first_in_fifo);,1
sfifo.v,421,assert(o_data == f_first_data);,1
sfifo.v,423,assert(!f_first_in_fifo);,1
sfifo.v,424,assert(o_data == f_second_data);,1
sfifo.v,451,cover(f_was_full && f_empty);,1
skidbuffer.v,251,assume(i_reset);,1
skidbuffer.v,269,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,273,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,279,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,281,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,299,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,322,assert(o_ready);,1
skidbuffer.v,353,assert(o_valid == i_valid);,1
skidbuffer.v,363,assert(o_valid);,1
skidbuffer.v,366,assert(!o_valid);,1
skidbuffer.v,377,assert(o_ready);,1
skidbuffer.v,387,assert(o_data == 0);,1
skidbuffer.v,391,assert(w_data == 0);,1
skidbuffer.v,459,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,465,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
picorv32.v,2037,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2040,restrict property (resetn != $initstate);,1
picorv32.v,2050,assert (mem_wstrb == 0);,1
picorv32.v,2062,assert (ok);,1
picorv32.v,2080,assert(mem_valid);,1
picorv32.v,2081,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2082,assert(mem_wstrb == 0);,1
picorv32.v,2085,assert(mem_valid);,1
picorv32.v,2086,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2087,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2088,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2091,assert(!mem_valid || mem_ready);,1
ALU_test.v,41,assert (Y == 16'b1000_0000_0000_0001);,1
ALU_test.v,42,assert (Cout == 1'b0);,1
ALU_test.v,44,assert (Y == 16'b0);,1
ALU_test.v,45,assert (Cout == 1'b1);,1
aximwr2wbsp.v,663,assume(!i_wb_err);,1
aximwr2wbsp.v,664,assert(!err_state);,1
aximwr2wbsp.v,668,assert(o_wb_cyc);,1
aximwr2wbsp.v,670,assert(!S_AXI_BRESP[1]);,1
aximwr2wbsp.v,671,assert(!S_AXI_BRESP[0]);,1
aximrd2wbsp.v,490,assume(w_reset);,1
aximrd2wbsp.v,505,assert(!o_wb_stb && !o_wb_cyc);,1
aximrd2wbsp.v,530,assert(fwb_outstanding == 0);,1
aximrd2wbsp.v,596,assert(resp_fifo_fill == 1);,1
aximrd2wbsp.v,603,assert(o_wb_stb || lastid_fifo_full);,1
aximrd2wbsp.v,607,assert(stblen == 0);,1
aximrd2wbsp.v,612,assert(!o_wb_stb);,1
aximrd2wbsp.v,613,assert(!lastid_fifo_wr);,1
aximrd2wbsp.v,620,assert(!last_ack);,1
aximrd2wbsp.v,626,assert(!last_ack);,1
aximrd2wbsp.v,628,assert(midissue || last_ack);,1
aximrd2wbsp.v,630,assert(last_ack == last_stb);,1
aximrd2wbsp.v,633,assert(o_wb_cyc);,1
aximrd2wbsp.v,647,assert(!o_wb_cyc);,1
aximrd2wbsp.v,730,cover(cvr_reads == 4);,1
aximrd2wbsp.v,733,cover(cvr_read_bursts == 4);,1
aximrd2wbsp.v,736,cover(cvr_rdid_bursts == 4);,1
sfifo.v,274,assert(o_fill == f_fill);,1
sfifo.v,278,assert(rd_next == f_next[LGFLEN-1:0]);,1
sfifo.v,282,assert(o_full == r_full);,1
sfifo.v,289,assert(o_empty == r_empty);,1
sfifo.v,300,assert(r_empty);,1
sfifo.v,304,assert(!r_empty);,1
sfifo.v,306,assert(!r_empty);,1
sfifo.v,313,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,315,assert(o_data == i_data);,1
sfifo.v,371,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,377,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,384,assert(o_data == f_first_data);,1
sfifo.v,388,assert(o_data == f_second_data);,1
sfifo.v,398,assert(f_first_in_fifo);,1
sfifo.v,400,assert(!f_first_in_fifo);,1
sfifo.v,409,assert(!f_first_in_fifo);,1
sfifo.v,414,assert(f_second_in_fifo);,1
sfifo.v,421,assert(f_second_in_fifo);,1
sfifo.v,423,assert(!f_second_in_fifo);,1
sfifo.v,426,assert(f_first_in_fifo);,1
sfifo.v,429,assert(f_second_in_fifo);,1
sfifo.v,432,assert(f_first_in_fifo);,1
sfifo.v,434,assert(o_data == f_first_data);,1
sfifo.v,436,assert(!f_first_in_fifo);,1
sfifo.v,437,assert(o_data == f_second_data);,1
sfifo.v,464,cover(f_was_full && f_empty);,1
skidbuffer.v,258,assume(i_reset);,1
skidbuffer.v,276,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,286,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,288,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,306,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,329,assert(o_ready);,1
skidbuffer.v,360,assert(o_valid == i_valid);,1
skidbuffer.v,370,assert(o_valid);,1
skidbuffer.v,373,assert(!o_valid);,1
skidbuffer.v,384,assert(o_ready);,1
skidbuffer.v,394,assert(o_data == 0);,1
skidbuffer.v,398,assert(w_data == 0);,1
skidbuffer.v,466,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,472,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
wbarbiter.v,336,assert(f_b_nreqs == 0);,1
wbarbiter.v,337,assert(f_b_nacks == 0);,1
wbarbiter.v,338,assert(f_a_outstanding == f_outstanding);,1
wbarbiter.v,340,assert(f_a_nreqs == 0);,1
wbarbiter.v,341,assert(f_a_nacks == 0);,1
wbarbiter.v,342,assert(f_b_outstanding == f_outstanding);,1
wbarbiter.v,348,assert(r_a_owner);,1
wbarbiter.v,353,assert(!r_a_owner);,1
wbarbiter.v,382,cover(f_prior_b_ack && o_cyc && o_a_ack);,1
wbarbiter.v,389,cover(f_prior_a_ack && o_cyc && o_b_ack);,1
wbarbiter.v,397,cover(o_cyc && o_b_ack);,1
synth_top_tb.v,112,assert(top.synth_mod_shift == 'd8);,1
synth_top_tb.v,127,assert(top.synth_mod_fcw == fcw);,1
synth_top_tb.v,136,assert(top.synth_carrier_fcws[0] == fcw);,1
synth_top_tb.v,137,assert(top.synth_note_en[0] == 1'b1);,1
synth_top_tb.v,158,assert(top.synth_note_en[0] == 1'b0);,1
synth_top_tb.v,119,assert(top.synth_mod_shift == 'd8);,1
synth_top_tb.v,125,assert(top.synth_synth_shift == 'd2);,1
synth_top_tb.v,134,assert(top.synth_mod_fcw == fcw);,1
synth_top_tb.v,143,assert(top.synth_carrier_fcws[24*1-1:24*0] == fcw);,1
synth_top_tb.v,144,assert(top.synth_note_en[0] == 1'b1);,1
synth_top_tb.v,153,assert(top.synth_carrier_fcws[24*2-1:24*1] == fcw);,1
synth_top_tb.v,154,assert(top.synth_note_en[1] == 1'b1);,1
synth_top_tb.v,165,assert(top.synth_note_en[0] == 1'b0);,1
seven_seg.v,178,cover(latch_ctr == 2);,1
seven_seg.v,183,assert(data_latched == 1'b1);,1
int_baud_gen.v,110,"cover(stb == 1); // strobe happen atleast one cover(f_stb_ctr == 2); // at least two strobes end always @(posedge clk) begin : f_edge_properties if (f_past_valid) begin // strobe pulses must be exactly one clock cycle if (DIV_FACTOR != 1) begin assert(!stb || stb != $past(stb, 1));",9
int_baud_gen.v,122,assert(stb == 1'b0);,1
sync_fifo.v,297,restrict property(f_past_valid || buffer[f_cov_i] == 'b0);,1
argmax.v,179,assume(din == f_din);,1
argmax.v,180,assume(f_maxi >= 0 && f_maxi < INPUT_ELTS);,1
argmax.v,196,assume(f_dvali == f_dmax);,1
argmax.v,198,assume(f_dvali <= f_dmax);,1
argmax.v,200,assume(f_dvali < f_dmax);,1
argmax.v,211,cover(done == 1'b1); // finishes processing cover(f_processed_ctr == 4); // can process four items consecutively cover(done == 1'b1 && f_dmax == INT_MIN); // finishes when maxval is limit_min<INT> end always @(posedge clk) begin : formal_prop_true_on_edge if (f_started) begin // ensure that every possible input array will complete in at least // 2 * ADDR_DATA_DELAY + INPUT_ELTS + 1 cycles if (f_ctr > 2 * ADDR_DATA_DELAY + INPUT_ELTS + 1) begin assert(f_finished);,11
argmax.v,225,assert(maxidx < INPUT_ELTS);,1
argmax.v,227,assert(maxidx == f_maxi);,1
argmax.v,238,assert(state != STATE_IDLE);,1
argmax.v,241,assert(state == STATE_IDLE);,1
argmax.v,247,assert(state <= STATE_FLUSH_PIPELINE);,1
argmax.v,249,assert(addri < INPUT_ELTS);,1
mul32x32.v,199,assert(out == f_expected_product);,1
mul32x32.v,213,assert(out == 'b0);,1
uart_tx_ll_8n1.v,203,assume(din == f_data_val);,1
uart_tx_ll_8n1.v,209,cover(f_finished == 1'b1);,1
uart_tx_ll_8n1.v,211,cover(f_trans_ctr == 1);,1
uart_tx_ll_8n1.v,212,cover(f_trans_ctr == 2);,1
uart_tx_ll_8n1.v,213,cover(f_trans_ctr == 2 && t1_idle == 2);,1
uart_tx_ll_8n1.v,227,assert(ctr == 0);,1
uart_tx_ll_8n1.v,228,assert(baud_en == 1'b0);,1
uart_tx_ll_8n1.v,229,assert(f_sym_ctr == 0);,1
uart_tx_ll_8n1.v,230,assert(!f_started);,1
uart_tx_ll_8n1.v,231,assert(!busy);,1
uart_tx_ll_8n1.v,234,assert(ctr == 0);,1
uart_tx_ll_8n1.v,235,assert(f_sym_ctr == 1);,1
uart_tx_ll_8n1.v,236,assert(f_started);,1
uart_tx_ll_8n1.v,239,assert(f_sym_ctr == ctr + 2);,1
uart_tx_ll_8n1.v,240,assert(f_sym_ctr >= 2 && f_sym_ctr <= 9);,1
uart_tx_ll_8n1.v,241,assert(f_started);,1
uart_tx_ll_8n1.v,244,assert(ctr == 0);,1
uart_tx_ll_8n1.v,252,assert(tx == 1'b1);,1
uart_tx_ll_8n1.v,257,assert(f_started);,1
uart_tx_ll_8n1.v,258,assert(f_sym_ctr == PORT_W + 2);,1
uart_tx_ll_8n1.v,268,assert(busy == 1'b0);,1
uart_tx_ll_8n1.v,271,assert(busy == 1'b1);,1
uart_tx_ll_8n1.v,277,assert(tx == 1'b0);,1
uart_tx_ll_8n1.v,280,assert(tx == 1'b1);,1
uart_tx_ll_8n1.v,283,assert(tx == f_data_val[f_sym_ctr - 2]);,1
uart_rx_ll_8n1.v,196,restrict property (rx == 1'b1);,1
uart_rx_ll_8n1.v,207,assume(rx == f_data_val[f_sym_ctr - 2]);,1
uart_rx_ll_8n1.v,213,assume(f_data_val == 8'b01101101);,1
uart_rx_ll_8n1.v,221,cover(dready == 1'b1);,1
uart_rx_ll_8n1.v,223,cover(f_finished == 1'b1);,1
uart_rx_ll_8n1.v,226,cover(f_trans_ctr > 1);,1
uart_rx_ll_8n1.v,243,assert(dctr == 0);,1
uart_rx_ll_8n1.v,244,assert(baud_en == 1'b0);,1
uart_rx_ll_8n1.v,245,assert(f_sym_ctr == 0);,1
uart_rx_ll_8n1.v,248,assert(dctr == 0);,1
uart_rx_ll_8n1.v,249,assert(f_sym_ctr == 1);,1
uart_rx_ll_8n1.v,252,assert(f_sym_ctr == dctr + 2);,1
uart_rx_ll_8n1.v,253,assert(f_sym_ctr >= 2 && f_sym_ctr <= 9);,1
uart_rx_ll_8n1.v,256,assert(dctr == 0);,1
uart_rx_ll_8n1.v,257,assert(f_sym_ctr == 10);,1
uart_rx_ll_8n1.v,265,assert(dout == f_data_val);,1
uart_rx_ll_8n1.v,268,assert(!f_started);,1
uart_rx_ll_8n1.v,270,assert(f_started);,1
uart_rx_ll_8n1.v,271,assert(!f_finished);,1
p020_generic_flip_flop_fifo.v,179,assert ( rtl_empty === model_empty );,1
p020_generic_flip_flop_fifo.v,180,assert ( rtl_full === model_full );,1
p020_generic_flip_flop_fifo.v,183,assert ( rtl_read_data === model_read_data );,1
p021_gen_dff_fifo_pow2_depth.v,173,assert ( rtl_empty === model_empty );,1
p021_gen_dff_fifo_pow2_depth.v,174,assert ( rtl_full === model_full );,1
p021_gen_dff_fifo_pow2_depth.v,177,assert ( rtl_read_data === model_read_data );,1
SPI-flash.v,1654,assert(f_nbits != 0);,1
SPI-flash.v,1677,assert(f_nsent + spi_len + 6'h4 == f_nbits);,1
SPI-flash.v,1679,assert(f_nsent + spi_len + 6'h1 == f_nbits);,1
SPI-flash.v,1695,assert(!o_cs_n);,1
SPI-flash.v,1711,assert(o_sck);,1
SPI-flash.v,1736,assert(!o_cs_n);,1
SPI-flash.v,1752,assert(f_nsent == f_nbits);,1
cells_sim.v,558,assert(A0m==A1m);,1
cells_sim.v,559,assert(B0m==B1m);,1
cells_sim.v,560,assert(C0m==C1m);,1
cells_sim.v,561,assert(D0m==D1m);,1
spixpress.v,470,assume(i_reset);,1
spixpress.v,478,assert(o_spi_cs_n == 1'b1);,1
spixpress.v,479,assert(o_spi_sck == 1'b0);,1
spixpress.v,481,assert(ack_delay == 0);,1
spixpress.v,482,assert(cfg_user_mode == 0);,1
spixpress.v,483,assert(bus_stall == 1'b0);,1
spixpress.v,484,assert(bus_ack == 1'b0);,1
spixpress.v,502,assert(f_outstanding <= 2);,1
spixpress.v,504,assert(f_outstanding <= 1);,1
spixpress.v,516,assert(f_outstanding == 1);,1
spixpress.v,523,assert(f_outstanding <= 1);,1
spixpress.v,543,assert(!o_spi_sck);,1
spixpress.v,550,assert(!bus_stall);,1
spixpress.v,552,assert(bus_stall);,1
spixpress.v,554,assert(bus_stall);,1
spixpress.v,557,assert(ack_delay <= 7'd65);,1
spixpress.v,683,assert property (@(posedge i_clk) disable iff ((i_reset)||(!i_wb_cyc)) (i_wb_stb)&&(!o_wb_stall)&&(!i_wb_we)&&(o_spi_cs_n),3
spixpress.v,730,assert property (@(posedge i_clk) (THIS_DATA and ((!i_reset)&&(i_wb_cyc) throughout ((ack_delay == 7'd32) ##1 (ack_delay == $past(ack_delay)-1) [*31]))) |=> (o_wb_ack)&&(o_wb_data == f_data));,6
queue2.v,139,assert(!o_full || !o_empty); // cannot be full and empty assert(o_vld != 2'b10);,2
queue2.v,141,assert(f_ctrl != 4'b1100);,1
queue2.v,142,assert(f_ctrl != 4'b1011);,1
queue2.v,143,assert(f_ctrl != 4'b0100);,1
xspi_phy.v,190,assume(txnbc_i == f_txnbc);,1
xspi_phy.v,191,assume(txndir_i == f_txndir);,1
xspi_phy.v,192,assume(txndata_i == f_txndata);,1
xspi_phy.v,243,assert(!sio_oe);,1
tdt_dm.v,3486,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3489,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3491,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3494,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3496,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3499,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3501,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3504,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3506,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3509,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3511,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3514,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dtm_idr.v,219,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,222,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,224,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,227,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,229,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,232,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,234,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,237,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,239,assert property(set_op_when_capture_dr_in_dmi_running);,1
tdt_dtm_idr.v,242,assert property(set_op_when_capture_dr_in_dmi_running);,1
power_ctrl.v,1391,assert property (p_power_down_urt);,1
power_ctrl.v,1398,assert property (p_power_down_urt);,1
power_ctrl.v,1404,assert property (p_power_down_urt);,1
power_ctrl.v,1413,assert property (p_power_up_urt);,1
power_ctrl.v,1419,assert property (p_power_up_urt);,1
power_ctrl.v,1426,assert property (p_power_up_urt);,1
power_ctrl.v,1438,assert property (p_power_down_smc);,1
power_ctrl.v,1445,assert property (p_power_down_smc);,1
power_ctrl.v,1451,assert property (p_power_down_smc);,1
power_ctrl.v,1460,assert property (p_power_up_smc);,1
power_ctrl.v,1466,assert property (p_power_up_smc);,1
power_ctrl.v,1473,assert property (p_power_up_smc);,1
axi2wb.v,340,assert(faxi_awr_outstanding <= 1);,1
axi2wb.v,341,assert(faxi_wr_outstanding <= 1);,1
axi2wb.v,342,assert(faxi_rd_outstanding <= 1);,1
axi2wb.v,346,assert(!o_wb_we);,1
axi2wb.v,347,assert(!o_wb_stb);,1
axi2wb.v,348,assert(!o_wb_cyc);,1
axi2wb.v,349,assert(!aw_req);,1
axi2wb.v,350,assert(!ar_req);,1
axi2wb.v,351,assert(!w_req);,1
axi2wb.v,352,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,353,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,354,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,357,assert(!o_wb_we);,1
axi2wb.v,358,assert(!o_wb_stb);,1
axi2wb.v,359,assert(!o_wb_cyc);,1
axi2wb.v,361,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,362,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,367,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,370,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,371,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,375,assert(faxi_rd_outstanding == 0);,1
axi2wb.v,378,assert(faxi_awr_outstanding == 0);,1
axi2wb.v,379,assert(faxi_wr_outstanding == 0);,1
axi2wb.v,383,assert(0);,1
SortUnitFlat.v,231,assert ( ^in_val !== 1'bx );,1
SortUnitFlat.v,232,assert ( ^val_S1 !== 1'bx );,1
SortUnitFlat.v,233,assert ( ^val_S2 !== 1'bx );,1
SortUnitFlat.v,234,assert ( ^val_S3 !== 1'bx );,1
SortUnitFlat.v,235,assert ( ^out_val !== 1'bx );,1
SortUnitStruct.v,200,assert ( ^in_val !== 1'bx );,1
SortUnitStruct.v,201,assert ( ^val_S1 !== 1'bx );,1
SortUnitStruct.v,202,assert ( ^val_S2 !== 1'bx );,1
SortUnitStruct.v,203,assert ( ^val_S3 !== 1'bx );,1
SortUnitStruct.v,204,assert ( ^out_val !== 1'bx );,1
TB to generate the factorial of 5 even number.v,26,"assert(f.randomize); // Randomize the values of the class constraints $display(""%p"", f.num); // Display the generated factorials of even numbers end endmodule",4
TB to generate the factorial of the first 5 even numbers.v,22,"assert(f.randomize); // Randomize the values of the class constraints $display(""%p"", f.num); // Display the generated factorials of even numbers end endmodule",4
axi_stream_insert_header_burst_tb.v,79,assert (valid_out && data_out == 64'h12345678_abcdef12 && keep_out == 8'hff && !last_out);,1
axi_stream_insert_header_burst_tb.v,102,assert (valid_out && data_out == 64'h56789012_34567890 && keep_out == 8'h0f && !last_out);,1
axi_stream_insert_header_burst_tb.v,124,assert (valid_out && data_out == 64'h34567890_12345678 && keep_out == 8'h0f && !last_out);,1
multiplexerTB.v,16,assert(o == 32'h0000_0000);,1
multiplexerTB.v,22,assert(o == 32'h1234_5678);,1
multiplexerTB.v,28,assert(o == 32'h5678_1234);,1
multiplexerTB.v,34,assert(o == 32'hffff_ffff);,1
fftstage.v,406,assume(f_mpydelay > 1);,1
fftstage.v,416,assert(iaddr == 0);,1
fftstage.v,417,assert(wait_for_sync);,1
fftstage.v,418,assert(o_sync == 0);,1
fftstage.v,419,assert(oaddr == 0);,1
fftstage.v,420,assert(!b_started);,1
fftstage.v,421,assert(!o_sync);,1
fftstage.v,437,assume(!i_ce);,1
fftstage.v,440,assume(f_addr[LGSPAN]==1'b0);,1
fftstage.v,448,assert(iaddr == 0);,1
fftstage.v,454,assert(f_left == imem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,464,assert(ib_a == f_left);,1
fftstage.v,465,assert(ib_b == f_right);,1
fftstage.v,466,assert(ib_c == cmem[f_addr[LGSPAN-1:0]]);,1
fftstage.v,491,assert(f_output_active == b_started);,1
fftstage.v,495,assert(!f_output_active);,1
fftstage.v,500,assert(oaddr == f_oaddr);,1
fftstage.v,502,assert(oaddr == 0);,1
fftstage.v,506,assume(!ob_sync);,1
fftstage.v,529,assert(omem[f_addr[LGSPAN-1:0]] == f_oright);,1
fftstage.v,534,assert(o_sync);,1
fftstage.v,536,assert(!o_sync);,1
fftstage.v,540,assert(o_data == f_oleft);,1
fftstage.v,545,assert(pre_ovalue == f_oright);,1
fftstage.v,550,assert(o_data == f_oright);,1
hwbfly.v,673,assume(i_ce);,1
hwbfly.v,685,assume(!i_ce);,1
hwbfly.v,692,assume(!i_ce);,1
hwbfly.v,729,assert(left_sr == f_sumrx);,1
hwbfly.v,730,assert(left_si == f_sumix);,1
hwbfly.v,731,assert(aux_s == f_dlyaux[F_D]);,1
hwbfly.v,735,assert(mpy_r == 0);,1
hwbfly.v,736,assert(mpy_i == 0);,1
hwbfly.v,740,assert(mpy_r == 0);,1
hwbfly.v,741,assert(mpy_i == 0);,1
hwbfly.v,746,assert(mpy_r == f_difrx);,1
hwbfly.v,747,assert(mpy_i == f_difix);,1
hwbfly.v,752,assert(mpy_r == -f_difix);,1
hwbfly.v,753,assert(mpy_i == f_difrx);,1
hwbfly.v,758,assert(mpy_r == f_widecoeff_r);,1
hwbfly.v,759,assert(mpy_i == f_widecoeff_i);,1
hwbfly.v,764,assert(mpy_r == -f_widecoeff_i);,1
hwbfly.v,765,assert(mpy_i == f_widecoeff_r);,1
hwbfly.v,795,assert(p_one == 0);,1
hwbfly.v,797,assert(p_two == 0);,1
hwbfly.v,800,assert(p_one == f_predifrx);,1
hwbfly.v,802,assert(p_two == f_predifix);,1
hwbfly.v,805,assert(p_one == 0);,1
hwbfly.v,807,assert(p_two == 0);,1
hwbfly.v,811,assert(p_one == f_dlycoeff_r[F_D-1]);,1
hwbfly.v,813,assert(p_two == f_dlycoeff_i[F_D-1]);,1
hwbfly.v,817,assert(p_three == 0);,1
hwbfly.v,819,assert(p_three == 0);,1
hwbfly.v,822,assert(p_three == f_sumdiff);,1
hwbfly.v,824,assert(p_three == f_sumcoef);,1
hwbfly.v,827,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
hwbfly.v,828,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
hwbfly.v,829,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1007,assume(i_ce);,1
butterfly.v,1015,assume(i_ce);,1
butterfly.v,1025,assume(!i_ce);,1
butterfly.v,1030,assume(i_ce);,1
butterfly.v,1035,assume(i_ce);,1
butterfly.v,1044,assume(!i_ce);,1
butterfly.v,1051,assume(i_ce);,1
butterfly.v,1061,assume(i_ce);,1
butterfly.v,1100,assert(aux_pipeline == f_dlyaux);,1
butterfly.v,1101,assert(left_sr == f_sumrx);,1
butterfly.v,1102,assert(left_si == f_sumix);,1
butterfly.v,1103,assert(aux_pipeline[AUXLEN-1] == f_dlyaux[F_D]);,1
butterfly.v,1107,assert(mpy_r == 0);,1
butterfly.v,1108,assert(mpy_i == 0);,1
butterfly.v,1112,assert(mpy_r == 0);,1
butterfly.v,1113,assert(mpy_i == 0);,1
butterfly.v,1118,assert(mpy_r == f_difrx);,1
butterfly.v,1119,assert(mpy_i == f_difix);,1
butterfly.v,1124,assert(mpy_r == -f_difix);,1
butterfly.v,1125,assert(mpy_i == f_difrx);,1
butterfly.v,1130,assert(mpy_r == f_widecoeff_r);,1
butterfly.v,1131,assert(mpy_i == f_widecoeff_i);,1
butterfly.v,1136,assert(mpy_r == -f_widecoeff_i);,1
butterfly.v,1137,assert(mpy_i == f_widecoeff_r);,1
butterfly.v,1167,assert(p_one == 0);,1
butterfly.v,1169,assert(p_two == 0);,1
butterfly.v,1172,assert(p_one == f_predifrx);,1
butterfly.v,1174,assert(p_two == f_predifix);,1
butterfly.v,1177,assert(p_one == 0);,1
butterfly.v,1179,assert(p_two == 0);,1
butterfly.v,1183,assert(p_one == f_dlycoeff_r[F_D-1]);,1
butterfly.v,1185,assert(p_two == f_dlycoeff_i[F_D-1]);,1
butterfly.v,1189,assert(p_three == 0);,1
butterfly.v,1191,assert(p_three == 0);,1
butterfly.v,1194,assert(p_three == f_sumdiff);,1
butterfly.v,1196,assert(p_three == f_sumcoef);,1
butterfly.v,1201,assert(p_one == f_predifr * f_dlycoeff_r[F_D-1]);,1
butterfly.v,1202,assert(p_two == f_predifi * f_dlycoeff_i[F_D-1]);,1
butterfly.v,1203,assert(p_three == f_sumdiff * f_sumcoef);,1
butterfly.v,1223,"assert(fp_one_id == { f_predifr[IWIDTH], f_predifr });",1
butterfly.v,1224,"assert(fp_two_id == { f_predifi[IWIDTH], f_predifi });",1
butterfly.v,1225,assert(fp_three_ic == f_p3c_in);,1
butterfly.v,1226,assert(fp_three_id == f_p3d_in);,1
bitreverse.v,197,assert(o_out == f_addr_value);,1
bitreverse.v,201,assert(wraddr[LGSIZE-1:0] == 1);,1
longbimpy.v,256,assume(i_ce);,1
longbimpy.v,447,assume(u_a[AW-1:3] == 0);,1
longbimpy.v,449,assume(u_b[BW-1:3] == 0);,1
longbimpy.v,458,assert(f_past_a[k][AW-1:3] == 0);,1
longbimpy.v,459,assert(f_past_b[k][BW-1:3] == 0);,1
longbimpy.v,466,assert(acc[k][IW+BW-1:6] == 0);,1
longbimpy.v,472,assert(r_b[k][BW-1:3] == 0);,1
qtrstage.v,279,assume(!i_sync);,1
qtrstage.v,282,assert(f_state[1:0] == iaddr[1:0]);,1
qtrstage.v,290,assume(f_piped_real[0] != 3'sb100);,1
qtrstage.v,291,assume(f_piped_real[2] != 3'sb100);,1
qtrstage.v,292,assert(sum_r == f_piped_real[2] + f_piped_real[0]);,1
qtrstage.v,293,assert(sum_i == f_piped_imag[2] + f_piped_imag[0]);,1
qtrstage.v,295,assert(diff_r == f_piped_real[2] - f_piped_real[0]);,1
qtrstage.v,296,assert(diff_i == f_piped_imag[2] - f_piped_imag[0]);,1
qtrstage.v,302,assert(rnd_sum_r == f_piped_real[3]+f_piped_real[1]);,1
qtrstage.v,303,assert(rnd_sum_i == f_piped_imag[3]+f_piped_imag[1]);,1
qtrstage.v,304,assert(rnd_diff_r == f_piped_real[3]-f_piped_real[1]);,1
qtrstage.v,305,assert(rnd_diff_i == f_piped_imag[3]-f_piped_imag[1]);,1
qtrstage.v,312,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,313,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,319,assert(!o_sync);,1
qtrstage.v,320,assert(f_o_real == f_piped_real[5] + f_piped_real[3]);,1
qtrstage.v,321,assert(f_o_imag == f_piped_imag[5] + f_piped_imag[3]);,1
qtrstage.v,327,assert(!o_sync);,1
qtrstage.v,328,assert(f_o_real == f_piped_real[7] - f_piped_real[5]);,1
qtrstage.v,329,assert(f_o_imag == f_piped_imag[7] - f_piped_imag[5]);,1
qtrstage.v,334,assume(i_sync);,1
qtrstage.v,342,assert(!wait_for_sync);,1
qtrstage.v,347,assert(!o_sync);,1
qtrstage.v,350,assert(f_o_real == -f_piped_imag[7]+f_piped_imag[5]);,1
qtrstage.v,351,assert(f_o_imag == f_piped_real[7]-f_piped_real[5]);,1
qtrstage.v,353,assert(f_o_real == f_piped_imag[7]-f_piped_imag[5]);,1
qtrstage.v,354,assert(f_o_imag == -f_piped_real[7]+f_piped_real[5]);,1
laststage.v,213,assume(!i_sync);,1
laststage.v,216,assert(stage == f_state[0]);,1
laststage.v,221,assert(o_r == f_piped_real[2] + f_piped_real[1]);,1
laststage.v,222,assert(o_i == f_piped_imag[2] + f_piped_imag[1]);,1
laststage.v,228,assert(!o_sync);,1
laststage.v,229,assert(o_r == f_piped_real[3] - f_piped_real[2]);,1
laststage.v,230,assert(o_i == f_piped_imag[3] - f_piped_imag[2]);,1
laststage.v,236,assert(!f_rsyncd);,1
laststage.v,237,assert(!o_sync);,1
laststage.v,238,assert(f_state == 0);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
sub.v,36,cover property (@(posedge clk) count_c == 3);,1
sv_immediate_assert.v,6,assert(i == 1);,1
sv_immediate_assert.v,7,assert(i == 0);,1
sv_immediate_assume.v,6,assume(i == 1);,1
sv_immediate_assume.v,7,assume(i == 0);,1
ddr3_controller.v,312,assert(STAGE2_DATA_DEPTH-2 >= 0);,1
ddr3_controller.v,3198,"assert(0); //force FORMAL to fail if this is ever reached `endif end endcase end endfunction //find the delay to be used by delay_before_xxxx_counter. // - delay_nCK = delay required between the two commands in DDR3 clock cycles // - start_slot = slot number of the first command // - end_slot = slot number of the second command // returns the number of controller clock cycles to satisfy the delay required between the two commands function [3:0] find_delay(input integer delay_nCK, input reg[1:0] start_slot, input reg[1:0] end_slot);",13
ddr3_controller.v,3593,assume(i_wb_cyc == 1);,1
ddr3_controller.v,3594,assume(i_wb_stb == 1);,1
ddr3_controller.v,3596,assume(i_rst_n);,1
ddr3_controller.v,3598,assume(i_wb_we == f_wb_inputs[f_index][24]);,1
ddr3_controller.v,3599,assume(i_wb_addr == f_wb_inputs[f_index][23:0]);,1
ddr3_controller.v,3600,cover(f_index == 10);,1
ddr3_controller.v,3602,assume(i_rst_n); //dont reset just to skip a request forcefully end end `endif //endif for FORMAL_COVER `ifdef TEST_CONTROLLER_PIPELINE // wires and registers used in this formal section `ifdef TEST_DATA localparam F_TEST_CMD_DATA_WIDTH = $bits(i_wb_data) + $bits(i_wb_sel) + $bits(i_aux) + $bits(i_wb_addr) + $bits(i_wb_we);,10
ddr3_controller.v,3657,"assert(MR0[18] != 1'b1); //last Mode Register bit should never be zero assert(MR1_WL_EN[18] != 1'b1); //(as this is used for A10-AP control for non-MRS assert(MR1_WL_DIS[18] != 1'b1); //(as this is used for A10-AP control for non-MRS assert(MR2[18] != 1'b1); //commands in the reset sequence) assert(MR3_MPR_EN[18] != 1'b1); assert(MR3_MPR_DIS[18] != 1'b1); assert(DELAY_COUNTER_WIDTH <= $bits(MR0)); //bitwidth of mode register should be enough for the delay counter //sanity checking to ensure 5 bits is allotted for extra instruction {reset_finished, use_timer , stay_command , cke , reset_n } assert(($bits(instruction) - $bits(CMD_MRS) - $bits(MR0)) == 5 ); assert(DELAY_SLOT_WIDTH >= DELAY_COUNTER_WIDTH); //width occupied by delay timer slot on the reset rom must be able to occupy the maximum possible delay value on the reset sequence end always @(posedge i_controller_clk) f_past_valid <= 1; //The idea below is sourced from https://zipcpu.com/formal/2019/11/18/genuctrlr.html //We will form a packet of information describing each instruction as it goes through the pipeline and make assertions along the way. //2-stage Pipeline: f_addr (update address) -> f_read (read instruction from rom) //pipeline stage logic: f_addr (update address) -> f_read (read instruction from rom) always @(posedge i_controller_clk) begin",21
ddr3_controller.v,3706,assert(f_addr == instruction_address); //f_addr is the shadow of instruction_address (thus f_addr is the address of NEXT instruction) f_read_inst = read_rom_instruction(f_read); //f_read is the address of CURRENT instruction assert(f_read_inst == read_rom_instruction(f_read)); // needed for induction to make sure the engine will not create his own instruction if(f_addr == 0) begin f_read_inst = INITIAL_RESET_INSTRUCTION; //will only happen at the very start: f_addr (0) -> f_read (0) where we are reading the initial reset instruction and not the rom end assert(f_read_inst == instruction); // f_read_inst is the shadow of current instruction end // main assertions for the reset sequence always @(posedge i_controller_clk) begin if(past_sync_rst_controller) begin assert(f_addr == 0);,13
ddr3_controller.v,3719,assert(f_read == 0);,1
ddr3_controller.v,3720,assert(instruction_address == 0);,1
ddr3_controller.v,3727,assert(delay_counter == f_read_inst[DELAY_COUNTER_WIDTH - 1:0]);,1
ddr3_controller.v,3735,assert(delay_counter_is_zero);,1
ddr3_controller.v,3753,assert(delay_counter == 0 && delay_counter_is_zero);,1
ddr3_controller.v,3758,"assert(f_read == 0); //will only happen at the very start: f_addr (0) -> f_read (0) end else if(f_read == 0) begin assert(f_addr <= 1); //will only happen at the very first two cycles: f_addr (1) -> f_read (0) or f_addr (0) -> f_read (0) end //else if($past(reset_done)) assert(f_read == $past(f_read)); //reset instruction does not repeat after reaching end address thus it must saturate when pipeline reaches end else begin assert(f_read + 1 == f_addr); //address increments continuously end assert($past(f_read) < 21); //only instruction address 0-to-13 is for reset sequence (reset_done is asserted at address 14) end //assert the relationship between the stages FOR REFRESH SEQUENCE else begin if(f_read == 22) begin assert( (f_addr == 19) || (f_addr == 23 ) ); //if current instruction is 22, then next instruction must be at 19 or 23 (instruction address wraps from 22 to 19 if not self refresh, else 22 to 23) end else if(f_addr == 19 || f_addr == 23) begin assert(f_read == 22); //if next instruction is at 19 or 23, then current instruction must be at 22 (instruction address wraps from 22 to 19) end else if(f_read == 26) begin",21
ddr3_controller.v,3779,"assert(f_addr == 20); // if current instruction is 26 (exit self-refresh) then go to 20 (refresh) end else begin assert(f_read + 1 == f_addr); //if there is no need to wrap around, then instruction address must increment end assert((f_read >= 19 && f_read <= 26) ); //refresh sequence is only on instruction address 19,20,21,22 end // reset_done must retain high when it was already asserted once if($past(reset_done)) begin assert(reset_done);",11
ddr3_controller.v,3794,assert(reset_done);,1
ddr3_controller.v,3799,assert(f_read == 21);,1
ddr3_controller.v,3811,assert( a[DELAY_COUNTER_WIDTH - 1:0] > 0);,1
ddr3_controller.v,3818,assert(instruction_address != 22); //pause_counter can only go high at instruction address 26 end if(instruction_address == 19 || instruction_address == 23) begin //pre-stall delay before precharge all to finish all remaining requests if(pause_counter == 1) begin // if there are still pending requests (pause_counter high) then delay_counter should still be at PRE_REFRESH_DELAY assert(delay_counter == PRE_REFRESH_DELAY);,6
ddr3_controller.v,3827,assert(!pause_counter); // no pause counter from precharge to sel-refresh entry end if(instruction_address < 13) begin assert(state_calibrate == IDLE);,5
ddr3_controller.v,3835,assert(instruction_address == 13);,1
ddr3_controller.v,3836,assert(pause_counter);,1
ddr3_controller.v,3841,assert(instruction_address == 17);,1
ddr3_controller.v,3842,assert(pause_counter);,1
ddr3_controller.v,3846,assume(delay_counter != 0);,1
ddr3_controller.v,3851,"assume(instruction_address == 22); //write-then-read calibration will not take more than tREFI (7.8us, delay a address 22) assert(reset_done);",2
ddr3_controller.v,3856,assert(reset_done);,1
ddr3_controller.v,3860,assert(reset_done);,1
ddr3_controller.v,3861,assert(instruction_address >= 19);,1
ddr3_controller.v,3865,assert(instruction_address >= 19);,1
ddr3_controller.v,3868,assume(repeat_test == 0);,1
ddr3_controller.v,3877,assert(WRITE_SLOT != ACTIVATE_SLOT);,1
ddr3_controller.v,3878,assert(WRITE_SLOT != PRECHARGE_SLOT);,1
ddr3_controller.v,3879,assert(READ_SLOT != ACTIVATE_SLOT);,1
ddr3_controller.v,3880,assert(READ_SLOT != PRECHARGE_SLOT);,1
ddr3_controller.v,3906,assert(stage1_pending && stage2_pending);//there are 2 contents end if(stage1_pending && stage2_pending) begin assert(f_full);,4
ddr3_controller.v,3913,assert(stage1_pending ^ stage2_pending);//there is 1 content end if(stage1_pending ^ stage2_pending) begin assert(!f_empty && !f_full);,4
ddr3_controller.v,3920,assert(stage1_pending == 0 && stage2_pending==0); //there is 0 content end if(stage1_pending == 0 && stage2_pending == 0) begin assert(f_empty);,4
ddr3_controller.v,3936,assert(f_full);,1
ddr3_controller.v,3940,assert(f_full);,1
ddr3_controller.v,3945,assert(f_full);,1
ddr3_controller.v,3946,assert(ecc_req_stage2);,1
ddr3_controller.v,3955,assert(!f_empty && !f_full);,1
ddr3_controller.v,3959,assert(stage1_pending == 0 && stage2_pending == 0 && stage0_pending == 0); //there is 0 content end if(stage1_pending == 0 && stage2_pending == 0) begin assert(f_empty);,4
ddr3_controller.v,3963,assert(!stage0_pending);,1
ddr3_controller.v,3969,assert(!stage1_pending && !stage2_pending);,1
ddr3_controller.v,3972,assert(stage1_we);,1
ddr3_controller.v,3975,assert(stage2_we);,1
ddr3_controller.v,3978,assert(!stage1_pending && !stage2_pending);,1
ddr3_controller.v,3982,assert(stage1_we);,1
ddr3_controller.v,3985,assert(stage2_we);,1
ddr3_controller.v,3987,assert(f_sum_of_pending_acks <= 2);,1
ddr3_controller.v,3991,assert(!stage1_we);,1
ddr3_controller.v,3994,assert(!stage2_we);,1
ddr3_controller.v,3997,assert(!stage1_we);,1
ddr3_controller.v,3998,assert(stage2_we);,1
ddr3_controller.v,4002,assume(state_calibrate != CHECK_STARTING_DATA && state_calibrate != BITSLIP_DQS_TRAIN_3); //this state should not be used (only for ddr3 with problems on DQ-DQS alignment) end always @(posedge i_controller_clk) begin if(f_past_valid) begin //switch from calibrate to done if(state_calibrate == DONE_CALIBRATE && $past(state_calibrate) != DONE_CALIBRATE) begin //assert($past(state_calibrate) == FINISH_READ);,8
ddr3_controller.v,4011,assert(f_empty);,1
ddr3_controller.v,4012,assert(!stage1_pending);,1
ddr3_controller.v,4013,assert(!stage2_pending);,1
ddr3_controller.v,4018,assert(!stage1_we);,1
ddr3_controller.v,4025,assert(f_bank_status == 0);,1
ddr3_controller.v,4026,assert(bank_status_q == 0);,1
ddr3_controller.v,4029,assert(f_bank_status == 0 || f_bank_status == 1); //only first bank is activated assert(bank_status_q == 0 || f_bank_status == 1);,2
ddr3_controller.v,4064,assert(cmd_d[WRITE_SLOT][CMD_ADDRESS_START:0] == f_read_data_col);,1
ddr3_controller.v,4076,"assert({!cmd_d[WRITE_SLOT][CMD_CS_N_2] && DUAL_RANK_DIMM, cmd_d[WRITE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]} == f_read_data_bank);",1
ddr3_controller.v,4080,assert(stage2_aux == f_read_data_aux);,1
ddr3_controller.v,4083,assert(stage2_dm_unaligned == ~f_read_data_wb_sel); //data mask mst match inverse of wb sel assert(stage2_data_unaligned == f_read_data[$bits(i_wb_sel) + $bits(i_wb_addr) + AUX_WIDTH + 1 +: $bits(i_wb_data)]); //actual data must match `endif assert(f_read_data[0]); //i_wb_we must be high f_read_fifo = 1; //advance read pointer to prepare for next read end else if(state_calibrate > ISSUE_WRITE_1 && state_calibrate <= ANALYZE_DATA) begin assert(stage2_aux[2:0] == 0);,9
ddr3_controller.v,4100,assert(cmd_d[READ_SLOT][CMD_ADDRESS_START:0] == f_read_data_col);,1
ddr3_controller.v,4113,"assert({!cmd_d[READ_SLOT][CMD_CS_N_2] && DUAL_RANK_DIMM ,cmd_d[READ_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]} == f_read_data_bank);",1
ddr3_controller.v,4117,assert(stage2_aux == f_read_data_aux);,1
ddr3_controller.v,4120,assert(!f_read_data[0]); //i_wb_we must be low f_read_fifo = 1; //advance read pointer to prepare for next read end else if(state_calibrate > ISSUE_WRITE_1 && state_calibrate <= ANALYZE_DATA) begin assert(stage2_aux[2:0] == 1);,5
ddr3_controller.v,4132,"assert(f_bank_status[{!cmd_d[PRECHARGE_SLOT][CMD_CS_N_2] && DUAL_RANK_DIMM , cmd_d[PRECHARGE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]}] == 1'b1); //the bank that should be precharged must initially be active end end if(cmd_d[ACTIVATE_SLOT][CMD_CS_N-1:CMD_WE_N] == 3'b011) begin //ACTIVATE if(state_calibrate == DONE_CALIBRATE) begin assert(f_bank_status[{!cmd_d[ACTIVATE_SLOT][CMD_CS_N_2] && DUAL_RANK_DIMM , cmd_d[ACTIVATE_SLOT][CMD_BANK_START:CMD_ADDRESS_START+1]}] == 1'b0); //the bank that should be activated must initially be precharged end end if(reset_done) begin assert(cmd_d[PRECHARGE_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done assert(cmd_d[ACTIVATE_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done assert(cmd_d[READ_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done assert(cmd_d[WRITE_SLOT][CMD_RESET_N]); //cke and rst_n should stay high when reset sequence is already done end end if(state_calibrate == DONE_CALIBRATE) begin assert(reset_done);",19
ddr3_controller.v,4153,"assert(o_wb_stall); //if not yet finished calibrating, stall should never go low end if(state_calibrate != DONE_CALIBRATE) begin assert(f_empty); //if not yet finished calibrating, stall should never go low end if(!f_empty) begin assert(state_calibrate == DONE_CALIBRATE);",7
ddr3_controller.v,4162,assume(f_sum_of_pending_acks == 0);,1
ddr3_controller.v,4184,"assert(stage1_we == f_read_data[0]); //i_wb_we must be same end if(stage2_pending && !stage1_pending) begin //request is now on stage2 if(row_bank_col == 1) begin assert(stage2_bank == {f_read_data[F_TEST_CMD_DATA_WIDTH-1] && DUAL_RANK_DIMM , f_read_data[(COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]}); //bank must match assert(stage2_col == {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match end else if(row_bank_col == 0) begin assert(stage2_bank == f_read_data[(ROW_BITS + COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]); //bank must match assert(stage2_col == {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match end else if(row_bank_col == 2) begin assert(stage2_bank[0] == f_read_data[(COL_BITS - $clog2(serdes_ratio*2)) + 1 +: 1]); //bank must match assert(stage2_bank[2:1] == f_read_data[(ROW_BITS + COL_BITS - $clog2(serdes_ratio*2)) + 2 +: BA_BITS-1]); //bank must match assert(stage2_col == {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match end assert(stage2_we == f_read_data[0]); //i_wb_we must be same end // if there is only 1 request on fifo but both pendings are high then stage must be an ECC-request if((ECC_ENABLE == 3) && stage1_pending && stage2_pending) begin assert(ecc_req_stage2);",21
ddr3_controller.v,4213,"assert(stage2_we == f_read_data[0]); //i_wb_we must be same //stage1 is the request on the other element of the fifo //(since the fifo only has 2 elements, the other element that //is not the tip will surely be the 2nd request that is being //handles by stage1) assert(stage1_bank == {f_read_data_next[F_TEST_CMD_DATA_WIDTH-1] && DUAL_RANK_DIMM , f_read_data_next[(COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]}); //bank must match assert(stage1_col == {f_read_data_next[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match assert(stage1_we == f_read_data_next[0]); //i_wb_we must be same end else if(row_bank_col == 0) begin assert(stage2_bank == f_read_data[(ROW_BITS + COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]); //bank must match assert(stage2_col == {f_read_data[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match assert(stage2_we == f_read_data[0]); //i_wb_we must be same //stage1 is the request on the other element of the fifo //(since the fifo only has 2 elements, the other element that //is not the tip will surely be the 2nd request that is being //handles by stage1) assert(stage1_bank == f_read_data_next[(ROW_BITS + COL_BITS - $clog2(serdes_ratio*2)) + 1 +: BA_BITS]); //bank must match assert(stage1_col == {f_read_data_next[1 +: COL_BITS - $clog2(serdes_ratio*2)], 3'b000}); //column address must match assert(stage1_we == f_read_data_next[0]); //i_wb_we must be same end",21
ddr3_controller.v,4240,assert(stage2_we == f_read_data[0]);,1
ddr3_controller.v,4248,assert(stage1_we == f_read_data_next[0]);,1
ddr3_controller.v,4255,assert(stage1_we == f_read_data[0]);,1
ddr3_controller.v,4257,assert(stage0_addr == f_read_data_next[F_TEST_CMD_DATA_WIDTH - 1:1]);,1
ddr3_controller.v,4258,assert(stage0_we == f_read_data_next[0]);,1
ddr3_controller.v,4268,assert(stage1_pending && stage2_pending);,1
ddr3_controller.v,4269,assert(ecc_req_stage2);,1
ddr3_controller.v,4289,assert(stage1_pending && stage2_pending);,1
ddr3_controller.v,4299,assert(stage1_pending && stage2_pending);,1
ddr3_controller.v,4300,assert(ecc_req_stage2);,1
ddr3_controller.v,4305,assert(f_bank_status == bank_status_q);,1
ddr3_controller.v,4307,assert(bank_status_q == 0);,1
ddr3_controller.v,4369,assert(stage1_pending || stage2_pending);,1
ddr3_controller.v,4372,assert(!f_empty || f_write_fifo);,1
ddr3_controller.v,4378,assert(!f_write_fifo); //must have no new request when not inside tREFI end if(instruction_address != 22 && $past(instruction_address) != 22) begin assert(o_wb_stall);,4
ddr3_controller.v,4382,assert(o_wb_stall_calib);,1
ddr3_controller.v,4386,assert(o_wb_stall);,1
ddr3_controller.v,4387,assert(o_wb_stall_calib);,1
ddr3_controller.v,4390,assert(!stage1_pending);,1
ddr3_controller.v,4391,assert(!stage2_pending);,1
ddr3_controller.v,4411,assert(!stage1_pending && !stage2_pending); //must be pending except in tREFI and in prestall delay end if(!reset_done) begin assert(stage1_pending == 0 && stage2_pending == 0);,5
ddr3_controller.v,4420,assert(o_wb_ack_read_q[f_index_1] == 0);,1
ddr3_controller.v,4423,assert(shift_reg_read_pipe_q[f_index_1] == 0);,1
ddr3_controller.v,4428,assert(bank_status_q == 0);,1
ddr3_controller.v,4432,"assert(o_wb_ack == 0); //o_wb_ack must not go high before done calibration end if(state_calibrate > ISSUE_WRITE_1 && state_calibrate <= ANALYZE_DATA) begin if(stage1_pending) begin assert(!stage1_we == stage1_aux[0]); //if write, then aux id must be 1 else 0 assert(stage1_aux[2:1] == 2'b00);",7
ddr3_controller.v,4441,"assert(!stage2_we == stage2_aux[0]); //if write, then aux id must be 1 else 0 assert(stage2_aux[2:1] == 2'b00);",2
ddr3_controller.v,4446,assert(state_calibrate <= DONE_CALIBRATE);,1
ddr3_controller.v,4461,assume(f_nreqs == 0);,1
ddr3_controller.v,4462,assume(f_nacks == 0);,1
ddr3_controller.v,4483,assert(state_calibrate != DONE_CALIBRATE);,1
ddr3_controller.v,4486,assert(state_calibrate == DONE_CALIBRATE);,1
ddr3_controller.v,4492,assert(o_wb_ack_read_q[f_index_1] == 0);,1
ddr3_controller.v,4527,assert(write_ack_index_q < READ_ACK_PIPE_WIDTH);,1
ddr3_controller.v,4528,assert(write_ack_index_q != 0); //always greater than 1 if(f_ackwait_count > F_MAX_STALL && (ECC_ENABLE != 3)) begin assert(|f_ack_pipe_after_stage2[(READ_ACK_PIPE_WIDTH+1) : (f_ackwait_count - F_MAX_STALL - 1)]); //at least one stage must be high end if(!past_sync_rst_controller && state_calibrate == DONE_CALIBRATE) begin assert(f_outstanding == f_sum_of_pending_acks || !i_wb_cyc);,7
ddr3_controller.v,4537,assert(f_sum_of_pending_acks == 0);,1
ddr3_controller.v,4540,assert(f_outstanding == 0 || !i_wb_cyc);,1
ddr3_controller.v,4544,assert(f_outstanding == 0 || !i_wb_cyc);,1
ddr3_controller.v,4545,assert(f_sum_of_pending_acks == 0);,1
ddr3_controller.v,4548,assert(f_outstanding == 0 || !i_wb_cyc);,1
ddr3_controller.v,4549,assert(f_sum_of_pending_acks <= 3);,1
ddr3_controller.v,4555,assert(o_aux[2:0] == 0);,1
ddr3_controller.v,4556,assert(o_wb_ack_uncalibrated == 1);,1
ddr3_controller.v,4562,assert(f_ack_pipe_marker == 0); //read ack must be the last ack on the pipe(f_pipe_marker must still be zero) f_ack_pipe_marker = f_ack_pipe_marker + 1;,2
ddr3_controller.v,4564,assert(!stage1_pending && !stage2_pending); //a single read request must be the last request on this calibration end else begin //ack for write assert(f_aux_ack_pipe_after_stage2[f_index_1][3:1] == 0);,4
ddr3_controller.v,4572,assert(f_ack_pipe_marker <= 3);,1
ddr3_controller.v,4575,assert(!stage0_pending); // stage0 pending will never go high before READ_DATA end if(state_calibrate == ANALYZE_DATA && !past_sync_rst_controller) begin assert(f_outstanding == 0 || !i_wb_cyc);,5
ddr3_controller.v,4580,assert(f_sum_of_pending_acks == 0);,1
ddr3_controller.v,4583,assert(f_nreqs == 0);,1
ddr3_controller.v,4584,assert(f_nacks == 0);,1
ddr3_controller.v,4585,assert(f_outstanding == 0 || !i_wb_cyc);,1
ddr3_controller.v,4590,assert(calib_aux[2:0] == 0);,1
ddr3_controller.v,4591,assert(calib_we == 1);,1
ddr3_controller.v,4596,assert(calib_aux[2:0] == 1);,1
ddr3_controller.v,4597,assert(calib_we == 0);,1
ddr3_controller.v,4601,assert(calib_stb == 0);,1
ddr3_controller.v,4604,assert(!stage1_stall);,1
ddr3_controller.v,4608,assert(!stage2_stall);,1
ddr3_controller.v,4617,assert(f_nreqs == 0);,1
ddr3_controller.v,4618,assert(f_nacks == 0);,1
ddr3_controller.v,4619,assert(f_outstanding == 0);,1
ddr3_controller.v,4620,assert(f_sum_of_pending_acks == 0);,1
ddr3_controller.v,4624,"assert(!o_wb_stall);//if even 1 of the stage is empty, o_wb_stall must be low end end end //test the delay_before* always @* begin for(f_index_1=0; f_index_1< (1<<(BA_BITS+DUAL_RANK_DIMM)); f_index_1=f_index_1+1) begin assert(delay_before_precharge_counter_q[f_index_1] <= max(ACTIVATE_TO_PRECHARGE_DELAY, max(WRITE_TO_PRECHARGE_DELAY,READ_TO_PRECHARGE_DELAY)));",9
ddr3_controller.v,4633,assert(delay_before_activate_counter_q[f_index_1] <= PRECHARGE_TO_ACTIVATE_DELAY);,1
ddr3_controller.v,4639,assert(f_stall_count == 0);,1
ddr3_controller.v,4652,assert(f_ackwait_count <= F_MAX_STALL);,1
ddr3_controller.v,4655,assert(f_ackwait_count == 0);,1
ddr3_controller.v,4672,assume(f_stall_count < F_MAX_STALL);,1
ddr3_controller.v,4673,assume(f_ackwait_count < F_MAX_ACK_DELAY);,1
ddr3_controller.v,4737,assert(f_precharge_time_stamp[bank_const] <= f_timer);,1
ddr3_controller.v,4738,assert(f_activate_time_stamp[bank_const] <= f_timer);,1
ddr3_controller.v,4739,assert(f_read_time_stamp[bank_const] <= f_timer);,1
ddr3_controller.v,4740,assert(f_write_time_stamp[bank_const] <= f_timer);,1
ddr3_controller.v,4787,assert(instruction_address <= 26);,1
ddr3_controller.v,4788,assert(state_calibrate <= DONE_CALIBRATE);,1
ddr3_controller.v,4791,assert(state_calibrate == DONE_CALIBRATE);,1
ddr3_controller.v,4797,assert(pause_counter);,1
ddr3_controller.v,4802,assert(state_calibrate > ISSUE_WRITE_1);,1
ddr3_controller.v,4803,assert(instruction_address == 22 || instruction_address == 19 || instruction_address == 23);,1
ddr3_controller.v,4807,assert(state_calibrate == IDLE);,1
ddr3_controller.v,4811,assert(instruction_address == 13);,1
ddr3_controller.v,4812,assert(pause_counter);,1
ddr3_controller.v,4817,assert(instruction_address == 17);,1
ddr3_controller.v,4818,assert(pause_counter);,1
ddr3_controller.v,4822,assert(delay_counter != 0);,1
ddr3_controller.v,4826,"assume(instruction_address == 22); //write-then-read calibration will not take more than tREFI (7.8us, delay a address 22) assert(reset_done);",2
ddr3_controller.v,4831,assert(reset_done);,1
ddr3_controller.v,4832,assert(instruction_address >= 19);,1
ddr3_controller.v,4836,assert(instruction_address >= 19);,1
ddr3_controller.v,4840,assert(!stage1_pending && !stage2_pending);,1
ddr3_controller.v,4841,assert(o_wb_stall);,1
ddr3_controller.v,4842,assert(o_wb_stall_calib);,1
ddr3_controller.v,4845,assert(instruction_address >= 19 && instruction_address <= 26);,1
ddr3_controller.v,4849,assert(o_wb_stall);,1
ddr3_controller.v,4850,assert(o_wb_stall_calib);,1
ddr3_controller.v,4854,assert(delay_counter == PRE_REFRESH_DELAY);,1
ddr3_controller.v,4873,assert(!wb2_stb && !o_wb2_ack);,1
ddr3_controller.v,4876,assert(f_empty_2);,1
ddr3_controller.v,4883,assume(i_wb2_data[5 +: lanes_clog2] < LANES);,1
ddr3_controller.v,4887,assume(i_wb2_addr[4 +: lanes_clog2] < LANES);,1
ddr3_controller.v,4894,assume(i_wb2_addr[3:0] > 3);,1
ddr3_controller.v,4915,assert(wb2_stb && o_wb2_ack);,1
ddr3_controller.v,4928,assert(f_outstanding_2 <= 2);,1
ddr3_controller.v,4976,assert(o_wb2_data == odelay_data_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 1: begin assert(o_wb2_data == odelay_dqs_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 2: begin assert(o_wb2_data == idelay_data_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 3: begin assert(o_wb2_data == idelay_dqs_cntvaluein[f_read_data_2[5 +: lanes_clog2]]); //the stored delay must match the wb2 output end 4: begin assert(o_wb2_data[0] == $past(i_phy_idelayctrl_rdy));,14
ddr3_controller.v,5055,assume(!i_wb_stb);,1
ddr3_controller.v,5208,assert(!empty);,1
ddr3_controller.v,5235,assert(write_pointer == read_pointer);,1
ddr3_controller.v,5238,assert(empty || full);,1
ecc_formal.v,76,"assume(corrupted_bit1 != corrupted_bit2); // corrupted bit should be different (in case of 2 corrupted bits) assume(corrupted_bit1 <= (K+calculate_m(K))); // corrupted bit should be within the index of q_o_enc_corrupted assume(corrupted_bit2 <= (K+calculate_m(K))); // corrupted bit should be within the index of q_o_enc_corrupted end // main contract of this design always @* begin // if no corrupted bits, then decoded info must be equal to original info, and error flags should be low // OR there is 1 corrupted bit but its the MSB p0 that is corrupted if( (corrupted == 0 || corrupted == 3) || ( (corrupted == 1) && (corrupted_bit1 == (K+calculate_m(K))) ) ) begin assert(d_i == q_o_dec);",11
ecc_formal.v,87,assert(!sb_err_o);,1
ecc_formal.v,88,assert(!db_err_o);,1
ecc_formal.v,92,assert(d_i == q_o_dec);,1
ecc_formal.v,93,assert(sb_err_o);,1
ecc_formal.v,94,assert(!db_err_o);,1
ecc_formal.v,98,assert(!sb_err_o);,1
ecc_formal.v,99,assert(db_err_o);,1
ecc_formal.v,106,assume(corrupted == f_counter[1:0]); // number of corrupted bits change per clock cycle cover((f_counter == 10));,2
aximwr2wbsp.v,663,assume(!i_wb_err);,1
aximwr2wbsp.v,664,assert(!err_state);,1
aximwr2wbsp.v,668,assert(o_wb_cyc);,1
aximwr2wbsp.v,670,assert(!S_AXI_BRESP[1]);,1
aximwr2wbsp.v,671,assert(!S_AXI_BRESP[0]);,1
aximrd2wbsp.v,490,assume(w_reset);,1
aximrd2wbsp.v,505,assert(!o_wb_stb && !o_wb_cyc);,1
aximrd2wbsp.v,530,assert(fwb_outstanding == 0);,1
aximrd2wbsp.v,596,assert(resp_fifo_fill == 1);,1
aximrd2wbsp.v,603,assert(o_wb_stb || lastid_fifo_full);,1
aximrd2wbsp.v,607,assert(stblen == 0);,1
aximrd2wbsp.v,612,assert(!o_wb_stb);,1
aximrd2wbsp.v,613,assert(!lastid_fifo_wr);,1
aximrd2wbsp.v,620,assert(!last_ack);,1
aximrd2wbsp.v,626,assert(!last_ack);,1
aximrd2wbsp.v,628,assert(midissue || last_ack);,1
aximrd2wbsp.v,630,assert(last_ack == last_stb);,1
aximrd2wbsp.v,633,assert(o_wb_cyc);,1
aximrd2wbsp.v,647,assert(!o_wb_cyc);,1
aximrd2wbsp.v,730,cover(cvr_reads == 4);,1
aximrd2wbsp.v,733,cover(cvr_read_bursts == 4);,1
aximrd2wbsp.v,736,cover(cvr_rdid_bursts == 4);,1
sfifo.v,272,assert(o_fill == f_fill);,1
sfifo.v,279,assert(o_full == r_full);,1
sfifo.v,286,assert(o_empty == r_empty);,1
sfifo.v,297,assert(r_empty);,1
sfifo.v,301,assert(!r_empty);,1
sfifo.v,303,assert(!r_empty);,1
sfifo.v,310,assert(mem[rd_addr[LGFLEN-1:0]] == o_data);,1
sfifo.v,312,assert(o_data == i_data);,1
sfifo.v,368,assert(mem[f_first_addr[LGFLEN-1:0]] == f_first_data);,1
sfifo.v,374,assert(mem[f_second_addr[LGFLEN-1:0]] == f_second_data);,1
sfifo.v,381,assert(o_data == f_first_data);,1
sfifo.v,385,assert(o_data == f_second_data);,1
sfifo.v,395,assert(f_first_in_fifo);,1
sfifo.v,397,assert(!f_first_in_fifo);,1
sfifo.v,406,assert(!f_first_in_fifo);,1
sfifo.v,411,assert(f_second_in_fifo);,1
sfifo.v,418,assert(f_second_in_fifo);,1
sfifo.v,420,assert(!f_second_in_fifo);,1
sfifo.v,423,assert(f_first_in_fifo);,1
sfifo.v,426,assert(f_second_in_fifo);,1
sfifo.v,429,assert(f_first_in_fifo);,1
sfifo.v,431,assert(o_data == f_first_data);,1
sfifo.v,433,assert(!f_first_in_fifo);,1
sfifo.v,434,assert(o_data == f_second_data);,1
sfifo.v,461,cover(f_was_full && f_empty);,1
skidbuffer.v,258,assume(i_reset);,1
skidbuffer.v,276,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,280,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,286,assume property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,288,assert property (IDATA_HELD_WHEN_NOT_READY);,1
skidbuffer.v,306,assert(!o_valid || !OPT_INITIAL);,1
skidbuffer.v,329,assert(o_ready);,1
skidbuffer.v,360,assert(o_valid == i_valid);,1
skidbuffer.v,370,assert(o_valid);,1
skidbuffer.v,373,assert(!o_valid);,1
skidbuffer.v,384,assert(o_ready);,1
skidbuffer.v,394,assert(o_data == 0);,1
skidbuffer.v,398,assert(w_data == 0);,1
skidbuffer.v,466,cover(!o_valid && !i_valid && f_changed_data);,1
skidbuffer.v,472,cover property (@(posedge i_clk) disable iff (i_reset) (!o_valid && !i_valid) ##1 i_valid && i_ready [*3] ##1 i_valid && !i_ready ##1 i_valid && i_ready [*2] ##1 i_valid && !i_ready [*2] ##1 i_valid && i_ready [*3] // Wait for the design to clear ##1 o_valid && i_ready [*0:5] ##1 (!o_valid && !i_valid && f_changed_data));,11
wbarbiter.v,336,assert(f_b_nreqs == 0);,1
wbarbiter.v,337,assert(f_b_nacks == 0);,1
wbarbiter.v,338,assert(f_a_outstanding == f_outstanding);,1
wbarbiter.v,340,assert(f_a_nreqs == 0);,1
wbarbiter.v,341,assert(f_a_nacks == 0);,1
wbarbiter.v,342,assert(f_b_outstanding == f_outstanding);,1
wbarbiter.v,348,assert(r_a_owner);,1
wbarbiter.v,353,assert(!r_a_owner);,1
wbarbiter.v,382,cover(f_prior_b_ack && o_cyc && o_a_ack);,1
wbarbiter.v,389,cover(f_prior_a_ack && o_cyc && o_b_ack);,1
wbarbiter.v,397,cover(o_cyc && o_b_ack);,1
execute.v,129,assert(0);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2108,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2111,restrict property (resetn != $initstate);,1
picorv32.v,2121,assert (mem_wstrb == 0);,1
picorv32.v,2133,assert (ok);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wstrb == 0);,1
picorv32.v,2156,assert(mem_valid);,1
picorv32.v,2157,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2158,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2159,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2162,assert(!mem_valid || mem_ready);,1
picorv32.v,2104,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2107,restrict property (resetn != $initstate);,1
picorv32.v,2117,assert (mem_wstrb == 0);,1
picorv32.v,2129,assert (ok);,1
picorv32.v,2147,assert(mem_valid);,1
picorv32.v,2148,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2149,assert(mem_wstrb == 0);,1
picorv32.v,2152,assert(mem_valid);,1
picorv32.v,2153,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2154,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2155,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2158,assert(!mem_valid || mem_ready);,1
properties.v,3,assert(outputs[0] == scan_clk_in);,1
properties.v,4,assert(outputs[1] == scan_data_in);,1
properties.v,5,assert(scan_clk_out == inputs[0]);,1
properties.v,6,assert(scan_data_out == inputs[1]);,1
properties.v,7,assert(scan_select == inputs[2]);,1
properties.v,8,assert(scan_latch_en == inputs[3]);,1
properties.v,11,assert(la_scan_data_out == scan_data_in);,1
properties.v,12,assert(scan_clk_out == la_scan_clk_in);,1
properties.v,13,assert(scan_data_out == la_scan_data_in);,1
properties.v,14,assert(scan_select == la_scan_select);,1
properties.v,15,assert(scan_latch_en == la_scan_latch_en);,1
properties.v,18,assert(int_scan_data_out == scan_data_out);,1
properties.v,19,assert(scan_clk_out == int_scan_clk_out);,1
properties.v,20,assert(scan_data_in == int_scan_data_in);,1
properties.v,21,assert(scan_clk_in == int_scan_clk_in);,1
properties.v,22,assert(scan_select == int_scan_select);,1
properties.v,23,assert(scan_latch_en == int_scan_latch_en);,1
picorv32.v,2106,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2109,restrict property (resetn != $initstate);,1
picorv32.v,2119,assert (mem_wstrb == 0);,1
picorv32.v,2131,assert (ok);,1
picorv32.v,2149,assert(mem_valid);,1
picorv32.v,2150,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2151,assert(mem_wstrb == 0);,1
picorv32.v,2154,assert(mem_valid);,1
picorv32.v,2155,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2156,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2157,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2160,assert(!mem_valid || mem_ready);,1
picorv32.v,2103,restrict property (|last_mem_nowait || mem_ready || !mem_valid);,1
picorv32.v,2106,restrict property (resetn != $initstate);,1
picorv32.v,2116,assert (mem_wstrb == 0);,1
picorv32.v,2128,assert (ok);,1
picorv32.v,2146,assert(mem_valid);,1
picorv32.v,2147,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2148,assert(mem_wstrb == 0);,1
picorv32.v,2151,assert(mem_valid);,1
picorv32.v,2152,assert(mem_addr == last_mem_la_addr);,1
picorv32.v,2153,assert(mem_wdata == last_mem_la_wdata);,1
picorv32.v,2154,assert(mem_wstrb == last_mem_la_wstrb);,1
picorv32.v,2157,assert(!mem_valid || mem_ready);,1
helloworld.v,364,restrict(i_clk == !f_last_clk);,1
helloworld.v,408,assert(f_baud_count < CLOCKS_PER_BAUD);,1
helloworld.v,412,assert(o_busy);,1
helloworld.v,436,assert(f_bitcount <= 4'ha);,1
helloworld.v,447,assert(!f_txbits[subcount]);,1
helloworld.v,452,assert(f_txbits[8:1] == f_request_tx_data);,1
helloworld.v,453,assert( f_txbits[9]);,1
helloworld.v,461,cover(!o_busy);,1
helloworld.v,545,assert(baud_counter < CLOCKS_PER_BAUD);,1
speechfifo.v,993,assert(f_baud_count < CLOCKS_PER_BAUD);,1
speechfifo.v,997,assert(o_busy);,1
speechfifo.v,1023,assert(f_bitcount <= 4'ha);,1
speechfifo.v,1034,assert(!f_txbits[subcount]);,1
speechfifo.v,1039,assert(f_txbits[8:1] == f_request_tx_data);,1
speechfifo.v,1040,assert( f_txbits[9]);,1
speechfifo.v,1048,cover(!o_busy);,1
speechfifo.v,1139,assert(baud_counter < CLOCKS_PER_BAUD);,1
speechfifo.v,1428,assert(f_raddr_plus_one == r_next);,1
speechfifo.v,1433,assert(!w_read);,1
speechfifo.v,1434,assert(!osrc);,1
speechfifo.v,1440,assert(r_fill == f_fill);,1
speechfifo.v,1496,assert(!will_underflow);,1
speechfifo.v,1497,assert(f_first_in_fifo);,1
speechfifo.v,1498,assert(!f_second_in_fifo);,1
speechfifo.v,1499,assert(wr_addr == f_next_addr);,1
speechfifo.v,1500,assert(fifo[f_const_addr] == f_const_data);,1
speechfifo.v,1502,assert(o_data == f_const_data);,1
speechfifo.v,1505,assert(f_first_in_fifo);,1
speechfifo.v,1506,assert(f_second_in_fifo);,1
speechfifo.v,1509,assert(f_second_in_fifo);,1
speechfifo.v,1510,assert(rd_addr == f_next_addr);,1
speechfifo.v,1511,assert(o_data == f_const_second);,1
speechfifo.v,1525,cover(o_empty_n);,1
speechfifo.v,1529,cover(o_err);,1
speechfifo.v,1539,cover(cvr_filled && !o_empty_n);,1
tdt_dm.v,3489,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3492,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3494,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3497,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3499,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3502,assert property(when_anyunavail_is_high_anyrunning_must_be_low);,1
tdt_dm.v,3504,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3507,assert property(when_anyunavail_is_high_anyhalted_must_be_low);,1
tdt_dm.v,3509,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3512,assert property(when_allunavail_is_high_allrunning_must_be_low);,1
tdt_dm.v,3514,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dm.v,3517,assert property(when_allunavail_is_high_allhalted_must_be_low);,1
tdt_dtm_idr.v,223,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,226,assert property(update_dr_in_dmi_running_cannot_change_dmi_address);,1
tdt_dtm_idr.v,228,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,231,assert property(update_dr_in_dmi_running_cannot_change_dmi_op);,1
tdt_dtm_idr.v,233,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,236,assert property(update_dr_in_dmi_running_cannot_change_dmi_data);,1
tdt_dtm_idr.v,238,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,241,assert property(update_dr_in_dmi_running_cannot_start_a_new_operation);,1
tdt_dtm_idr.v,243,assert property(set_op_when_capture_dr_in_dmi_running);,1
tdt_dtm_idr.v,246,assert property(set_op_when_capture_dr_in_dmi_running);,1
CHECKER_iclab054.sv,154,property complete_property; @(negedge clk) (inf.out_valid&&inf.complete) |-> inf.err_msg===0; endproperty: complete_property,3
CHECKER_iclab054.sv,165,property not_complete_property; @(negedge clk) (inf.out_valid&& !inf.complete) |-> inf.out_info===0; endproperty: not_complete_property,3
CHECKER_iclab054.sv,180,property id_valid_property; @(posedge clk) inf.id_valid |=> (inf.id_valid===0); endproperty: id_valid_property,3
CHECKER_iclab054.sv,184,property act_valid_property; @(posedge clk) inf.act_valid |=> (inf.act_valid===0); endproperty: act_valid_property,3
CHECKER_iclab054.sv,188,property item_valid_property; @(posedge clk) inf.item_valid |=> (inf.item_valid===0); endproperty: item_valid_property,3
CHECKER_iclab054.sv,192,property num_valid_property; @(posedge clk) inf.num_valid |=> (inf.num_valid===0); endproperty : num_valid_property,3
CHECKER_iclab054.sv,196,property amnt_valid_property; @(posedge clk) inf.amnt_valid |=> (inf.amnt_valid===0); endproperty: amnt_valid_property,3
sva_fns.sv,20,property p_single_sel; $onehot0 (psel); endproperty : p_single_sel,3
sva_fns.sv,27,property p_count_ones; $countones (num_ones) < 3; endproperty : p_count_ones,3
af_apb_cip.sv,97,property p_af_rst_penable; disable iff (1'b0) (!presetn) |-> (penable == 1'b0); endproperty : p_af_rst_penable,4
af_apb_cip.sv,175,property p_single_sel; $onehot0 (psel); endproperty : p_single_sel,3
lvc_apb_if.sv,118,property p_paddr_no_x; @(posedge clk) psel |-> !$isunknown(paddr); endproperty: p_paddr_no_x,3
lvc_apb_if.sv,123,property p_psel_rose_next_cycle_penable_rise; @(posedge clk) $rose(psel) |=> $rose(penable); endproperty: p_psel_rose_next_cycle_penable_rise,3
lvc_apb_if.sv,128,property p_penable_rose_next_cycle_fall; @(posedge clk) penable && pready |=> $fell(penable); endproperty: p_penable_rose_next_cycle_fall,3
lvc_apb_if.sv,133,property p_pwdata_stable_during_trans_phase; @(posedge clk) ((psel && !penable) ##1 (psel && penable)) |-> $stable(pwdata); endproperty: p_pwdata_stable_during_trans_phase,3
lvc_apb_if.sv,138,"property p_paddr_stable_until_next_trans; logic[31:0] addr1, addr2; @(posedge clk) first_match(($rose(penable),addr1=paddr) ##1 ((psel && !penable)[=1],addr2=$past(paddr))) |-> addr1 == addr2; endproperty: p_paddr_stable_until_next_trans",4
lvc_apb_if.sv,144,"property p_pwrite_stable_until_next_trans; logic pwrite1, pwrite2; @(posedge clk) first_match(($rose(penable),pwrite1=pwrite) ##1 ((psel && !penable)[=1],pwrite2=$past(pwrite))) |-> pwrite1 == pwrite2; endproperty: p_pwrite_stable_until_next_trans",4
lvc_apb_if.sv,150,property p_prdata_available_once_penable_rose; @(posedge clk) penable && !pwrite && pready |-> !$stable(prdata); endproperty: p_prdata_available_once_penable_rose,3
lvc_apb_if.sv,159,property p_write_during_nonburst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_write_during_nonburst_trans,3
lvc_apb_if.sv,164,property p_write_during_burst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##2 penable); endproperty: p_write_during_burst_trans,3
lvc_apb_if.sv,169,"property p_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && !pwrite && addr==paddr)); endproperty: p_write_read_burst_trans",4
lvc_apb_if.sv,175,"property p_write_twice_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && pwrite && addr==paddr) ##2 ($rose(penable) && !pwrite && addr==paddr) ); endproperty: p_write_twice_read_burst_trans",4
lvc_apb_if.sv,181,property p_read_during_nonburst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_read_during_nonburst_trans,3
lvc_apb_if.sv,186,property p_read_during_burst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##2 penable); endproperty: p_read_during_burst_trans,3
lvc_apb_if.sv,191,"property p_read_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> ##2 ($rose(penable) && !pwrite && addr==paddr); endproperty: p_read_write_read_burst_trans",4
CHECKER_iclab036.sv,158,property p_Spec_1; @(posedge rst_n) request !inf.out_valid ##0 !inf.err_msg ##0 !inf.complete ##0 !inf.C_addr ##0 !inf.C_data_w ##0 !inf.C_in_valid ##0 !inf.C_r_wb ##0 !inf.C_out_valid ##0 !inf.C_data_r ##0 !inf.AR_VALID ##0 !inf.AR_ADDR ##0 !inf.R_READY ##0 !inf.AW_VALID ##0 !inf.AW_ADDR ##0 !inf.W_VALID ##0 !inf.W_DATA ##0 !inf.B_READY; endproperty: p_Spec_1*/,3
openhmc_sva.sv,105,"property tx_user_hold_p; //-- if TVALID is set TUSER must not be changed until TREADY logic [NUM_DATA_BYTES-1:0] m_user; (s_axis_tx_TVALID == 1 && s_axis_tx_TREADY == 0, m_user = s_axis_tx_TUSER) |=> (s_axis_tx_TUSER == m_user); endproperty : tx_user_hold_p",5
openhmc_sva.sv,114,"property rx_user_hold_p; //-- if TVALID is set TUSER must not be changed until TREADY logic [NUM_DATA_BYTES-1:0] m_user; (m_axis_rx_TVALID == 1 && m_axis_rx_TREADY == 0, m_user = m_axis_rx_TUSER) |=> (m_axis_rx_TUSER == m_user); endproperty : rx_user_hold_p",5
openhmc_sva.sv,123,"property tx_data_hold_p; //-- if TVALID is set TDATA must not be changed until TREADY logic [DWIDTH-1:0] m_data; (s_axis_tx_TVALID == 1 && s_axis_tx_TREADY == 0, m_data = s_axis_tx_TDATA) |=> (s_axis_tx_TDATA == m_data); endproperty : tx_data_hold_p",5
openhmc_sva.sv,132,"property rx_data_hold_p; //-- if TVALID is set TDATA must not be changed until TREADY logic [DWIDTH-1:0] m_data; (m_axis_rx_TVALID == 1 && m_axis_rx_TREADY == 0, m_data = m_axis_rx_TDATA) |=> (m_axis_rx_TDATA == m_data); endproperty : rx_data_hold_p",5
openhmc_sva.sv,105,"property tx_user_hold_p; //-- if TVALID is set TUSER must not be changed until TREADY logic [NUM_DATA_BYTES-1:0] m_user; (s_axis_tx_TVALID == 1 && s_axis_tx_TREADY == 0, m_user = s_axis_tx_TUSER) |=> (s_axis_tx_TUSER == m_user); endproperty : tx_user_hold_p",5
openhmc_sva.sv,114,"property rx_user_hold_p; //-- if TVALID is set TUSER must not be changed until TREADY logic [NUM_DATA_BYTES-1:0] m_user; (m_axis_rx_TVALID == 1 && m_axis_rx_TREADY == 0, m_user = m_axis_rx_TUSER) |=> (m_axis_rx_TUSER == m_user); endproperty : rx_user_hold_p",5
openhmc_sva.sv,123,"property tx_data_hold_p; //-- if TVALID is set TDATA must not be changed until TREADY logic [DWIDTH-1:0] m_data; (s_axis_tx_TVALID == 1 && s_axis_tx_TREADY == 0, m_data = s_axis_tx_TDATA) |=> (s_axis_tx_TDATA == m_data); endproperty : tx_data_hold_p",5
openhmc_sva.sv,132,"property rx_data_hold_p; //-- if TVALID is set TDATA must not be changed until TREADY logic [DWIDTH-1:0] m_data; (m_axis_rx_TVALID == 1 && m_axis_rx_TREADY == 0, m_data = m_axis_rx_TDATA) |=> (m_axis_rx_TDATA == m_data); endproperty : rx_data_hold_p",5
apb_checker.sv,67,property p_001_master_idle_on_reset; @(posedge pclock) not (!preset && !(`IDLE)); endproperty : p_001_master_idle_on_reset,4
apb_checker.sv,75,property p_002_master_never_penable_without_psel; @(posedge pclock) not (!psel && penable); endproperty : p_002_master_never_penable_without_psel,4
apb_checker.sv,83,property p_003_master_state_idle_then_idle_or_setup; @(posedge pclock) disable iff (!preset) (!psel |=> !penable); endproperty : p_003_master_state_idle_then_idle_or_setup,4
apb_checker.sv,91,property p_004_master_state_setup_then_access_on_next_cycle; @(posedge pclock) disable iff (!preset) ((`SETUP) |=> (`ENABLE)); endproperty : p_004_master_state_setup_then_access_on_next_cycle,4
apb_checker.sv,101,property p_006_master_state_paddr_stable_between_setup_and_access; @(posedge pclock) disable iff (!preset) ((`SETUP) |=> $stable(paddr)); endproperty : p_006_master_state_paddr_stable_between_setup_and_access,4
apb_checker.sv,108,property p_007_master_state_pwrite_stable_between_setup_and_access; @(posedge pclock) disable iff (!preset) ((`SETUP) |=> $stable(prwd)); endproperty : p_007_master_state_pwrite_stable_between_setup_and_access,4
apb_checker.sv,117,property p_008_master_pwdata_stable_throughout_access; @(posedge pclock) disable iff (!preset) (((`SETUP) && prwd) || ((`ENABLE) && prwd && !pready) |=> $stable(pwdata)); endproperty : p_008_master_pwdata_stable_throughout_access,4
apb_checker.sv,131,property p_009_master_paddr_valid_throughout_access_cycle; @(posedge pclock) disable iff (!preset) (psel |-> (!(paddr ^ paddr_sv))); endproperty : p_009_master_paddr_valid_throughout_access_cycle,4
apb_checker.sv,138,property p_010_master_pwrite_valid_throughout_access_cycle; @(posedge pclock) disable iff (!preset) (psel |-> (!(prwd ^ pwrite_s))); endproperty : p_010_master_pwrite_valid_throughout_access_cycle,4
apb_checker.sv,145,property p_011_master_pwdata_valid_throughout_access_cycle; @(posedge pclock) disable iff (!preset) ((psel & prwd) |-> (!(pwdata ^ pwdata_sv))); endproperty : p_011_master_pwdata_valid_throughout_access_cycle,4
apb_checker.sv,158,property p_012_slave_prdata_valid_on_access_cycle; // Valid for APB Version-2.0 @(posedge pclock) disable iff (!preset) ((psel & !prwd & penable) |-> (!(prdata ^ prdata_sv))); endproperty : p_012_slave_prdata_valid_on_access_cycle,4
apb_checker.sv,67,property p_001_master_idle_on_reset; @(posedge pclock) not (!preset && !(`IDLE)); endproperty : p_001_master_idle_on_reset,4
apb_checker.sv,75,property p_002_master_never_penable_without_psel; @(posedge pclock) not (!psel && penable); endproperty : p_002_master_never_penable_without_psel,4
apb_checker.sv,83,property p_003_master_state_idle_then_idle_or_setup; @(posedge pclock) disable iff (!preset) (!psel |=> !penable); endproperty : p_003_master_state_idle_then_idle_or_setup,4
apb_checker.sv,91,property p_004_master_state_setup_then_access_on_next_cycle; @(posedge pclock) disable iff (!preset) ((`SETUP) |=> (`ENABLE)); endproperty : p_004_master_state_setup_then_access_on_next_cycle,4
apb_checker.sv,101,property p_006_master_state_paddr_stable_between_setup_and_access; @(posedge pclock) disable iff (!preset) ((`SETUP) |=> $stable(paddr)); endproperty : p_006_master_state_paddr_stable_between_setup_and_access,4
apb_checker.sv,108,property p_007_master_state_pwrite_stable_between_setup_and_access; @(posedge pclock) disable iff (!preset) ((`SETUP) |=> $stable(prwd)); endproperty : p_007_master_state_pwrite_stable_between_setup_and_access,4
apb_checker.sv,117,property p_008_master_pwdata_stable_throughout_access; @(posedge pclock) disable iff (!preset) (((`SETUP) && prwd) || ((`ENABLE) && prwd && !pready) |=> $stable(pwdata)); endproperty : p_008_master_pwdata_stable_throughout_access,4
apb_checker.sv,131,property p_009_master_paddr_valid_throughout_access_cycle; @(posedge pclock) disable iff (!preset) (psel |-> (!(paddr ^ paddr_sv))); endproperty : p_009_master_paddr_valid_throughout_access_cycle,4
apb_checker.sv,138,property p_010_master_pwrite_valid_throughout_access_cycle; @(posedge pclock) disable iff (!preset) (psel |-> (!(prwd ^ pwrite_s))); endproperty : p_010_master_pwrite_valid_throughout_access_cycle,4
apb_checker.sv,145,property p_011_master_pwdata_valid_throughout_access_cycle; @(posedge pclock) disable iff (!preset) ((psel & prwd) |-> (!(pwdata ^ pwdata_sv))); endproperty : p_011_master_pwdata_valid_throughout_access_cycle,4
apb_checker.sv,158,property p_012_slave_prdata_valid_on_access_cycle; // Valid for APB Version-2.0 @(posedge pclock) disable iff (!preset) ((psel & !prwd & penable) |-> (!(prdata ^ prdata_sv))); endproperty : p_012_slave_prdata_valid_on_access_cycle,4
ovl_stack_logic.sv,127,property OVL_STACK_OVERFLOW_P; @( posedge clk) disable iff( `OVL_RESET_SIGNAL != 1'b1) not((sva_v_stack_ptr >= depth) && sva_v_deferred_push && (!sva_v_deferred_pop)); endproperty : OVL_STACK_OVERFLOW_P,7
ovl_stack_logic.sv,135,property OVL_STACK_UNDERFLOW_P; @( posedge clk) disable iff( `OVL_RESET_SIGNAL != 1'b1) not((sva_v_stack_ptr == 0) && (!sva_v_deferred_push) && sva_v_deferred_pop ); endproperty : OVL_STACK_UNDERFLOW_P,7
ovl_stack_logic.sv,143,property OVL_STACK_VALUE_P; @( posedge clk) disable iff( `OVL_RESET_SIGNAL != 1'b1) (sva_v_deferred_pop && !sva_v_deferred_push && sva_v_stack_ptr > 0) |-> (sva_w_data == pop_data ); endproperty : OVL_STACK_VALUE_P,6
ovl_stack_logic.sv,150,property OVL_STACK_PUSH_POP_P; @( posedge clk) disable iff( `OVL_RESET_SIGNAL != 1'b1) not( sva_v_deferred_push && sva_v_deferred_pop); endproperty : OVL_STACK_PUSH_POP_P,6
ovl_stack_logic.sv,157,property OVL_STACK_EMPTY_P; @( posedge clk) disable iff( `OVL_RESET_SIGNAL != 1'b1) not (( sva_v_stack_ptr == 0 && empty == 1'b0) || ( sva_v_stack_ptr != 0 && empty == 1'b1)); endproperty : OVL_STACK_EMPTY_P,6
ovl_stack_logic.sv,164,property OVL_STACK_FULL_P; @( posedge clk) disable iff( `OVL_RESET_SIGNAL != 1'b1) not (( sva_v_stack_ptr == depth && full == 1'b0) || ( sva_v_stack_ptr != depth && full == 1'b1)); endproperty : OVL_STACK_FULL_P,6
ovl_valid_id_logic.sv,408,property OVL_VALID_ID_MIN_LAT_P; @( posedge clk) disable iff (`OVL_RESET_SIGNAL!=1'b1) (returned && !(flush && (sva_v_rst_entry == sva_v_ret_entry))&& ( (sva_v_ret_entry != 0) && (!sva_v_block_lat_chk[sva_v_ret_entry]) || (returned && issued && sva_v_iss_returned_id && ( sva_v_current_out < max_instances_per_id ) )) |-> ( issued && returned && sva_v_iss_returned_id && ( sva_v_current_out < max_instances_per_id ) ) ? (min_cks==0) : (sva_v_valid_arr[sva_v_ret_entry]) ? (sva_v_delay >= min_cks) : (min_cks == 0)); endproperty : OVL_VALID_ID_MIN_LAT_P,12
ovl_valid_id_logic.sv,421,property OVL_VALID_ID_ISSUED_ID_OK_P; @( posedge clk) disable iff (`OVL_RESET_SIGNAL!=1'b1) (sva_v_issued_entry != 0) && issued && !(flush && (sva_v_issued_entry == sva_v_rst_entry)) && !((min_cks == 0) && returned && (sva_v_ret_entry == sva_v_issued_entry)) && !((sva_v_issued_arr[sva_v_ret_entry] > 0 ) && returned && issued && (issued_id == returned_id)) |-> ( sva_v_current_out < max_instances_per_id ); endproperty : OVL_VALID_ID_ISSUED_ID_OK_P,10
ovl_valid_id_logic.sv,432,property OVL_VALID_ID_RET_ID_OK_P; @( posedge clk ) disable iff (`OVL_RESET_SIGNAL!=1'b1) sva_v_ret && ! (issued && ( issued_id == returned_id ) && (sva_v_current_out < max_instances_per_id) && (sva_v_outstanding_ids <= max_ids)) |-> ( sva_v_ret_entry != 0 ); endproperty : OVL_VALID_ID_RET_ID_OK_P,6
ovl_valid_id_logic.sv,439,property OVL_VALID_IDS_MAX_ISSUED_IDS_OK_P; @( posedge clk ) disable iff (`OVL_RESET_SIGNAL!=1'b1) ( sva_v_issued && !(flush && (sva_v_rst_entry != 0)) && !(returned && (sva_v_ret_entry != 0) && (sva_v_current_out == 1)) && (sva_v_issued_entry == 0) && !((sva_v_issued_arr[sva_v_ret_entry] == 1) && (sva_v_ret_entry > 0) && returned && (sva_v_outstanding_ids <= max_ids)) ) |-> (sva_v_free_entry != 0) && (sva_v_outstanding_ids < max_ids); endproperty : OVL_VALID_IDS_MAX_ISSUED_IDS_OK_P,12
ovl_valid_id_logic.sv,452,property OVL_VALID_ID_NB_RET_PER_ISSUED_0_P; @(posedge clk) disable iff (`OVL_RESET_SIGNAL!=1'b1) ( issued |-> issued_count > 0); endproperty : OVL_VALID_ID_NB_RET_PER_ISSUED_0_P,4
ovl_valid_id_logic.sv,464,"property OVL_VALID_ID_XZ_ISSUED_ID_P; @(posedge clk) disable iff (`OVL_RESET_SIGNAL != 1'b1) ((issued ==1'b1)|->!($isunknown(issued_id)) ); endproperty property OVL_VALID_ID_XZ_RET_ID_P; @(posedge clk) disable iff (`OVL_RESET_SIGNAL != 1'b1) ((returned ==1'b1)|->!($isunknown(returned_id)) ); endproperty property OVL_VALID_ID_XZ_ISSUED_SIG_P; @(posedge clk) disable iff (`OVL_RESET_SIGNAL != 1'b1) (!($isunknown(issued))); endproperty property OVL_VALID_ID_XZ_RET_SIG_P; @(posedge clk) disable iff (`OVL_RESET_SIGNAL != 1'b1) (!($isunknown(returned))); endproperty property OVL_VALID_ID_XZ_RESET_SIG_P; @(posedge clk) disable iff (`OVL_RESET_SIGNAL != 1'b1) (!($isunknown(flush))); endproperty property OVL_VALID_ID_XZ_RESET_ID_P; @(posedge clk) disable iff (`OVL_RESET_SIGNAL != 1'b1) ((flush ==1'b1)|->!($isunknown(flush_id)) ); endproperty `endif // OVL_IMPLICIT_XCHECK_OFF `endif // OVL_XCHECK_OFF generate case (property_type) `OVL_ASSERT_2STATE, `OVL_ASSERT: begin : ovl_assert for ( i=1; i<=max_id_instances; i=i+1) begin : loop_max_cksency property OVL_VALID_ID_MAX_LAT_P; @(posedge clk) disable iff (`OVL_RESET_SIGNAL!=1'b1) sva_v_valid_arr[i] && !sva_v_block_lat_chk[i] |-> !($fell(sva_v_max_cksency_ok[i])); endproperty :OVL_VALID_ID_MAX_LAT_P",50
ovl_valid_id_logic.sv,620,property OVL_VALID_ID_MAX_LAT_P; @(posedge clk) disable iff (`OVL_RESET_SIGNAL!=1'b1) sva_v_valid_arr[i] && !sva_v_block_lat_chk[i] |-> !($fell(sva_v_max_cksency_ok[i])); endproperty :OVL_VALID_ID_MAX_LAT_P,5
fifo_if.sv,50,property continuous_16_write; @(posedge wclk) !wfull throughout winc[*16]; endproperty : continuous_16_write,4
fifo_if.sv,56,property continuous_16_read; @(posedge rclk) !rempty throughout rinc[*16]; endproperty : continuous_16_read,4
apb_if.sv,28,"property penable_rose_after_psel_rose; @(posedge clk) $rose(psel) |=> $rose(penable); endproperty assert property(penable_rose_after_psel_rose) else `uvm_error(""ASSERT"", ""PENABLE not rose after PSEL rose"") property penable_fell_after_pready; @(posedge clk) penable && pready |=> $fell(penable); endproperty assert property(penable_fell_after_pready) else `uvm_error(""ASSERT"", ""PENABLE not fell after pready rose"") property pwdata_stable_during_trans; @(posedge clk) (psel && !penable) |=> $stable(pwdata); endproperty: pwdata_stable_during_trans",15
apb_if.sv,46,property paddr_stable_during_trans; @(posedge clk) (psel && !penable) |=> $stable(paddr); endproperty: paddr_stable_during_trans,3
apb_if.sv,52,property pwrite_stable_during_trans; @(posedge clk) (psel && !penable) |=> $stable(pwrite); endproperty: pwrite_stable_during_trans,3
lvc_apb_if.sv,118,property p_paddr_no_x; @(posedge clk) psel |-> !$isunknown(paddr); endproperty: p_paddr_no_x,3
lvc_apb_if.sv,123,property p_psel_rose_next_cycle_penable_rise; @(posedge clk) $rose(psel) |=> $rose(penable); endproperty: p_psel_rose_next_cycle_penable_rise,3
lvc_apb_if.sv,128,property p_penable_rose_next_cycle_fall; @(posedge clk) penable && pready |=> $fell(penable); endproperty: p_penable_rose_next_cycle_fall,3
lvc_apb_if.sv,133,property p_pwdata_stable_during_trans_phase; @(posedge clk) ((psel && !penable) ##1 (psel && penable)) |-> $stable(pwdata); endproperty: p_pwdata_stable_during_trans_phase,3
lvc_apb_if.sv,138,"property p_paddr_stable_until_next_trans; logic[31:0] addr1, addr2; @(posedge clk) first_match(($rose(penable),addr1=paddr) ##1 ((psel && !penable)[=1],addr2=$past(paddr))) |-> addr1 == addr2; endproperty: p_paddr_stable_until_next_trans",4
lvc_apb_if.sv,144,"property p_pwrite_stable_until_next_trans; logic pwrite1, pwrite2; @(posedge clk) first_match(($rose(penable),pwrite1=pwrite) ##1 ((psel && !penable)[=1],pwrite2=$past(pwrite))) |-> pwrite1 == pwrite2; endproperty: p_pwrite_stable_until_next_trans",4
lvc_apb_if.sv,150,property p_prdata_available_once_penable_rose; @(posedge clk) penable && !pwrite && pready |-> !$stable(prdata); endproperty: p_prdata_available_once_penable_rose,3
lvc_apb_if.sv,159,property p_write_during_nonburst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_write_during_nonburst_trans,3
lvc_apb_if.sv,164,property p_write_during_burst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##2 penable); endproperty: p_write_during_burst_trans,3
lvc_apb_if.sv,169,"property p_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && !pwrite && addr==paddr)); endproperty: p_write_read_burst_trans",4
lvc_apb_if.sv,175,"property p_write_twice_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && pwrite && addr==paddr) ##2 ($rose(penable) && !pwrite && addr==paddr) ); endproperty: p_write_twice_read_burst_trans",4
lvc_apb_if.sv,181,property p_read_during_nonburst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_read_during_nonburst_trans,3
lvc_apb_if.sv,186,property p_read_during_burst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##2 penable); endproperty: p_read_during_burst_trans,3
lvc_apb_if.sv,191,"property p_read_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> ##2 ($rose(penable) && !pwrite && addr==paddr); endproperty: p_read_write_read_burst_trans",4
lvc_apb_if.sv,118,property p_paddr_no_x; @(posedge clk) psel |-> !$isunknown(paddr); endproperty: p_paddr_no_x,3
lvc_apb_if.sv,123,property p_psel_rose_next_cycle_penable_rise; @(posedge clk) $rose(psel) |=> $rose(penable); endproperty: p_psel_rose_next_cycle_penable_rise,3
lvc_apb_if.sv,128,property p_penable_rose_next_cycle_fall; @(posedge clk) penable && pready |=> $fell(penable); endproperty: p_penable_rose_next_cycle_fall,3
lvc_apb_if.sv,133,property p_pwdata_stable_during_trans_phase; @(posedge clk) ((psel && !penable) ##1 (psel && penable)) |-> $stable(pwdata); endproperty: p_pwdata_stable_during_trans_phase,3
lvc_apb_if.sv,138,"property p_paddr_stable_until_next_trans; logic[31:0] addr1, addr2; @(posedge clk) first_match(($rose(penable),addr1=paddr) ##1 ((psel && !penable)[=1],addr2=$past(paddr))) |-> addr1 == addr2; endproperty: p_paddr_stable_until_next_trans",4
lvc_apb_if.sv,144,"property p_pwrite_stable_until_next_trans; logic pwrite1, pwrite2; @(posedge clk) first_match(($rose(penable),pwrite1=pwrite) ##1 ((psel && !penable)[=1],pwrite2=$past(pwrite))) |-> pwrite1 == pwrite2; endproperty: p_pwrite_stable_until_next_trans",4
lvc_apb_if.sv,150,property p_prdata_available_once_penable_rose; @(posedge clk) penable && !pwrite && pready |-> !$stable(prdata); endproperty: p_prdata_available_once_penable_rose,3
lvc_apb_if.sv,159,property p_write_during_nonburst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_write_during_nonburst_trans,3
lvc_apb_if.sv,164,property p_write_during_burst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##2 penable); endproperty: p_write_during_burst_trans,3
lvc_apb_if.sv,169,"property p_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && !pwrite && addr==paddr)); endproperty: p_write_read_burst_trans",4
lvc_apb_if.sv,175,"property p_write_twice_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && pwrite && addr==paddr) ##2 ($rose(penable) && !pwrite && addr==paddr) ); endproperty: p_write_twice_read_burst_trans",4
lvc_apb_if.sv,181,property p_read_during_nonburst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_read_during_nonburst_trans,3
lvc_apb_if.sv,186,property p_read_during_burst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##2 penable); endproperty: p_read_during_burst_trans,3
lvc_apb_if.sv,191,"property p_read_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> ##2 ($rose(penable) && !pwrite && addr==paddr); endproperty: p_read_write_read_burst_trans",4
lvc_apb_if.sv,118,property p_paddr_no_x; @(posedge clk) psel |-> !$isunknown(paddr); endproperty: p_paddr_no_x,3
lvc_apb_if.sv,123,property p_psel_rose_next_cycle_penable_rise; @(posedge clk) $rose(psel) |=> $rose(penable); endproperty: p_psel_rose_next_cycle_penable_rise,3
lvc_apb_if.sv,128,property p_penable_rose_next_cycle_fall; @(posedge clk) penable && pready |=> $fell(penable); endproperty: p_penable_rose_next_cycle_fall,3
lvc_apb_if.sv,133,property p_pwdata_stable_during_trans_phase; @(posedge clk) ((psel && !penable) ##1 (psel && penable)) |-> $stable(pwdata); endproperty: p_pwdata_stable_during_trans_phase,3
lvc_apb_if.sv,138,"property p_paddr_stable_until_next_trans; logic[31:0] addr1, addr2; @(posedge clk) first_match(($rose(penable),addr1=paddr) ##1 ((psel && !penable)[=1],addr2=$past(paddr))) |-> addr1 == addr2; endproperty: p_paddr_stable_until_next_trans",4
lvc_apb_if.sv,144,"property p_pwrite_stable_until_next_trans; logic pwrite1, pwrite2; @(posedge clk) first_match(($rose(penable),pwrite1=pwrite) ##1 ((psel && !penable)[=1],pwrite2=$past(pwrite))) |-> pwrite1 == pwrite2; endproperty: p_pwrite_stable_until_next_trans",4
lvc_apb_if.sv,150,property p_prdata_available_once_penable_rose; @(posedge clk) penable && !pwrite && pready |-> !$stable(prdata); endproperty: p_prdata_available_once_penable_rose,3
lvc_apb_if.sv,159,property p_write_during_nonburst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_write_during_nonburst_trans,3
lvc_apb_if.sv,164,property p_write_during_burst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##2 penable); endproperty: p_write_during_burst_trans,3
lvc_apb_if.sv,169,"property p_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && !pwrite && addr==paddr)); endproperty: p_write_read_burst_trans",4
lvc_apb_if.sv,175,"property p_write_twice_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && pwrite && addr==paddr) ##2 ($rose(penable) && !pwrite && addr==paddr) ); endproperty: p_write_twice_read_burst_trans",4
lvc_apb_if.sv,181,property p_read_during_nonburst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_read_during_nonburst_trans,3
lvc_apb_if.sv,186,property p_read_during_burst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##2 penable); endproperty: p_read_during_burst_trans,3
lvc_apb_if.sv,191,"property p_read_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> ##2 ($rose(penable) && !pwrite && addr==paddr); endproperty: p_read_write_read_burst_trans",4
lvc_apb_if.sv,118,property p_paddr_no_x; @(posedge clk) psel |-> !$isunknown(paddr); endproperty: p_paddr_no_x,3
lvc_apb_if.sv,123,property p_psel_rose_next_cycle_penable_rise; @(posedge clk) $rose(psel) |=> $rose(penable); endproperty: p_psel_rose_next_cycle_penable_rise,3
lvc_apb_if.sv,128,property p_penable_rose_next_cycle_fall; @(posedge clk) penable && pready |=> $fell(penable); endproperty: p_penable_rose_next_cycle_fall,3
lvc_apb_if.sv,133,property p_pwdata_stable_during_trans_phase; @(posedge clk) ((psel && !penable) ##1 (psel && penable)) |-> $stable(pwdata); endproperty: p_pwdata_stable_during_trans_phase,3
lvc_apb_if.sv,138,"property p_paddr_stable_until_next_trans; logic[31:0] addr1, addr2; @(posedge clk) first_match(($rose(penable),addr1=paddr) ##1 ((psel && !penable)[=1],addr2=$past(paddr))) |-> addr1 == addr2; endproperty: p_paddr_stable_until_next_trans",4
lvc_apb_if.sv,144,"property p_pwrite_stable_until_next_trans; logic pwrite1, pwrite2; @(posedge clk) first_match(($rose(penable),pwrite1=pwrite) ##1 ((psel && !penable)[=1],pwrite2=$past(pwrite))) |-> pwrite1 == pwrite2; endproperty: p_pwrite_stable_until_next_trans",4
lvc_apb_if.sv,150,property p_prdata_available_once_penable_rose; @(posedge clk) penable && !pwrite && pready |-> !$stable(prdata); endproperty: p_prdata_available_once_penable_rose,3
lvc_apb_if.sv,159,property p_write_during_nonburst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_write_during_nonburst_trans,3
lvc_apb_if.sv,164,property p_write_during_burst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##2 penable); endproperty: p_write_during_burst_trans,3
lvc_apb_if.sv,169,"property p_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && !pwrite && addr==paddr)); endproperty: p_write_read_burst_trans",4
lvc_apb_if.sv,175,"property p_write_twice_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && pwrite && addr==paddr) ##2 ($rose(penable) && !pwrite && addr==paddr) ); endproperty: p_write_twice_read_burst_trans",4
lvc_apb_if.sv,181,property p_read_during_nonburst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_read_during_nonburst_trans,3
lvc_apb_if.sv,186,property p_read_during_burst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##2 penable); endproperty: p_read_during_burst_trans,3
lvc_apb_if.sv,191,"property p_read_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> ##2 ($rose(penable) && !pwrite && addr==paddr); endproperty: p_read_write_read_burst_trans",4
lvc_apb_if.sv,118,property p_paddr_no_x; @(posedge clk) psel |-> !$isunknown(paddr); endproperty: p_paddr_no_x,3
lvc_apb_if.sv,123,property p_psel_rose_next_cycle_penable_rise; @(posedge clk) $rose(psel) |=> $rose(penable); endproperty: p_psel_rose_next_cycle_penable_rise,3
lvc_apb_if.sv,128,property p_penable_rose_next_cycle_fall; @(posedge clk) penable && pready |=> $fell(penable); endproperty: p_penable_rose_next_cycle_fall,3
lvc_apb_if.sv,133,property p_pwdata_stable_during_trans_phase; @(posedge clk) ((psel && !penable) ##1 (psel && penable)) |-> $stable(pwdata); endproperty: p_pwdata_stable_during_trans_phase,3
lvc_apb_if.sv,138,"property p_paddr_stable_until_next_trans; logic[31:0] addr1, addr2; @(posedge clk) first_match(($rose(penable),addr1=paddr) ##1 ((psel && !penable)[=1],addr2=$past(paddr))) |-> addr1 == addr2; endproperty: p_paddr_stable_until_next_trans",4
lvc_apb_if.sv,144,"property p_pwrite_stable_until_next_trans; logic pwrite1, pwrite2; @(posedge clk) first_match(($rose(penable),pwrite1=pwrite) ##1 ((psel && !penable)[=1],pwrite2=$past(pwrite))) |-> pwrite1 == pwrite2; endproperty: p_pwrite_stable_until_next_trans",4
lvc_apb_if.sv,150,property p_prdata_available_once_penable_rose; @(posedge clk) penable && !pwrite && pready |-> !$stable(prdata); endproperty: p_prdata_available_once_penable_rose,3
lvc_apb_if.sv,159,property p_write_during_nonburst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_write_during_nonburst_trans,3
lvc_apb_if.sv,164,property p_write_during_burst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##2 penable); endproperty: p_write_during_burst_trans,3
lvc_apb_if.sv,169,"property p_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && !pwrite && addr==paddr)); endproperty: p_write_read_burst_trans",4
lvc_apb_if.sv,175,"property p_write_twice_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && pwrite && addr==paddr) ##2 ($rose(penable) && !pwrite && addr==paddr) ); endproperty: p_write_twice_read_burst_trans",4
lvc_apb_if.sv,181,property p_read_during_nonburst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_read_during_nonburst_trans,3
lvc_apb_if.sv,186,property p_read_during_burst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##2 penable); endproperty: p_read_during_burst_trans,3
lvc_apb_if.sv,191,"property p_read_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> ##2 ($rose(penable) && !pwrite && addr==paddr); endproperty: p_read_write_read_burst_trans",4
lvc_apb_if.sv,118,property p_paddr_no_x; @(posedge clk) psel |-> !$isunknown(paddr); endproperty: p_paddr_no_x,3
lvc_apb_if.sv,123,property p_psel_rose_next_cycle_penable_rise; @(posedge clk) $rose(psel) |=> $rose(penable); endproperty: p_psel_rose_next_cycle_penable_rise,3
lvc_apb_if.sv,128,property p_penable_rose_next_cycle_fall; @(posedge clk) penable && pready |=> $fell(penable); endproperty: p_penable_rose_next_cycle_fall,3
lvc_apb_if.sv,133,property p_pwdata_stable_during_trans_phase; @(posedge clk) ((psel && !penable) ##1 (psel && penable)) |-> $stable(pwdata); endproperty: p_pwdata_stable_during_trans_phase,3
lvc_apb_if.sv,138,"property p_paddr_stable_until_next_trans; logic[31:0] addr1, addr2; @(posedge clk) first_match(($rose(penable),addr1=paddr) ##1 ((psel && !penable)[=1],addr2=$past(paddr))) |-> addr1 == addr2; endproperty: p_paddr_stable_until_next_trans",4
lvc_apb_if.sv,144,"property p_pwrite_stable_until_next_trans; logic pwrite1, pwrite2; @(posedge clk) first_match(($rose(penable),pwrite1=pwrite) ##1 ((psel && !penable)[=1],pwrite2=$past(pwrite))) |-> pwrite1 == pwrite2; endproperty: p_pwrite_stable_until_next_trans",4
lvc_apb_if.sv,150,property p_prdata_available_once_penable_rose; @(posedge clk) penable && !pwrite && pready |-> !$stable(prdata); endproperty: p_prdata_available_once_penable_rose,3
lvc_apb_if.sv,159,property p_write_during_nonburst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_write_during_nonburst_trans,3
lvc_apb_if.sv,164,property p_write_during_burst_trans; @(posedge clk) $rose(penable) |-> pwrite throughout (##2 penable); endproperty: p_write_during_burst_trans,3
lvc_apb_if.sv,169,"property p_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && !pwrite && addr==paddr)); endproperty: p_write_read_burst_trans",4
lvc_apb_if.sv,175,"property p_write_twice_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> (##2 ($rose(penable) && pwrite && addr==paddr) ##2 ($rose(penable) && !pwrite && addr==paddr) ); endproperty: p_write_twice_read_burst_trans",4
lvc_apb_if.sv,181,property p_read_during_nonburst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##1 (!penable)[*2] ##1 penable[=1]); endproperty: p_read_during_nonburst_trans,3
lvc_apb_if.sv,186,property p_read_during_burst_trans; @(posedge clk) $rose(penable) |-> !pwrite throughout (##2 penable); endproperty: p_read_during_burst_trans,3
lvc_apb_if.sv,191,"property p_read_write_read_burst_trans; logic[31:0] addr; @(posedge clk) ($rose(penable) && pwrite, addr=paddr) |-> ##2 ($rose(penable) && !pwrite && addr==paddr); endproperty: p_read_write_read_burst_trans",4
CHECKER.sv,162,property make_n_check_valid_latency; @(posedge clk) (inf.box_no_valid&&(action===Make_drink||action===Check_Valid_Date))|-> (##[1:1000] inf.out_valid); endproperty property supply_latency; @(posedge clk) (inf.box_sup_valid && cnt4==3&&action===Supply)|->(##[1:1000] inf.out_valid); endproperty property op_latency; @(posedge clk) (make_n_check_valid_latency or supply_latency); endproperty:op_latency,9
CHECKER.sv,289,property property_1; @(negedge clk) !inf.rst_n ##1 rst_done; endproperty: property_1,3
CHECKER.sv,300,property property_2; // @(negedge clk) all_valid_or ##[1:1000] inf.out_valid; @(posedge clk) inf.box_no_valid ##[1:1000] inf.out_valid; endproperty: property_2,4
CHECKER.sv,346,property property_4_1; @(posedge clk) inf.type_valid |-> ##[0:4] inf.size_valid; endproperty: property_4_1,3
CHECKER.sv,349,property property_4_2; @(posedge clk) inf.box_no_valid |-> ##[0:4] inf.box_sup_valid; endproperty: property_4_2,3
CHECKER.sv,352,property property_4_3; @(posedge clk) inf.date_valid |-> ##[0:4] inf.box_no_valid; endproperty: property_4_3,3
CHECKER.sv,355,property property_4_4_1; @(negedge clk) box_sup_valid_1 |-> ##[0:4] box_sup_valid_2; endproperty: property_4_4_1,3
CHECKER.sv,358,property property_4_4_2; @(negedge clk) box_sup_valid_2 |-> ##[0:4] box_sup_valid_3; endproperty: property_4_4_2,3
CHECKER.sv,361,property property_4_4_3; @(negedge clk) box_sup_valid_3 |-> ##[0:4] box_sup_valid_4; endproperty: property_4_4_3,3
CHECKER.sv,381,property property_6; @(negedge clk) inf.out_valid ##1 !inf.out_valid; endproperty: property_6,3
CHECKER.sv,391,property property_7; @(negedge clk) inf.out_valid ##[1:5] inf.sel_action_valid; endproperty: property_7,3
CHECKER.sv,427,property property_9_1; @(negedge clk) inf.C_in_valid ##1 !inf.C_in_valid ; endproperty: property_9_1,3
CHECKER.sv,430,property property_9_2; @(negedge inf.C_out_valid) inf.C_in_valid |-> inf.C_in_valid; endproperty: property_9_2,3
CHECKER_iclab059.sv,289,property property_1; @(negedge clk) !inf.rst_n ##1 rst_done; endproperty: property_1,3
CHECKER_iclab059.sv,300,property property_2; // @(negedge clk) all_valid_or ##[1:1000] inf.out_valid; @(posedge clk) inf.box_no_valid ##[1:1000] inf.out_valid; endproperty: property_2,4
CHECKER_iclab059.sv,346,property property_4_1; @(posedge clk) inf.type_valid |-> ##[0:4] inf.size_valid; endproperty: property_4_1,3
CHECKER_iclab059.sv,349,property property_4_2; @(posedge clk) inf.box_no_valid |-> ##[0:4] inf.box_sup_valid; endproperty: property_4_2,3
CHECKER_iclab059.sv,352,property property_4_3; @(posedge clk) inf.date_valid |-> ##[0:4] inf.box_no_valid; endproperty: property_4_3,3
CHECKER_iclab059.sv,355,property property_4_4_1; @(negedge clk) box_sup_valid_1 |-> ##[0:4] box_sup_valid_2; endproperty: property_4_4_1,3
CHECKER_iclab059.sv,358,property property_4_4_2; @(negedge clk) box_sup_valid_2 |-> ##[0:4] box_sup_valid_3; endproperty: property_4_4_2,3
CHECKER_iclab059.sv,361,property property_4_4_3; @(negedge clk) box_sup_valid_3 |-> ##[0:4] box_sup_valid_4; endproperty: property_4_4_3,3
CHECKER_iclab059.sv,381,property property_6; @(negedge clk) inf.out_valid ##1 !inf.out_valid; endproperty: property_6,3
CHECKER_iclab059.sv,391,property property_7; @(negedge clk) inf.out_valid ##[1:5] inf.sel_action_valid; endproperty: property_7,3
CHECKER_iclab059.sv,427,property property_9_1; @(negedge clk) inf.C_in_valid ##1 !inf.C_in_valid ; endproperty: property_9_1,3
CHECKER_iclab059.sv,430,property property_9_2; @(negedge inf.C_out_valid) inf.C_in_valid |-> inf.C_in_valid; endproperty: property_9_2,3
powerof3.v,91,"property n_is_power_of_3; @(posedge clk) $past(n,N_STAGES-1) != 0 && $rtoi($ceil($log10($past(n,N_STAGES-1))/$log10(3.0))) < 20 && //no 32-bit integer overflow $past(n,N_STAGES-1) == 3**$rtoi($ceil($log10($past(n,N_STAGES-1))/$log10(3.0))) |=> ispow3; endproperty;",7
powerof3.v,98,"property n_is_not_power_of_3; @(posedge clk) $past(n,N_STAGES-1) == 0 || $rtoi($ceil($log10($past(n,N_STAGES-1))/$log10(3.0))) < 20 && $past(n,N_STAGES-1) != 3**$rtoi($ceil($log10($past(n,N_STAGES-1))/$log10(3.0))) |=> !ispow3; endproperty;",7
